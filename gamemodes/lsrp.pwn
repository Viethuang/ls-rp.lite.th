/*
	Cross Sign Scripter (SarapoaJunG)
			copyright 2017		

 format if you want to add variables inside string. Strmid if you want to cut off part of string. Strins if you want to inject string somewhere inbetween
*/
#include <a_samp> 

#undef MAX_PLAYERS
#define MAX_PLAYERS (300)

#define CE_AUTO

//#include <timerfix>
#include <crashdetect>
#include <streamer>
// #include <progress3D>
//#include <fixes>
#include <sscanf2>
//#include <YSI\y_timers>  // pawn-lang/YSI-Includes
#include <YSI\y_hooks> // pawn-lang/YSI-Includes
#include <YSI\y_iterate> // pawn-lang/YSI-Includes
#include <nex-ac>
#include <mapfix>
//#include <fixes2>
#include <a_http>
#include <strlib>
#include <CEFix>
#include <easyDialog>
#include <a_mysql>
#include <dini>
//#include <bg> // Test
#include <zone>
#include <Pawn.Regex> // urShadow/Pawn.Regex
#include <Pawn.CMD> // urShadow/Pawn.CMD
#include <Pawn.RakNet> // urShadow/Pawn.CMD
#include <attachments>
#include <timestamptodate>
#include <evi>
#include <zvehcomp>
#include <md-sort>
#include <log-plugin> // maddinat0r/samp-log
#include <preloadanim> // zAnimsFix & _Zume
#include <gvar> // samp-incognito/samp-gvar-plugin
#include <menuStore>
#include <compat>
//#include <physics>
//#include <modelsizes>


// เกี่ยวกับเซิร์ฟเวอร์
#define SERVER_NAME "Los Angeles Roleplay | Support By VPS-HI.com"
#define SERVER_SITE "www.la-rp.site"
#define SERVER_MODE "LA:RP 1.4.0.7"

#define SQL_HOSTNAME "localhost"
#define SQL_USERNAME "root"
#define SQL_DATABASE "larp"
#define SQL_PASSWORD "root"

/*#define SQL_HOSTNAME "localhost"
#define SQL_USERNAME "root"
#define SQL_DATABASE "backup"
#define SQL_PASSWORD "root"*/

#if !defined IsValidVehicle
    native IsValidVehicle(vehicleid);
#endif

#define MAX_STRING	255

#define STREAMER_OBJECT_TROLLEY	1
#define STREAMER_OBJECT_LADDERS	2
// ใช้มาโคร BitFlag
#define bf_get(%0,%1)            ((%0) & (%1))   // ส่งค่ากลับ 0 (เท็จ)หากยังไม่ได้ตั้งค่าให้มัน
#define bf_on(%0,%1)             ((%0) |= (%1))  // ปรับค่าเป็น เปิด
#define bf_off(%0,%1)            ((%0) &= ~(%1)) // ปรับค่าเป็น ปิด
#define bf_toggleToggle(%0,%1)         ((%0) ^= (%1))  // สลับค่า (สลับ จริง/เท็จ)

#define equal(%0,%1) !strcmp(%0,%1,false) && strlen(%0) == strlen(%1)

// ใช้มาโคร Key
#define Pressed(%0)	\
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define Holding(%0) \
	((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define MAX_MASK_NAME		9 	// Masked System xxxxxx_xx

#define LOCAL_BIZ 500
#define LOCAL_HOUSE 600

#define BIZ_WORLD 2000
#define HOUSE_WORLD 3000

//#define stop%0; {KillTimer(_:%0);} 

// Type Offer
#define OFFER_TYPE_NONE		0
#define OFFER_TYPE_VSELL	1
#define OFFER_TYPE_SERVICE	2


#define TYPE_HOUSE		1
#define TYPE_BUSINESS	2

#define SHOT_MS 700
new playerblock[MAX_PLAYERS];
new playershottick[MAX_PLAYERS];

// Weapon Skill
#define NORMAL_SKILL	1
#define MEDIUM_SKILL	2
#define FULL_SKILL		3

// Vehicle Label Timer
#define VLT_TYPE_TOWING  			1
#define VLT_TYPE_PERMITFACTION		2
#define VLT_TYPE_LOCK		  		3
#define VLT_TYPE_UNREGISTER    		4
#define VLT_TYPE_REGISTER           5
#define VLT_TYPE_OPERAFAILED	  	6
#define VLT_TYPE_UPGRADELOCK      	7
#define VLT_TYPE_UPGRADEALARM     	8
#define VLT_TYPE_UPGRADEIMMOB       9
#define VLT_TYPE_UPGRADEINSURANCE 	10
#define VLT_TYPE_BREAKIN		 	11
#define VLT_TYPE_ARMOUR			 	12
#define VLT_TYPE_REFILL			 	13
#define VLT_TYPE_OPERAOUTOFRANG    	14
#define VLT_TYPE_UPGRADEBATTERY     15
#define VLT_TYPE_UPGRADEENGINE  	16

// Player Lable Timer
#define PLT_TYPE_KNOCKOUT			17

#define FLOAT_INFINITY   (Float:0x7F800000)
#define FLOAT_NEG_INFINITY (Float:0xFF800000)

// จำกัด
#define MAX_TIME 8
#define MAX_DAMAGES 30
#define MAX_COOLDOWNS 3
#define MAX_CLOTHES 15
//#define MAX_SIGNALTOWER 60
#define MAX_FACTIONS 20
#define MAX_FACTION_TYPE_SKINS 30
#define MAX_WAREHOUSE 10
#define MAX_DROP_ITEMS 100
#define MAX_BIZ 100
#define MAX_ATMS 50
#define MAX_ENTRANCES 100
#define MAX_GARAGE 100
#define MAX_ADMIN_VEHICLES 20
#define MAX_DYNAMIC_VEHICLES 500
#define MAX_PLAYER_VEHICLES 200
#define MAX_SMS 30
#define MAX_CALLHISTORY 50
#define MAX_HOUSES 300
#define MAX_INTERIORS 100
#define MAX_CAR_WEAPONS 4
#define MAX_HOUSE_ITEMS 4
#define MAX_BIZ_ITEMS 4
#define MAX_HOUSE_WEAPONS 40
#define MAX_BIZ_PRICEPRODUCT 12
#define MAX_FURNITURE_PERPAGE 20
#define MAX_BUYHOUSES 4
#define MAX_BUYGARAGE 2
#define MAX_ITEM_STORAGE 70
#define MAX_INDUSTRY 31
#define MAX_TRUCKER_ITEMS 26
#define MAX_CRATE 60
#define MAX_AD_QUEUE 5
#define MAX_EMERGENCY_CALL 3
#define MAX_PLAYER_TICKETS 10
//#define MAX_ARREST 30
#define MAX_PLAYER_WEAPON_PACKAGE 12
#define MAX_PLAYER_DRUG_PACKAGE 24
#define MAX_VEHICLE_DRUG_PACKAGE 48
#define MAX_ITEM_DRUG 100
#define MAX_CAR_WEAPON_PACKAGE 20
#define MAX_MOVEDOORS 100
#define MAX_ATTACH_WEAPON 17
#define MAX_GRAFFITI 100
#define MAX_TOY_OBJECT 7
#define MAX_CCTVS (100)
#define MAX_SPIKES (10)

// Drug System
/*#define MAX_CHEMICAL 10
#define MAX_DRUGS    30*/


// Poker System
/*#define MAX_POKERTABLES 					100
#define MAX_POKERTABLEMISCOBJS				6
#define MAX_PLAYERPOKERUI					48
#define DRAWDISTANCE_POKER_TABLE 			150.0
#define DRAWDISTANCE_POKER_MISC 			50.0
#define CAMERA_POKER_INTERPOLATE_SPEED		5000 // ms (longer = slower)
#define OBJ_POKER_TABLE 					19474
#define GUI_POKER_TABLE						0

#define DIALOG_CGAMESADMINMENU      (4090)
#define DIALOG_CGAMESSELECTPOKER    (4100)
#define DIALOG_CGAMESSETUPPOKER     (4110)
#define DIALOG_CGAMESCREDITS        (4120)
#define DIALOG_CGAMESSETUPPGAME     (4130)
#define DIALOG_CGAMESSETUPPGAME2	(4140)
#define DIALOG_CGAMESSETUPPGAME3	(4150)
#define DIALOG_CGAMESSETUPPGAME4	(4160)
#define DIALOG_CGAMESSETUPPGAME5	(4170)
#define DIALOG_CGAMESSETUPPGAME6	(4180)
#define DIALOG_CGAMESSETUPPGAME7	(4190)
#define DIALOG_CGAMESBUYINPOKER		(4200)
#define DIALOG_CGAMESCALLPOKER		(4210)
#define DIALOG_CGAMESRAISEPOKER     (4220)*/

// New Poker 2
#define MAX_POKERTABLES 			(50)

#define OPTION_SETUP_GAME     		(0)
#define OPTION_BUY_IN_MAX			(1)
#define OPTION_BUY_IN_MIN			(2)
#define OPTION_BLINDS				(3)
#define OPTION_PLAYERS_LIMIT		(4)
#define OPTION_SET_KEY				(5)
#define OPTION_ROUND_DELAY			(6)
#define OPTION_BUY_IN				(7)
#define OPTION_CALL					(8)
#define OPTION_RAISE     			(9)
#define OPTION_SEAT_PRICE           (10)

#define MAX_PLAYER_POKER_UI 		(47)
#define POKER_OBJECT				(19474)
#define TROLLEY_OBJECT				(2146)
#define TROLLEY_OBJECT_2			(1997)

#define LADDERS_OBJECT				(12950)
#define LADDERS_OBJECT_2			(1428)

// ดีเล
#define COOLDOWN_CLOTHES  	0
#define COOLDOWN_ENGINE  	1

// ช่องเครื่องแต่งกาย

/* 0-6 /clothing */
#define FREESLOT0 0
#define FREESLOT1 1
#define FREESLOT2 2
#define FREESLOT3 3
#define FREESLOT4 4
#define FREESLOT5 5
#define FREESLOT6 6
#define FREESLOT7 7
#define FREESLOT8 8
#define FREESLOT9 9

/* Checkpoint */
#define CHECKPOINT_NONE 			0
//#define CHECKPOINT_HOUSE 			1
#define CHECKPOINT_UNLOADFISHING	7
#define CHECKPOINT_GOFISHING 		8
#define CHECKPOINT_FARMER 			9
#define CHECKPOINT_FARMER2 			10
#define CHECKPOINT_COMP 			11
#define CHECKPOINT_VEH 				12
#define CHECKPOINT_NEWSPAPER 		13
#define CHECKPOINT_CAREXAM          14


/* Race Checkpoint */
#define RCHECKPOINT_NONE 			0
#define RCHECKPOINT_TRUCKER 		1
#define RCHECKPOINT_TRUCKERJOB 		2

// เกี่ยวกับ SQL
//#define THREAD_FIND_CHARACTER	(1)
#define THREAD_SELECT_CHARACTER	(2)
#define THREAD_CHECK_ACCOUNT 	(3)
#define THREAD_LOGIN 			(4)
#define THREAD_LOAD_CHARACTER 	(5)
#define THREAD_LOG_CON			(6)
#define THREAD_PLAYER_CONTACTS	(7)
#define THREAD_PLAYER_SMS		(8)
#define THREAD_PLAYER_CLOTHING	(9)
#define THREAD_UNBAN	 		(10)
#define	THREAD_BAN_LOOKUP			(11)
#define THREAD_SECRET_CONFIRM		(12)
#define THREAD_CHECK_CHARACTER 		(13)
#define THREAD_PLAYER_HOLDWEAPON	(14)
#define THREAD_LAST_NAMECHANGE      (15)
#define THREAD_CREATE_CCTV   	 	(16)
#define THREAD_PLAYER_DRUG   	 	(17)
#define THREAD_VEHICLE_DRUG			(18)
#define THREAD_CHECK_WRONG			(19)

// เกี่ยวกับโค๊ดสี

#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_GREEN 0x33AA33AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_YELLOW3 0xF0EA92AA
#define COLOR_DARKGOLDENROD 0xB8860BFF
#define COLOR_PMF 0xF9D718AA
#define COLOR_PMS 0xF5F260AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_RED 0xFF0000FF
#define DEFAULT_COLOR 0xFFFFFF00
#define COLOR_STAT1 0xE0FFFFAA
#define COLOR_STAT2 0xCCE6E6FF
#define COLOR_FACTION 0xBDF38BFF
#define COLOR_DARKBLUE 0x1394BFFF
#define COLOR_GENANNOUNCE 0xA9C4E4FF
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_RADIO 0x8D8DFFFF
#define COLOR_GREEN2 0x33AA33FF
#define COLOR_DARKGREEN 0x88AA62FF
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TAXI_DUTY 0x95FF9500
#define TEAM_ADMIN_COLOR 0x40808000
#define TEAM_TDUTY_COLOR 0x66000000
#define TEAM_ADUTY_COLOR 0x8EB3C400
#define COLOR_LSPDNEW 0x9189EFFF
#define COLOR_HELPME 0x2EFE9AFF
#define COLOR_REPORT 0xFA5882FF
//=======Embed Colors=======
#define EMBED_RED "{FF0000}"
#define EMBED_WHITE "{FFFFFF}"
#define EMBED_YELLOW "{FFFF00}"
#define EMBED_GREEN "{808040}"
#define EMBED_BLUE "{0000FF}"
#define EMBED_LIGHTBLUE "{8080FF}"
#define EMBED_ORANGE "{FF8000}"
#define EMBED_GREY "{AFAFAF}"
#define EMBED_CYAN "{00FFFF}"
#define EMBED_GRAD "{CBCCCE}"
#define EMBED_GRAD1 "{b4b5b7}"
#define EMBED_PURPLE "{C68DFF}"
#define EMBED_PINK "{FF8282}"
#define EMBED_TOMATO "{ff6347}"
#define EMBED_LIGHTBLUE2 "8D8DFF"
#define EMBED_LIGHTRED "{FF6347}"
#define EMBED_DIALOG "{A8C3E3}"
#define EMBED_LIGHTGREEN "{AEFFBC}"
#define EMBED_GREENMONEY "{33AA33}"

// ข้อความ
#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GRAD2, ""EMBED_LIGHTRED"การใช้:"EMBED_WHITE" "%1)

/*#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_YELLOW, "[ADMIN]:"EMBED_WHITE" "%1) // COLOR_YELLOW*/
// การตรวจสอบเซิร์ฟเวอร์
//#define DEBUG

// ค่าของเซิร์ฟเวอร์
#define levelcost 25000
#define levelexp 3
#define multiplyexp 1
#define deathcost 500
#define cchargetime 30
#define callcost 10

#define BUYZIP 1
#define BUYHARDWARE 2
#define BUYSPORTS 3
#define BUYMUSIC 4
#define BUYWATCH 5
#define BUYPOLICE 6
#define BUYMEDIC 7

#define FACTION_TYPE_POLICE (1)
#define FACTION_TYPE_NEWS (2)
#define FACTION_TYPE_MEDIC (3)
#define FACTION_TYPE_GOV (4)
#define FACTION_TYPE_GANG (5)
#define FACTION_TYPE_SASD (6)
#define FACTION_TYPE_SADOC (7)


//============================Tolls============================//
// Main configuration
#define TollCost (50) 					// How much it costs to pass the tolls
#define TollDelayCop (4) 				// The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (4.0) 			// The distance in units the player can be from the icon to open the toll

// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)

#define L_sz_TollStringLocked ("Toll guard พูดว่า: ขออภัยที่กั้นปิดชั่วคราว โปรดมาใหม่ในภายหลัง")
#define L_sz_TollStringNoMoney ("คุณมีเงินไม่เพียงพอที่จะผ่าน")
#define L_sz_TollStringBye ("Toll guard พูดว่า: ขอบคุณ ขอให้ขับขี่ปลอดภัย")
#define L_sz_TollStringHurryUp ("คุณมีเวลา 6 วินาทีเพื่อจะผ่านไป ให้แน่ใจว่าคุณจะไม่ติดอยู่")

// JOB DEFINE
#define JOB_NONE			0
#define JOB_FARMER			1
#define JOB_TRUCKER         2
#define JOB_MECHANIC        3
#define JOB_TAXI        	4
#define JOB_GUIDE        	5
#define JOB_WPDEALER		6
#define JOB_SUPPLIER		7
#define JOB_BARTENDER		8
#define JOB_POLICE			9

#define WEAPON_UNARMED 0
#define WEAPON_VEHICLE_M4 19
#define WEAPON_VEHICLE_MINIGUN 20
#define WEAPON_PISTOLWHIP 48
#define WEAPON_HELIBLADES 50
#define WEAPON_CARPARK 52

// 
#define STATE_WAIT_HIT          0
#define STATE_PENDING_HIT       1
#define ISSUE_HIT_DELAY         300

DEFINE_HOOK_REPLACEMENT(OnPlayer, OP_);

// General
#include "includes/variables.pwn"
#include "includes/functions.pwn"

// Modular
#include "includes/fixes/driveby.pwn"
#include "includes/fixes/usephone.pwn"

// SWRP
#include "includes/maps/swrp.pwn"

new AEditSkin[MAX_PLAYERS],
	MoneyEdit[MAX_PLAYERS];

//new PlayerText:SpeedoText[MAX_PLAYERS];
//new HUDtoggle[MAX_PLAYERS];

// Weapons allowed in OnPlayerTakeDamage
// 2 = valid in both OnPlayerGiveDamage and OnPlayerTakeDamage
static const s_ValidDamageTaken[] = {
	1, // 0 - Fist
	1, // 1 - Brass knuckles
	1, // 2 - Golf club
	1, // 3 - Nitestick
	1, // 4 - Knife
	1, // 5 - Bat
	1, // 6 - Shovel
	1, // 7 - Pool cue
	1, // 8 - Katana
	1, // 9 - Chainsaw
	1, // 10 - Dildo
	1, // 11 - Dildo 2
	1, // 12 - Vibrator
	1, // 13 - Vibrator 2
	1, // 14 - Flowers
	1, // 15 - Cane
	0, // 16 - Grenade
	0, // 17 - Teargas
	0, // 18 - Molotov
	0, // 19 - Vehicle M4 (custom)
	0, // 20 - Vehicle minigun (custom)
	0, // 21
	1, // 22 - Colt 45
	1, // 23 - Silenced
	1, // 24 - Deagle
	1, // 25 - Shotgun
	1, // 26 - Sawed-off
	1, // 27 - Spas
	1, // 28 - UZI
	1, // 29 - MP5
	1, // 30 - AK47
	1, // 31 - M4
	1, // 32 - Tec9
	1, // 33 - Cuntgun
	1, // 34 - Sniper
	0, // 35 - Rocket launcher
	0, // 36 - Heatseeker
	2, // 37 - Flamethrower
	1, // 38 - Minigun
	0, // 39 - Satchel
	0, // 40 - Detonator
	1, // 41 - Spraycan
	1, // 42 - Fire extinguisher
	0, // 43 - Camera
	0, // 44 - Night vision
	0, // 45 - Infrared
	1, // 46 - Parachute
	0, // 47 - Fake pistol
	0, // 48 - Pistol whip (custom)
	2, // 49 - Vehicle
	2, // 50 - Helicopter blades
	2, // 51 - Explosion
	0, // 52 - Car park (custom)
	2, // 53 - Drowning
	2  // 54 - Splat
};

enum TOLL_INFO
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_INFO];

enum prisonCell {
	pCell[20],
	bool:pStatus[20],
	pPrisoner[20],
	pPrisoner2[20],
}
new PrisonDepartment[3][prisonCell];

//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
    L_a_Pickup[MAX_TOLLS*2],
	L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls

enum spikeE {
	sObjID,
	Float:sPos[4],
	sType,
	sDeployer[MAX_PLAYER_NAME],
}
/*
#define STATE_WAIT_HIT          0
#define STATE_PENDING_HIT       1
#define ISSUE_HIT_DELAY         300*/


#define START_BENCH(%0); {new __a=%0,__b=0,__c,__d=GetTickCount(),__e=1;do{}\
    while(__d==GetTickCount());__c=GetTickCount();__d=__c;while(__c-__d<__a||\
    __e){if(__e){if(__c-__d>=__a){__e=0;__c=GetTickCount();do{}while(__c==\
    GetTickCount());__c=GetTickCount();__d=__c;__b=0;}}{

#define FINISH_BENCH(%0); }__b++;__c=GetTickCount();}printf(" Bench for "\
%0": executes, by average, %f times/ms.",floatdiv(__b,__a));}

new
	ShowNametags[MAX_PLAYERS],
	ActiveLow[MAX_PLAYERS];
	//AmountCar[MAX_VEHICLES];
	//StartPlayingPool[MAX_PLAYERS] = 0;

// ตัวแปรอะเรย์คงที่

enum E_RADIOTOWER_DATA {
	RadioName[64 char],
	Float:RadioX,
	Float:RadioY,
	Float:RadioZ,
	Float:RadioRange
};

stock const RadioTower[59][E_RADIOTOWER_DATA] = {
	{!"Ocean Docks Tower", 2836.939941, -2577.139892, -16.810800, 500.000000},
	{!"Airport Tower", 2130.580078, -2264.649902, 14.782899, 500.000000},
	{!"Verdant Bluffs Tower", 1626.380004, -2018.189941, 29.945100, 500.000000},
	{!"Verdant Bluffs Tower 2", 986.421020, -2193.270019, 13.085900, 500.000000},
	{!"Rodeo Tower", 267.686004, -1605.050048, 33.298099, 500.000000},
	{!"Stage 25 Tower", 462.997985, -1500.729980, 42.573101, 500.000000},
	{!"Mall Tower", 1063.020019, -1563.920043, 13.546799, 500.000000},
	{!"Main Street Tower", 1365.489990, -1838.180053, 13.581299, 500.000000},
	{!"Glen Park Tower", 1881.930053, -1168.979980, 23.900800, 500.000000},
	{!"Downtown Tower", 1817.010009, -1219.920043, 23.828100, 500.000000},
	{!"Downtown Tower 2", 1493.520019, -1317.209960, 23.617099, 500.000000},
	{!"Downtown Tower 3", 1692.180053, -1414.670043, 84.994102, 500.000000},
	{!"County General Tower", 2057.729980, -1394.229980, 23.879400, 500.000000},
	{!"Willowfield Tower ", 2484.310058, -1917.040039, 25.549999, 500.000000},
	{!"Jefferson Motel Tower", 2262.379882, -1106.510009, 37.976501, 500.000000},
	{!"Los Flores Tower", 2711.320068, -1337.910034, 70.989799, 500.000000},
	{!"East Beach Tower", 2864.659912, -1412.180053, 45.214500, 500.000000},
	{!"North Rock Tower", 2607.669921, -658.961975, 132.779006, 450.000000},
	{!"LS/LV Highway Tower", 1807.540039, -418.557006, 84.549598, 550.000000},
	{!"Dillimore Tower", 596.056030, -482.928985, 16.483800, 500.000000},
	{!"Vinewood Tower 2", 914.443969, -1021.950012, 111.055000, 500.000000},
	{!"Vinewood Tower", 1460.239990, -784.158996, 97.815299, 500.000000},
	{!"Blueberry Factory Tower", -53.004299, -248.141998, 32.839698, 750.000000},
	{!"Montgomery South Tower", 1074.170043, 272.532989, 26.881200, 550.000000},
	{!"Montgomery North Tower", 1665.239990, 398.843994, 20.200599, 500.000000},
	{!"Palomino Creek Tower", 2603.790039, 205.462005, 58.100299, 500.000000},
	{!"Ramiro Cruz Tower", 2765.889892, 181.158004, 21.707399, 500.000000},
	{!"Red County Tower", 2607.679931, 657.258972, 10.820300, 500.000000},
	{!"SF Missionairy Hill Tower", -2540.850097, -719.270019, 139.320007, 1000.000000},
	{!"San Fierro Airport Tower", -1443.349975, -974.934997, 199.664001, 550.000000},
	{!"Flint Range Tower", -603.653015, -1791.569946, 97.113601, 500.000000},
	{!"Black O Beyond Tower 3", -227.337997, -2167.770019, 29.213899, 500.000000},
	{!"Black O Beyond Tower 1", -372.263000, -2394.699951, 95.280197, 500.000000},
	{!"Black O Beyond Tower 2", -496.996002, -2730.510009, 151.759002, 500.000000},
	{!"Angel West Tower", -1387.520019, -2815.479980, 61.776000, 500.000000},
	{!"Angel East Tower", -2236.270019, -2746.639892, 37.241699, 500.000000},
	{!"Angel North Tower", -1968.869995, -2206.370117, 67.393699, 500.000000},
	{!"San Fierro DMV Tower", -2193.820068, -7.007100, 63.595100, 500.000000},
	{!"San Fierro Midtown Tower 2", -1760.170043, 774.651000, 167.656005, 500.000000},
	{!"San Fierro Midtown Tower 1", -2558.530029, 517.166015, 47.781200, 500.000000},
	{!"San Fierro Hospital Tower", -2740.389892, 553.276977, 14.559599, 750.000000},
	{!"San Fierro Golden Gate Tower", -2708.169921, 1466.739990, 7.156499, 750.000000},
	{!"Bayside Tower", -2299.360107, 2633.639892, 54.885799, 500.000000},
	{!"Las Barrancas Tower", -699.625000, 1528.060058, 81.991897, 500.000000},
	{!"Big Ear Tower", -225.533996, 1397.900024, 69.936500, 750.000000},
	{!"SACF East Tower", 576.575988, 2090.179931, 43.848899, 500.000000},
	{!"SACF South Tower", 123.230003, 1607.819946, 31.933300, 500.000000},
	{!"Las Venturas North Tower 1", 1208.560058, 2978.370117, 24.960800, 550.000000},
	{!"Las Venturas North Tower 3", 2174.760009, 2960.070068, 24.241100, 550.000000},
	{!"Las Venturas North Tower 2", 2971.760009, 2708.479980, 24.148399, 550.000000},
	{!"Las Venturas Midtown Tower 1", 2462.719970, 2282.689941, 91.629997, 500.000000},
	{!"Las Venturas Visage Tower", 2030.810058, 2063.419921, 16.837400, 500.000000},
	{!"Las Venturas Midtown Tower 2", 2443.550048, 1599.369995, 10.820300, 750.000000},
	{!"Las Venturas Midtown Tower 3", 2487.050048, 1031.109985, 57.501598, 500.000000},
	{!"Las Venturas Midtown Tower 4", 1913.869995, 1161.449951, 18.085899, 500.000000},
	{!"Las Venturas South Tower", 1257.400024, 709.361999, 10.497300, 500.000000},
	{!"Las Venturas West Tower", 831.752990, 1407.260009, 31.932600, 500.000000},
	{!"Las Venturas Airport Tower", 1568.040039, 1892.680053, 10.820300, 500.000000},
	{!"Las Venturas Julius Thruway North", 1796.589965, 2444.709960, 10.854299, 550.000000}
};

new const Float:CarModingShopExit[10][4] = {
{195.5442,-1436.5524,12.8537,319.5366},
{197.8506,-1438.4629,12.8594,318.7462},
{200.2923,-1440.3585,12.8648,318.7568},
{202.1477,-1442.6298,12.8643,318.7457},
{204.6279,-1444.2933,12.8745,318.2960},
{209.8788,-1421.3091,13.0359,134.1930},
{212.0232,-1423.3677,13.0384,133.5355},
{213.9254,-1425.6904,13.0405,133.8086},
{216.0700,-1427.6934,13.0447,134.0883},
{218.1033,-1429.9534,13.0519,133.7612}
};

new const xmGenres[][] = {
    "Rock",
	"Other",
	"Rhythm & Blues",
	"Urban",
	"Pop",
	"Oldies",
	"International",
	"Cultural",
	"Electronic",
	"Talk"
};

enum E_SubGenres
{
    xmid,
    subname[32],
}

new const xmSubGenres[][E_SubGenres] = {
// Rock
{0, "Alternative Rock"},
{0, "Hard Rock"},
{0, "Classic Rock"},
{0, "India Rock"},
{0, "Punk Rock"},
{0, "Death Metal"},
{0, "Psychedelic Rock"},
{0, "Surf"},
{0, "Rockabilly"},
{0, "Surf"},
{0, "Rockabilly"},
{0, "Heavy Metal"},
{0, "Gothic Rock"},
{0, "Doom Metal"},
// Other
{1, "LS-RP"},
{1, "Mash Ups"},
{1, "Dance"},
{1, "Chiptune"},
{1, "Ambient"},
{1, "Latin"},
// Rhythm & Blues
{2, "Soul"},
{2, "Jazz"},
{2, "R&B"},
{2, "Electro Swig"},
// Urban
{3, "Country"},
{3, "Hip Hop"},
{3, "Ska"},
{3, "Rap"},
{3, "Trap"},
{3, "Classic Rap"},
{3, "Reggae"},
{3, "Reggaeton"},
// Pop
{4, "Pop"},
{4, "Latin"},
// Oldies
{5, "80s"},
{5, "Mixed"},
{5, "70s"},
{5, "60s"},
{5, "90s"},
// International
{6, "South Asian"},
{6, "Russian"},
{6, "Mexican"},
{6, "Bosnian"},
{6, "Macedonian"},
{6, "French"},
{6, "Cuban"},
{6, "Swedish"},
{6, "Arabic"},
{6, "Romanian"},
{6, "Norwegian"},
{6, "Dutch"},
{6, "Greek"},
{6, "Hebrew"},
{6, "Serbian"},
{6, "Czech"},
{6, "Albanian"},
{6, "Spanish"},
{6, "Armenian"},
// Cultural
{7, "Instruments"},
// Electronic
{8, "House"},
{8, "Dance"},
{8, "Psychedelic"},
{8, "Ambient & Chillout"},
{8, "Drum and Bass & Dubs"},
{8, "Hard House"},
{8, "Progressive"},
{8, "Synthwave"},
{8, "Dark Alternative"},
// Talk
{9, "Scanners"},
{9, "News"}
};

new const Float:GoFishingPlace[3][3] = {
	{813.6824,-2248.2407,-0.4488},
	{407.6824,-2318.2407,-0.5752},
	{-25.9471,-1981.9995,-0.6268}
};

new const Float:FlintFarm[5][3] = {
	{-207.9474,-1327.1185,9.8555},
	{-569.3899,-1302.7570,22.4331},
	{-511.1070,-1376.0288,19.4673},
	{-309.0976,-1539.4039,11.7151},
	{-222.2049,-1520.7129,7.0026}
};

new const Float:BlueFarm[5][3] = {
	{69.6013,-3.1608,1.8764},
	{-25.4396,-56.4816,4.0989},
	{-148.9333,41.2588,4.0932},
	{-190.1118,138.5946,5.8175},
	{15.3321,-104.6317,1.9983}
};

new const Float:gBoatSpawn[20][4] = {
	{81.599998, -1699.599975, 0.000000, 88.000000},
	{73.500000, -1647.799804, 0.000000, 73.998001},
	{71.699996, -1658.300048, 0.300000, 89.995002},
	{78.699996, -1677.400024, 0.000000, 109.995002},
	{73.900390, -1667.500000, 0.000000, 109.995002},
	{81.700187, -1689.400390, 0.000000, 87.995002},
	{90.300003, -1743.400024, 0.000000, 111.995002},
	{82.400390, -1709.799804, 0.000000, 93.994003},
	{84.400390, -1721.700195, 0.000000, 93.994003},
	{86.400001, -1733.599975, 0.000000, 95.992996},
	{96.099998, -1753.099975, 0.000000, 111.995002},
	{103.800003, -1764.199951, 0.000000, 123.995002},
	{72.300003, -1632.300048, 0.000000, 85.991996},
	{72.300003, -1622.300048, 0.000000, 85.989997},
	{72.500000, -1611.699951, 0.000000, 85.989997},
	{70.800003, -1579.699951, 0.000000, 91.989997},
	{72.500000, -1601.099609, 0.000000, 85.989997},
	{72.000000, -1591.799804, 0.000000, 85.989997},
	{67.099998, -1569.599975, 0.000000, 93.988998},
	{63.799999, -1559.699951, 0.000000, 109.987998}
};

new const Float:gPlaneSpawn[7][4] = {
	{1967.3853,-2353.3643,13.2739,175.6344},
	{1958.5817,-2354.0073,13.2740,177.8390},
	{1949.9326,-2355.0310,13.2740,181.0763},
	{1942.8993,-2355.4915,13.2740,182.4527},
	{1991.0426,-2375.4526,13.2740,83.3619},
	{1990.3270,-2385.2410,13.2740,85.7914},
	{1989.7825,-2393.8977,13.2740,84.5329}
};

new const Float:gCombineSpawn[34][4] = {
	{94.199996, -5.199999, 1.700000, 80.000000},
	{97.599609, 14.299810, 1.700000, 79.997001},
	{95.799812, 4.700200, 1.700000, 79.997001},
	{88.000000, -46.500000, 1.799999, 79.997001},
	{92.299812, -15.200189, 1.799999, 79.997001},
	{90.599609, -25.299800, 1.899999, 79.997001},
	{89.500000, -35.799800, 1.899999, 79.997001},
	{46.299999, -172.699996, 1.799999, 3.996999},
	{14.500000, -172.899993, 1.700000, 0.000000},
	{36.599609, -173.099609, 1.700000, 3.993999},
	{25.899999, -173.699996, 1.700000, 0.000000},
	{-7.800000, -170.199996, 2.299999, 352.000000},
	{2.599610, -171.599609, 1.700000, 351.996002},
	{-17.700000, -168.699996, 3.000000, 351.996002},
	{-27.600000, -167.399993, 3.599999, 351.996002},
	{-48.900001, -164.000000, 4.199999, 350.000000},
	{-38.500000, -165.799804, 4.199999, 349.997009},
	{-132.600006, -136.899993, 4.199999, 349.997009},
	{-156.600006, -132.899993, 4.199999, 349.997009},
	{-144.400390, -134.599609, 4.199999, 349.997009},
	{-168.600006, -130.899993, 4.199999, 349.997009},
	{-181.100006, -129.500000, 4.199999, 349.997009},
	{-192.899993, -127.900001, 4.199999, 349.997009},
	{-229.899993, -123.699996, 4.199999, 349.997009},
	{-205.000000, -127.099609, 4.199999, 349.997009},
	{-217.400390, -125.599609, 4.199999, 349.997009},
	{-83.500000, 180.000000, 4.000000, 160.000000},
	{-93.000000, 184.000000, 4.099999, 159.998992},
	{-111.599998, 192.000000, 5.400000, 165.998992},
	{-102.200202, 188.099609, 4.699999, 159.998992},
	{-121.500000, 195.199996, 6.400000, 165.992004},
	{-141.699996, 200.899993, 8.800000, 169.992004},
	{-131.400390, 198.099609, 7.599999, 165.992004},
	{-151.500000, 202.800003, 10.000000, 169.990997}
};

new const Float:gVehicleSpawn[120][4] = {
	{1616.900024, -1137.099975, 23.899999, 90.000000},
	{1616.800048, -1132.599975, 23.899999, 90.000000},
	{1616.800048, -1128.199951, 23.899999, 90.000000},
	{1616.699951, -1123.699951, 23.899999, 90.000000},
	{1616.599975, -1119.400024, 23.899999, 90.000000},
	{1630.099975, -1107.500000, 23.899999, 90.000000},
	{1630.099975, -1102.800048, 23.899999, 90.000000},
	{1629.800048, -1098.300048, 23.899999, 90.000000},
	{1629.800048, -1093.900024, 23.899999, 90.000000},
	{1629.699951, -1089.599975, 23.899999, 90.000000},
	{1629.599975, -1085.099975, 23.899999, 90.000000},
	{1657.699951, -1111.599975, 23.899999, 90.000000},
	{1658.000000, -1107.000000, 23.899999, 90.000000},
	{1658.000000, -1102.500000, 23.899999, 90.000000},
	{1657.900024, -1098.099975, 23.899999, 90.000000},
	{1657.800048, -1093.599975, 23.899999, 90.000000},
	{1657.800048, -1089.000000, 23.899999, 90.000000},
	{1658.000000, -1084.500000, 23.899999, 90.000000},
	{1658.099975, -1080.099975, 23.899999, 90.000000},
	{1621.099975, -1107.400024, 23.899999, 270.00000},
	{1621.199951, -1103.099975, 23.899999, 270.00000},
	{1621.300048, -1098.599975, 23.899999, 270.00000},
	{1621.300048, -1094.099975, 23.899999, 270.00000},
	{1621.300048, -1089.699951, 23.899999, 270.00000},
	{1621.300048, -1085.199951, 23.899999, 270.00000},
	{1649.199951, -1111.599975, 23.899999, 270.00000},
	{1649.599975, -1107.000000, 23.899999, 270.00000},
	{1649.699951, -1102.599975, 23.899999, 270.00000},
	{1649.699951, -1098.000000, 23.899999, 270.00000},
	{1649.699951, -1093.699951, 23.899999, 270.00000},
	{1649.700195, -1089.099609, 23.899999, 270.00000},
	{1649.700195, -1084.799804, 23.899999, 270.00000},
	{1649.699951, -1080.300048, 23.899999, 270.00000},
	{1675.599975, -1097.800048, 23.899999, 270.00000},
	{1675.599975, -1102.500000, 23.899999, 270.00000},
	{1675.500000, -1106.900024, 23.899999, 270.00000},
	{1675.400024, -1111.300048, 23.899999, 270.00000},
	{1675.500000, -1115.900024, 23.899999, 270.00000},
	{1675.500000, -1120.199951, 23.899999, 270.00000},
	{1675.500000, -1124.699951, 23.899999, 270.00000},
	{1675.500000, -1129.099975, 23.899999, 270.00000},
	{1666.199951, -1135.400024, 23.899999, 180.00000},
	{1661.599975, -1135.800048, 23.899999, 180.00000},
	{1657.400024, -1135.800048, 23.899999, 180.00000},
	{1652.900024, -1135.800048, 23.899999, 180.00000},
	{1648.400024, -1135.800048, 23.899999, 180.00000},
	{1793.400024, -1060.900024, 24.000000, 180.00000},
	{1788.800048, -1061.099975, 24.000000, 180.00000},
	{1784.500000, -1060.900024, 24.000000, 180.00000},
	{1779.800048, -1061.300048, 24.000000, 180.00000},
	{1775.400024, -1061.199951, 24.000000, 180.00000},
	{1771.000000, -1061.199951, 24.000000, 180.00000},
	{1766.599975, -1061.099975, 24.000000, 180.00000},
	{1761.699951, -1061.300048, 24.000000, 180.00000},
	{1722.699951, -1060.599975, 24.000000, 180.00000},
	{1718.099975, -1060.500000, 24.000000, 180.00000},
	{1714.000000, -1060.500000, 24.000000, 180.00000},
	{1709.000000, -1060.500000, 24.000000, 180.00000},
	{1704.500000, -1060.500000, 24.000000, 180.00000},
	{1700.300048, -1060.599975, 24.000000, 180.00000},
	{1696.000000, -1060.400024, 24.000000, 180.00000},
	{1691.400024, -1060.400024, 24.000000, 180.00000},
	{1680.900024, -1036.000000, 23.899999, 180.00000},
	{1685.400024, -1036.000000, 23.899999, 180.00000},
	{1689.800048, -1035.800048, 23.899999, 180.00000},
	{1694.400024, -1035.900024, 23.899999, 180.00000},
	{1698.699951, -1035.699951, 23.899999, 180.00000},
	{1703.300048, -1035.599975, 23.899999, 180.00000},
	{1707.699951, -1035.599975, 24.000000, 180.00000},
	{1712.300048, -1035.000000, 23.899999, 180.00000},
	{1757.199951, -1037.800048, 24.000000, 180.00000},
	{1761.599975, -1038.199951, 24.000000, 180.00000},
	{1752.900024, -1037.699951, 24.000000, 180.00000},
	{1748.699951, -1038.000000, 24.000000, 180.00000},
	{1744.199951, -1037.900024, 24.000000, 180.00000},
	{1691.400024, -1070.000000, 23.899999, 0.000000},
	{1695.699951, -1069.900024, 23.899999, 0.000000},
	{1704.800048, -1069.699951, 23.899999, 0.000000},
	{1700.200195, -1069.799804, 23.899999, 0.000000},
	{1709.300048, -1069.699951, 23.899999, 0.000000},
	{1718.199951, -1069.500000, 23.899999, 0.000000},
	{1713.700195, -1069.500000, 23.899999, 0.000000},
	{1722.500000, -1069.400024, 23.899999, 0.000000},
	{1681.199951, -1044.300048, 23.899999, 0.000000},
	{1685.699951, -1044.300048, 23.899999, 0.000000},
	{1690.000000, -1044.300048, 23.899999, 0.000000},
	{1694.599975, -1044.000000, 23.899999, 0.000000},
	{1698.900024, -1044.099975, 23.899999, 0.000000},
	{1703.400024, -1044.300048, 23.899999, 0.000000},
	{1708.099975, -1044.300048, 23.899999, 0.000000},
	{1712.699951, -1044.199951, 23.899999, 0.000000},
	{1744.099975, -1046.000000, 23.899999, 0.000000},
	{1748.400024, -1045.900024, 23.899999, 0.000000},
	{1752.800048, -1046.199951, 23.899999, 0.000000},
	{1757.500000, -1046.000000, 23.899999, 0.000000},
	{1761.599975, -1046.000000, 23.899999, 0.000000},
	{1762.099975, -1069.699951, 23.899999, 0.000000},
	{1766.699951, -1069.800048, 23.899999, 0.000000},
	{1771.199951, -1069.800048, 23.899999, 0.000000},
	{1775.300048, -1070.000000, 23.899999, 0.000000},
	{1780.000000, -1070.000000, 23.899999, 0.000000},
	{1784.400024, -1069.900024, 23.899999, 0.000000},
	{1788.800048, -1069.800048, 23.899999, 0.000000},
	{1793.199951, -1069.699951, 23.899999, 0.000000},
	{1658.699951, -1046.400024, 23.899999, 0.000000},
	{1654.199951, -1046.500000, 23.899999, 0.000000},
	{1649.599975, -1046.300048, 23.899999, 0.000000},
	{1644.900024, -1046.400024, 23.899999, 0.000000},
	{1640.400024, -1046.300048, 23.899999, 0.000000},
	{1636.199951, -1046.400024, 23.899999, 0.000000},
	{1631.699951, -1046.400024, 23.899999, 0.000000},
	{1627.099975, -1046.400024, 23.899999, 0.000000},
	{1658.099975, -1038.099975, 23.899999, 180.00000},
	{1653.599975, -1038.300048, 23.899999, 180.00000},
	{1649.000000, -1038.300048, 23.899999, 180.00000},
	{1644.599975, -1038.199951, 23.899999, 180.00000},
	{1640.000000, -1038.300048, 23.899999, 180.00000},
	{1635.599975, -1038.199951, 23.899999, 180.00000},
	{1631.099975, -1038.300048, 23.899999, 180.00000},
	{1626.699951, -1038.300048, 23.899999, 180.00000}
};
/*
new const Float:gSprayTag[100][3] = {
	{ 2046.41, -1635.84, 13.5859 },
	{ 2066.43, -1652.48, 14.2812 },
	{ 2102.20, -1648.76, 13.5859 },
	{ 2399.41, -1552.03, 28.7500 },
	{ 2353.54, -1508.21, 24.7500 },
	{ 2394.10, -1468.37, 24.7812 },
	{ 1724.73, -1741.50, 14.1016 },
	{ 1767.21, -1617.54, 15.0391 },
	{ 1799.13, -1708.77, 14.1016 },
	{ 1746.75, -1359.77, 16.2109 },
	{ 1850.01, -1876.84, 14.3594 },
	{ 1889.24, -1982.51, 15.7578 },
	{ 1950.62, -2034.40, 14.0938 },
	{ 1936.88, -2134.91, 14.2188 },
	{ 1808.34, -2092.27, 14.2188 },
	{ 2273.90, -2265.80, 14.5625 },
	{ 2173.59, -2165.19, 15.3047 },
	{ 2281.46, -1118.96, 27.0078 },
	{ 2239.78, -999.75, 59.7578 },
	{ 2122.69, -1060.90, 25.3906 },
	{ 2062.72, -996.46, 48.2656 },
	{ 2076.73, -1071.13, 27.6094 },
	{ 2841.37, -1312.96, 18.8203 },
	{ 2820.34, -1190.98, 25.6719 },
	{ 2766.09, -1197.14, 69.0703 },
	{ 2756.01, -1388.12, 39.4609 },
	{ 2821.23, -1465.09, 16.5391 },
	{ 2767.78, -1621.19, 11.2344 },
	{ 2767.76, -1819.95, 12.2266 },
	{ 2667.89, -1469.13, 31.6797 },
	{ 2612.93, -1390.77, 35.4297 },
	{ 2536.22, -1352.77, 31.0859 },
	{ 2580.95, -1274.09, 46.5938 },
	{ 2603.16, -1197.81, 60.9922 },
	{ 2576.82, -1143.27, 48.2031 },
	{ 2621.51, -1092.20, 69.7969 },
	{ 2797.92, -1097.70, 31.0625 },
	{ 1332.13, -1722.30, 14.1875 },
	{ 1732.73, -963.08, 41.4375 },
	{ 1118.91, -2008.24, 75.0234 },
	{ 2273.20, -2529.12, 8.5156 },
	{ 2704.23, -2144.30, 11.8203 },
	{ 2763.00, -2012.11, 14.1328 },
	{ 2794.53, -1906.81, 14.6719 },
	{ 2812.94, -1942.07, 11.0625 },
	{ 2874.50, -1909.38, 8.3906 },
	{ 2182.23, -1467.90, 25.5547 },
	{ 2132.23, -1258.09, 24.0547 },
	{ 2233.95, -1367.62, 24.5312 },
	{ 2224.77, -1193.06, 25.8359 },
	{ 2119.20, -1196.62, 24.6328 },
	{ 2522.46, -1478.74, 24.1641 },
	{ 2322.45, -1254.41, 22.9219 },
	{ 1448.23, -1755.90, 14.5234 },
	{ 1574.71, -2691.88, 13.6016 },
	{ 1071.14, -1863.79, 14.0938 },
	{ 2392.36, -1914.57, 14.7422 },
	{ 2430.33, -1997.91, 14.7422 },
	{ 2587.32, -2063.52, 4.6094 },
	{ 1974.09, -1351.16, 24.5625 },
	{ 2093.76, -1413.45, 24.1172 },
	{ 1969.59, -1289.70, 24.5625 },
	{ 1966.95, -1174.73, 20.0391 },
	{ 1911.87, -1064.40, 25.1875 },
	{ 2462.27, -1541.41, 25.4219 },
	{ 2346.52, -1350.78, 24.2812 },
	{ 2273.02, -1687.43, 14.9688 },
	{ 2422.91, -1682.30, 13.9922 },
	{ 1549.89, -1714.52, 15.1016 },
	{ 1498.63, -1207.35, 24.6797 },
	{ 1519.42, -1010.95, 24.6094 },
	{ 1687.23, -1239.12, 15.8125 },
	{ 1783.97, -2156.54, 14.3125 },
	{ 1624.62, -2296.24, 14.3125 },
	{ 2065.44, -1897.23, 13.6094 },
	{ 2134.33, -2011.20, 10.5156 },
	{ 1271.48, -1662.32, 20.2500 },
	{ 2162.78, -1786.07, 14.1875 },
	{ 2034.40, -1801.67, 14.5469 },
	{ 1910.16, -1779.66, 18.7500 },
	{ 1837.20, -1814.19, 4.3359 },
	{ 1837.66, -1640.38, 13.7578 },
	{ 1959.40, -1577.76, 13.7578 },
	{ 2074.18, -1579.15, 14.0312 },
	{ 2542.95, -1363.24, 31.7656 },
	{ 2704.20, -1966.69, 13.7578 },
	{ 2489.24, -1959.07, 13.7578 },
	{ 1295.18, -1465.22, 10.2812 },
	{ 482.63, -1761.59, 5.9141 },
	{ 2379.32, -2166.22, 24.9453 },
	{ 810.57, -1797.57, 13.6172 },
	{ 730.45, -1482.01, 2.2500 },
	{ 947.48, -1466.72, 17.2422 },
	{ 399.01, -2066.88, 11.2344 },
	{ 466.98, -1283.02, 16.3203 },
	{ 583.46, -1502.11, 16.0000 },
	{ 944.27, -985.82, 39.2969 },
	{ 1072.91, -1012.80, 35.5156 },
	{ 1206.25, -1162.00, 23.8750 },
	{ 1098.81, -1292.55, 17.1406 }
};
*/
new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11, 0, 0
};

/*new const g_aWeaponAttachSlots[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};*/

new const g_aWeaponAttach[] = {
	-1, -1, -1, 0, 1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

new const graffiti_SprayTag[][] = {
{18659, "Grove St 4 Life"},
{18660, "Seville B.V.V.D Families"},
{18661, "Varrio Los Aztecas"},
{18662, "Kilo"},
{18663, "San Fiero Rifa"},
{18664, "Temple Drive Ballas"},
{18665, "Los Santos Vargos"},
{18666, "Front Yard Balas"},
{18667, "Rolling Heights Ballas"}
};

// New Drug System
#define MAX_DRUG_TYPE 14
new const Float:DrugPackageSize[MAX_DRUG_TYPE] = {
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0
};

new const DrugPackageName[MAX_DRUG_TYPE][64] = {
	"Ziploc Bag - Small",
	"Ziploc Bag - Medium",
	"Ziploc Bag - Large",
	"Saran Wrap Ball - Small",
	"Saran Wrap Ball - Medium",
	"Saran Wrap Ball - Large",
	"Wrapped Foil - Small",
	"Wrapped Foil - Medium",
	"Wrapped Foil - Large",
	"Pill Bottle - Small",
	"Pill Bottle - Medium",
	"Pill Bottle - Large",
	"Wax Paper Wrap - Small",
	"Wax Paper Wrap - Medium"
};

#define DRUGOBJECT_MODEL 0
#define DRUGOBJECT_SIZE 1
#define DRUGOBJECT_NAME 2

new const DrugObject[][] = {
	{2768, 28,"Cluckin' Bell Burger Box"},
	{2647, 135,"Burgershot Cup"},
	{2821, 226,"Cok O Pops"},
	{2694, 226,"Shoe Box"},
	{19569, 226,"Milk Carton"},
	{2891, 226,"Wrapped Package"},
	{19571, 226,"Pizza Box"},
	{1220, 361,"Cardboard Box"},
	{19897, 82,"Cigarette Pack"}
};

#define DRUGDATA_TYPE 0
#define DRUGDATA_NAME 1
#define MAX_DRUGS 10
new const DrugData[MAX_DRUGS][] = { // 0-grams, 1-Pills 
	{0,"Cocaine"},
	{0,"Cannabis"},
	{1,"Xanax"},
	{1,"MDMA"},
	{0,"Heroin"},
	{0,"Ketamine"},
	{0,"Fentanyl"},
	{0,"Methamphetamine"},
	{1,"Steroids"},
	{1,"Oxycodone"}
};

enum e_Drug
{
	drugID,
	drugType, // 1 Cocaine, 2 Cannabis, 3 Xanax, 4 MDMA, 5 Heroin, 6 Ketamine 7, Fentanyl 8, Methamphetamine 9, Steroids 10, Oxycodone
	Float:drugQTY,
	drugStrength,
	drugPackage, // DrugPackageName 0 - 13
	drugFore
};

enum e_objectDrug
{
	drugSID,
	drugObj,
	Float:drugObjectX,
	Float:drugObjectY,
	Float:drugObjectZ,
	Float:drugObjectRX,
	Float:drugObjectRY,
	Float:drugObjectRZ,
	drugObjectWorld,
	drugObjectInt,
	drugOwner
};


new const BoneName[][] = {
	"กระดูกสันหลัง", "หัว", "ต้นแขนซ้าย", "ต้นแขนขวา",
	"มือซ้าย", "มือขวา", "ต้นขาซ้าย", "ต้นขาขวา", "เท้าซ้าย", "เท้าขวา", "น่องขวา", "น่องซ้าย",
	"แขนซ้าย", "แขนขวา", "กระดูกไหปลาร้าซ้าย", "กระดูกไหปลาร้าขวา", "คอ", "กราม"
}
;

stock const MonthDay[][] = {
	"January", "February", "March", "April",
	"May", "June", "July", "August", "September", "October",
	"November","December"
}
;

stock const szMonthDay[][] = {
	"Jan", "Feb", "Mar", "Apr",
	"May", "Jun", "Jul", "Aug", "Sep", "Oct",
	"Nov","Dec"
}
;

new const ScrambleWord[][] = {
	"SPIDER", "DROP", "HIRE", "EARTH", "GOLD", "HEART",
	"FLOWER", "KNIFE",
	"POOL", "BEACH", "HEEL", "APPLE", "ART", "BEAN",
	"BEHIND", "AWAY",
	"COOKIE", "DANCE", "SALE", "SEXY", "BULLET", "GRAPE",
	"GROUND", "FLIP", "DIRT",
	"PRIDE", "AROUSE", "SOUP", "CIRCUS", "VERBA", "RENT",
	"REFUND", "HUMAN", "ANIMAL",
	"SNOOP", "FOUR", "TURKEY", "HOLE", "HUMOR"
}
;

new const FishNames[5][20] = {
	"ปลาทูน่า",
	"ปลาแซลมอน",
	"ปลากระโทงดาบ",
	"ปลาไหลมอเรย์",
	"ปลาฉลาม"
};

new const OrTeleports[][] =
{
	{!"24/7 1"},
	{!"24/7 2"},
	{!"24/7 3"},
	{!"24/7 4"},
	{!"24/7 5"},
	{!"24/7 6"},
	{!"Airport Ticket Desk"},
	{!"Airport Baggage Reclaim"},
	{!"Shamal"},
	{!"Andromada"},
	{!"Ammunation 1"},
	{!"Ammunation 2"},
	{!"Ammunation 3"},
	{!"Ammunation 4"},
	{!"Ammunation 5"},
	{!"Ammunation Booths"},
	{!"Ammunation Range"},
	{!"Blastin Fools Hallway"},
	{!"Budget Inn Motel Room"},
	{!"Jefferson Motel"},
	{!"Off Track Betting Shop"},
	{!"Sex Shop"},
	{!"Meat Factory"},
	{!"Zero's RC Shop"},
	{!"Dillmore Gas Station"},
	{!"Caligula's Basement"},
	{!"FDC Janitors Room"},
	{!"Woozie's Office"},
	{!"Binco"},
	{!"Didier Sachs"},
	{!"Prolaps"},
	{!"Suburban"},
	{!"Victim"},
	{!"ZIP"},
	{!"Alhambra"},
	{!"Ten Bottles"},
 	{!"Lil' Probe Inn"},
 	{!"Jay's Dinner"},
 	{!"Gant Bridge Dinner"},
	{!"Secret Valley Dinner"},
	{!"World of Coq"},
	{!"Welcome Pump"},
	{!"Burger Shot"},
	{!"Cluckin' Bell"},
	{!"Well Stacked Pizza"},
	{!"Jimmy's Sticky Ring"},
	{!"Denise Room"},
	{!"Katie Room"},
	{!"Helena Room"},
	{!"Michelle Room"},
	{!"Barbara Room"},
	{!"Mille Room"},
	{!"Sherman Dam"},
	{!"Planning Dept."},
	{!"Area 51"},
	{!"LS Gym"},
	{!"SF Gym"},
	{!"LV Gym"},
	{!"B Dup's House"},
	{!"B Dup's Crack Pad"},
	{!"CJ's House"},
	{!"Madd Dogg's Mansion"},
	{!"OG Loc's House"},
	{!"Ryder's House"},
	{!"Sweet's House"},
	{!"Crack Factory"},
	{!"Big Spread Ranch"},
	{!"Fanny Batters"},
	{!"Strip Club"},
	{!"Strip Club Private Room"},
	{!"Unnamed Brothel"},
	{!"Tiger Skin Brothel"},
	{!"Pleasure Domes"},
	{!"Liberty City Outside"},
	{!"Liverty City Inside"},
	{!"Gang House"},
	{!"Colonel Furhberger's House"},
	{!"Crack Den"},
	{!"Warehouse 1"},
	{!"Warehouse 2"},
	{!"Sweet's Garage"},
	{!"Lil' Probe Inn Toilet"},
	{!"Unused Safe House"},
	{!"RC Battlefield"},
	{!"Barber 1"},
	{!"Barber 2"},
	{!"Barber 3"},
	{!"Tatoo parlour 1"},
	{!"Tatoo parlour 2"},
	{!"Tatoo parlour 3"},
	{!"LS Police HQ"},
	{!"SF Police HQ"},
	{!"LV Police HQ"},
	{!"Car School"},
	{!"8-Track"},
	{!"Bloodbowl"},
	{!"Dirt Track"},
	{!"Kickstart"},
	{!"Vice Stadium"},
	{!"SF Garage"},
	{!"LS Garage"},
	{!"SF Bomb Shop"},
	{!"Blueberry Warehouse"},
	{!"LV Warehouse 1"},
	{!"LV Warehouse 2"},
	{!"Catigula's Hidden Room"},
	{!"Bank"},
	{!"Bank - Behind Desk"},
	{!"LS Atruim"},
	{!"Bike School"}
}
;

new const g_arrSelectColors[256] = {
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
	0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
	0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
	0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
	0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
	0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
	0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
	0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
	0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
	0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
	0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
	0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
	0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
	0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

// DEALERSHIP MENU
new const VehicleMenuInfo[][] = {
{511, "Airplanes"},
{487, "Helicopters"},
{481, "Bikes"},
{480, "Convertibles"},
{422, "Industrial"},
{567, "Low_Riders"},
{500, "Off_Road"},
{431, "Public_Service"},
{596, "Public_Server_Law"},
{407, "Public_Service_Rescue"},
{421, "Saloons"},
{451, "Sports_Vehicles"},
{479, "Station_Wagons"},
{454, "Boats"},
{483, "Unique"}
};

new const VehicleDealership[][] = {
{511, 0},
{593, 0},

{417, 1},
{487, 1},
{488, 1},

{462, 2},
{463, 2},
{468, 2},
{471, 2},
{481, 2},
{509, 2},
{521, 2},
{586, 2},

{480, 3},
{533, 3},
{555, 3},

{403, 4},
{408, 4},
{413, 4},
{414, 4},
{422, 4},
{440, 4},
{443, 4},
{455, 4},
{456, 4},
{459, 4},
{478, 4},
{482, 4},
{498, 4}, // ... 609
{499, 4},
{514, 4},
{515, 4},
{543, 4}, // ...605
{554, 4},
{578, 4},
{582, 4},
{600, 4},

{412, 5},
{439, 5},
{534, 5},
{535, 5},
{536, 5},
{566, 5},
{567, 5},
{575, 5},
{576, 5},

{400, 6},
{489, 6},
{500, 6},
{579, 6},

{420, 7},
{431, 7},
{437, 7},
{438, 7},

{490, 8},
{497, 8},
{523, 8},
{528, 8},
{596, 8},
{597, 8},
{598, 8},
{599, 8},
{601, 8},

{416, 9},

{401, 10},
{405, 10},
{410, 10},
{419, 10},
{421, 10},
{426, 10},
{436, 10},
{445, 10},
{466, 10}, //... 604
{467, 10},
{474, 10},
{491, 10},
{492, 10},
{507, 10},
{516, 10},
{517, 10},
{518, 10},
{526, 10},
{527, 10},
{529, 10},
{540, 10},
{542, 10},
{546, 10},
{547, 10},
{549, 10},
{550, 10},
{551, 10},
{560, 10},
{562, 10},
{580, 10},
{585, 10},

{402, 11},
{415, 11},
{429, 11},
{475, 11},
{477, 11},
{496, 11},
{541, 11},
{558, 11},
{559, 11},
{565, 11},
{587, 11},
{589, 11},
{602, 11},
{603, 11},

{404, 12},
{418, 12},
{458, 12},
{479, 12},
{561, 12},

{446, 13},
{453, 13},
{454, 13},
{472, 13},
{473, 13},
{484, 13},

{409, 14},
{423, 14},
{483, 14},
{508, 14},
{525, 14},
{532, 14},
{545, 14},
{588, 14}

};


new const g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Cruiser", "SFPD Cruiser", "LVPD Cruiser",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new const g_arrWeaponNames[][]={
	"Fist",
	"Brass Knuckles",
	"Golf Club",
	"Nightstick",
	"Knife",
	"Baseball Bat",
	"Shovel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Double Dildo",
	"Dildo",
	"Vibrator",
	"Silver Vibrator",
	"Flowers",
	"Cane/Brifcase",
	"Grenade",
	"Tear Gas",
	"Molotov Cocktail",
	"",
	"",
	"",
	"9mm",
	"Silences 9mm",
	"Desert Eagle",
	"Shotgun",
	"Sawnoff Shotgun",
	"Combat Shotgun",
	"Micro SMG",
	"MP5",
	"AK47",
	"M4",
	"Tec9",
	"Country Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HeatSeek Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spraycan",
	"Fire Extinguisher",
	"Camera",
	"Night Vision Goggles",
	"Thermal Goggles",
	"Parachute"
};

enum Door
{
	DOOR_HOOD,
	DOOR_TRUNK,
	DOOR_DRIVER,
	DOOR_PASSENGER
}

enum DoorState(<<= 1)
{
	IS_OPENED = 1,
	IS_DAMAGED,
	IS_REMOVED
}

enum E_CCTV
{
	cctvExists,
	cctvID,
	cctvName[50],
	Float:cctvX,
	Float:cctvY,
	Float:cctvZ,
	Float:cctvRotX,
	Float:cctvRotY,
	Float:cctvRotZ,
	Float:cctvLookX,
	Float:cctvLookY,
	Float:cctvLookZ,
	cctvWorld,
	cctvInterior,
	cctvFaction,
	cctvObject
};
new CCTVInfo[MAX_CCTVS][E_CCTV];

//========================Industry System========================//
new const g_arrIndustryNames[][] = {
	"The Ship", "Green Palms Refinery", "Easter Bay Chemicals", "San Andreas Federal Mint", "Whetstone Scrap Yard", "The Panopticon Forest - West", "The Panopticon Forest - East",
	"The Impounder's Farm", "The Farm On a Rock", "The Flint Range Farm", "The Beacon Hill Eggs", "EasterBoard Farm", "The Palomino Farm", "The Leafy Hollow Orchards", "The Hilltop Farm",
	"Fort Carson Quarry", "San Andreas Federal Weapon Factory", "San Andreas Steel Mill", "Angel Pine Sawmill", "Doherty Textile Factory", "FleischBerg Brewery", "SA Food Processing Plant",
	"Ocean Docks Concrete Plant", "Fort Carson Distillery", "Las Payasdas Malt House", "Shafted Appliances", "Solarin Autos", "Rockshore Construction Site", "Doherty Construction Site",
	"Bone County Substation", "Sherman Dam Powerplant"
};

/*
new const g_arrIndustryNames[][] = {
	"เรือ", "โรงกลั่นปาล์มสีเขียว", "อีสเตอร์เบย์เคมี", "หลักทรัพย์รัฐซานแอนเดรส", "ลานเศษซากเวทสโตน", "ป่าพานอปติคอน - ตะวันตก", "ป่าพานอปติคอน - ตะวันออก",
	"ฟาร์มอิมเพาเดอร์", "ฟาร์มบนภูเขา", "ฟาร์มฟลินท์เร้นจ์", "เส้นทางลานเขาไข่", "ฟาร์มอีสเตอร์บอร์ด", "ฟาร์มพาโลมิโน", "สวนผลไม้ลีฟฟีโฮโร่", "ฟาร์มฮิลล์ท็อป",
	"เหมืองหินในฟอร์ทคาร์สัน", "โรงงานอาวุธรัฐซานแอนเดรส", "โรงถลุงเหล็กซานแอนเดรส", "โรงเลื่อยแองเจิลไพน์", "โรงงานสิ่งทอโดเฮอร์ตี้", "FleischBerg Brewery", "SA Food Processing Plant",
	"Ocean Docks Concrete Plant", "Fort Carson Distillery", "Las Payasdas Malt House", "Shafted Appliances", "Solarin Autos", "Rockshore Construction Site", "Doherty Construction Site",
	"Bone County Substation", "Sherman Dam Powerplant"
};
*/
new const g_arrIndItemNames[][] = {
	"สีย้อม","ดินปืน","เงินตรา","เศษโลหะ","ไม้ซุง","ฝ้าย","นม","เครื่องดื่ม","เนื้อ","เมล็ดธัญพืช","ไข่","เครื่องใช้ไฟฟ้า","เสื้อผ้า",
	"เชื้อเพลิง","เฟอร์นิเจอร์","ผลไม้","หม้อแปลงไฟฟ้า","ยานพาหนะ", "เศษหิน", "อาวุธ", "รูปทรงเหล็ก","กระดาษ", "อิฐ", "ชิ้นส่วนรถยนต์", "อาหาร", "ข้าวมอลต์"
};


enum eindustry
{
	in_close,
	in_type // - 0 - Primary, 1 - Secondary, 2 -Special
}
new IndustryData[MAX_INDUSTRY][eindustry];

enum estorage
{
	in_id,
	Float:in_posx,
	Float:in_posy,
	Float:in_posz,
	in_item,
	in_industryid,
	in_trading_type, // - 0 for sale, 1 wanted
	in_price,
	in_consumption,
	in_stock,
	in_maximum,
	STREAMER_TAG_3D_TEXT_LABEL:in_label,
	in_pickup

};
new StorageData[MAX_ITEM_STORAGE][estorage];

enum upgradeinfo
{
    u_price,
    Float:u_rate,
}

new const VehicleUpgradeLock[][upgradeinfo] = {
{4000, 75.0},
{6000, 50.0},
{8000, 37.5},
{10000, 30.0}
};

new const VehicleUpgradeImmob[][upgradeinfo] = {
{5000, 150.0},
{10000, 75.0},
{15000, 50.0},
{20000, 37.5}
};

new const VehicleUpgradeAlarm[][upgradeinfo] = {
{2000, 150.0},
{4000, 75.0},
{5000, 50.0},
{8000, 37.5}
};

enum c_data {
	c_price,
	Float:c_maxhp,
	Float:c_engine,
	Float:c_battery,
	Float:c_maxfuel,
	Float:c_fuelrate,
	c_scrap
};

new const VehicleData[][c_data] =
{
	{180000, 1120.0, 100.0, 100.0, 22.0, 13.0, 90000},
	{40000, 900.0, 75.0, 100.0, 15.0, 9.0, 20000},
	{420000, 910.0, 100.0, 100.0, 19.0, 3.0, 210000},
	{750000, 2000.0, 100.0, 100.0, 100.0, 4.0, 375000},
	{80000, 900.0, 75.0, 100.0, 100.0, 15.0, 40000},
	{135000, 940.0, 100.0, 100.0, 17.0, 8.0, 67500},
	{0, 2000.0, 100.0, 100.0, 100.0, 4.0, 0},
	{340000, 1800.0, 100.0, 100.0, 100.0, 11.0, 170000},
	{140900, 2000.0, 100.0, 100.0, 100.0, 3.0, 70450},
	{280000, 1000.0, 100.0, 100.0, 23.0, 11.0, 140000},
	{35000, 900.0, 75.0, 100.0, 14.0, 10.0, 17500},
	{605500, 800.0, 100.0, 100.0, 24.0, 3.0, 302750},
	{65000, 900.0, 75.0, 100.0, 15.0, 6.0, 32500},
	{110000, 1400.0, 100.0, 100.0, 32.0, 20.0, 55000},
	{175000, 1700.0, 100.0, 100.0, 100.0, 17.0, 87500},
	{850000, 800.0, 100.0, 100.0, 23.0, 4.0, 425000},
	{54500, 1300.0, 100.0, 100.0, 65.0, 20.0, 27250},
	{1000000, 1300.0, 100.0, 100.0, 100.0, 0.0, 500000},
	{80000, 1000.0, 100.0, 100.0, 26.0, 23.0, 40000},
	{50000, 900.0, 75.0, 100.0, 16.0, 8.0, 25000},
	{45000, 910.0, 100.0, 100.0, 17.0, 14.0, 22500},
	{100000, 940.0, 100.0, 100.0, 16.0, 8.0, 50000},
	{60000, 1200.0, 100.0, 100.0, 25.0, 13.0, 30000},
	{80000, 1400.0, 100.0, 100.0, 35.0, 26.0, 40000},
	{19000, 900.0, 100.0, 100.0, 9.0, 15.0, 9500},
	{10000000, 1700.0, 100.0, 100.0, 100.0, 0.0, 5000000},
	{135000, 930.0, 100.0, 100.0, 16.0, 8.0, 67500},
	{500000, 1650.0, 100.0, 100.0, 56.0, 15.0, 250000},
	{275500, 1800.0, 100.0, 100.0, 55.0, 10.0, 137750},
	{850000, 800.0, 100.0, 100.0, 23.0, 3.0, 425000},
	{450000, 1200.0, 100.0, 100.0, 80.0, 0.0, 225000},
	{70000, 2000.0, 100.0, 100.0, 100.0, 3.0, 35000},
	{50000000, 5000.0, 100.0, 100.0, 100.0, 3.0, 25000000},
	{7500000, 2200.0, 100.0, 100.0, 100.0, 7.0, 3750000},
	{225000, 880.0, 100.0, 100.0, 10.0, 14.0, 112500},
	{115000, 0.0, 100.0, 100.0, 0.0, 0.0, 57500},
	{40000, 900.0, 75.0, 100.0, 15.0, 9.0, 20000},
	{75000, 2000.0, 100.0, 100.0, 100.0, 2.0, 37500},
	{50000, 910.0, 100.0, 100.0, 17.0, 13.0, 25000},
	{80000, 930.0, 100.0, 100.0, 17.0, 7.0, 40000},
	{100000, 1400.0, 100.0, 100.0, 34.0, 12.0, 50000},
	{15000, 700.0, 100.0, 100.0, 100.0, 0.0, 7500},
	{75000, 1000.0, 100.0, 100.0, 18.0, 10.0, 37500},
	{200000, 2000.0, 100.0, 100.0, 100.0, 9.0, 100000},
	{300000, 1300.0, 100.0, 100.0, 26.0, 6.0, 150000},
	{45000, 910.0, 100.0, 100.0, 16.0, 8.0, 22500},
	{1000000, 850.0, 100.0, 100.0, 75.0, 0.0, 500000},
	{12000000, 850.0, 100.0, 100.0, 46.0, 0.0, 6000000},
	{12999, 740.0, 50.0, 100.0, 2.0, 49.0, 6499},
	{35000000, 1200.0, 100.0, 100.0, 7.0, 12.0, 17500000},
	{115000, 0.0, 100.0, 100.0, 0.0, 0.0, 57500},
	{655500, 800.0, 100.0, 100.0, 23.0, 3.0, 327750},
	{450000, 850.0, 100.0, 100.0, 68.0, 0.0, 225000},
	{180000, 1250.0, 100.0, 100.0, 100.0, 0.0, 90000},
	{299999, 1250.0, 100.0, 100.0, 100.0, 0.0, 149999},
	{3000000, 2000.0, 100.0, 100.0, 100.0, 2.0, 1500000},
	{400000, 1700.0, 100.0, 100.0, 100.0, 14.0, 200000},
	{15000, 800.0, 100.0, 100.0, 0.0, 0.0, 7500},
	{90000, 920.0, 100.0, 100.0, 17.0, 12.0, 45000},
	{60000, 1400.0, 100.0, 100.0, 32.0, 24.0, 30000},
	{3500000, 850.0, 100.0, 100.0, 100.0, 6.0, 1750000},
	{250000, 720.0, 50.0, 100.0, 5.0, 45.0, 125000},
	{10000, 740.0, 50.0, 100.0, 2.0, 49.0, 5000},
	{50000, 740.0, 50.0, 100.0, 5.0, 40.0, 25000},
	{12000, 700.0, 100.0, 100.0, 2.0, 25.0, 6000},
	{12000, 700.0, 100.0, 100.0, 2.0, 25.0, 6000},
	{50000, 900.0, 75.0, 100.0, 14.0, 8.0, 25000},
	{35000, 900.0, 75.0, 100.0, 15.0, 8.0, 17500},
	{165000, 710.0, 50.0, 100.0, 4.0, 45.0, 82500},
	{0, 0.0, 100.0, 100.0, 45.0, 10.0, 0},
	{0, 1650.0, 100.0, 100.0, 26.0, 10.0, 0},
	{100000, 700.0, 50.0, 100.0, 4.0, 48.0, 50000},
	{150000, 1250.0, 100.0, 100.0, 100.0, 15.0, 75000},
	{20000, 750.0, 50.0, 100.0, 13.0, 18.0, 10000},
	{60000, 910.0, 75.0, 100.0, 16.0, 8.0, 30000},
	{160000, 900.0, 100.0, 100.0, 17.0, 3.0, 80000},
	{0, 850.0, 100.0, 100.0, 100.0, 6.0, 0},
	{700000, 830.0, 100.0, 100.0, 17.0, 3.0, 350000},
	{40000, 1200.0, 100.0, 100.0, 25.0, 25.0, 20000},
	{85000, 910.0, 75.0, 100.0, 17.0, 14.0, 42500},
	{625000, 800.0, 100.0, 100.0, 18.0, 9.0, 312500},
	{700, 500.0, 50.0, 100.0, 0.0, 0.0, 350},
	{120000, 1400.0, 100.0, 100.0, 32.0, 12.0, 60000},
	{85000, 1100.0, 100.0, 100.0, 43.0, 12.0, 42500},
	{350000, 750.0, 100.0, 100.0, 100.0, 6.0, 175000},
	{0, 890.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 1900.0, 100.0, 100.0, 21.0, 7.0, 0},
	{3500000, 980.0, 100.0, 100.0, 48.0, 6.0, 1750000},
	{1000000, 900.0, 100.0, 100.0, 48.0, 6.0, 500000},
	{110000, 1110.0, 100.0, 100.0, 23.0, 10.0, 55000},
	{255000, 1430.0, 100.0, 100.0, 28.0, 9.0, 127500},
	{41000, 900.0, 75.0, 100.0, 15.0, 8.0, 20500},
	{47000, 900.0, 75.0, 100.0, 15.0, 8.0, 23500},
	{0, 850.0, 100.0, 100.0, 70.0, 11.0, 0},
	{0, 800.0, 100.0, 100.0, 17.0, 3.0, 0},
	{0, 1000.0, 100.0, 100.0, 23.0, 12.0, 0},
	{140000, 800.0, 100.0, 100.0, 11.0, 4.0, 70000},
	{3650000, 0.0, 100.0, 100.0, 49.0, 6.0, 1825000},
	{110000, 1400.0, 100.0, 100.0, 100.0, 6.0, 55000},
	{90000, 1400.0, 100.0, 100.0, 100.0, 17.0, 45000},
	{140000, 920.0, 100.0, 100.0, 19.0, 14.0, 70000},
	{0, 700.0, 100.0, 100.0, 0.0, 25.0, 0},
	{0, 800.0, 100.0, 100.0, 17.0, 3.0, 0},
	{0, 800.0, 100.0, 100.0, 17.0, 3.0, 0},
	{0, 850.0, 100.0, 100.0, 15.0, 7.0, 0},
	{110000, 1110.0, 100.0, 100.0, 15.0, 10.0, 55000},
	{0, 800.0, 100.0, 100.0, 23.0, 3.0, 0},
	{155000, 850.0, 100.0, 100.0, 20.0, 7.0, 77500},
	{180000, 1200.0, 100.0, 100.0, 76.0, 17.0, 90000},
	{1000, 500.0, 50.0, 100.0, 0.0, 0.0, 500},
	{0, 500.0, 50.0, 100.0, 0.0, 0.0, 0},
	{5000000, 850.0, 100.0, 100.0, 100.0, 4.0, 2500000},
	{0, 850.0, 100.0, 100.0, 97.0, 6.0, 0},
	{0, 820.0, 100.0, 100.0, 73.0, 6.0, 0},
	{800000, 2000.0, 100.0, 100.0, 100.0, 4.0, 400000},
	{900000, 2000.0, 100.0, 100.0, 100.0, 3.0, 450000},
	{40000, 900.0, 100.0, 100.0, 18.0, 9.0, 20000},
	{65000, 900.0, 75.0, 100.0, 15.0, 9.0, 32500},
	{45000, 900.0, 75.0, 100.0, 16.0, 8.0, 22500},
	{0, 1200.0, 100.0, 100.0, 100.0, 3.0, 0},
	{0, 1300.0, 100.0, 100.0, 100.0, 4.0, 0},
	{200000, 710.0, 75.0, 100.0, 5.0, 45.0, 100000},
	{400000, 700.0, 75.0, 100.0, 5.0, 48.0, 200000},
	{50000, 0.0, 50.0, 100.0, 7.0, 20.0, 25000},
	{0, 2000.0, 100.0, 100.0, 100.0, 3.0, 0},
	{30000, 1160.0, 100.0, 100.0, 26.0, 17.0, 15000},
	{55000, 900.0, 100.0, 100.0, 15.0, 8.0, 27500},
	{45000, 900.0, 75.0, 100.0, 15.0, 9.0, 22500},
	{500000, 0.0, 100.0, 100.0, 29.0, 15.0, 250000},
	{45000, 900.0, 75.0, 100.0, 15.0, 8.0, 22500},
	{0, 850.0, 100.0, 100.0, 0.0, 0.0, 0},
	{43000, 800.0, 100.0, 100.0, 18.0, 23.0, 21500},
	{25000, 1900.0, 100.0, 100.0, 25.0, 9.0, 12500},
	{65000, 830.0, 100.0, 100.0, 17.0, 8.0, 32500},
	{75000, 925.0, 100.0, 100.0, 16.0, 6.0, 37500},
	{110000, 940.0, 100.0, 100.0, 23.0, 6.0, 55000},
	{65000, 880.0, 75.0, 100.0, 14.0, 7.0, 32500},
	{0, 2000.0, 100.0, 100.0, 100.0, 12.0, 0},
	{0, 2000.0, 100.0, 100.0, 100.0, 12.0, 0},
	{0, 800.0, 100.0, 100.0, 15.0, 12.0, 0},
	{51000, 900.0, 75.0, 100.0, 16.0, 8.0, 25500},
	{1200000, 800.0, 100.0, 100.0, 24.0, 4.0, 600000},
	{135000, 900.0, 75.0, 100.0, 15.0, 8.0, 67500},
	{25000, 1200.0, 100.0, 100.0, 25.0, 13.0, 12500},
	{0, 1800.0, 100.0, 100.0, 25.0, 11.0, 0},
	{85000, 880.0, 100.0, 100.0, 14.0, 13.0, 42500},
	{46000, 910.0, 75.0, 100.0, 15.0, 8.0, 23000},
	{38000, 900.0, 75.0, 100.0, 16.0, 8.0, 19000},
	{0, 1450.0, 100.0, 100.0, 100.0, 2.0, 0},
	{38000, 900.0, 75.0, 100.0, 14.0, 8.0, 19000},
	{55000, 900.0, 100.0, 100.0, 15.0, 8.0, 27500},
	{150000, 950.0, 100.0, 100.0, 19.0, 8.0, 75000},
	{50000, 1270.0, 100.0, 100.0, 12.0, 20.0, 25000},
	{0, 1500.0, 100.0, 100.0, 100.0, 2.0, 0},
	{110000, 1280.0, 100.0, 100.0, 26.0, 9.0, 55000},
	{450000, 820.0, 75.0, 100.0, 15.0, 9.0, 225000},
	{0, 1300.0, 100.0, 100.0, 26.0, 6.0, 0},
	{0, 1300.0, 100.0, 100.0, 26.0, 6.0, 0},
	{330000, 810.0, 100.0, 100.0, 18.0, 3.0, 165000},
	{200000, 810.0, 100.0, 100.0, 17.0, 3.0, 100000},
	{785000, 880.0, 100.0, 100.0, 16.0, 7.0, 392500},
	{110000, 920.0, 100.0, 100.0, 18.0, 12.0, 55000},
	{220000, 880.0, 100.0, 100.0, 18.0, 9.0, 110000},
	{0, 1350.0, 100.0, 100.0, 100.0, 4.0, 0},
	{0, 700.0, 100.0, 100.0, 2.0, 0.0, 0},
	{180000, 810.0, 100.0, 100.0, 13.0, 3.0, 90000},
	{65000, 900.0, 75.0, 100.0, 15.0, 6.0, 32500},
	{85000, 905.0, 75.0, 100.0, 15.0, 7.0, 42500},
	{500000, 850.0, 100.0, 100.0, 8.0, 16.0, 250000},
	{0, 0.0, 100.0, 100.0, 0.0, 12.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 700.0, 100.0, 100.0, 4.0, 22.0, 0},
	{0, 750.0, 100.0, 100.0, 8.0, 18.0, 0},
	{0, 1300.0, 100.0, 100.0, 29.0, 4.0, 0},
	{0, 750.0, 100.0, 100.0, 8.0, 18.0, 0},
	{80000, 900.0, 75.0, 100.0, 16.0, 6.0, 40000},
	{58000, 890.0, 75.0, 100.0, 15.0, 6.0, 29000},
	{0, 1500.0, 100.0, 100.0, 100.0, 1.0, 0},
	{500000, 1800.0, 100.0, 100.0, 100.0, 12.0, 250000},
	{300000, 1150.0, 100.0, 100.0, 25.0, 10.0, 150000},
	{200000, 970.0, 100.0, 100.0, 22.0, 7.0, 100000},
	{0, 710.0, 50.0, 100.0, 4.0, 45.0, 0},
	{80000, 1300.0, 100.0, 100.0, 29.0, 24.0, 40000},
	{0, 750.0, 100.0, 100.0, 8.0, 18.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{60000, 915.0, 100.0, 100.0, 16.0, 8.0, 30000},
	{50000, 740.0, 50.0, 100.0, 7.0, 40.0, 25000},
	{250000, 820.0, 100.0, 100.0, 17.0, 3.0, 125000},
	{80000, 1200.0, 100.0, 100.0, 29.0, 12.0, 40000},
	{160000, 850.0, 100.0, 100.0, 14.0, 3.0, 80000},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 1500.0, 100.0, 100.0, 100.0, 1.0, 0},
	{4000000, 850.0, 100.0, 100.0, 100.0, 6.0, 2000000},
	{0, 700.0, 100.0, 100.0, 2.0, 50.0, 0},
	{0, 1250.0, 100.0, 100.0, 100.0, 11.0, 0},
	{99999, 1110.0, 100.0, 100.0, 17.0, 13.0, 50000},
	{99999, 1110.0, 100.0, 100.0, 17.0, 13.0, 50000},
	{99999, 1110.0, 100.0, 100.0, 17.0, 13.0, 50000},
	{135000, 1220.0, 100.0, 100.0, 25.0, 21.0, 67500},
	{38000, 920.0, 100.0, 100.0, 22.0, 7.0, 19000},
	{750000, 3500.0, 100.0, 100.0, 100.0, 13.0, 375000},
	{330000, 820.0, 100.0, 100.0, 20.0, 3.0, 165000},
	{650000, 950.0, 100.0, 100.0, 19.0, 3.0, 325000},
	{0, 0.0, 75.0, 100.0, 14.0, 8.0, 0},
	{0, 1200.0, 100.0, 100.0, 25.0, 26.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 1650.0, 100.0, 100.0, 100.0, 12.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0},
	{0, 0.0, 100.0, 100.0, 0.0, 0.0, 0}

};

enum e_cldata {
	e_model,
	e_price,
	e_bone,
	e_name[32],
	Float:e_x,
	Float:e_y,
	Float:e_z,
	Float:e_rx,
	Float:e_ry,
	Float:e_rz,
	Float:e_sx,
	Float:e_sy,
	Float:e_sz
};

new const cl_SportsData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{18645, 2000, 2, "(Red&White)Motorcycle Helmet", 0.059999, 0.023999, 0.005, 93.6, 75.3, 0.0, 1.0, 1.0, 1.0},
	{18976, 2000, 2, "(Blue&White)DirtBike Helmet", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{18977, 2000, 2, "(Red&Black)Motorcycle Helmet", 0.052999, 0.016999, 0.006999, 0.0, 91.1, 75.7, 1.0, 1.0, 1.0},
	{18978, 2000, 2, "(Blue&White)Motorcycle Helmet", 0.052999, 0.032, -0.007, 74.9, 86.5, -4.60001, 1.0, 1.0, 1.0},
	{18979, 2000, 2, "(Purple)Motorcycle Helmet", 0.051999, 0.028, 0.0, 93.3, 74.8, -9.6, 1.0, 1.0, 1.0},
	{19036, 157, 2, "White Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{19037, 157, 2, "Red Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{19038, 157, 2, "Green Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{3026, 450, 1, "Backpack", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{19559, 1500, 1, "Hiking Backpack", 0.108999, -0.041, 0.000999, -5.09999, 90.1999, 3.0, 1.0, 1.0, 1.0},
	{2919, 660, 5, "Sports Bag", 0.240999, -0.066, 0.014999, 6.9, -94.6, 14.6, 0.353999, 0.196, 0.348},
	{19624, 1000, 5, "Suitcase", 0.067, 0.014999, -0.006, 0.0, -90.3, -3.8, 1.0, 1.0, 1.0}
};

new const cl_MusicalData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{19317, 14500, 5, "Bass Guitar", 0.066999, 0.026, 0.0, 0.0, -157.5, 0.0, 1.0, 1.0, 1.0},
	{19318, 16240, 5, "Flying Guitar", 0.066999, 0.026, 0.0, 0.0, -157.5, 0.0, 1.0, 1.0, 1.0},
	{19319, 17800, 5, "Warlock Guitar", 0.066999, 0.026, 0.0, 0.0, -157.5, 0.0, 1.0, 1.0, 1.0},
	{19610, 1000, 5, "Microphone", 0.072999, 0.041, -0.001999, 97.0, 3.1, -176.1, 1.0, 1.0, 1.0}
};

new const cl_PoliceData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{18636, 350, 2, "Black Police Cap", 0.136999,0.048999,0.000000,0.000003,89.099975,88.299980,1.000000,1.000000,1.000000},
	{19161, 400, 2, "Black Police Cap", 0.076000,0.004999,-0.001999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19162, 400, 2, "Blue Police Cap", 0.076000,0.004999,-0.001999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19099, 400, 2, "Black Police Hat", 0.165000,0.028000,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19100, 400, 2, "Brown Police Hat", 0.165000,0.028000,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19521, 500, 2, "Officer Cap", 0.159000,0.016000,-0.002999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19200, 500, 2, "Police Helmet", 0.129999,0.034999,-0.003999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19138, 500, 2, "Black Stylish Glasses", 0.089998,0.043999,-0.003000,12.099998,84.200050,82.700042,1.000000,1.000000,1.000000},
	{19142, 750, 1, "SWAT Armour", 0.071998,0.044000,0.004000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19141, 750, 2, "SWAT Helmet", 0.115000,0.014000,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19515, 750, 1, "Grey SWAT Armour", 0.071998,0.044000,0.004000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19514, 750, 2, "Grey SWAT Helmet", 0.115000,0.014000,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19942, 500, 5, "Police Radio", 0.072999,0.054999,-0.037000,0.000000,-168.900039,-15.699998,1.000000,1.000000,1.000000},
	{11750, 600, 1, "Closed Handcuffs", -0.140999,-0.013999,-0.151000,-47.800018,-10.599998,-103.000000,1.000000,1.000000,1.000000},
	{11749, 600, 5, "Open Handcuffs", 0.208000,0.026999,-0.031000,-84.699935,-3.499998,-81.999977,1.000000,1.000000,1.000000},

	{19783, 500, 4, "Police Officer I Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19784, 500, 4, "Police Officer II Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19785, 500, 4, "Police Officer III+1 Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19781, 500, 4, "Sergeant I Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19782, 500, 4, "Sergeant II Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19778, 500, 4, "Detective I Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19779, 500, 4, "Detective II Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},
	{19780, 500, 4, "Detective III Badge", 0.070000,0.018000,-0.040999,6.700007,-0.199999,92.400001,0.237999,0.364999,1.000000},

	{-1001, 750, 1, "[NEW] LSPD Armour", -0.251999,0.052000,0.000000,0.000000,0.000000,0.000000,1.000000,1.210999,1.000000},
	{-1002, 750, 3, "[NEW] SWAT Riot Shield", 0.270000,-0.232999,0.007000,-0.200000,8.899995,90.100021,1.000000,1.000000,1.000000},
	{-1003, 750, 2, "[NEW] Gas Mask", 0.012999,0.102999,-0.009999,137.099960,92.899993,-54.199996,1.110999,1.188000,1.039000},
	{-1004, 750, 4, "[NEW] Officer III Badge", 0.437999,0.087999,0.365000,178.000000,13.500000,-179.200012,0.996000,1.001999,1.012999},
	{-1005, 750, 4, "[NEW] Sergeant II Badge", 0.391999,0.076999,0.403000,179.700012,23.300003,-179.100051,1.000000,1.000000,1.000000},
	{-1006, 750, 4, "[NEW] Slo Badge", 0.391999,0.076999,0.403000,179.700012,23.300003,-179.100051,1.000000,1.000000,1.000000},
	{-1007, 750, 1, "[NEW] SWAT Armour", -0.251999,0.052000,0.000000,0.000000,0.000000,0.000000,1.000000,1.210999,1.000000},
	{19773, 1000, 7,"[NEW] Holster", 0.149, -0.021999, -0.100998, 0.600012, -98.3001, -173.7, 1.0, 1.0, 1.0},
	{19775, 750, 1, "[NEW] Police Badge I", 0.153000,0.137000,0.088999,-173.899963,85.899971,-3.000001,1.000000,1.000000,1.000000},
	{19774, 750, 1, "[NEW] Police Badge II", 0.153000,0.137000,0.088999,-173.899963,85.899971,-3.000001,1.000000,1.000000,1.000000},
	{-1007, 750, 1, "[NEW] LSSD Armour", -0.251999,0.052000,0.000000,0.000000,0.000000,0.000000,1.000000,1.210999,1.000000}
};

new const cl_MedicData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{11736, 100, 5, "First aid kit", 0.272999,0.079999,-0.035000,95.600028,-168.800048,7.899988,1.000000,1.000000,1.000000},
	{11738, 500, 5, "Medic Case", 0.290000,0.008999,0.037000,0.099999,-105.599983,-8.099993,1.000000,1.000000,1.000000},
	{11747, 150, 5, "Bandage", 0.116000,0.022000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19331, 700, 2, "Black Fire Helmet", 0.158,-0.006,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{19330, 700, 2, "Yellow Fire Helmet", 0.158,-0.006,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000},
	{-1003, 750, 2, "Gas Mask", 0.012999,0.102999,-0.009999,137.099960,92.899993,-54.199996,1.110999,1.188000,1.039000},
	{1008,  700, 1, "Oxigen Tank", 0.096000,-0.088000,0.017999,-98.100067,177.099945,4.899996,0.863000,1.070999,1.000000},
	{18634, 37, 5, "Crowbar", 0.072999, 0.028999, -0.028999, -11.899999, -70.900001, 78.400001, 1.0, 1.0, 1.0}
};

new const cl_HardwareData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{19113, 250, 2, "Hippie Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19114, 250, 2, "DSM Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19115, 250, 2, "Toxic Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19116, 250, 2, "Black Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19117, 250, 2, "Red Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19118, 250, 2, "Green Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19119, 250, 2, "Blue Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19120, 250, 2, "Yellow Helmet", 0.152999, 0.030999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{18632, 45, 5, "Fishing Rod", 0.106999, 0.041999, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{18633, 37, 5, "Wrench", 0.103998, 0.042998, 0.019998, -90.000000, -88.199897, -6.000000, 1.0, 1.0, 1.0},
	{18634, 37, 5, "Crowbar", 0.072999, 0.028999, -0.028999, -11.899999, -70.900001, 78.400001, 1.0, 1.0, 1.0},
	{18635, 39, 5, "Hammer", 0.032999, 0.070998, 0.040998, -176.500000, -13.500000, 0.000000, 1.0, 1.0, 1.0},
	{19631, 3000, 5, "Sledge Hammer", 0.088999, 0.063998, -0.126999, 0.000000, -90.699996, -101.000000, 1.0, 1.0, 1.0},
	{18644, 31, 5, "Screwdriver", 0.099999, 0.041000, -0.029999, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{18641, 35, 5, "Flashlight", 0.072999, 0.039, -0.072999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{18638, 240, 2, "Construction Helmet", 0.164000, 0.040998, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19093, 240, 2, "Grey Construction Helmet", 0.087999, 0.002000, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19160, 240, 2, "Labeled Construction Helmet", 0.087999, 0.002000, 0.000000, 0.000000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{19904, 2000, 1, "Construction Vest", 0.052999, 0.054999, -0.016000, 98.500000, 90.999702, 81.899902, 1.0, 1.0, 1.0},
	{1210, 5360, 5, "Briefcase", 0.297998, 0.082000, -0.008000, -15.899999, -96.400001, -9.699999, 1.0, 1.0, 1.0},
	{19622, 1000, 5, "Broom", 0.070998, 0.050999, -0.229000, 2.200000, 0.000000, 0.000000, 1.0, 1.0, 1.0},
	{337, 1000, 5, "Shovel", 0.064998, 0.110999, 0.017999, 14.199999, 175.000000, -119.300003, 1.0, 1.0, 1.0},
	{19627, 1000, 5, "Double ended wrench", 0.097998, 0.025000, -0.013999, -14.300000, 90.500000, 25.100000, 1.0, 1.0, 1.0},
	{19773, 1000, 7, "Holster", 0.149, -0.021999, -0.100998, 0.600012, -98.3001, -173.7, 1.0, 1.0, 1.0}
};

new const cl_DsShopData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{19042,15000,5,"Gold watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19039,15000,5,"Silver watch with gold band",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19041,12500,5,"Silver watch with leather band",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19043,10000,5,"Silver watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19043,10000,5,"White silver watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19044,4096,5,"Dark purple watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19045,4096,5,"Purple watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19046,4096,5,"Green watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19047,4096,5,"Violet watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19048,4096,5,"Seaside watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19049,4096,5,"Funky watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19050,4096,5,"Blue Tiger watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19051,4096,5,"Tiger watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19052,4096,5,"Pink Tiger watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0},
	{19053,4096,5,"Camo watch",-0.001999,-0.016,-0.002,-83.8999,114.5,-82.0001,1.0,1.0,1.0}
};

new const cl_ZipData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{19066, 400, 2, "Santa Hat", 0.1229, 0.0350, 0.000, 90.7, 119.2999, -2.4, 1.0, 1.0, 1.0},
	{18970, 200, 2, "Tiger Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18971, 200, 2, "Disco Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18972, 200, 2, "Lava Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18973, 200, 2, "Camo Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18921, 210, 2, "Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18922, 210, 2, "Red Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18923, 210, 2, "Blue Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18924, 210, 2, "Camo Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19067, 220, 2, "Red Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{19068, 220, 2, "Zebra Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{19069, 220, 2, "Black Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{18926, 200, 2, "Camo Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18927, 200, 2, "Blue Flame Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18928, 200, 2, "Hippie Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18929, 200, 2, "Illusion Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18930, 200, 2, "Fire Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18931, 200, 2, "Dark Flame Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18932, 200, 2, "Lava Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18933, 200, 2, "Poka Dot Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18934, 200, 2, "Red Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18935, 200, 2, "Yellow Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18941, 200, 2, "Black Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18942, 200, 2, "Dark Blue Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18943, 200, 2, "Green Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18961, 200, 2, "Trucker Hat", 0.1370, 0.0320, 0.0030, 103.0000, 94.0000, -14.9000, 1.0, 1.0, 1.0},
	{18960, 200, 2, "Cap Rim Up", 0.1370, 0.0320, 0.0030, 103.0000, 94.0000, -14.9000, 1.0, 1.0, 1.0},
	{18936, 250, 2, "Grey Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18937, 250, 2, "Red Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18938, 250, 2, "Purple Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19101, 240, 2, "Army Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19102, 240, 2, "Navy Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19103, 240, 2, "Desert Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19104, 240, 2, "Day Camo Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19105, 240, 2, "Night Camo Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19106, 220, 2, "Army Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19107, 220, 2, "Navy Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19108, 220, 2, "Desert Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19109, 220, 2, "Day Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19110, 220, 2, "Night Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19111, 220, 2, "Sand Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19112, 220, 2, "Pink Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18911, 150, 2, "Skull Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18912, 150, 2, "Black Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18913, 150, 2, "Green Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18914, 150, 2, "Camo Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18915, 150, 2, "Funky Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18916, 150, 2, "Triangle Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18917, 150, 2, "Dark Blue Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18918, 150, 2, "Black & White Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18919, 150, 2, "Dots Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18920, 150, 2, "Triangle & Dots Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {19469, 150, 1, "Scarf", 0.3000, 0.0550, -0.0369, -5.8999, 0.0000, 26.2000, 1.0000, 1.5519, 1.3889},
	{18944, 210, 2, "Lava Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18945, 210, 2, "Grey Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18946, 210, 2, "Casual Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18947, 230, 2, "Black Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18948, 230, 2, "Blue Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18949, 230, 2, "Green Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18950, 230, 2, "Red Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18951, 230, 2, "Yellow Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18953, 200, 2, "Black Cap Knit", 0.1110, 0.0340, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18954, 200, 2, "Grey Cap Knit", 0.1110, 0.0340, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18955, 205, 2, "Lava Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18956, 205, 2, "Dark Flame Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18957, 205, 2, "Blue Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18958, 205, 2, "Cheetah Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18959, 205, 2, "Camo Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18964, 180, 2, "Black Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18965, 180, 2, "Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18966, 180, 2, "Funky Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18967, 180, 2, "Black Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{18968, 180, 2, "Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{18969, 180, 2, "Lava Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{19006, 50, 2, "Red Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19007, 50, 2, "Orange Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19008, 50, 2, "Green Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19009, 50, 2, "Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19010, 50, 2, "Pink Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19011, 50, 2, "Black & White Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19012, 50, 2, "Black Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19013, 50, 2, "Dot Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19014, 50, 2, "Square Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19015, 50, 2, "Lucent Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19016, 50, 2, "X-Ray Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19017, 50, 2, "Plain Yellow Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19018, 50, 2, "Plain Orange Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19019, 50, 2, "Plain Red Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19020, 50, 2, "Plain Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19021, 50, 2, "Plain Green Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19022, 50, 2, "Lucent Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19023, 50, 2, "Blue Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19024, 50, 2, "Purple Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19025, 50, 2, "Pink Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19026, 50, 2, "Red Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19027, 50, 2, "Orange Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19028, 50, 2, "Yellow Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19029, 50, 2, "Green Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19030, 50, 2, "Thick Lucent", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19031, 50, 2, "Thick Yellow", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19032, 50, 2, "Thick Red", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19033, 50, 2, "Plain Black Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
    {19024, 50, 2, "Squares Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
    {19025, 50, 2, "Dark Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19349, 50, 2, "Monocle", 0.0769, 0.1050, 0.0340, 120.9999, 2.6999, -96.3998, 1.0, 1.0, 1.0},
	{18891, 150, 2, "Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18892, 150, 2, "Red Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18893, 150, 2, "White & Red  Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18894, 150, 2, "Bob Marley Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18895, 150, 2, "Skulls Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18896, 150, 2, "Black & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18897, 150, 2, "Blue & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18898, 150, 2, "Green & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18899, 150, 2, "Purple & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18900, 150, 2, "Psychedelic Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18901, 150, 2, "Fall Camo Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18902, 150, 2, "Yellow Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18903, 150, 2, "Light Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18904, 150, 2, "Dark Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
    {18905, 150, 2, "Hay Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
    {18906, 150, 2, "Red & Yellow Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18907, 150, 2, "Psychedelic Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18908, 150, 2, "Waves Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18909, 150, 2, "Sky Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18910, 150, 2, "Lava Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18962, 200, 2, "Black Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19095, 200, 2, "Light Brown Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19096, 200, 2, "Dark Blue Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19097, 200, 2, "Red Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {19098, 200, 2, "Brown Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {19352, 220, 2, "Top Hat", 0.1039, 0.0210, 0.0060, 93.7000, 74.3000, 0.0000, 1.0, 1.0, 1.0}
};

new const ColorMenuInfo[][] = {
{1, "Basic"},
{3, "Red"},
{2, "Blue"},
{16, "Green"},
{6, "Yellow"},
{158, "Orange"},
{30, "Brown"},
{179, "Purple"},
{190, "Pink"},
{110, "Tan"}
};

new const ColorMenuSelect[][] = {
{0, 0},
{1, 0},
{8, 0},
{11, 0},
{13, 0},
{14, 0},
{15, 0},
{19, 0},
{23, 0},
{24, 0},
{25, 0},
{26, 0},
{27, 0},
{29, 0},
{33, 0},
{34, 0},
{35, 0},
{38, 0},
{39, 0},
{49, 0},
{50, 0},
{52, 0},
{56, 0},
{60, 0},
{63, 0},
{64, 0},
{67, 0},
{71, 0},
{90, 0},
{96, 0},
{109, 0},
{111, 0},
{118, 0},
{122, 0},
{138, 0},
{140, 0},
{148, 0},
{157, 0},
{192, 0},
{193, 0},
{196, 0},
{213, 0},
{250, 0},
{251, 0},
{252, 0},
{253, 0},
{255, 0},
{3, 1},
{17, 1},
{42, 1},
{43, 1},
{45, 1},
{58, 1},
{70, 1},
{82, 1},
{117, 1},
{121, 1},
{124, 1},
{2, 2},
{7, 2},
{10, 2},
{12, 2},
{20, 2},
{28, 2},
{32, 2},
{53, 2},
{54, 2},
{59, 2},
{79, 2},
{87, 2},
{93, 2},
{94, 2},
{95, 2},
{100, 2},
{101, 2},
{103, 2},
{106, 2},
{108, 2},
{109, 2},
{112, 2},
{116, 2},
{125, 2},
{130, 2},
{135, 2},
{139, 2},
{152, 2},
{166, 2},
{198, 2},
{201, 2},
{205, 2},
{208, 2},
{209, 2},
{210, 2},
{223, 2},
{246, 2},

{16, 3},
{28, 3},
{44, 3},
{51, 3},
{83, 3},
{86, 3},
{114, 3},
{137, 3},
{145, 3},
{151, 3},
{153, 3},
{154, 3},
{160, 3},
{186, 3},
{187, 3},
{188, 3},
{189, 3},
{191, 3},
{202, 3},
{215, 3},
{226, 3},
{227, 3},
{229, 3},
{234, 3},
{235, 3},
{241, 3},
{243, 3},
{245, 3},
{6, 4},
{65, 4},
{142, 4},
{194, 4},
{195, 4},
{197, 4},
{221, 4},
{228, 4},
{6, 5},
{158, 5},
{175, 5},
{181, 5},
{182, 5},
{183, 5},
{219, 5},
{222, 5},
{239, 5},
{30, 6},
{31, 6},
{40, 6},
{41, 6},
{58, 6},
{62, 6},
{66, 6},
{74, 6},
{78, 6},
{84, 6},
{88, 6},
{113, 6},
{119, 6},
{123, 6},
{129, 6},
{131, 6},
{149, 6},
{159, 6},
{168, 6},
{173, 6},
{174, 6},
{180, 6},
{212, 6},
{224, 6},
{230, 6},
{238, 6},
{244, 6},
{254, 6},
{147, 7},
{167, 7},
{171, 7},
{179, 7},
{190, 7},
{211, 7},
{232, 7},
{233, 7},
{237, 7},
{5, 8},
{126, 8},
{146, 8},
{176, 8},
{177, 8},
{178, 8},
{46, 9},
{47, 9},
{48, 9},
{55, 9},
{58, 9},
{61, 9},
{68, 9},
{69, 9},
{73, 9},
{76, 9},
{77, 9},
{81, 9},
{89, 9},
{99, 9},
{102, 9},
{104, 9},
{107, 9},
{110, 9},
{120, 9},
{138, 9},
{140, 9},
{141, 9},
{157, 9},
{192, 9},
{193, 9},
{196, 9},
{213, 9},
{250, 9},
{253, 9}
};

// Poker System
/*new Float:PokerTableMiscObjOffsets[MAX_POKERTABLEMISCOBJS][6] = {
{-1.25, -0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 2)
{-1.25, 0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 1)
{0.01, 1.85, 0.1, 0.0, 0.0, 90.0},  // (Slot 6)
{1.25, 0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 5)
{1.25, -0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 4)
{-0.01, -1.85, 0.1, 0.0, 0.0, -90.0} // (Slot 3)
};

new DeckTextdrw[53][] = {
"LD_CARD:cdback", // CARD BACK
"LD_CARD:cd1c", // A Clubs - 0
"LD_CARD:cd2c", // 2 Clubs - 1
"LD_CARD:cd3c", // 3 Clubs - 2
"LD_CARD:cd4c", // 4 Clubs - 3
"LD_CARD:cd5c", // 5 Clubs - 4
"LD_CARD:cd6c", // 6 Clubs - 5
"LD_CARD:cd7c", // 7 Clubs - 6
"LD_CARD:cd8c", // 8 Clubs - 7
"LD_CARD:cd9c", // 9 Clubs - 8
"LD_CARD:cd10c", // 10 Clubs - 9
"LD_CARD:cd11c", // J Clubs - 10
"LD_CARD:cd12c", // Q Clubs - 11
"LD_CARD:cd13c", // K Clubs - 12
"LD_CARD:cd1d", // A Diamonds - 13
"LD_CARD:cd2d", // 2 Diamonds - 14
"LD_CARD:cd3d", // 3 Diamonds - 15
"LD_CARD:cd4d", // 4 Diamonds - 16
"LD_CARD:cd5d", // 5 Diamonds - 17
"LD_CARD:cd6d", // 6 Diamonds - 18
"LD_CARD:cd7d", // 7 Diamonds - 19
"LD_CARD:cd8d", // 8 Diamonds - 20
"LD_CARD:cd9d", // 9 Diamonds - 21
"LD_CARD:cd10d", // 10 Diamonds - 22
"LD_CARD:cd11d", // J Diamonds - 23
"LD_CARD:cd12d", // Q Diamonds - 24
"LD_CARD:cd13d", // K Diamonds - 25
"LD_CARD:cd1h", // A Heats - 26
"LD_CARD:cd2h", // 2 Heats - 27
"LD_CARD:cd3h", // 3 Heats - 28
"LD_CARD:cd4h", // 4 Heats - 29
"LD_CARD:cd5h", // 5 Heats - 30
"LD_CARD:cd6h", // 6 Heats - 31
"LD_CARD:cd7h", // 7 Heats - 32
"LD_CARD:cd8h", // 8 Heats - 33
"LD_CARD:cd9h", // 9 Heats - 34
"LD_CARD:cd10h", // 10 Heats - 35
"LD_CARD:cd11h", // J Heats - 36
"LD_CARD:cd12h", // Q Heats - 37
"LD_CARD:cd13h", // K Heats - 38
"LD_CARD:cd1s", // A Spades - 39
"LD_CARD:cd2s", // 2 Spades - 40
"LD_CARD:cd3s", // 3 Spades - 41
"LD_CARD:cd4s", // 4 Spades - 42
"LD_CARD:cd5s", // 5 Spades - 43
"LD_CARD:cd6s", // 6 Spades - 44
"LD_CARD:cd7s", // 7 Spades - 45
"LD_CARD:cd8s", // 8 Spades - 46
"LD_CARD:cd9s", // 9 Spades - 47
"LD_CARD:cd10s", // 10 Spades - 48
"LD_CARD:cd11s", // J Spades - 49
"LD_CARD:cd12s", // Q Spades - 50
"LD_CARD:cd13s" // K Spades - 51
};

enum pkrInfo
{
	pkrActive,
	pkrPlaced,
	pkrObjectID,
	pkrMiscObjectID[MAX_POKERTABLEMISCOBJS],
	STREAMER_TAG_3D_TEXT_LABEL:pkrText3DID,
	Float:pkrX,
	Float:pkrY,
	Float:pkrZ,
	Float:pkrRX,
	Float:pkrRY,
	Float:pkrRZ,
	pkrVW,
	pkrInt,
	pkrPlayers,
	pkrActivePlayers,
	pkrActiveHands,
	pkrSlot[6],
	pkrPass[32],
	pkrLimit,
	pkrPulseTimer,
	pkrBuyInMax,
	pkrBuyInMin,
	pkrBlind,
	pkrTinkerLiveTime,
	pkrDelay,
	pkrSetDelay,
	pkrPos,
	pkrRotations,
	pkrSlotRotations,
	pkrActivePlayerID,
	pkrActivePlayerSlot,
	pkrRound,
	pkrStage,
	pkrActiveBet,
	pkrDeck[52],
	pkrCCards[5],
	pkrPot,
	pkrWinners,
	pkrWinnerID,
};

new PokerTable[MAX_POKERTABLES][pkrInfo];*/

// New Poker 2
new Float:PokerTableMiscObjOffsets[6][6] =
{
	{-1.25, -0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 2)
	{-1.25, 0.470, 0.1, 0.0, 0.0, 180.0}, // (Slot 1)
	{0.01, 1.85, 0.1, 0.0, 0.0, 90.0},  // (Slot 6)
	{1.25, 0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 5)
	{1.25, -0.470, 0.1, 0.0, 0.0, 0.0}, // (Slot 4)
	{-0.01, -1.85, 0.1, 0.0, 0.0, -90.0} // (Slot 3)
};

enum
{
	Two = 1,
	Three,
	Four,
	Five,
	Six,
	Seven,
	Eight,
	Nine,
	Ten,
	Jack,
	Queen,
	King,
	Ace
}

enum
{
	HighCard = 1,
	Pair,
	TwoPairs,
	ThreeOfKind,
	Straight,
	Flush,
	FullHouse,
	Poker,
	StraightFlush,
	RoyalFlush
}

enum E_CARDS
{
	cardName[32],
	cardChar,
	cardValue
};

new PokerCards[52][E_CARDS] =
{
	{"ld_card:cd1c", 'c', 11},
	{"ld_card:cd2c", 'c', 2},
	{"ld_card:cd3c", 'c', 3},
	{"ld_card:cd4c", 'c', 4},
	{"ld_card:cd5c", 'c', 5},
	{"ld_card:cd6c", 'c', 6},
	{"ld_card:cd7c", 'c', 6},
	{"ld_card:cd8c", 'c', 7},
	{"ld_card:cd9c", 'c', 8},
	{"ld_card:cd10c", 'c', 9},
	{"ld_card:cd11c", 'c', 10},
	{"ld_card:cd12c", 'c', 10},
	{"ld_card:cd13c", 'c', 10},
	
	{"ld_card:cd1d", 'd', 1},
	{"ld_card:cd2d", 'd', 2},
	{"ld_card:cd3d", 'd', 3},
	{"ld_card:cd4d", 'd', 4},
	{"ld_card:cd5d", 'd', 5},
	{"ld_card:cd6d", 'd', 6},
	{"ld_card:cd7d", 'd', 7},
	{"ld_card:cd8d", 'd', 8},
	{"ld_card:cd9d", 'd', 9},
	{"ld_card:cd10d", 'd', 10},
	{"ld_card:cd11d", 'd', 10},
	{"ld_card:cd12d", 'd', 10},
	{"ld_card:cd13d", 'd', 10},
	
	{"ld_card:cd1h", 'h', 11},
	{"ld_card:cd2h", 'h', 2},
	{"ld_card:cd3h", 'h', 3},
	{"ld_card:cd4h", 'h', 4},
	{"ld_card:cd5h", 'h', 5},
	{"ld_card:cd6h", 'h', 6},
	{"ld_card:cd7h", 'h', 7},
	{"ld_card:cd8h", 'h', 8},
	{"ld_card:cd9h", 'h', 9},
	{"ld_card:cd10h", 'h', 10},
	{"ld_card:cd11h", 'h', 10},
	{"ld_card:cd12h", 'h', 10},
	{"ld_card:cd13h", 'h', 10},
	
	{"ld_card:cd1s", 's', 11},
	{"ld_card:cd2s", 's', 2},
	{"ld_card:cd3s", 's', 3},
	{"ld_card:cd4s", 's', 4},
	{"ld_card:cd5s", 's', 5},
	{"ld_card:cd6s", 's', 6},
	{"ld_card:cd7s", 's', 7},
	{"ld_card:cd8s", 's', 8},
	{"ld_card:cd9s", 's', 9},
	{"ld_card:cd10s", 's', 10},
	{"ld_card:cd11s", 's', 10},
	{"ld_card:cd12s", 's', 10},
	{"ld_card:cd13s", 's', 10}
};

enum pkrInfo
{
	co_table_objectid,
	co_table_active,
	co_table_placed,
	Float:co_table_x,
	Float:co_table_y,
	Float:co_table_z,
	Float:co_table_rx,
	Float:co_table_ry,
	Float:co_table_rz,
	co_table_int,
	co_table_vw,
	co_table_guests,
	co_table_active_guests,
	co_table_active_hands,
	co_table_slots[6],
	co_table_key[32],
	co_table_guests_limit,
	co_table_pulse_timer,
	co_table_buy_in_max,
	co_table_buy_in_min,
	co_table_blind,
	co_table_delay,
	co_table_setdelay,
	co_table_pos,
	co_table_rot,
	co_table_slots_rot,
	co_table_active_guest,
	co_table_active_guest_slot,
	co_table_round,
	co_table_stage,
	co_table_active_bet,
	co_table_deck[52],
	co_table_cards[5],
	co_table_pot,
	co_table_winners,
	co_table_winner_id,
	co_table_seat_price
};

new PokerTable[MAX_POKERTABLES][pkrInfo];

new Iterator:sv_playercar<MAX_PLAYER_VEHICLES>;
new Iterator:sv_houses<MAX_HOUSES>;
new Iterator:sv_business<MAX_BIZ>;
new Iterator:sv_servercar<MAX_DYNAMIC_VEHICLES>;
new Iterator:sv_industry<MAX_ITEM_STORAGE>;
new Iterator:sv_warehouse<MAX_WAREHOUSE>;
new Iterator:sv_movedoors<MAX_MOVEDOORS>;
new Iterator:sv_atms<MAX_ATMS>;
new Iterator:sv_spikes<MAX_SPIKES>;
new Iterator:sv_entrance<MAX_ENTRANCES>;
new Iterator:CCTVs<MAX_CCTVS>;
new Iterator:sv_garage<MAX_GARAGE>;
// enum หลัก

enum MOVEABLE_DOORS
{
	doorID,
	doorModel,
	doorObject,
	doorName[64],
	doorInterior,
	doorVirtualWorld,
	doorFaction,
	doorOpened,
	doorLink,
	Float:doorPosX,
	Float:doorPosY,
	Float:doorPosZ,
	Float:doorPosRX,
	Float:doorPosRY,
	Float:doorPosRZ,
	Float:doorOpenSpeed,
	Float:doorMoveX,
	Float:doorMoveY,
	Float:doorMoveZ,
	Float:doorMoveRX,
	Float:doorMoveRY,
	Float:doorMoveRZ
}
new Doors[MAX_MOVEDOORS][MOVEABLE_DOORS];

enum vehicleL {
	vLabelType,
	vLabelTime,
	vLabelCount,
	STREAMER_TAG_3D_TEXT_LABEL:vLabel,
}

new VehicleLabel[MAX_VEHICLES][vehicleL];

enum playerL {
	pLabelType,
	pLabelTime,
	pLabelCount,
	STREAMER_TAG_3D_TEXT_LABEL:pLabel,
}

new PlayerLabel[MAX_PLAYERS][playerL];

enum vehicleE {
    vVehicleID,
	vVehicleModelID,
	Float: vVehiclePosition[3],
	Float: vVehicleRotation,
	vVehicleFaction,
	vVehicleColour[2],
	vVehicleScriptID,
	vVehicleWorld,
	vVehicleInterior,
	vVehiclePlate[32],
	// LOCAL DATA
	//STREAMER_TAG_3D_TEXT_LABEL:vVehicleSign,
}

enum warehouseE
{
	whID,
	Float:whX,
	Float:whY,
	Float:whZ,
	whPlayer1[MAX_PLAYER_NAME char],
	whPlayer2[MAX_PLAYER_NAME char],
	whType,
	whStock,
	whMaxstock,
	whPickup,
	STREAMER_TAG_3D_TEXT_LABEL:whLabel,
	whWorld,
	whInt

};

enum atmE
{
	atmID,
	Float:atmPosX,
	Float:atmPosY,
	Float:atmPosZ,
	atmInterior,
	atmInfo[128],
	atmAtmOn,
	atmPickUp

};

enum entranceE {
	eID,
	ePickupid,
	ePickuptype,
	Float:ePosEnX,
	Float:ePosEnY,
	Float:ePosEnZ,
	Float:ePosEnA,
	eEnInt,
	eEnWorld,
	eEnLocal,
	eEnHouse,
	eEnBiz,
	eEnTime,

	Float:ePosExX,
	Float:ePosExY,
	Float:ePosExZ,
	Float:ePosExA,
	eExInt,
	eExWorld,
	eExLocal,
	eExHouse,
	eExBiz,
	eExTime,


	eType, // 0 - Player, 1 - Vehicle, 2 BOLT

	// Local
	ePickup
};

enum garageE {
	gID,
	gPickupid,
	gPickuptype,
	Float:gPosEnX,
	Float:gPosEnY,
	Float:gPosEnZ,
	Float:gPosEnA,
	gEnInt,
	gEnWorld,
	gEnLocal,
	gEnHouse,
	gEnBiz,
	gEnTime,

	Float:gPosExX,
	Float:gPosExY,
	Float:gPosExZ,
	Float:gPosExA,
	gExInt,
	gExWorld,
	gExLocal,
	gExHouse,
	gExBiz,
	gExTime,

	gLocked,
	PlayerOwner[MAX_PLAYER_NAME char],

	gType, // 0 - Player, 1 - Vehicle, 2 BOLT

	// Local
	gPickup
};

enum houseinteriorE
{
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	aInterior,
	aMapName[32],
	aTeleOn
};

enum houseE
{
	hID,
	STREAMER_TAG_3D_TEXT_LABEL:hLabel,
	//hCheckPoint,
	Float:hEntranceX,
	Float:hEntranceY,
	Float:hEntranceZ,
	hEntranceInt,
	hEntranceWorld,
	
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	hAddress[128],
	hOwner[MAX_PLAYER_NAME],
	hOwned,
	hLocked,
	hPrice,
	hLevelbuy,
	hRentprice,
	hRentable,
	hInterior,
	hWorld,
	hCash,
	hWeapon[MAX_HOUSE_WEAPONS],
	hAmmo[MAX_HOUSE_WEAPONS],
	hWeaponLicense[MAX_HOUSE_WEAPONS],
	hItems[MAX_HOUSE_ITEMS],
	Float:hCheckPosX,
	Float:hCheckPosY,
	Float:hCheckPosZ,
	hSubid,
	hSQLSubid,
	hType,

	hSwitch,
	hSwitchStatus,

    bool:hradioOn,
    hradioURL[256 char],
    hPickup,
	
	hAreaID[2]
};

enum furnitureE
{
	fID,
	fModel,
	fObject,
	fName[48],
	fHouseID,
	fInterior,
	fVirtualWorld,
	fMarketPrice,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fLocked,
	fOpened,
	fType, // House & Business
}

enum ebiz
{
    bID,
    bOwned,
	bOwner[24],
	bInfo[256],
	bActive,
	bType,
	bsubType,
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bWorld,
	bProducts,
	bMaxProducts,
	bPriceProd,
	bEntime,
	bPickup,

	bPriceProducts[MAX_BIZ_PRICEPRODUCT],

   // bRadio,
    bool:bradioOn,
    bradioURL[256 char],
    bItems[MAX_BIZ_ITEMS],
	// v buy
	Float:bBuyingCarX,
	Float:bBuyingCarY,
	Float:bBuyingCarZ,
	Float:bBuyingCarA,

	Float:bBuyingBoatX,
	Float:bBuyingBoatY,
	Float:bBuyingBoatZ,
	Float:bBuyingBoatA,

	Float:bBuyingAirX,
	Float:bBuyingAirY,
	Float:bBuyingAirZ,
	Float:bBuyingAirA,
	
	bAreaID[2]

};

enum boomboxData {
	bool:boomboxPlaced,
	bool:boomboxOn,
	Float:boomboxPos[3],
	boomboxObject,
	boomboxURL[128 char]
};

enum E_PLAYER_DATA {
	pID,
	pUserid,
	pUsername[20],
	pCharactername[24],
	pConnectionID,
	pIP[16],
	pCreated,
	pTutorialStep,
	pGender,
	pBirthdate,
	pSecretWord[32],
	pModel,
	pPmodel,
	pPnumber,
	pChar,
	pContractTime,
	pInterior,
	pWorld,
	Float:pHunger,
	Float:pHealth,
	Float:pArmour,
	Float:pSHealth,
	pTimeout,
	pSpawnPoint,
	pSpawnType,
	pAdmin,
	pTester,
	pAdminName[MAX_PLAYER_NAME],
	pHouseKey,
	pPlayingHours,
	pLevel,
	pExp,
	pPUpgrade,
	pDonateRank,
	pDonateUnix,
	pPayDay,
	pPayDayHad,
	pPayCheck,
	pChequeCash,
    pAccount,
    pBankPin[10],
    pBankNumber,
    pCash,
    pSavings,
    pSavingsCollect,
  	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	Float:pPos[4],
	pLocal,
    pOnDuty,
	pDutyUnitName[20],
    pSwat,
	pFactionID,
	pFactionRank,
	pJob,
    pSideJob,
	pFishes,
	pCarLic,
	pWepLic,
	pCCWLic,
	pBadgeNumber,
    // Checkpoint Mission
    pCP_Type,
	Float:pCP_X,
	Float:pCP_Y,
	Float:pCP_Z,

	pAttribute[128],
    pJailed,
    pJailTime,
    pJailTime2,
    
    STREAMER_TAG_3D_TEXT_LABEL:pPrisonNumber,
    pPrisonCell,
    
    pPrisonDept,
    pPrisonTime,
    pIsolateTime,

    pJobRank,
    pCareer,

    pADPoint,
    pArrested,
    pPrisoned,
    //pFines,
	pGuns[13],
	pAmmo[13],

	pGun1,
	pGun2,
	pGun3,

	pAmmo1,
	pAmmo2,
	pAmmo3,
	
	pDrugAddiction[MAX_DRUGS],
	pDrugAddict,
	pDrugAddictStrength,

	pPLicense,
	pSLicense,

	pPackageWP[MAX_PLAYER_WEAPON_PACKAGE],
	pPackageAmmo[MAX_PLAYER_WEAPON_PACKAGE],

    pWorkOn,
    pPbiskey,
    pPCarkey,
    pPDupkey,

    pRadio,
	pRChannel,
	pRSlot,
	pRAuth[16],

	pOOCMask,
	pFightStyle,
	
	// LOCAL DATA
	pInCCTV,
	
	pFaction,
	pFactionEdit,
	pFactionOffer,
	pFactionOffered,
	pSelectedSlot,

	pFreeze,
	pFreezeTimer,

	pIncomingCall,
	pCallConnect,
	pCallLine,
	pCellTime,
	pCallCost,
	pCallNumb,
	/*pLeaveTime,
	pLeaveIP[16],*/
	pShowFooter,
	pFooterTimer,
	pReport,
	pReportMessage[64],
	pHelpme,
	pHelpmeMessage[64],
	pSpectating,
	pAnimation,
    pCigarettes,
    pDrink,
	pGasCan,
	pSprayPermission,
	pBoombox,

	pAdvertiseText[128],

	// New Poker 2
	pTableID,
	pActionOptions,
	pActiveHand,
	pPokerStatusString[32],
	pPokerResultString[32],
	pFirstCard,
	pSecondCard,
	pPokerStatus,
	pChips,
	pActionChoice,
	pCurrentBet,
	pActiveGuest,
	pPokerTime,
	pTableDealer,
	pTableSlot,
	Float:pTableX,
	Float:pTableY,
	Float:pTableZ,
	pTableWinner,
	pPokerHide,
	pTableResult[2],	

    pWalk,
    pTalk,

    pHUDStyle,

	pFlyLic,
	pMedicLic,
	pDW,

	pAdverts,
	pHelpup,
	
	pOfficialSkin,
	pOffSkin,

	pRequestVehicle,
	pRVehicleMessage[64],

	pVehicleID,
	
	pAK47,
	pEagle,
	pShotgun,
	pMP5,
	pUZI,
	pColt45,
	pArtMoney,
};

enum E_CAR_DATA {
	carSID,
	carVehicle,
	carModel,
	carOwner,
	carOwnerName[MAX_PLAYER_NAME],
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	Float:carFuel,
	carLock,
	carAlarm,
	carInsurance,
	carXM,
	carDamage[4],
	carOwe,
	carNos,
	Float:carHealth,
	Float:carArmour,
	carDestroyed,
	Float:carMileage,
	carImmob,
	Float:carBatteryL,
	Float:carEngineL,
	carPlate[32],
	bool:carPlateInvisible,
	carComps,
	carXMOn,
	carDupKey,
	carWorld,
	carInt,
	carProtect,
	carImpound,
	Float:carImpoundPos[4],

	carWeapon[MAX_CAR_WEAPONS],
	carAmmo[MAX_CAR_WEAPONS],
	carWeaponLicense[MAX_CAR_WEAPONS],

	carPackageWP[MAX_CAR_WEAPON_PACKAGE],
	carPackageAmmo[MAX_CAR_WEAPON_PACKAGE],
	
	bool:carDespawn,
	//Float:carWPAPos[MAX_CAR_WEAPONS][6],
	// Local
	//carWPAObj[MAX_CAR_WEAPONS][6],

	//STREAMER_TAG_3D_TEXT_LABEL:carLabel,
	carName[64],
	carActive,
};

enum cp_e {
	cPobj,
	//
	Float:cPx,
	Float:cPy,
	Float:cPz,
	Float:cPrx,
	Float:cPry,
	Float:cPrz,
	cPType
};

enum paw_e {
	awID,
	awWid,
	//
	awHide,
	awBone,
	Float:aPx,
	Float:aPy,
	Float:aPz,
	Float:aPrx,
	Float:aPry,
	Float:aPrz
}

enum damagedata {
	bool:dExists,
	dSec,
	dShotType,
	dWeaponid,
	dDamage,
	bool:dArmour
};

enum chdata {
	bool:chExists,
	chSec,
	chNumber,
	bool:chRead,
	chType // - Outgoing call to %s (%d), - Incoming call from %s (%d), - Missed call from %s (%d)
};

enum charData {
	charID,
	charName[MAX_PLAYER_NAME],
	charLevel,
	charSkin
};

enum PlayerFlags:(<<= 1) {
    IS_LOGGED = 1,
    IS_PLAYER_SPAWNED,
	IS_PLAYER_KICKED,
	IS_PLAYER_ACCOUNT,
	IS_PLAYER_EDITWEAPON,
	IS_PLAYER_EDITCLOTHING,
	IS_PLAYER_BUYCLOTHING,
	IS_PLAYER_EDITTOY,
	PLAYER_CONVO,
	PLAYER_CUFFED,
	TOGGLE_FACTION,
	TOGGLE_OOC,
	TOGGLE_LOCALOOC,
	TOGGLE_JOIN,
	TOGGLE_CHEAT,
	TOGGLE_HUD,
	TOGGLE_PMS,
	TOGGLE_BLIND,
	TOGGLE_SPECDATA,
	IS_MASKED,
	IS_PLAYER_TAZER,
	FRISKAPPROVE,
};

enum factionData {
	factionID,
	factionExists,
	factionName[64],
	factionColor,
	factionType,
	factionRanks,
	factionChat,
	factionPickup,
	factionSkins,
	factionVehicle,
	factionPlate[32],
};

enum coreVehicles {
	Float:vehFuel,
	startup_delay,
	startup_delay_sender,
	startup_delay_random,
	
	Float:vehHealth,
	vehDamage[4],

    bool:vradioOn,
    vradioURL[256],

	vOwnerID,
	vUpgradeID,

	Text3D:vehSignText,
	bool:vehSign,

	vbreakin,
	vbreaktime,
	vbreakdelay,

	vSiren,
	vSiren2,
	vELMFlash,
	vELMTimer,

	vehicleBadlyDamage,

	vehicleCrate[MAX_TRUCKER_ITEMS],
	vehicleObj[6],
	vehicleIsCargoLoad,
	vehicleCargoTime,
	vehicleCargoStorage,
	vehicleCargoType, // 0 Industry 1 Business Index
	vehicleCargoPlayer,
	vehicleCargoAction // 0 - Buy,  1 - Sell
};

enum e_cloths {
	cl_sid,
	cl_object,
	Float:cl_x,
	Float:cl_y,
	Float:cl_z,
	Float:cl_rx,
	Float:cl_ry,
	Float:cl_rz,
	Float:cl_scalex,
	Float:cl_scaley,
	Float:cl_scalez,
	cl_bone,
	cl_slot,
	cl_equip,
	cl_mc1,
	cl_mc2,
	cl_name[32]
};

enum ecrate {
    cOn,
	cObject,
	Float:cX,
	Float:cY,
	Float:cZ,
	cID,
	cOwned,
	STREAMER_TAG_3D_TEXT_LABEL:clabel
}

enum systemE {
	vehicleCounts[3], // 0 - Server, 1 - Player, 2 - Admin
	reportSystem,
	helpmeSystem,
	OOCStatus,
}

enum eadvert
{
    ad_owner,
    ad_id,
    ad_time,
    ad_type,
	ad_text[128],
}

enum EMERGENCY_CALL
{
	callCaller,
	callSituation[64],
	callLocation[32],
	callTrace[32],
	callDateTime,
	callType[10],
	callNumb
}

/*enum arrestE
{
	arrestSuspect,
	arrestOfficer,
	arrestDate[64],
	arrestLocation[64],
	arrestTime,
	bool:arrestTaken
}*/

enum e_md {
	bool:mExist,
	Float:mX,
	Float:mY,
	Float:mZ,
	mInt,
	mWorld,
	mID,

	mObject,
	mTimer,
};

// ตัวแปรหลัก


new
    szString[128],
	szQuery[256],
	XLQuery[512],
    CoreVehicles[MAX_VEHICLES][coreVehicles],
    AdvertData[MAX_AD_QUEUE][eadvert],
    vehicleVariables[MAX_DYNAMIC_VEHICLES][vehicleE],
    HouseInfo[MAX_HOUSES][houseE],
    ATMInfo[MAX_ATMS][atmE],
    EntranceData[MAX_ENTRANCES][entranceE],
	GarageData[MAX_GARAGE][garageE],
    HouseInteriors[MAX_INTERIORS][houseinteriorE],
    AdminSpawnedVehicles[MAX_ADMIN_VEHICLES],
    playerData[MAX_PLAYERS][E_PLAYER_DATA],
	
	PlayerDrug[MAX_PLAYERS][MAX_PLAYER_DRUG_PACKAGE][e_Drug],
	VehicleDrug[MAX_PLAYER_VEHICLES][MAX_VEHICLE_DRUG_PACKAGE][e_Drug],
	ItemDrug[MAX_ITEM_DRUG][e_Drug],
	
   	BoomboxData[MAX_PLAYERS][boomboxData],
   	CallInfo[MAX_EMERGENCY_CALL][EMERGENCY_CALL],
   	//ToLastCallSlot = 0,
   	//ArrestInfo[MAX_ARREST][arrestE],
   	//ToLastArrestSlot = 0,
    CarData[MAX_PLAYER_VEHICLES][E_CAR_DATA],
    CarPlace[MAX_PLAYER_VEHICLES][MAX_CAR_WEAPONS][cp_e],
    PlayerAttachWeapon[MAX_PLAYERS][MAX_ATTACH_WEAPON][paw_e],
    MealDrop[MAX_PLAYERS][e_md],
	spikeVariables[MAX_SPIKES][spikeE],

    ClothingData[MAX_PLAYERS][MAX_CLOTHES][e_cloths],
    //ToyData[MAX_PLAYERS][MAX_TOY_OBJECT][e_toys],
    CrateInfo[MAX_CRATE][ecrate],
    WareHouseInfo[MAX_WAREHOUSE][warehouseE],
    BizInfo[MAX_BIZ][ebiz],
    characterData[MAX_PLAYERS][5][charData],
    PlayerFlags:player_bf[MAX_PLAYERS],
    DamageData[MAX_PLAYERS][MAX_DAMAGES][damagedata],
    FactionData[MAX_FACTIONS][factionData],
    FactionRanks[MAX_FACTIONS][20][32],
    FactionSkins[MAX_FACTIONS][MAX_FACTION_TYPE_SKINS],
    systemVariables[systemE],
    // Fix Time
	ghour = 0,
	gminute = 0,
	gsecond = 0,
	timeshift = 0,
	shifthour = 0
;


// CARGO SHIP
#define NUM_SHIP_ATTACHMENTS 9
#define NUM_SHIP_ROUTE_POINTS 8
#define SPEED_CARGOSHIP  20

new gShipAttachmentModelIds[NUM_SHIP_ATTACHMENTS] = {
5166,
5167,
5156,
5157,
5165,
3724,
5154,
3724,
5155
};

new Float:gShipAttachmentPos[NUM_SHIP_ATTACHMENTS][6] = {
{0.000000,0.000000,0.000000,0.000000,0.000000,0.000000},
{-107.499977,8.080001,2.000000,0.000000,0.000000,0.000000},
{-55.660057,8.040000,5.699993,0.000000,0.000000,0.049999},
{53.039920,8.200004,11.849996,0.000000,0.000000,0.000000},
{0.000000,0.000000,0.000000,0.000000,0.000000,0.000000},
{5.000000,10.000000,24.000000,0.000000,0.000000,-180.000000},
{-32.000000,8.000000,10.000000,0.000000,0.000000,0.000000},
{-74.000000,8.560012,24.000000,0.000000,0.000000,0.000000},
{-126.000000,8.000000,15.000000,0.000000,0.000000,0.000000}
};

new Float:gShipRoutePoints[NUM_SHIP_ROUTE_POINTS][6] = {
{2829.915283, -2482.376464, 3.769995, 0.000000,   0.000000, -90.000000},
{2829.915283, -2843.347167, 3.769994, 0.000000, 0.000000, -90.000000},
{3248.907226, -2978.197998, 3.769994, 0.000000, 0.000000, -9.799991},
{3283.973876, -3070.623535, 3.769994, 0.000000, 0.000000, -9.799991},
{3356.869140, -2824.702880, 3.769994, 0.000000, 0.000000, 3.400008},
{3306.186035, -2767.182373, 3.769994, 0.000000, 0.000000, 105.200027},
{3529.560546, -2100.971435, 3.769994, 0.000000, 0.000000, 168.300140},
{2994.928222, -2480.779541, 4.028370, 0.000000, 0.000000, -90.000000}
};

new gMainShipObjectId;
new gShipDeparture;
//new gShipBoard;
new gShipRamp1, gShipRamp2;
new gShipTextLine1;
new gShipTextLine2;
new gShipTextLine3;

new gShipsAttachments[NUM_SHIP_ATTACHMENTS];
new gShipCurrentPoint = 1; // current route point the ship is at. We start at route 1

new gShipTime;

// Graffiti System

enum graff_E
{
	graffcreator[MAX_PLAYER_NAME+1],
	graffname[60],
	Float:Xpos,Float:Ypos,Float:Zpos,
	Float:XYpos,Float:YYpos,Float:ZYpos,
	graffmodel,
	grafffont[24],
	//Local Data
	graffObject,
}
new graff_Info[MAX_GRAFFITI][graff_E];

// WEAPON DROP

//=================//
enum dData
{
	DropID,
    DropGunAmmount[2],//ModelID & Bullets
    Float:DropGunPosX,
    Float:DropGunPosY,
    Float:DropGunPosZ,
    DropLicense,
    DropObj,
    //STREAMER_TAG_3D_TEXT_LABEL:DropLabel,
    DropTimer,
    DropSaving,
};
new GunInfo[MAX_DROP_ITEMS][dData];
//=================//
new GunObjectIDs[200] ={

   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

// Courier

new carryCrate[MAX_PLAYERS];


new HouseEntered[MAX_PLAYERS];
new BizEntered[MAX_PLAYERS];
new GarageEntered[MAX_PLAYERS];

new RoadBlocks[MAX_PLAYERS][10];

// Sirens
new Siren[MAX_VEHICLES];
new SirenObject[MAX_VEHICLES];


//Dynamic areas:
new ImpoundLotArea;

/*// POOL SYSTEM

enum poolBall
{
	bObject,
	bExisting
}

new
	PlayingPool[MAX_PLAYERS],
	PoolCamera[MAX_PLAYERS],
	UsingChalk[MAX_PLAYERS],
	PoolScore[MAX_PLAYERS],
	Float:AimAngle[MAX_PLAYERS][2],
	AimObject,
	PoolStarted,
	PoolAimer = -1,
	PoolLastShooter = -1,
	PoolLastScore,
	PoolBall[16][poolBall],
	Text:PoolTD[4],
	Float:PoolPower,
	PoolTimer_,
	PoolDir;

// POOL SYSTEM*/

enum compPriceE
{
    compID,
    compPrice
};

new const Component[][compPriceE]={
{1000,400},
{1001,550},
{1002,200},
{1003,250},
{1004,100},
{1005,150},
{1006,80},
{1007,500},
{1008,500},
{1010,1000},
{1011,220},
{1012,250},
{1013,100},
{1014,400},
{1015,500},
{1016,200},
{1018,400},
{1019,300},
{1020,250},
{1021,200},
{1022,150},
{1023,350},
{1024,50},
{1025,1000},
{1027,480},
{1028,770},
{1029,680},
{1030,370},
{1032,170},
{1033,120},
{1034,790},
{1035,150},
{1037,690},
{1038,190},
{1039,390},
{1040,500},
{1043,500},
{1044,500},
{1045,510},
{1046,710},
{1049,810},
{1050,620},
{1051,670},
{1052,530},
{1053,130},
{1054,210},
{1055,230},
{1058,620},
{1059,720},
{1060,530},
{1061,180},
{1062,520},
{1063,430},
{1064,830},
{1065,850},
{1066,750},
{1067,250},
{1068,200},
{1071,550},
{1072,450},
{1073,1100},
{1074,1030},
{1075,980},
{1076,1560},
{1077,1620},
{1078,1200},
{1079,1030},
{1080,900},
{1081,1230},
{1082,820},
{1083,1560},
{1084,1350},
{1085,770},
{1087,1500},
{1088,150},
{1089,650},
{1091,100},
{1092,750},
{1094,450},
{1096,1000},
{1097,620},
{1098,1140},
{1099,1000},
{1100,940},
{1101,780},
{1102,830},
{1103,3250},
{1104,1610},
{1105,1540},
{1107,780},
{1109,1610},
{1110,1540},
{1113,3340},
{1114,3250},
{1115,2130},
{1116,2050},
{1117,2040},
{1120,780},
{1121,940},
{1123,860},
{1124,780},
{1125,1120},
{1126,3340},
{1127,3250},
{1128,3340},
{1129,1650},
{1130,3380},
{1131,3290},
{1132,1590},
{1135,1500},
{1136,1000},
{1137,800},
{1138,580},
{1139,470},
{1140,870},
{1141,980},
{1143,150},
{1145,100},
{1146,490},
{1147,600},
{1148,890},
{1149,1000},
{1150,1090},
{1151,840},
{1152,910},
{1153,1200},
{1154,1030},
{1155,1030},
{1156,920},
{1157,930},
{1158,550},
{1159,1050},
{1160,1050},
{1161,950},
{1162,650},
{1163,450},
{1164,550},
{1165,850},
{1166,950},
{1167,850},
{1168,950},
{1169,970},
{1170,880},
{1171,990},
{1172,900},
{1173,950},
{1174,1000},
{1175,1000},
{1176,900},
{1177,900},
{1178,2050},
{1179,2150},
{1180,2130},
{1181,2050},
{1182,2130},
{1183,2040},
{1184,2150},
{1185,2040},
{1186,2095},
{1187,2175},
{1188,2080},
{1189,2200},
{1190,1200},
{1191,1040},
{1192,940},
{1193,1100}
};

enum carmodE
{
    carmodName[16],
    Float:carmodX,
    Float:carmodY,
    Float:carmodZ
};

new const CarModingType[][carmodE] = {
	{"Spoiler",435.131134,-1294.205322,14.991717}, // 439.729034,-1301.680786,15.053193
	{"Hood",443.911743,-1300.434936,17.590143},
	{"Roof",444.050933,-1298.404785,17.270915},
	{"Side skirts",436.656738,-1301.559082,14.946612},
	{"Lamps",444.308593,-1300.461059,15.841529},
	{"Nitro",435.131134,-1294.205322,14.991717},
	{"Exhaust",437.189208,-1292.348144,14.372162},
	{"Wheels",436.504364,-1298.758300,14.665670},
	{"XM Radio",444.378692,-1297.051391,14.839973},
	{"Hydraulics",441.439239,-1301.580566,14.592674},
	{"Front Bumper",443.863677,-1300.346679,14.286822},
	{"Rear Bumper",434.656799,-1296.568725,14.443280},
	{"Right Vent",441.627014,-1302.406860,17.886425},
	{"Left Vent",444.337402,-1298.160888,17.639688},
	{"PaintJobs",444.378692,-1297.051391,14.839973},
	{"Remove",435.131134,-1294.205322,14.991717}
};

enum idleInfo {
	Float:iX,
	Float:iY,
	Float:iZ,
	aAmount
};
new IdleInfo[MAX_PLAYERS][idleInfo];

new 
	bool:g_ServerRestart;
	//g_RestartTime;

new 
	Text:g_ServerRestartCount;

// Auto Door

//new Text:poolTextdraws[MAX_PLAYERS][4];

// SACF
new sacf_om; // Outside Main
new sacf_omTimer;
new bool:sacf_omOpenned;

new sacf_im; // Inside Main
new sacf_imTimer;
new bool:sacf_imOpenned;

new sacf_fdL;
new sacf_fdR;
new sacf_fdTimer;
new bool:sacf_fdOpenned;

new sacf_is1;
new sacf_is1Timer;
new sacf_is1Openned;

new sacf_is2;
new sacf_is2Timer;
new sacf_is2Openned;
// Auto Door

new Text:LSRP_LOGO;

// ตัวแปรผู้เล่น
new Float:EffectDrugs[MAX_PLAYERS];
new Float:EffectDrugAmount[MAX_PLAYERS];
new Timer:EffectDrugs_Timer[MAX_PLAYERS];
new bool:SufferDrugs[MAX_PLAYERS char]; // ลงแดง
new AddictDrugs[MAX_PLAYERS];
new Timer:AddictTimer[MAX_PLAYERS];
//new ToyData[MAX_PLAYERS][MAX_TOY_OBJECT];
new TazerCount[MAX_PLAYERS];

// Graffiti System
//new	GraffiObj[MAX_PLAYERS];
new GraffiModel[MAX_PLAYERS];
//new Float:GraffiPos[MAX_PLAYERS][6];
new GraffiName[MAX_PLAYERS][60 char];
new GraffiFont[MAX_PLAYERS][24 char];

new sprayammount[MAX_PLAYERS];
//new spraytimerx[MAX_PLAYERS];
new spraytimer[MAX_PLAYERS];
new sprayammountch[MAX_PLAYERS];
//new spraysound[MAX_PLAYERS];

new resprayTimer[MAX_PLAYERS];

new CurrentHoldingWeapon[MAX_PLAYERS];

new HireRequester[MAX_PLAYERS];
new JustCasinoed[MAX_PLAYERS];
//Taxi variables
new bool:TaxiDuty[MAX_PLAYERS char],
	TaxiFare[MAX_PLAYERS char],
	bool:TaxiStart[MAX_PLAYERS char],
	TaxiMoney[MAX_PLAYERS],
	TaxiMade[MAX_PLAYERS];
//Taxi variables


new
	bool:TazerActive[MAX_PLAYERS char],
	bool:BeanbagActive[MAX_PLAYERS char],
	bool:IsAFK[ MAX_PLAYERS char]
;

//new FriskApprove[MAX_PLAYERS];

new fish_timer[MAX_PLAYERS];

new AFKTimer[MAX_PLAYERS];
new AFKCount[MAX_PLAYERS];

new grantboombox[MAX_PLAYERS]; //เปลี่ยนสถานี Boombox
new grantbuild[MAX_PLAYERS]; //แก้ไขเฟอร์นิเจอร์
/*new TestObject[MAX_PLAYERS];
new videdit[MAX_PLAYERS];*/
new bool:deleyNop[MAX_PLAYERS char];

new PlayerPlaceCar[MAX_PLAYERS];
new PlayerPlaceSlot[MAX_PLAYERS];

new MealHolding[MAX_PLAYERS];
new MealObject[MAX_PLAYERS];

new Firehold[MAX_PLAYERS];

new FishingPlace[MAX_PLAYERS];
new FishingBoat[MAX_PLAYERS];

new Float:gPlayerCheckpointX[MAX_PLAYERS];
new Float:gPlayerCheckpointY[MAX_PLAYERS];
new Float:gPlayerCheckpointZ[MAX_PLAYERS];

new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerCheckpointValue[MAX_PLAYERS];
new Float:player_vehicle_speed[MAX_PLAYERS];

new nearHouse_var[MAX_PLAYERS];
new nearBiz_var[MAX_PLAYERS];

new
	pToAccept[MAX_PLAYERS],
	vToAccept[MAX_PLAYERS],
	tToAccept[MAX_PLAYERS],
	prToAccept[MAX_PLAYERS]
;

new
	serviceComp[MAX_PLAYERS],
	serviced[MAX_PLAYERS],
	serviceTowtruck[MAX_PLAYERS],
	serviceCustomer[MAX_PLAYERS],
	RepairTime[MAX_PLAYERS char]
;
// FARMER
new far_start[MAX_PLAYERS];
new far_veh[MAX_PLAYERS];
new far_place[MAX_PLAYERS]; // 0 - Flint County, 1 - Blueberry

// HOTWIRE
new h_vid[MAX_PLAYERS];
new h_times[MAX_PLAYERS];
new h_wid[MAX_PLAYERS];
new h_word[MAX_PLAYERS][16];
new h_score[MAX_PLAYERS];
new h_failed[MAX_PLAYERS];
// SELFIE
/*new Float:SelDegree[MAX_PLAYERS];
new Float:SelAngle[MAX_PLAYERS];
const Float: Radius = 1.4; //do not edit this
const Float: Speed  = 1.25; //do not edit this
const Float: Height = 1.0; // do not edit this
new Float:lX[MAX_PLAYERS];
new Float:lY[MAX_PLAYERS];
new Float:lZ[MAX_PLAYERS];*/
//================================================

new PlayerText:AdminSpectate[MAX_PLAYERS];
new usingAdminSpectate[MAX_PLAYERS char];

// Poker System
//new PlayerText:PlayerPokerUI[MAX_PLAYERS][MAX_PLAYERPOKERUI];

// New Poker 2
new PlayerText:PlayerPokerUI[MAX_PLAYERS][MAX_PLAYER_POKER_UI];


new PlayerText:emptytext[MAX_PLAYERS];

// CAR Modding Shop System 12/18/2017 03:43 AM
new PlayerText:TD_CarModing[MAX_PLAYERS];

new ConvoID[MAX_PLAYERS];
new loginValidTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];

new bool:isKNOmode[MAX_PLAYERS char];
new knotime[MAX_PLAYERS];

new bool:isDeathmode[MAX_PLAYERS char];
new bool:isInjuredmode[MAX_PLAYERS char];
new deathtime[MAX_PLAYERS];
//new STREAMER_TAG_3D_TEXT_LABEL:DamageLabel[MAX_PLAYERS];
new LegDelay[MAX_PLAYERS];

new DamageSync[MAX_PLAYERS];
new Timer:IssueTimer[MAX_PLAYERS];

new cooldowns[MAX_PLAYERS][MAX_COOLDOWNS];
new cooldowns_expire[MAX_PLAYERS][MAX_COOLDOWNS];

new cl_selected[MAX_PLAYERS];
new cl_dataslot[MAX_PLAYERS][MAX_CLOTHES];

new cl_buying[MAX_PLAYERS];
new cl_buyingpslot[MAX_PLAYERS];

// Player Textdraw
//new PlayerText:emptytext[MAX_PLAYERS];
//new PlayerText:jail_timeleft[MAX_PLAYERS];
new PlayerText:pPT_Radio[MAX_PLAYERS];
new PlayerText:pPT_Footer[MAX_PLAYERS];

// Restaurant Textdraw
new bool:PRestaurantOpening[MAX_PLAYERS];
new Text:TD_Restaurant[3];
new PlayerText:PTD_Restaurant[MAX_PLAYERS][9];

new Text:TD_BLINDFOLD;

new bool:PCoverOpening[MAX_PLAYERS];
new PCoverColor[MAX_PLAYERS];
new Text:TD_PhoneCover[10];
new PlayerText:TD_PhoneCoverModel[MAX_PLAYERS];
// Car GUI SYSTEM
new bool:PCarOpening[MAX_PLAYERS];
new PCarPage[MAX_PLAYERS];
new PCarType[MAX_PLAYERS];
new PlayerText:PCARTextHeader[MAX_PLAYERS];
new PlayerText:PCARTextSlot[MAX_PLAYERS][6];
new PlayerText:PCARTextName[MAX_PLAYERS][6];
new PlayerText:PCARTextPrice[MAX_PLAYERS][6];
new PlayerText:PCARTextLeft[MAX_PLAYERS];
new PlayerText:PCARTextRight[MAX_PLAYERS];

// Color Selection
new
	PlayerText:ColorSelectText[MAX_PLAYERS],
	PlayerText:ColorSelectLeft[MAX_PLAYERS],
	PlayerText:ColorSelectRight[MAX_PLAYERS],
	PlayerText:ColorSelection[MAX_PLAYERS][8];

new
	PlayerText:ColorSelectText2[MAX_PLAYERS],
	PlayerText:ColorSelectLeft2[MAX_PLAYERS],
	PlayerText:ColorSelectRight2[MAX_PLAYERS],
	PlayerText:ColorSelection2[MAX_PLAYERS][8];

new bool:ColorSelectShow[MAX_PLAYERS char],
    ColorSelectItem[MAX_PLAYERS],
	ColorSelectPage[MAX_PLAYERS],
	ColorSelectPages[MAX_PLAYERS],
	ColorSelect[MAX_PLAYERS] = -1,
	ColorSelectListener[MAX_PLAYERS][8];

new bool:ColorSelectShow2[MAX_PLAYERS char],
    ColorSelectItem2[MAX_PLAYERS],
	ColorSelectPage2[MAX_PLAYERS],
	ColorSelectPages2[MAX_PLAYERS],
	ColorSelect2[MAX_PLAYERS] = -1,
	ColorSelectListener2[MAX_PLAYERS][8];

// Dealership
new VDealerSelectCatalog[MAX_PLAYERS];
new VDealerData[MAX_PLAYERS][6][5];

new VDealerSetting[MAX_PLAYERS char];
new VDealerVehicle[MAX_PLAYERS];
new VDealerBiz[MAX_PLAYERS];
new VDealerLock[MAX_PLAYERS];
new VDealerImmob[MAX_PLAYERS];
new VDealerAlarm[MAX_PLAYERS];
new VDealerPrice[MAX_PLAYERS];
new VDealerColor[MAX_PLAYERS][2];
new bool:VDealerXM[MAX_PLAYERS char];
new bool:VDealerFaction[MAX_PLAYERS char];

new bool:VCarModingSetting[MAX_PLAYERS char];
new VCarModingBiz[MAX_PLAYERS];
new VCarModingType[MAX_PLAYERS];
new VCarModingTypeMax[MAX_PLAYERS];
new VCarModingCompRow[MAX_PLAYERS];
new VCarModingVehicle[MAX_PLAYERS];

new
    VCarModingComponent[MAX_PLAYERS][ZVEH_MAX_COMPONENTS],
    VCarModingComponent_count[MAX_PLAYERS];

// ================== [ NEW ATM SYSTEM ] ============================
new PlayerText:TDEditor_ATM[MAX_PLAYERS][38];
new atm_tnumber[MAX_PLAYERS][12 char];
new atm_page[MAX_PLAYERS];
new bool:atm_auth[MAX_PLAYERS char];
new bool:atm_opening[MAX_PLAYERS char];
// ================== [ NEW ATM SYSTEM ] ============================

// เวลา
// เซิร์ฟเวอร์
//new servertime[MAX_TIME];
new Tax = 0;
new TaxValue = 0;
new adTick[MAX_PLAYERS];
new Spray_Pickup[4];
new DollaPickup[2];
new NewsPickup;
new FarmerPickup;
new MechanicPickup;
new PrisonHeal;

new ArrestPickup;
new ArrestPickup2;
new ArrestPickup3;

new Menu:Guide, Menu:GuideJob1, Menu:GuideJob2;

// Vehicle Rental
new CarRent[10];
new CarDMV[4];

// LSPD DOOR
new LSPDDoorObject[4];
new LSPDDoor[2];

// Prison Cell
/*new PrisonCellA[20];
new bool:CellA_Status[20];

new PrisonCellB[20];
new bool:CellB_Status[20];

new PrisonCellC[20];
new bool:CellC_Status[20];*/

//new multiplyexp = 1;
//new levelexp = 3;
//new levelcost = 25000;

new Timer:nosTimer[MAX_PLAYERS];

// รถ
//new bool:exist_playervehicle[MAX_PLAYER_VEHICLES+1];
// ผู้เล่น
new RentCarKey[MAX_PLAYERS];

new gLastCar[MAX_PLAYERS];
new gPassengerCar[MAX_PLAYERS];

#define MAX_CHARSELECT_TEXTDRAW		(90)
#define MAX_CHARSELECT 				(5)

new PlayerText:charselectPlayerTextDraw[MAX_PLAYERS][MAX_CHARSELECT_TEXTDRAW];
new charselectPlayerTextDrawID[MAX_PLAYERS][MAX_CHARSELECT];
new charselectPlayerTextDrawCount[MAX_PLAYERS];

new
	Logger:pveh_log;

native WP_Hash(buffer[], len, const str[]);

new baseurl[] = "http://la-rp.site/download/models";

//-------------------------------------------------

public OnPlayerRequestDownload(playerid, type, crc)
{
	new fullurl[256+1];
	new dlfilename[64+1];
	new foundfilename=0;
	
	if(!IsPlayerConnected(playerid)) return 0;
	
	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE) {
		foundfilename = FindTextureFileNameFromCRC(crc,dlfilename,64);
	}
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE) {
	    foundfilename = FindModelFileNameFromCRC(crc,dlfilename,64);
	}

	if(foundfilename) {
	    format(fullurl,256,"%s/%s",baseurl,dlfilename);
	    RedirectDownload(playerid,fullurl);
	}
	
	return 0;
}

//-------------------------------------------------

public OnGameModeInit()
{
	OnGameModeInitEx();

	#if defined main_OnGameModeInit
		return main_OnGameModeInit();
	#else
		return 1;
	#endif
}
#if defined _ALS_OnGameModeInit
	#undef OnGameModeInit
#else
	#define _ALS_OnGameModeInit
#endif
 
#define OnGameModeInit main_OnGameModeInit
#if defined main_OnGameModeInit
	forward main_OnGameModeInit();
#endif

#include "includes/system/phone.pwn"
// #include "includes/system/sampvoice.pwn"

main()
{
	mysql_log(WARNING | ERROR);


	print("\n----------------------------------    ");
	print(" Gamemode by Cross Sign Scripter (JohnnY)");
	print(" 	  Los Angeles RolePlay			   ");
	print("----------------------------------\n    ");
	SQL_Connect();
    SetupIndustry();

	mysql_tquery(dbCon, "SELECT * FROM `factions`", "Faction_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `faction_warehouse`", "Warehouse_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `business`", "Biz_Load", "");
    //mysql_tquery(dbCon, "SELECT * FROM `signal_tower`", "Signal_Load", "");
    mysql_tquery(dbCon, "SELECT * FROM `vehicles`", "Vehicle_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `houses` ORDER BY `id` ASC", "House_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `ateles`", "DynamicTele_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `industry` ORDER BY `industryid` ASC", "Industry_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `movedoors`", "Movedoor_Load", "");
	//mysql_tquery(dbCon, "SELECT * FROM `movedoors` WHERE `name` LIKE '%a cell%' ORDER BY `movedoors`.`id` ASC", "Movedoor_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `atms`", "ATM_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `entrance`", "Entrance_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `garage`", "Garage_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `cctvs`", "LoadCCTVs", "");
	mysql_tquery(dbCon, "SELECT * FROM `streetsign`", "StreetSign_Load", "");
	
	mysql_tquery(dbCon, "SELECT * FROM `drug_package`", "DRUG_PACKAGE_OBJECT", "");
	WasteDeAMXersTime();
}

SetupIndustry()
{
	for(new i=0;i!=MAX_INDUSTRY;i++)
	{
		if(i > 26) {
	    	IndustryData[i][in_type] = 2;
		}
		else if(i > 15) {
		    IndustryData[i][in_type] = 1;
		}
		else IndustryData[i][in_type] = 0;

		IndustryData[i][in_close] = 0;
	}
}

/*HoldingKey(playerid, key)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if(keys & key == key)
		return true;
	return false;
}*/

/*lowercase(string[])
{
    for(new i = 0, j = strlen(string); i != j; ++i)
    {
        string[i] = tolower(string[i]);
    }
    return string;
}*/

/*uppercase(string[])
{
    new i = 0;
    while ((string[i] = toupper(string[i]))) ++i;
}*/

stock ReplaceString(const str[], const regexp[], const fmt[], dest[], size = sizeof dest) 
{ 
    new Regex:r = Regex_New(regexp); 

    if (r) 
    { 
        Regex_Replace(str, r, fmt, dest, MATCH_DEFAULT, size); 

        Regex_Delete(r); 
    } 
} 

ClearGameTextColor(const string[])
{
	new aaa[256];
	ReplaceString(string, "~.~", "+", aaa);
	strreplace(aaa, "+", "");
	return aaa;
}

Float:ConvertFloatToOneDP(Float:value)
{
	new Float:result;
	new tempInt;
	result = value * 10;
	tempInt = floatround(result);
	result = float(tempInt);
	result = result / 10;

	result += 0.0000001;
	
	return result;
}

OnGameModeInitEx()
{
	//Timers;

	/*SetTimer("OwnerVehicleTimer", 1000, false); 
	SetTimer("ServerVehicleTimer", 120000, false); 
	SetTimer("CheckPlayerUNS", 10000, false); 
	SetTimer("PlayerTimer", 1000, false); 
	SetTimer("OtherTimer", 1000, false); 
	SetTimer("SpectatorTimer", 2000, false); 
	SetTimer("SyncUpTimer", 60000, false); 
	SetTimer("DrugTimer", 900000, false); 
	SetTimer("ProductionTimer", 300000, false); 
	SetTimer("PayCheckTimer", 60000, false); 
	SetTimer("BeforePayDay", 5000, false); 
	SetTimer("ServerTimeSAMP", 1000, false); 
	SetTimer("ServerVehicleFuelTimer", 120000, false); 
	SetTimer("TestTimer", 1000, false);*/

	print("Preparing the gamemode, please wait...");
	InitiateGamemode();
}

InitiateGamemode()
{
	pveh_log = CreateLog("player/vehicle");

	Streamer_SetTickRate(60);
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 1000);

	//SetTimer("PlayerTimerSAMP", 1000, false); // Set a timer of 1000 miliseconds (1 second)

	//Profiler_Start();
	sacf_fdR = CreateDynamicObject(986, 131.29810, 1960.25110, 20.10000,   0.00000, 0.00000, 0.00000); // ขวา เรือนจำ ทางเข้า - ส่งนักโทษ
	sacf_fdL = CreateDynamicObject(985, 139.28490, 1960.26000, 20.10000,   0.00000, 0.00000, 0.00000); // ซ้าย
	sacf_is1 = CreateDynamicObject(2990, 263.15341, 1943.36963, 20.53020,   0.00000, 0.00000, 90.00000);
	sacf_is2 = CreateDynamicObject(2990, 288.93246, 1799.27673, 20.53020,   0.00000, 0.00000, -50.00000);
	
	sacf_om = CreateDynamicObject(2990, 285.46521, 1821.08679, 20.61800,   0.00000, 0.00000, 90.00000); // Outside Main
	sacf_im = CreateDynamicObject(2990, 268.26059, 1848.28589, 20.61800,   0.00000, 0.00000, 0.00000); // Inside Main
	
	// Close Garage Offline

	CreateDynamicObject(971, 1026, -1029.48, 31.7, 0, 0, 0);
	CreateDynamicObject(971, 1043, -1026, 31.8, 0, 0, 0);
	CreateDynamicObject(971, 2071.6001, -1831.8, 13, 0, 0, 90);
	CreateDynamicObject(971, -100.1, 1111.46, 21.1, 0, 0, 0);
	CreateDynamicObject(971, -361, 1194.2, 18.245, 0, 90, 0);
	CreateDynamicObject(971, 2386.1001, 1043.4, 10, 0, 0, 0);
	CreateDynamicObject(971, -1904.6, 277.70001, 43, 0, 0, 0);
	CreateDynamicObject(971, -1935.5, 239.2, 33.7, 0, 0, 0);
	CreateDynamicObject(971, -2716.1001, 216.8, 3.8, 0, 0, 90);

	// House Interior
	
	//2 Room house
	CreateDynamicObject(14755, -79.76019, 1375.42126, 1079.20508,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, -80.68050, 1382.76636, 1077.94690,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14756, -48.48457, 1458.49207, 1086.61377,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, -47.69450, 1457.73669, 1084.60840,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CreateDynamicObject(14748, 41.38534, 1440.95935, 1083.41199,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 46.51220, 1438.62793, 1081.40894,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house & two story
	CreateDynamicObject(14750, 11.03331, 1314.19482, 1088.33093,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 6.96000, 1304.85022, 1081.82263,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & two story

	//4 Room house & two story
	CreateDynamicObject(14754, 85.66241, 1280.42249, 1082.82739,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 82.19940, 1271.31091, 1078.86523,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story

	//4 Room house & two story (More expensive)
	CreateDynamicObject(14758, 155.35648, 1409.17212, 1087.30750,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 154.62061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(1506, 156.12061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story (More expensive)

	//3 Room house
	CreateDynamicObject(14714, 289.94763, 1509.23218, 1079.22510,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 289.17270, 1501.17688, 1077.42126,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//3 Room house
	CreateDynamicObject(14700, 329.35416, 1516.43005, 1086.31531,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 328.56949, 1512.34375, 1084.81165,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//2 Room house
	CreateDynamicObject(14711, 382.01254, 1498.42480, 1080.69409,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 391.08289, 1505.09924, 1079.09644,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CreateDynamicObject(14710, 366.74869, 1381.78625, 1080.31787,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 376.35840, 1377.81616, 1078.80579,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house
	CreateDynamicObject(14701, 448.67178, 1363.61853, 1083.28748,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 447.54770, 1353.26965, 1081.21570,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//4 Room house & 2 story
	CreateDynamicObject(14703, 506.95187, 1366.91003, 1080.07947,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 508.85950, 1353.45654, 1075.78345,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(14722, 510.94690, 1363.57544, 1078.67737,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14724, 510.99319, 1363.60266, 1078.67590,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14715, 510.92340, 1363.51001, 1078.70215,   0.00000, 0.00000, 0.00000); //Stairs
	CreateDynamicObject(14723, 510.91971, 1363.70605, 1078.84021,   0.00000, 0.00000, 0.00000); //Stairs
	//4 Room house & 2 story

	//3 Room house & strip
	CreateDynamicObject(14736, 755.25836, 1419.45801, 1102.58032,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(14738, 753.20190, 1415.76831, 1104.04199,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 744.47321, 1411.75403, 1101.42236,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & strip

	//2 Room house
	CreateDynamicObject(14713, 289.97849, 1289.53406, 1079.25183,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 294.37189, 1284.51709, 1077.43616,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14718, 188.29053, 1293.25732, 1081.13208,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 190.53439, 1288.35291, 1081.13416,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14712, 287.90448, 1249.52588, 1083.25146,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 290.09601, 1241.95874, 1081.70117,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CreateDynamicObject(14709, 245.01108, 1155.45520, 1081.63599,   0.00000, 0.00000, 0.00000); //Interior
	//2 Room house

	//3 Room house
	CreateDynamicObject(14735, 342.67169, 1081.66528, 1082.87891,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 325.45471, 1074.26355, 1081.25549,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14708, 200.11450, 1119.56934, 1083.97693,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14706, 277.86502, 1069.62952, 1085.65552,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CreateDynamicObject(14707, 275.53461, 992.44232, 1087.27319,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//2 Room house (Small)
	CreateDynamicObject(15029, 2265.87500, -1122.75220, 1049.62781,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2260.34570, -1121.88794, 1047.87683,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house (Small)

	//1 Room house (Small)
	CreateDynamicObject(15031, 2281.78003, -1121.99768, 1049.92285,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2284.04028, -1126.90771, 1049.91650,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Small)

	//3 Room house
	CreateDynamicObject(15055, 2374.03271, -1102.76465, 1049.87073,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1504, 2369.77124, -1094.13245, 1048.61951,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//1 Room house (Very Small)
	CreateDynamicObject(15042, 2318.45508, -1230.66187, 1048.40820,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1501, 2312.65112, -1231.38013, 1046.40540,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Very Small)

	//2 Room house (Small)
	CreateDynamicObject(15053, 2243.98071, -1024.30042, 1048.01758,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2243.21191, -1027.78198, 1046.76501,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house (Small)

	//3 Room house
	CreateDynamicObject(15054, 2260.93286, -1251.45007, 1051.05786,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2273.48657, -1243.43054, 1047.59131,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//4 Room house
	CreateDynamicObject(15041, 2158.54736, -1220.96997, 1050.11694,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2149.11328, -1216.07935, 1048.11365,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house

	//2 Room house
	CreateDynamicObject(15046, 2364.22144, -1082.74231, 1048.01733,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1498, 2363.47827, -1075.46021, 1046.76379,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//4 Room house (Rich man big)
	CreateDynamicObject(15048, 2364.55444, -1179.42346, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(15059, 2364.56909, -1179.41418, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1506, 2372.00317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	CreateDynamicObject(1506, 2373.50317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house (Rich man big)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14859, 245.20708, 321.97745, 1000.59143,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14865, 269.22012, 322.22049, 998.14349,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(14889, 363.51450, 304.98868, 998.14722,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CreateDynamicObject(15033, 2177.35718, -1069.85181, 1049.47449,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2190.13110, -1074.29504, 1049.47742,   0.00000, 0.00000, 90.00000); //Door
	//Only one room (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CreateDynamicObject(15034, 2254.38940, -1108.71704, 1049.87268,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(1535, 2254.09644, -1113.33044, 1048.11633,   0.00000, 0.00000, 0.00000); //Door
	//Only two rooms (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CreateDynamicObject(15030, 2293.09204, -1092.09229, 1049.62341,   0.00000, 0.00000, 0.00000); //Interior
	CreateDynamicObject(2904, 2298.69800, -1093.70605, 1048.97290,   0.00000, 0.00000, 90.00000); //Door
	CreateDynamicObject(1535, 2298.64600, -1094.47375, 1047.87195,   0.00000, 0.00000, 90.00000); //Door
	//Only two rooms (TINY for las colinas)

	//bareswitch

	//Interior #2
	//244.411987,305.032989,999.148437 Int 1
	CreateDynamicObject(14859, 246.66409, 303.83591, 900.14838,	0.0, 0.0, 0.0);
	//Interior #3
	//271.884979,306.631988,999.148437 Int 2
	CreateDynamicObject(14865, 270.19531, 305.64063, 900.14844,	0.0, 0.0, 0.0);
	//Interior #4
	//302.180999,300.722991,999.148437 Int 4
	CreateDynamicObject(14876, 304.82401, 307.62119, 903.21881,	0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14877, 306.45721, 313.68350, 900.21881,	0.00000, 0.00000, 0.00000);

	//Interior #5
	//346.870025,309.259033,999.155700 Int 6
	CreateDynamicObject(14889, 346.78729, 305.80679, 900.39838,	0.0, 0.0, 0.0);
	//Interior #6
	//450.25781, 516.39063, 902.06250 Int 12
	CreateDynamicObject(14479, 450.25781, 516.39063, 902.06250,	0.0, 0.0, 0.0);
	//Interior #8 NO bareswitch
	//2465.7524,-1698.3430,1013.5152 Int 2

	//Interior #13 Interior 6
	CreateDynamicObject(14738, 752.39838, 1439.96094, 1004.32031, 0, 0.00000, 0.0);
	CreateDynamicObject(14736, 754.35938, 1443.60938, 1002.82031, 0, 0.00000, 0.0);

	//Interior #16 No bareswitch
	//2530.7578, -1683.1094, 1016.2422 Int 1

	//Interior #28 Interior 7
	CreateDynamicObject(14707, 238.04691, 1035.88281, 987.60162,   0.00000, 0.00000, 0.00000);

	//Interior #34 Interior 12
	CreateDynamicObject(15059, 2315.48438, -1144.89063, 953.28912,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(15048, 2315.48438, -1144.89063, 953.28912,   0.00000, 0.00000, 0.00000);

	//Interior #35 Interior 5
	CreateDynamicObject(15034, 2233.24219, -1111.08594, 951.62500,   0.00000, 0.00000, 0.00000);

	//Interior #36 Interior 6
	CreateDynamicObject(15041, 2192.39844, -1213.01563, 950.02338,   0.00000, 0.00000, 0.00000);

	//Interior #37 Interior 10
	CreateDynamicObject(15054, 2258.26563, -1219.25000, 950.02338,   0.00000, 0.00000, 0.00000);

	//Interior #38 Interior 6
 	CreateDynamicObject(15042, 2313.84375, -1212.73438, 950.02338,   0.00000, 0.00000, 0.00000);

	//Interior #40
	//2329.92236, -1081.51941, 949.27338 Int 6
	CreateDynamicObject(15046, 2333.07031, -1085.00781, 949.27338,   0.0, 0.0, 0.0);
	//Interior #41
	//2239.38403, -1085.65100, 949.27338 Int 2
	CreateDynamicObject(15053, 2237.53125, -1085.48438, 949.27338,   0.00000, 0.00000, 180.00000);

	//Interior #42 Interior 1
	CreateDynamicObject(15033, 2206.16406, -1072.56250, 949.47662,   0.00000, 0.00000, 0.00000);

	//Interior #43
	//2327.12964, -1017.66370, 953.14838 Int 9
	CreateDynamicObject(15058, 2321.61719, -1018.10162, 953.14838,   0.0, 0.0, 0.0);
	
   /* Audio_CreateTCPServer(7777);
    Audio_SetPack("default_pack");*/

	// TOLL
	/* Richman */
	CreateDynamicObject( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
	CreateDynamicObject( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
	CreateDynamicObject( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
	CreateDynamicObject( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
	CreateDynamicObject( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );
	L_a_TollObject[0] = CreateDynamicObject( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	CreateDynamicObject( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
	CreateDynamicObject( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
	CreateDynamicObject( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );
	L_a_TollObject[1] = CreateDynamicObject( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
	/* End of Richman */

	/* Flint */
	CreateDynamicObject( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
	CreateDynamicObject( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
	L_a_TollObject[2] = CreateDynamicObject( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 35.889751434326, -1526.0096435547, 4.2410612106323, 0.000000, 0.000000, 270.67565917969, -1 );
	CreateDynamicObject( 966, 67.093727111816, -1536.8275146484, 3.9910612106323, 0.000000, 0.000000, 87.337799072266, -1 );
	L_a_TollObject[3] = CreateDynamicObject( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
	CreateDynamicObject( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
	CreateDynamicObject( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
	CreateDynamicObject( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
	CreateDynamicObject( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
	CreateDynamicObject( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
	CreateDynamicObject( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
	/* End of Flint */

	/* LV */
	CreateDynamicObject( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
	CreateDynamicObject( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
	CreateDynamicObject( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
	CreateDynamicObject( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
	CreateDynamicObject( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
	CreateDynamicObject( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
	CreateDynamicObject( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
	CreateDynamicObject( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
	L_a_TollObject[4] = CreateDynamicObject( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
	L_a_TollObject[5] = CreateDynamicObject( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
	/* End of LV */

	/* Blueberry right */
	CreateDynamicObject(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
	CreateDynamicObject(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CreateDynamicObject(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CreateDynamicObject(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);
	/* Blueberry right */

	/* Blueberry left */
	CreateDynamicObject(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
	CreateDynamicObject(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CreateDynamicObject(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CreateDynamicObject(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);
	/* Blueberry right */


	// Los Santos Police Department
	LSPDDoorObject[0] = CreateDynamicObject(1569, 253.2095, 107.5746, 1002.2392, 0.0000, 0.0000, 90.0000);
	LSPDDoorObject[1] = CreateDynamicObject(1569, 253.1822, 110.5749, 1002.2392, 0.0000, 0.0000, -90.0000);
    LSPDDoor[0] = 0;

	LSPDDoorObject[2] = CreateDynamicObject(1569, 239.5697, 116.1145, 1002.2392, 0.0000, 0.0000, 90.0000);
	LSPDDoorObject[3] = CreateDynamicObject(1569, 239.5820, 119.1149, 1002.2392, 0.0000, 0.0000, -90.0000);
	LSPDDoor[1] = 0;
	

	for(new i=0;i!=sizeof(PrisonDepartment);i++) {
		PrisonDepartment[i][pCell][0] = CreateDynamicObject(19302, 172.126998, -184.266006, 343.170013, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][1] = CreateDynamicObject(19302, 167.406997, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][2] = CreateDynamicObject(19302, 162.636993, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][3] = CreateDynamicObject(19302, 157.876998, -184.195999, 343.170013, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][4] = CreateDynamicObject(19302, 171.957000, -200.386001, 343.170013, 0.000000, 0.000000, -1.100059, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][5] = CreateDynamicObject(19302, 167.177001, -200.373992, 343.170013, 0.000000, 0.000000, 0.299939, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][6] = CreateDynamicObject(19302, 162.406005, -200.382003, 343.170013, 0.000000, 0.000000, 0.199937, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][7] = CreateDynamicObject(19302, 157.645996, -200.399002, 343.170013, 0.000000, 0.000000, 0.699935, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][8] = CreateDynamicObject(19302, 171.606994, -184.225997, 347.140014, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][9] = CreateDynamicObject(19302, 167.417007, -184.195999, 347.170013, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][10] = CreateDynamicObject(19302, 162.667007, -184.166000, 347.160003, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][11] = CreateDynamicObject(19302, 157.878997, -184.216003, 347.160003, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][12] = CreateDynamicObject(19302, 153.136993, -184.233001, 347.160003, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][13] = CreateDynamicObject(19302, 148.347000, -184.216003, 347.160003, 0.000000, 0.000000, 180.000000, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][14] = CreateDynamicObject(19302, 171.356002, -200.404006, 347.149993, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][15] = CreateDynamicObject(19302, 167.195999, -200.378997, 347.160003, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][16] = CreateDynamicObject(19302, 162.416000, -200.395996, 347.160003, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][17] = CreateDynamicObject(19302, 157.645996, -200.412002, 347.160003, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][18] = CreateDynamicObject(19302, 152.856002, -200.408996, 347.160003, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);
		PrisonDepartment[i][pCell][19] = CreateDynamicObject(19302, 148.106002, -200.425994, 347.160003, 0.000000, 0.000000, 0.199938, 201 + i, 1, -1, 200.0);

        for(new x=0;x!=20;x++) {
	        PrisonDepartment[i][pPrisoner][x] = INVALID_PLAYER_ID;
	        PrisonDepartment[i][pPrisoner2][x] = INVALID_PLAYER_ID;
        }
	}
/*	PrisonCellA[0] = CreateDynamicObject(19302, 172.126998, -184.266006, 343.170013, 0.000000, 0.000000, 180.000000, 201, 1, -1, 200.0);
	PrisonCellA[1] = CreateDynamicObject(19302, 167.406997, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 201, 1, -1, 200.0);
	PrisonCellA[2] = CreateDynamicObject(19302, 162.636993, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 201, 1, -1, 200.0);
	PrisonCellA[3] = CreateDynamicObject(19302, 157.876998, -184.195999, 343.170013, 0.000000, 0.000000, 180.000000, 201, 1, -1, 200.0);
	PrisonCellA[4] = CreateDynamicObject(19302, 171.957000, -200.386001, 343.170013, 0.000000, 0.000000, -1.100059, 201, 1, -1, 200.0);
	PrisonCellA[5] = CreateDynamicObject(19302, 167.177001, -200.373992, 343.170013, 0.000000, 0.000000, 0.299939, 201, 1, -1, 200.0);
	PrisonCellA[6] = CreateDynamicObject(19302, 162.406005, -200.382003, 343.170013, 0.000000, 0.000000, 0.199937, 201, 1, -1, 200.0);
	PrisonCellA[7] = CreateDynamicObject(19302, 157.645996, -200.399002, 343.170013, 0.000000, 0.000000, 0.699935, 201, 1, -1, 200.0);
	PrisonCellA[8] = CreateDynamicObject(19302, 171.606994, -184.225997, 347.140014, 0.000000, 0.000000, 180.000000, 201, 1, -1, 200.0);
	PrisonCellA[9] = CreateDynamicObject(19302, 167.417007, -184.195999, 347.170013, 0.000000, 0.000000, -179.600006, 201, 1, -1, 200.0);
	PrisonCellA[10] = CreateDynamicObject(19302, 162.667007, -184.166000, 347.160003, 0.000000, 0.000000, -179.600006, 201, 1, -1, 200.0);
	PrisonCellA[11] = CreateDynamicObject(19302, 157.878997, -184.216003, 347.160003, 0.000000, 0.000000, -179.100006, 201, 1, -1, 200.0);
	PrisonCellA[12] = CreateDynamicObject(19302, 153.136993, -184.233001, 347.160003, 0.000000, 0.000000, -179.600006, 201, 1, -1, 200.0);
	PrisonCellA[13] = CreateDynamicObject(19302, 148.347000, -184.216003, 347.160003, 0.000000, 0.000000, -179.600006, 201, 1, -1, 200.0);
	PrisonCellA[14] = CreateDynamicObject(19302, 171.356002, -200.404006, 347.149993, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);
	PrisonCellA[15] = CreateDynamicObject(19302, 167.195999, -200.378997, 347.160003, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);
	PrisonCellA[16] = CreateDynamicObject(19302, 162.416000, -200.395996, 347.160003, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);
	PrisonCellA[17] = CreateDynamicObject(19302, 157.645996, -200.412002, 347.160003, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);
	PrisonCellA[18] = CreateDynamicObject(19302, 152.856002, -200.408996, 347.160003, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);
	PrisonCellA[19] = CreateDynamicObject(19302, 148.106002, -200.425994, 347.160003, 0.000000, 0.000000, 0.199938, 201, 1, -1, 200.0);

	PrisonCellB[0] = CreateDynamicObject(19302, 172.126998, -184.266006, 343.170013, 0.000000, 0.000000, 180.000000, 202, 1, -1, 200.0);
	PrisonCellB[1] = CreateDynamicObject(19302, 167.406997, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 202, 1, -1, 200.0);
	PrisonCellB[2] = CreateDynamicObject(19302, 162.636993, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 202, 1, -1, 200.0);
	PrisonCellB[3] = CreateDynamicObject(19302, 157.876998, -184.195999, 343.170013, 0.000000, 0.000000, 180.000000, 202, 1, -1, 200.0);
	PrisonCellB[4] = CreateDynamicObject(19302, 171.957000, -200.386001, 343.170013, 0.000000, 0.000000, -1.100059, 202, 1, -1, 200.0);
	PrisonCellB[5] = CreateDynamicObject(19302, 167.177001, -200.373992, 343.170013, 0.000000, 0.000000, 0.299939, 202, 1, -1, 200.0);
	PrisonCellB[6] = CreateDynamicObject(19302, 162.406005, -200.382003, 343.170013, 0.000000, 0.000000, 0.199937, 202, 1, -1, 200.0);
	PrisonCellB[7] = CreateDynamicObject(19302, 157.645996, -200.399002, 343.170013, 0.000000, 0.000000, 0.699935, 202, 1, -1, 200.0);
	PrisonCellB[8] = CreateDynamicObject(19302, 171.606994, -184.225997, 347.140014, 0.000000, 0.000000, 180.000000, 202, 1, -1, 200.0);
	PrisonCellB[9] = CreateDynamicObject(19302, 167.417007, -184.195999, 347.170013, 0.000000, 0.000000, -179.600006, 202, 1, -1, 200.0);
	PrisonCellB[10] = CreateDynamicObject(19302, 162.667007, -184.166000, 347.160003, 0.000000, 0.000000, -179.600006, 202, 1, -1, 200.0);
	PrisonCellB[11] = CreateDynamicObject(19302, 157.878997, -184.216003, 347.160003, 0.000000, 0.000000, -179.100006, 202, 1, -1, 200.0);
	PrisonCellB[12] = CreateDynamicObject(19302, 153.136993, -184.233001, 347.160003, 0.000000, 0.000000, -179.600006, 202, 1, -1, 200.0);
	PrisonCellB[13] = CreateDynamicObject(19302, 148.347000, -184.216003, 347.160003, 0.000000, 0.000000, -179.600006, 202, 1, -1, 200.0);
	PrisonCellB[14] = CreateDynamicObject(19302, 171.356002, -200.404006, 347.149993, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);
	PrisonCellB[15] = CreateDynamicObject(19302, 167.195999, -200.378997, 347.160003, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);
	PrisonCellB[16] = CreateDynamicObject(19302, 162.416000, -200.395996, 347.160003, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);
	PrisonCellB[17] = CreateDynamicObject(19302, 157.645996, -200.412002, 347.160003, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);
	PrisonCellB[18] = CreateDynamicObject(19302, 152.856002, -200.408996, 347.160003, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);
	PrisonCellB[19] = CreateDynamicObject(19302, 148.106002, -200.425994, 347.160003, 0.000000, 0.000000, 0.199938, 202, 1, -1, 200.0);

	PrisonCellC[0] = CreateDynamicObject(19302, 172.126998, -184.266006, 343.170013, 0.000000, 0.000000, 180.000000, 203, 1, -1, 200.0);
	PrisonCellC[1] = CreateDynamicObject(19302, 167.406997, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 203, 1, -1, 200.0);
	PrisonCellC[2] = CreateDynamicObject(19302, 162.636993, -184.205993, 343.170013, 0.000000, 0.000000, 180.000000, 203, 1, -1, 200.0);
	PrisonCellC[3] = CreateDynamicObject(19302, 157.876998, -184.195999, 343.170013, 0.000000, 0.000000, 180.000000, 203, 1, -1, 200.0);
	PrisonCellC[4] = CreateDynamicObject(19302, 171.957000, -200.386001, 343.170013, 0.000000, 0.000000, -1.100059, 203, 1, -1, 200.0);
	PrisonCellC[5] = CreateDynamicObject(19302, 167.177001, -200.373992, 343.170013, 0.000000, 0.000000, 0.299939, 203, 1, -1, 200.0);
	PrisonCellC[6] = CreateDynamicObject(19302, 162.406005, -200.382003, 343.170013, 0.000000, 0.000000, 0.199937, 203, 1, -1, 200.0);
	PrisonCellC[7] = CreateDynamicObject(19302, 157.645996, -200.399002, 343.170013, 0.000000, 0.000000, 0.699935, 203, 1, -1, 200.0);
	PrisonCellC[8] = CreateDynamicObject(19302, 171.606994, -184.225997, 347.140014, 0.000000, 0.000000, 180.000000, 203, 1, -1, 200.0);
	PrisonCellC[9] = CreateDynamicObject(19302, 167.417007, -184.195999, 347.170013, 0.000000, 0.000000, -179.600006, 203, 1, -1, 200.0);
	PrisonCellC[10] = CreateDynamicObject(19302, 162.667007, -184.166000, 347.160003, 0.000000, 0.000000, -179.600006, 203, 1, -1, 200.0);
	PrisonCellC[11] = CreateDynamicObject(19302, 157.878997, -184.216003, 347.160003, 0.000000, 0.000000, -179.100006, 203, 1, -1, 200.0);
	PrisonCellC[12] = CreateDynamicObject(19302, 153.136993, -184.233001, 347.160003, 0.000000, 0.000000, -179.600006, 203, 1, -1, 200.0);
	PrisonCellC[13] = CreateDynamicObject(19302, 148.347000, -184.216003, 347.160003, 0.000000, 0.000000, -179.600006, 203, 1, -1, 200.0);
	PrisonCellC[14] = CreateDynamicObject(19302, 171.356002, -200.404006, 347.149993, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
	PrisonCellC[15] = CreateDynamicObject(19302, 167.195999, -200.378997, 347.160003, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
	PrisonCellC[16] = CreateDynamicObject(19302, 162.416000, -200.395996, 347.160003, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
	PrisonCellC[17] = CreateDynamicObject(19302, 157.645996, -200.412002, 347.160003, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
	PrisonCellC[18] = CreateDynamicObject(19302, 152.856002, -200.408996, 347.160003, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
	PrisonCellC[19] = CreateDynamicObject(19302, 148.106002, -200.425994, 347.160003, 0.000000, 0.000000, 0.199938, 203, 1, -1, 200.0);
*/
   // MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

    SendRconCommand("hostname "SERVER_NAME"");
    SendRconCommand("weburl "SERVER_SITE"");
    SendRconCommand("mapname de Monte Carol");
    SetNameTagDrawDistance(25.0);
	SetGameModeText(SERVER_MODE);
	gShipTime = gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	SetWorldTime(ghour);
	printf("WorldTime 2 Bugged Test");

	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	CreateGuideMenus();
	//BlockGarages();
	LoadGraffitis();
	//CreateBuilding();
	Create3DText();
	CreateGlobalTextDraw();
	AddVehicleRental();
	AddVehicleDMV();
	
	//Poker System
	//InitPokerTables();

	// Pool System
	//LoadPool();

	//AddHousesInteriors();

	// Entrances and exits ends
    Spray_Pickup[0] = CreateDynamicPickup(1239, 14, 2073.2979,-1831.1228,13.5469,0); // Pay & Spray
    Spray_Pickup[1] = CreateDynamicPickup(1239, 14, 1024.9756,-1030.7930,32.0257,0); // Pay & Spray
    Spray_Pickup[2] = CreateDynamicPickup(1239, 14, 488.3819,-1733.0563,11.1752,0); // Pay & Spray
    Spray_Pickup[3] = CreateDynamicPickup(1239, 14, 719.8940,-464.8272,16.3359,0); // Pay & Spray
    
	DollaPickup[0] = CreateDynamicPickup(1274, 2, 2316.2456,-12.6722,26.7422);
	DollaPickup[1] = CreateDynamicPickup(1274, 2, 362.8532,173.7626,1008.3828);
	//DollaPickup[2] = CreateDynamicPickup(1274, 2, 362.8532,173.7626,1008.3828);

	//news pickup
	NewsPickup = CreateDynamicPickup(1239, 2, 1663.4677,-2332.1433,-2.6797);
	FarmerPickup = CreateDynamicPickup(1239, 2, -382.5893,-1426.3422,26.2217);
	MechanicPickup = CreateDynamicPickup(1239, 2, 88.4620,-165.0116,2.5938);
	//Los Santos Police Department
	CreateDynamicPickup(1314, 23, 1554.4711,-1675.6097,16.1953, 0, 0); // LSPD
	CreateDynamicPickup(1314, 23, 1481.0662,-1771.3069,18.7958, 0, 0); // City Hall
	CreateDynamicPickup(1314, 23, 1173.1841,-1323.3143,15.3952, 0, 0); // Hospital All Saint

	//CreateDynamicPickup(1314, 23, 533.4344,-1812.9364,6.5781, 0, 0); // LSPD Santa Maria
	//CreateDynamicPickup(1314, 23, 2317.3894,-1366.0944,24.1246, 0, 0); // LSPD 54th Street Community Police Station

 	CreateDynamicPickup(1314, 23, 1297.3621,-1125.5790,23.8150, 0, 0); // LSPD West Station
	CreateDynamicPickup(1314, 23, 2138.1533,-2170.9658,13.5544, 0, 0); // LSPD Harbor Station

	CreateDynamicPickup(1314, 23, 628.5346,-571.8113,17.1738, 0, 0); // SASD
    CreateDynamicPickup(1314, 23, 123.3456,1918.5425,19.9584, 0, 0); // SACF
	CreateDynamicPickup(1314, 23, 1570.4418,-1337.4415,16.4844, 0, 0); // NEWS
    
    PrisonHeal = CreateDynamicPickup(1240, 23, 163.1412,-191.5341,342.9205, -1, -1); // SAFC Pickup


    ArrestPickup = CreateDynamicPickup(1239, 23, 227.4311,114.2517,999.0156, -1, 10);
    ArrestPickup2 = CreateDynamicPickup(1239, 23, 1600.2627,-1654.7090,-40.5941, -1, 5); //SASD
	ArrestPickup3 = CreateDynamicPickup(1239, 23, 268.9580,1353.6163,10.5859, -1, 0); //Vinewood

	//TOLLS
	L_a_Pickup[0] = CreateDynamicPickup(1239, 14, 607.9684, -1194.2866, 19.0043, 0); //  Richman 1
	L_a_Pickup[1] = CreateDynamicPickup(1239, 14, 623.9500, -1183.9774, 19.2260, 0); // Richman 2
	L_a_Pickup[2] = CreateDynamicPickup(1239, 14, 39.7039, -1522.9891, 6.1995, 0); // Flint 1
	L_a_Pickup[3] = CreateDynamicPickup(1239, 14, 62.7378, -1539.9891, 6.0639, 0); // Flint 2
	L_a_Pickup[4] = CreateDynamicPickup(1239, 14, 1795.9447, 704.2550, 15.0006, 0); // LV 1
	L_a_Pickup[5] = CreateDynamicPickup(1239, 14, 1778.9886, 702.6728, 15.2574, 0); // LV 2
	L_a_Pickup[6] = CreateDynamicPickup(1239, 14, 612.53070, 346.59592, 17.92614, 0); // BlueberryR 1
	L_a_Pickup[7] = CreateDynamicPickup(1239, 14, 604.37152, 346.88141, 17.92614, 0); // BlueberryR 2
	L_a_Pickup[8] = CreateDynamicPickup(1239, 14, -195.2768,252.2416,12.0781, 0); // BlueberryL 1
	L_a_Pickup[9] = CreateDynamicPickup(1239, 14, -199.5153,260.3405,12.0781, 0); // BlueberryL 2

	// CARGO SHIP
	gMainShipObjectId = CreateObject(5160, gShipRoutePoints[0][0], gShipRoutePoints[0][1], gShipRoutePoints[0][2], gShipRoutePoints[0][3], gShipRoutePoints[0][4], gShipRoutePoints[0][5]);

	gShipRamp1 = CreateDynamicObject(3069, 2810.9445, -2387.2998, 12.6255, -20.4000, 0.0000, -90.3000); //d9_ramp
	gShipRamp2 = CreateDynamicObject(3069, 2810.6875, -2436.9775, 12.6250, -20.4000, 0.0000, -90.3000); //d9_ramp

	new x=0;
	while(x != NUM_SHIP_ATTACHMENTS) {
	    gShipsAttachments[x] = CreateObject(gShipAttachmentModelIds[x], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachObjectToObject(gShipsAttachments[x], gMainShipObjectId,
					gShipAttachmentPos[x][0],
					gShipAttachmentPos[x][1],
					gShipAttachmentPos[x][2],
					gShipAttachmentPos[x][3],
					gShipAttachmentPos[x][4],
					gShipAttachmentPos[x][5]);
		x++;
	}

	//printf("Object id %d Attach %d", gMainShipObjectId, gShipsAttachments[0]);

	//SetTimer("RampsClosed", 2400000, 0); // 2400000
	//SetTimer("SpeedoVehicle", 1000, true);
	//SetTimer("CheckPlayerIdle", 1000, true);
	//SetTimer("CheckPlayerAFK", 1000, true);

	CreateDynamicObject(3077, 2809.9897, -2392.7746, 12.6257, 0.0000, 0.0000, 90.3998);

	gShipTextLine1 = CreateDynamicObject(19482, 2809.9184, -2392.7329, 15.2910, 0.0000, 0.0000, 180.0000);
    SetDynamicObjectMaterialText(gShipTextLine1, 0, "OCEAN DOCKS SHIP", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

    //gShipTime = gettime();

 	new gShipHour, gShipMinute, gShipSecond, ShipString[24];
    TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);
	
	//printf("Ship start go in %2d:%2d", gShipHour, gShipMinute);

	gShipTextLine2 = CreateDynamicObject(19482, 2809.9284, -2392.7329, 14.6810, 0.0000, 0.0000, 180.0000);
	format(ShipString, sizeof(ShipString), "ออกเดินทาง: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
	SetDynamicObjectMaterialText(gShipTextLine2, 0, ShipString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
	gShipTextLine3 = CreateDynamicObject(19482, 2809.9184, -2392.7329, 14.2610, 0.0000, 0.0000, 180.0000);
	format(ShipString, sizeof(ShipString), "กลับมาเทียบท่า: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
	SetDynamicObjectMaterialText(gShipTextLine3, 0, ShipString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

	//printf("Ship come back in %2d:%2d", gShipHour, gShipMinute);
	/*Streamer_TickRate(60);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 500);*/


    WasteDeAMXersTime();
    systemVariables[OOCStatus]=1;

	//Areas:
	ImpoundLotArea = CreateDynamicCircle(2191.1421,-2216.4744,13.5469, 0, 0);

	for(new i = 0; i != MAX_EMERGENCY_CALL; i++) {
		CallInfo[i][callCaller] = INVALID_PLAYER_ID;
		CallInfo[i][callDateTime] = 0;
	}
		
	return 1;
}

public OnGameModeExit()
{
    print("Exiting the gamemode, please wait...");

	DestroyLog(pveh_log);

    DestroyObject(gMainShipObjectId);
    new x=0;
	while(x != NUM_SHIP_ATTACHMENTS) {
	    DestroyObject(gShipsAttachments[x]);
		x++;
	}
	//-------------------------------------------------
	foreach(new i : sv_houses) UpdateHouseInfo(i);
	foreach(new i : sv_business) UpdateBizInfo(i);
	foreach(new i : sv_playercar) Car_SaveID(i);
	return 1;
}

// ฟังชั่นหลัก

WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

SQL_Connect() {

	dbCon = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_PASSWORD, SQL_DATABASE);

	if (mysql_errno(dbCon)) printf("[SQL] Connection to \"%s\" failed! Please check the connection settings...\a", SQL_HOSTNAME);
	else printf("[SQL] Connection to \"%s\" passed!", SQL_HOSTNAME);

	return true;
}

SQL_AccountCheck(playerid)
{
	new
	    query[512];

 	mysql_format(dbCon, query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%e'", ReturnPlayerName(playerid));
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_CHECK_ACCOUNT);
}

SQL_ForceLogin(playerid)
{
	format(XLQuery, sizeof(XLQuery), "SELECT *, UNIX_TIMESTAMP(DonateExpired) as DonateUnix FROM `characters` WHERE `ID` = %d", playerData[playerid][pID]);
	//printf(XLQuery);
    mysql_tquery(dbCon, XLQuery, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);
}
/*
SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	mysql_format(dbCon, query, sizeof(query), "SELECT * FROM `accounts` WHERE `Username` = '%e' AND `Password` = '%s'", ReturnPlayerName(playerid), buffer);
    mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}*/

SQL_LogConnection(playerid)
{
	new query[128];
	format(query,sizeof(query),"INSERT INTO logs_connection (userid,name,ip) VALUES ('%d','%s','%s')", playerData[playerid][pUserid], ReturnPlayerName(playerid),playerData[playerid][pIP]);
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOG_CON);

}

SQL_LogPlayerDeath(playerid,killerid,reason)
{

	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	ReturnCharacterName(playerid,name);
	if(SQL_IsLogged(killerid)) ReturnCharacterName(killerid,oname);

	new clean_name[MAX_PLAYER_NAME], clean_oname[MAX_PLAYER_NAME];
	mysql_escape_string(name,clean_name);
	if(SQL_IsLogged(playerid)) { mysql_escape_string(oname,clean_oname); } else { format(clean_oname,sizeof(clean_oname),"No-one"); }

	new str[128];
	format(str,sizeof(str),"INSERT INTO logs_death (killer,victim,reason) VALUES ('%s','%s','%d')",clean_oname,clean_name,reason);

    if(killerid != INVALID_PLAYER_ID) {
		SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s kill %s by %s", ReturnPlayerName(killerid), ReturnPlayerName(playerid), ReturnWeaponName(reason));
	}
	
	mysql_query(dbCon, str);

}

SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_escape_string(string, entry);
	return entry;
}

SQL_IsLogged(playerid) {
	if(playerid != INVALID_PLAYER_ID && bf_get(player_bf[playerid], IS_LOGGED) && IsPlayerConnected(playerid)) return 1;
	return 0;
}

// valstr fix by Slice
/*Int32(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);
}*/

IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	if(targetid == INVALID_PLAYER_ID || !IsPlayerConnected(targetid)) {
		return 0;
	}

	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid) && playerData[targetid][pSpectating] == INVALID_PLAYER_ID) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

IsPlayerNearHood(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 1.5, fX, fY, fZ);
}

IsPlayerNearBoot(playerid, vehicleid, Float:dist = 1.5)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, dist, fX, fY, fZ);
}

IsPlayerNearDriverDoor(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleDriverDoor(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 2.0, fX, fY, fZ);
}

IsVehicleInRangeOfPoint(vehicleid, Float: radius, Float:x, Float:y, Float:z) {

	new
		Float:Floats[6];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	Floats[3] = (Floats[0] -x);
	Floats[4] = (Floats[1] -y);
	Floats[5] = (Floats[2] -z);
	if (((Floats[3] < radius) && (Floats[3] > -radius)) && ((Floats[4] < radius) && (Floats[4] > -radius)) && ((Floats[5] < radius) && (Floats[5] > -radius)))
		return 1;
	return 0;
}

/*GetVehicleFromBehind(vehicleid)
{
	new
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}*/

/*GetXYFrontVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
    new Float:a;
    GetVehiclePos(vehicleid, q, w, a);
    GetVehicleZAngle(vehicleid, a);
    q += (distance * -floatsin(-a+180, degrees));
    w += (distance * -floatcos(-a+180, degrees));
}

GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=0.5)
{
    new Float:vehicleSize[3], Float:vehiclePos[3];
    GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
    GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
    x = vehiclePos[0];
    y = vehiclePos[1];
    z = vehiclePos[2];
    return 1;
}
*/
GetVehicleDriverDoor(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);
	//ล้อหน้าซ้าย
	/*x = pos[3] + (((pos[0]/2)+1.0) * -floatsin(-pos[6]+135, degrees));
	y = pos[4] + (((pos[0]/2)+1.0) * -floatcos(-pos[6]+135, degrees));*/

	//ประตูคนขับ 1.0 150
	//
	switch(GetVehicleModel(vehicleid))
	{
	    case 431, 407, 408, 437:
	    {
		 	x = pos[3] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[1]))) * floatsin(-pos[6]+315.0+floatsqroot(pos[1] + pos[1]), degrees));
			y = pos[4] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[1]))) * floatcos(-pos[6]+315.0+floatsqroot(pos[1] + pos[1]), degrees));
	    }
	    default:
	    {
			x = pos[3] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[0]))) * floatsin(-pos[6]+300.0+floatsqroot(pos[1] + pos[1]), degrees));
			y = pos[4] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[0]))) * floatcos(-pos[6]+300.0+floatsqroot(pos[1] + pos[1]), degrees));
	    }
	}

	z = pos[5];

	return 1;
}

/*CMD:vset(playerid, params[])
{
	new vid;

	if (sscanf(params, "dff", vid, vvvg, vvvb))
		return SendSyntaxMessage(playerid, "/vset [vehicleid] [vvvg] [vvvb]");

	new Float:x, Float:y, Float:z;
    GetVehicleDriverDoor(vid, x, y, z);
    SetPlayerCheckpoint(playerid, x, y, z, 1.0);

	return 1;
}*/

GetVehicleBootInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/2.3)) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/2.3)) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}
/*
GetVehicleHoodInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/1.5)) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/1.5)) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}*/

GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

GetVehicleInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (-0.25 * floatsin(-pos[6], degrees));
	y = pos[4] - (-0.25 * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
     PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

ConvertTime(&cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1)
{
    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0

    new strii[128];

    if(cty != -1 && (cts/CTM_cty))
    {
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1 && (cts/CTM_ctmo))
    {
        cty = 0; CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1 && (cts/CTM_ctw))
    {
        cty = 0; ctmo = 0; CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1 && (cts/CTM_ctd))
    {
        cty = 0; ctmo = 0; ctw = 0; CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1 && (cts/CTM_cth))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1 && (cts/CTM_ctm))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; ctm = 0;
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}

ConvertTimeTH(&cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1)
{
    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0

    new strii[128];

    if(cty != -1 && (cts/CTM_cty))
    {
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s %d %s %d %s %d %s %d %s %d %s",PLUR(cty,"ปี","ปี"),PLUR(ctmo,"เดือน","เดือน"),PLUR(ctw,"สัปดาห์","สัปดาห์"),PLUR(ctd,"วัน","วัน"),PLUR(cth,"ชั่วโมง","ชั่วโมง"),PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    if(ctmo != -1 && (cts/CTM_ctmo))
    {
        cty = 0; CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s %d %s %d %s %d %s %d %s",PLUR(ctmo,"เดือน","เดือน"),PLUR(ctw,"สัปดาห์","สัปดาห์"),PLUR(ctd,"วัน","วัน"),PLUR(cth,"ชั่วโมง","ชั่วโมง"),PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    if(ctw != -1 && (cts/CTM_ctw))
    {
        cty = 0; ctmo = 0; CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s %d %s %d %s %d %s",PLUR(ctw,"สัปดาห์","สัปดาห์"),PLUR(ctd,"วัน","วัน"),PLUR(cth,"ชั่วโมง","ชั่วโมง"),PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    if(ctd != -1 && (cts/CTM_ctd))
    {
        cty = 0; ctmo = 0; ctw = 0; CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s %d %s %d %s",PLUR(ctd,"วัน","วัน"),PLUR(cth,"ชั่วโมง","ชั่วโมง"),PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    if(cth != -1 && (cts/CTM_cth))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s %d %s",PLUR(cth,"ชั่วโมง","ชั่วโมง"),PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    if(ctm != -1 && (cts/CTM_ctm))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; CT(ctm);
        format(strii, sizeof(strii), "%d %s %d %s",PLUR(ctm,"นาที","นาที"),PLUR(cts,"วินาที","วินาที"));
        return strii;
    }
    cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; ctm = 0;
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"วินาที","วินาที"));
    return strii;
}

ReturnVehicleModelNameEx(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);

	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == ' ') name[i] = '_';

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetWeaponByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 0 && strval(name) <= 43))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrWeaponNames); i ++)
	{
	    if (strfind(g_arrWeaponNames[i], name, true) != -1)
	    {
	        return i;
		}
	}
	return -1;
}

IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192) || (index == 1151));
}

ReturnWeaponName(weaponid)
{
	new
		name[24];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "None";

	else if (weaponid == 30)
	    name = "AK-47";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnWeaponNameEx(weaponid)
{
	new
		name[24];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "Punch";

	else if (weaponid == 30)
	    name = "AK-47";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

GetWeaponPackageName(weaponid)
{
	new
		name[24];

	if (weaponid == 47) {
	    name = "Armour";
	    return name;
	}
	else if (weaponid == 48) {
	    name = "Vehicle Bomb";
	    return name;
	}
	else {

		GetWeaponName(weaponid, name, sizeof(name));

		if (!weaponid)
		    name = "Empty";

		else if (weaponid == 23)
		    name = "Silenced Pistol";

		else if (weaponid == 30)
		    name = "AK47";

        return name;
	}
}
/*
ReturnName(playerid, underscore=1)
{
	new
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    if(bf_get(player_bf[playerid], IS_MASKED)) {
            format(name, sizeof(name), "[Mask %s]", playerData[playerid][pMask_Name]);
        }
        else {
        	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' '; // RP
        }
	}
	return name;
}
*/
ReturnNameEx(playerid)
{
	new
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' '; // RP

	return name;
}

ReturnCharacterName(playerid,formatme[])
{
	new
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

    for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	return format(formatme,MAX_PLAYER_NAME + 1, name);
}

RoleplayName(name[])
{
	new result[MAX_PLAYER_NAME+1];
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' '; // RP
	format(result,MAX_PLAYER_NAME + 1, name);
	return result;
}

ReturnIP(playerid)
{
	new
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ReturnSiteDate()
{
	new date[128];
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(date, sizeof(date), "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	return date;
}

ReturnDate()
{
	new
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnDateTime(type = 0)
{
 	new
	    szDay[64],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch(type) {
		case 0: format(szDay, sizeof(szDay), "%d%s %s %d, %02d:%02d:%02d", date[0], returnOrdinal(date[0]), MonthDay[date[1] - 1], date[2], date[3], date[4], date[5]);
		case 1: format(szDay, sizeof(szDay), "%02d-%02d-%d %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
		case 2: format(szDay, sizeof(szDay), "%s %d %d, %02d:%02d", szMonthDay[date[1] - 1], date[0], date[2], date[3], date[4]);
	}

	return szDay;
}

returnOrdinal(number)
{
	new
	    ordinal[4][3] = { "st", "nd", "rd", "th" }
	;
	number = number < 0 ? -number : number;
	return (((10 < (number % 100) < 14)) ? ordinal[3] : (0 < (number % 10) < 4) ? ordinal[((number % 10) - 1)] : ordinal[3]);
}

Float:GetVehicleDataHealth(modelid)
{
	if(modelid >= 400) {
		if(VehicleData[modelid - 400][c_maxhp]) return VehicleData[modelid - 400][c_maxhp];
	}
	return 1000.0;
}

Float:GetVehicleDataFuel(modelid)
{
	if(modelid >= 400) {
		if(VehicleData[modelid - 400][c_maxfuel]) return VehicleData[modelid - 400][c_maxfuel];
	}
	return 100.0;
}

Float:GetVehicleDataFuelRate(modelid)
{
	if(modelid >= 400) {
		if(VehicleData[modelid - 400][c_fuelrate] > 0.0 && VehicleData[modelid - 400][c_fuelrate] <= 20.0) return VehicleData[modelid - 400][c_fuelrate];
	}
	return 10.0;
}

GetVehicleDataArmourCost(modelid)
{
	if(modelid >= 400) {
		if(VehicleData[modelid - 400][c_price]) return floatround(float(VehicleData[modelid - 400][c_price]) / 10000.00, floatround_round);
	}
	return 1;
}

KickEx(playerid)
{
	if (bf_get(player_bf[playerid], IS_PLAYER_KICKED)) {
		bf_off(player_bf[playerid], IS_PLAYER_KICKED);
		Kick(playerid);
		return 0;
	}

	bf_on(player_bf[playerid], IS_PLAYER_KICKED);

	SetTimerEx("KickTimer", 800, 0, "i", playerid);
	return 1;
}

ClearChatBox(playerid) for (new i = 0; i < 100; i ++) SendClientMessage(playerid, -1, "");


forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (IsPlayerConnected(playerid) && bf_get(player_bf[playerid], IS_PLAYER_KICKED)) return Kick(playerid);
	return 1;
}

ProxDetector(playerid, Float:radius, const str[])
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
			{
				SendClientMessage(i, COLOR_FADE1, str);
			}
			else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
			{
				SendClientMessage(i, COLOR_FADE2, str);
			}
			else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
			{
				SendClientMessage(i, COLOR_FADE3, str);
			}
			else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
			{
				SendClientMessage(i, COLOR_FADE4, str);
			}
			else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
			{
				SendClientMessage(i, COLOR_FADE5, str);
			}
		}
	}
	return 1;
}
/*
ProxDetectorC(playerid, color, Float:radius, const str[])
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
			{
				SendClientMessage(i, color, str);
			}
			else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
			{
				SendClientMessage(i, color, str);
			}
			else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
			{
				SendClientMessage(i, color, str);
			}
			else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
			{
				SendClientMessage(i, color, str);
			}
			else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
			{
				SendClientMessage(i, color, str);
			}
		}
	}
	return 1;
}*/

ProxDetectorOOC(playerid, Float:radius, const str[])
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && !bf_get(player_bf[i], TOGGLE_LOCALOOC))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
			{
				SendClientMessage(i, COLOR_FADE1, str);
			}
			else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
			{
				SendClientMessage(i, COLOR_FADE2, str);
			}
			else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
			{
				SendClientMessage(i, COLOR_FADE3, str);
			}
			else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
			{
				SendClientMessage(i, COLOR_FADE4, str);
			}
			else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
			{
				SendClientMessage(i, COLOR_FADE5, str);
			}
		}
	}
	return 1;
}

ProxJoinServer(playerid, Float:radius, const str[])
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(playerid == i) continue;

        new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(i, posx, posy, posz);
		new Float:tempposx = (oldposx -posx), Float:tempposy = (oldposy -posy), Float:tempposz = (oldposz -posz);

		if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
		{
			SendClientMessage(i, COLOR_GRAD1, str);
		}
		else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
		{
			SendClientMessage(i, COLOR_GRAD2, str);
		}
		else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
		{
			SendClientMessage(i, COLOR_GRAD3, str);
		}
		else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
		{
			SendClientMessage(i, COLOR_GRAD4, str);
		}
		else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
		{
			SendClientMessage(i, COLOR_GRAD5, str);
		}
		else if (bf_get(player_bf[playerid], TOGGLE_JOIN))
		{
			SendClientMessage(i, COLOR_GRAD1, str);
		}
	}
	return 1;
}

SendRadioMessage(playerid, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {

			if (SQL_IsLogged(i) && playerData[i][pRChannel] == playerData[playerid][pRChannel] && playerData[i][pRSlot] == playerData[playerid][pRSlot])
				SendClientMessage(i, 0xEED77BFF, string);

			/*if(playerData[i][pMole] == playerid)
        	{
        	    strins(string,"[MOLE] ",0, 12);
        	    SendClientMessage(i, 0xEED77BFF, string);
        	}*/
		}
		return 1;
	}
	foreach (new i : Player) {

	    if (SQL_IsLogged(i) && playerData[i][pRChannel] == playerData[playerid][pRChannel] && playerData[i][pRSlot] == playerData[playerid][pRSlot])
 			SendClientMessage(i, 0xEED77BFF, str);

		/*if(playerData[i][pMole] == playerid)
      	{
			format(string, sizeof(string), str);
        	strins(string,"[MOLE] ",0, 12);
        	SendClientMessage(i, 0xEED77BFF, string);
       	}*/
	}
	return 1;
}

SendRadioMessageEx(slot, playerid, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {

			if (SQL_IsLogged(i) && playerData[i][pRChannel] == playerData[playerid][pRChannel] && playerData[i][pRSlot] == slot)
				SendClientMessage(i, 0xEED77BFF, string);

			/*if(playerData[i][pMole] == playerid)
        	{
        	    strins(string,"[MOLE] ",0, 12);
        	    SendClientMessage(i, 0xEED77BFF, string);
        	}*/
		}
		return 1;
	}
	foreach (new i : Player) {

	    if (SQL_IsLogged(i) && playerData[i][pRChannel] == playerData[playerid][pRChannel] && playerData[i][pRSlot] == slot)
 			SendClientMessage(i, 0xEED77BFF, str);

		/*if(playerData[i][pMole] == playerid)
      	{
			format(string, sizeof(string), str);
        	strins(string,"[MOLE] ",0, 12);
        	SendClientMessage(i, 0xEED77BFF, string);
       	}*/
	}
	return 1;
}

SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

SendOOCMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
				if (SQL_IsLogged(i) && !bf_get(player_bf[i], TOGGLE_OOC)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (SQL_IsLogged(i) && !bf_get(player_bf[i], TOGGLE_OOC)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}


SendFactionIDMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pFaction] == factionid && !bf_get(player_bf[i], TOGGLE_FACTION)) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pFaction] == factionid && !bf_get(player_bf[i], TOGGLE_FACTION)) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pJob] == jobid || playerData[i][pSideJob] == jobid) {
		    if(jobid == JOB_TAXI) {
		        if(TaxiDuty{i}) {
		            SendClientMessage(i, color, string);
		        }
		    }
		    else SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pJob] == jobid || playerData[i][pSideJob] == jobid) {
		    if(jobid == JOB_TAXI) {
		        if(TaxiDuty{i}) {
		            SendClientMessage(i, color, str);
		        }
		    }
		    else SendClientMessage(i, color, str);
	}
	return 1;
}

SendFactionMessage(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pFaction] != -1 && GetFactionType(i) == type && !bf_get(player_bf[i], TOGGLE_FACTION)) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (SQL_IsLogged(i) && playerData[i][pFaction] != -1 && GetFactionType(i) == type && !bf_get(player_bf[i], TOGGLE_FACTION)) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}


SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (SQL_IsLogged(i) && playerData[i][pAdmin] >= 1 && !bf_get(player_bf[i], TOGGLE_CHEAT)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (SQL_IsLogged(i) && playerData[i][pAdmin] >= 1 && !bf_get(player_bf[i], TOGGLE_CHEAT)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}


SendGeneralAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (SQL_IsLogged(i) && playerData[i][pAdmin] >= 1 || playerData[i][pTester] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (SQL_IsLogged(i) && playerData[i][pAdmin] >= 1 || playerData[i][pTester] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Warning: Directory \"%s\" doesn't exist.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid)) TogglePlayerControllable(playerid, 1);
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0) hour = hour+24;
	else if (hour > 23) hour = hour-24;
	shifthour = hour;
	return 1;
}

RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		new
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

ShowPlayerFooter(playerid, const string[], time = 5000) {
	if (playerData[playerid][pShowFooter]) {
	    PlayerTextDrawSetString(playerid, pPT_Footer[playerid], "_");
	    PlayerTextDrawHide(playerid, pPT_Footer[playerid]);
		KillTimer(playerData[playerid][pFooterTimer]);
	}

 	PlayerTextDrawSetString(playerid, pPT_Footer[playerid], string);
	PlayerTextDrawShow(playerid, pPT_Footer[playerid]);
	playerData[playerid][pShowFooter] = true;

	if(time != -1)
		playerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, 0, "i", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {
	if(!IsPlayerConnected(playerid))
		return 0;
	
	if (!playerData[playerid][pShowFooter])
	    return 0;

	playerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, pPT_Footer[playerid]);
}

RemoveAlpha(color) {
    return (color & ~0xFF);
}
/*
GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
    if (playerData[playerid][pLocal] != 255)
	{
		if(playerData[playerid][pLocal] == 101) // LSPD
		{
			fX = 1554.4711;
			fY = -1675.6097;
			fZ = 16.1953;
		}
		else if(playerData[playerid][pLocal] == 102) // City Hall
		{
			fX = 1481.0662;
			fY = -1771.306;
			fZ = 18.7958;
		}
		else if(playerData[playerid][pLocal] == 103) // Hospital
		{
			fX = 1173.1841;
			fY = -1323.3143;
			fZ = 15.3952;
		}
		else if(playerData[playerid][pLocal] == 104) // Santa Maria HQ
		{
			fX = 533.4344;
			fY = -1812.9364;
			fZ = 6.5781;
		}
		else if(playerData[playerid][pLocal] == 105) // SASD
		{
			fX = 628.5346;
			fY = -571.8113;
			fZ = 17.1738;
		}
		else
		{
			new i;
			if(HouseEntered[playerid] != -1)
			{
			    
   				i = HouseEntered[playerid];
   				if(HouseInfo[i][hSubid] != -1) // IF ROOM IN APARTMENT
   				{
   				    i = HouseInfo[i][hSubid]; // Enter from Apartment
					fX = HouseInfo[i][hEntranceX];
					fY = HouseInfo[i][hEntranceY];
					fZ = HouseInfo[i][hEntranceZ];
   				}
   				else {
					fX = HouseInfo[i][hEntranceX];
					fY = HouseInfo[i][hEntranceY];
					fZ = HouseInfo[i][hEntranceZ];
				}
			}
			else if(BizEntered[playerid] != -1)
			{
			    i = BizEntered[playerid];
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}
		}
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}*/

GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32];

    if (playerData[playerid][pLocal] != 255)
	{
		if(playerData[playerid][pLocal] == 101)
		{
			fX = 1554.4711;
			fY = -1675.6097;
			fZ = 16.1953;
		}
		else if(playerData[playerid][pLocal] == 102) // City Hall
		{
			fX = 1481.0662;
			fY = -1771.306;
			fZ = 18.7958;
		}
		else if(playerData[playerid][pLocal] == 103) // Hospital
		{
			fX = 1173.1841;
			fY = -1323.3143;
			fZ = 15.3952;
		}
		else if(playerData[playerid][pLocal] == 104) // Santa Maria HQ
		{
			fX = 533.4344;
			fY = -1812.9364;
			fZ = 6.5781;
		}
		else if(playerData[playerid][pLocal] == 105) // SASD
		{
			fX = 628.5346;
			fY = -571.8113;
			fZ = 17.1738;
		}
		else
		{
		    /*for (new i = 0; i != MAX_BIZ; i ++) if (playerData[playerid][pLocal]-LOCAL_BIZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior]) {
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}*/
			new i;
			if(HouseEntered[playerid] != -1)
			{
   				i = HouseEntered[playerid];
   				if(HouseInfo[i][hSubid] != -1) // IF ROOM IN APARTMENT
   				{
   				    i = HouseInfo[i][hSubid]; // Enter from Apartment
					fX = HouseInfo[i][hEntranceX];
					fY = HouseInfo[i][hEntranceY];
					fZ = HouseInfo[i][hEntranceZ];
   				}
   				else {
					fX = HouseInfo[i][hEntranceX];
					fY = HouseInfo[i][hEntranceY];
					fZ = HouseInfo[i][hEntranceZ];
				}
			}
			else if(BizEntered[playerid] != -1)
			{
			    i = BizEntered[playerid];
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}
		}
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

FormatNumber(number, const prefix[] = "$")
{
	new
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

FormatNumberEx(number, const prefix[] = "{33AA33}$"EMBED_YELLOW"")
{
	new
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

// Southclaws version
/*
SC_FormatTextLowSignal(signal, text[])
{
	new string[128];
	format(string, 128, text);

	signal = 5 - signal;
	new gaps = (strlen(string) * signal) / (2 + (random(2) * 2)), pos, temp, len;

	for (new i; i < gaps; i++)
	{
		temp = (pos = random(len = strlen(string))) + (signal * (random(2) + 1));

		strdel(string, pos, ((temp > len) ? len : temp));
		strins(string, "..", pos);
	}
	return string;
}*/

stock FormatTextLowSignal(text[], signal = 0)
{
	new str[128];

	format(str, 128, text);

	new
		start,
		nosignal,
		signallen = strlen(str);

	signal = 5 - signal;
	nosignal = (signallen * signal) / (10 + (random(10) * 10));

    start = nosignal;

	if(nosignal)
	{
		for(new i = 0; i != nosignal; ++i)
		{
		    if(start > signallen)
				break;

			if(random(signal + 1)==0) {
				continue;
			}

			strreplace(str, substr(str, start, 2), "..");
			start += random(signallen+1) + (signal * (random(2) + 1));
		}
	}
	return str;
}

stock substr(const sSource[], iStart, iLength = sizeof sSource)
{
	new
		sReturn[256];

	if(iLength < 0)
	{
		strmid(sReturn, sSource, iStart, strlen(sSource) + iLength);
		return sReturn;
	}
	else
	{
		strmid(sReturn, sSource, iStart, (iStart + iLength));
		return sReturn;
	}
}

forward Float:GetPlayerMileage(vehicleid);
public Float:GetPlayerMileage(vehicleid)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;


	GetVehicleVelocity(vehicleid,xx,yy,zz);

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return floatround(pSpeed * 85.2) / 3600.0;
}

forward Float:DrugObject_Size(objectid);
public Float:DrugObject_Size(objectid)
{
	new Float:drug_size = 0.0;
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID])
	{
		if(ItemDrug[i][drugQTY] > 0) {
			drug_size += (DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE]) ? ItemDrug[i][drugQTY] / 2.285714 : ItemDrug[i][drugQTY];
		}
	}
	return drug_size;
}

DrugObject_StockDrug(objectid, drugtype)
{
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID] && ItemDrug[i][drugQTY] > 0)
	{
		if(ItemDrug[i][drugType] == drugtype) {
			return true;
		}
	}
	return false;
}

DrugObject_IsEmpty(objectid)
{
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID] && ItemDrug[i][drugQTY] > 0)
	{
		return false;
	}
	return true;
}

DrugObject_Delete(objectid, objectsid)
{
	new str[60];
	format(str, sizeof(str), "DELETE FROM `drug_package` WHERE `drugSID` = '%d'", objectsid);
	mysql_tquery(dbCon, str);
	
	DestroyDynamicObject(objectid);		
	
	return 1;
}

DrugObject_Count(playersid)
{
	new count=0, data[e_objectDrug];

	for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
		if(!IsValidDynamicObject(x)) continue;

		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
		if(data[drugOwner] == playersid) {
			count++;
		}
	}
	return count;
}

Float:GetVehicleSpeed(vehicleid, UseMPH = 1)
{
    new Float:speed_x,Float:speed_y,Float:speed_z,Float:temp_speed;
    GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
    if(UseMPH == 0) temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*136.666667;
    else temp_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*85.4166672;
    floatround(temp_speed,floatround_round);
    return temp_speed;
}


GetPlayerSpeed(playerid, bool:kmh = false)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid),xx,yy,zz);
	}
	else
	{
		GetPlayerVelocity(playerid,xx,yy,zz);
	}

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return kmh ? floatround((pSpeed * 190.5)) : floatround((pSpeed * 118.2));
}
/*
GetPlayerSpeedEx(playerid) 
{ 
    new Float:ST[4]; 

    if(IsPlayerInAnyVehicle(playerid)) 
    GetVehicleVelocity(GetPlayerVehicleID(playerid),ST[0],ST[1],ST[2]); 

    else GetPlayerVelocity(playerid,ST[0],ST[1],ST[2]); 
    ST[3] = floatsqroot(floatpower(floatabs(ST[0]), 2.0) + floatpower(floatabs(ST[1]), 2.0) + floatpower(floatabs(ST[2]), 2.0)) * 179.28625; 
    return floatround(ST[3]); 
}  
*/
GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

Float:GetVehicleConsumptionPerSecond(vehicleid)
{
	new Float:vSpeed = GetVehicleSpeed(vehicleid, true);
	new Float:MPG = GetVehicleDataFuelRate(GetVehicleModel(vehicleid)) * 2.35214583; // 2
	return (((vSpeed < 120.0 ? 120.0 : vSpeed) / 3600.0) * MPG / 24.32);
}

IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

GetLockStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (doors != 1)
		return 0;

	return 1;
}
/*
SetLockStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, status, bonnet, boot, objective);
}
*/
GetLightStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

SetLightStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

bool:GetEngineStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return false;

	return true;
}

SetEngineStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

GetHoodStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

SetHoodStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

GetTrunkStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

SetTrunkStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

IsTrunkVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 422, 543, 600, 605, 478, 554, 499, 609, 440, 482, 459, 413:
		    return 1;
	}
	return 0;
}

// ฟังชั่นทั่วไป
FormatTextSignal(const text[], signal = 0)
{
	new str[128];
	format(str, 128, text);

	new
		nosignal,
		signallen = strlen(str);

	signal = 5 - signal;
	nosignal = (signallen * signal) / (10 + (random(10) * 10));

	for(new i = 0, j = nosignal; i != j; ++i)
	{
	    if(nosignal > signallen)
			break;

		if(random(signal + 1)==0) {
			continue;
		}
		strreplace(str, substr(str, nosignal, 2), "..");
		nosignal += random(signallen+1) + (signal * (random(2) + 1));
	}
	return str;
}

cl_DressPlayer(playerid)
{
	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
		if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID && ClothingData[playerid][id][cl_equip]) {
			SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
			ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez], ClothingData[playerid][id][cl_mc1], ClothingData[playerid][id][cl_mc2]);
		}
	}
}

cl_ResetDressPlayer(playerid)
{
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
		RemovePlayerAttachedObject(playerid, i);

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
		if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID && ClothingData[playerid][id][cl_equip]) {
			ClothingData[playerid][id][cl_equip] = 0;
		}
	}
}

/*GetUserid(charactername[]) { // ค้นหาไอดีบัญชีจากชื่อตัวละคร

	new
		szPlayerName[MAX_PLAYER_NAME+1];

	mysql_escape_string(charactername, szPlayerName);
	mysql_format(dbCon, szQuery, sizeof(szQuery), "SELECT `Userid` FROM `characters` WHERE `Character` = '%s'", szPlayerName);
	mysql_query(dbCon,szQuery);

	if(cache_num_rows()) {
        return cache_get_value_index_int(0, 0);
	} else return -1;
}*/

/*GetUsername(userid) { // ค้นหาชื่อบัญชีจากไอดีบัญชี

	new
		szPlayerName[MAX_PLAYER_NAME+1];

	mysql_format(dbCon, szQuery, sizeof(szQuery), "SELECT `Username` FROM `accounts` WHERE `ID` = '%d'", userid);
	mysql_query(dbCon,szQuery);

	if(cache_num_rows()) {
	    cache_get_value_index(0, 0, szPlayerName);
	}
	return szPlayerName;
}*/

RemovePlayerClothing(playerid)
{
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
		RemovePlayerAttachedObject(playerid, i);
}

cl_ShowClothingMenu(playerid)
{
	new str[675], count;
	for (new i = 0; i < MAX_CLOTHES; i ++)
	{
	    if(ClothingData[playerid][i][cl_object] != INVALID_OBJECT_ID)
	    {
		    cl_dataslot[playerid][count] = i;
			format(str, sizeof(str), "%s"EMBED_YELLOW"%d. "EMBED_WHITE"%s (Index: %d)\n", str, i + 1, ClothingData[playerid][i][cl_name], ClothingData[playerid][i][cl_slot] + 1);
			count++;
		}
	}
	if(count) Dialog_Show(playerid, ClothingList, DIALOG_STYLE_LIST, "อะไรคือสิ่งที่คุณต้องการแก้ไข ?", str, "เลือก", "<< กลับ");
}

// Faction

ViewFactions(playerid)
{
	new string[1600], menu[10], count;

	format(string, sizeof(string), "%s{B4B5B7}หน้า 1"EMBED_WHITE"\n", string);

	SetPVarInt(playerid, "page", 1);

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
		if(count == 10)
		{
			format(string, sizeof(string), "%s{B4B5B7}หน้า 2"EMBED_WHITE"\n", string);
			break;
		}
		format(menu, 10, "menu%d", ++count);
		SetPVarInt(playerid, menu, i);
		format(string, sizeof(string), "%s"EMBED_WHITE"Faction ({FFBF00}%i"EMBED_WHITE") | %s\n", string, i, FactionData[i][factionName]);
	}
	if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Factions List", "ไม่พบข้อมูลของ Faction", "Ok", "");
	else Dialog_Show(playerid, FactionsList, DIALOG_STYLE_LIST, "Factions List", string, "Edit", "Back");
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = playerData[playerid][pFaction],
		name[64] = "None";

 	if (factionid == -1)
	    return name;

	format(name, 64, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = playerData[playerid][pFaction],
		rank[32] = "None";

 	if (factionid == -1 || playerData[playerid][pFactionRank] == 0)
	    return rank;

	format(rank, 32, FactionRanks[factionid][playerData[playerid][pFactionRank] - 1]);
	return rank;
}

GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		playerData[playerid][pFaction] = id;
		playerData[playerid][pFactionID] = FactionData[id][factionID];
		playerData[playerid][pBadgeNumber] = randomEx(23465, 99999);
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = playerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

GetFactionColor(factionid)
{
	new color[8] = "FFFFFF";

	if (factionid == -1)
		return color;

	format(color, sizeof(color), "%06x", FactionData[factionid][factionColor] >>> 8);

	return color;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (playerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) != FACTION_TYPE_GANG || (GetFactionType(i) != FACTION_TYPE_GANG && playerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	new
	    query[512];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionSkins` = '%d', `factionVehicle` = '%d', `factionPlate` = '%s'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionSkins],
		FactionData[factionid][factionVehicle],
		SQL_ReturnEscaped(FactionData[factionid][factionPlate])
	);
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(dbCon, query);
}

Faction_SaveRanks(factionid)
{
	new
	    query[1000];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionData[factionid][factionID]
	);
	mysql_tquery(dbCon, query);

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s', `factionRank16` = '%s', `factionRank17` = '%s', `factionRank18` = '%s', `factionRank19` = '%s', `factionRank20` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionRanks[factionid][15],
	    FactionRanks[factionid][16],
	    FactionRanks[factionid][17],
	    FactionRanks[factionid][18],
	    FactionRanks[factionid][19],
	    FactionData[factionid][factionID]
	);
	mysql_tquery(dbCon, query);
	
	return 1;
}
/*
Faction_SaveSkins(factionid)
{
	new
	    query[128];

	for(new x = 0; x != MAX_FACTION_TYPE_SKINS; x++)
	{
		format(query, sizeof(query), "UPDATE `factions` SET `factionSkin%d` = '%d' WHERE `factionID` = '%d'", x+1, actionSkins[factionid][x], FactionData[factionid][factionID]);
		mysql_tquery(dbCon, query);
	}

	return 1;
}*/

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[80];

		/*format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(dbCon, string);*/

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1', `Char` = '0'  WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(dbCon, string);

		foreach (new i : Player)
		{
			if (playerData[i][pFaction] == factionid) {
		    	playerData[i][pFaction] = -1;
		    	playerData[i][pFactionID] = -1;
		    	playerData[i][pFactionRank] = 0;
            	playerData[i][pChar] = 0;
				SetPlayerSkin(i, playerData[i][pModel]);
			}
			if (playerData[i][pFactionEdit] == factionid) {
			    playerData[i][pFactionEdit] = -1;
			}
		}
		/*if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

	    FactionData[factionid][factionExists] = true;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;*/
	    
		for(new i=0;i!=MAX_DYNAMIC_VEHICLES;i++) {
			if(vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] == factionid) {

				format(string, sizeof(string), "DELETE FROM `vehicles` WHERE `vehicleID` = '%d'", vehicleVariables[i][vVehicleID]);
				mysql_tquery(dbCon, string);

				Iter_Remove(sv_servercar, i);
				DestroyVehicle(vehicleVariables[i][vVehicleScriptID]);
			}
		}
	}
	return 1;
}

GetFactionType(playerid)
{
	if (playerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[playerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		new
		    string[900];

		//string = '\0';

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		playerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
	}
	return 1;
}

Faction_ShowSkins(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		new
		    string[1024];

		//string = '\0';

		for (new i = 0; i < FactionData[factionid][factionSkins]; i ++)
		    format(string, sizeof(string), "%s%d: %d\n", string, i + 1, FactionSkins[factionid][i]);

		playerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditSkins, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Change", "Cancel");
	}
	return 1;
}

Faction_Create(const name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 64, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;
        FactionData[i][factionSkins] = 0;

		format(FactionData[i][factionPlate], 64, "None");

	    for (new j = 0; j < 20; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    mysql_tquery(dbCon, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

ResetFaction(playerid)
{
    playerData[playerid][pFaction] = -1;
    playerData[playerid][pFactionID] = -1;
    playerData[playerid][pFactionRank] = 0;
    playerData[playerid][pBadgeNumber] = 0;
}

Vehicle_Save(id) {
	if(Iter_Contains(sv_servercar, id)) {

	    GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
	    GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);

	    format(XLQuery, sizeof(XLQuery), "UPDATE vehicles SET vehicleModelID = '%d', vehiclePosX = '%.4f', vehiclePosY = '%.4f', vehiclePosZ = '%.4f', vehiclePosRotation = '%.4f', vehicleFaction = '%d', vehicleCol1 = '%d', vehicleCol2 = '%d', vehicleWorld = '%d', vehicleInterior = '%d', vehiclePlate = '%s' WHERE vehicleID = '%d'", vehicleVariables[id][vVehicleModelID],	vehicleVariables[id][vVehiclePosition][0],
		vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleFaction], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], vehicleVariables[id][vVehicleWorld], vehicleVariables[id][vVehicleInterior], vehicleVariables[id][vVehiclePlate], vehicleVariables[id][vVehicleID]);
		mysql_query(dbCon,XLQuery);
	}
	return 1;
}

Vehicle_SaveID(id) {
	if(vehicleVariables[id][vVehicleFaction] != -1) {
		new str[200], vVehicleDamage1, vVehicleDamage2, vVehicleDamage3, vVehicleDamage4;
		GetVehicleDamageStatus(vehicleVariables[id][vVehicleScriptID], vVehicleDamage1, vVehicleDamage2, vVehicleDamage3, vVehicleDamage4);
		
		format(str, sizeof(str), "UPDATE vehicles SET vehicleHealth = '%f', vehicleDamage0 = '%d', vehicleDamage1 = '%d', vehicleDamage2 = '%d', vehicleDamage3 = '%d' WHERE vehicleID = '%d'", CoreVehicles[vehicleVariables[id][vVehicleScriptID]][vehHealth], vVehicleDamage1, vVehicleDamage2, vVehicleDamage3, vVehicleDamage4, vehicleVariables[id][vVehicleID]);
		mysql_query(dbCon,str);
	}
	return 1;
}

Vehicle_GetID(id)
{
	foreach(new i : sv_servercar) if (vehicleVariables[i][vVehicleScriptID] == id) {
		return i;
	}
	return -1;
}

forward OnPlayerVehicleScrap(playerid, scrap_price);
public OnPlayerVehicleScrap(playerid, scrap_price)
{
	if(cache_affected_rows())
	{
		Log(pveh_log, INFO, "%s scrap %s for %d", ReturnPlayerName(playerid), g_arrVehicleNames[CarData[playerData[playerid][pPCarkey]][carModel] - 400], scrap_price);

		Car_DespawnEx(playerData[playerid][pPCarkey]);
		playerData[playerid][pPCarkey] = 9999;
		SendClientMessageEx(playerid, COLOR_GREEN, "คุณได้ทำลายยานพาหนะของคุณให้เป็นเศษซากในราคา %s และจะไม่มีมันอีกต่อไป", FormatNumber(scrap_price));
		SendClientMessageEx(playerid, 0xADFF2FFF, "PROCESSED: รายการปรับปรุงใหม่ %s", (GetNumberOwnerCar(playerid)) ? (""):("คุณไม่มียานพาหนะเหลืออยู่แล้ว"));
		playerData[playerid][pCash]+=scrap_price;
		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "มีข้อผิดพลาดโปรดติดต่อผู้ดูแลระบบ");
	}
	return 1;
}

forward OnPlayerVehicleFaction(playerid, carid);
public OnPlayerVehicleFaction(playerid, carid)
{
	new i = -1;
	
	if((i=Iter_Free(sv_servercar)) != -1 && Iter_Contains(sv_playercar, carid))
	{
		new
			queryString[255],
			Float: vPosX, Float:vPosY, Float:vPosZ, Float:vPosA
		; // x, y, z + z angle
			
		GetVehiclePos(CarData[carid][carVehicle], vPosX, vPosY, vPosZ);
		GetVehicleZAngle(CarData[carid][carVehicle], vPosA);
	
		format(queryString, sizeof(queryString), "INSERT INTO vehicles (vehicleModelID, vehiclePosX, vehiclePosY, vehiclePosZ, vehiclePosRotation) VALUES('%d', '%f', '%f', '%f', '%f')",CarData[carid][carModel], vPosX, vPosY, vPosZ, vPosA);
		mysql_query(dbCon,queryString);
	
		new insertid = cache_insert_id();
	
		vehicleVariables[i][vVehicleID] = insertid;
		vehicleVariables[i][vVehicleModelID] = CarData[carid][carModel];
		vehicleVariables[i][vVehiclePosition][0] = vPosX;
		vehicleVariables[i][vVehiclePosition][1] = vPosY;
		vehicleVariables[i][vVehiclePosition][2] = vPosZ;
		vehicleVariables[i][vVehicleRotation] = vPosA;
		vehicleVariables[i][vVehicleFaction] = playerData[playerid][pFaction];
		vehicleVariables[i][vVehicleWorld]=GetPlayerVirtualWorld(playerid);
		vehicleVariables[i][vVehicleInterior]=GetPlayerInterior(playerid);
		vehicleVariables[i][vVehicleColour][0] = CarData[carid][carColor1];
		vehicleVariables[i][vVehicleColour][1] = CarData[carid][carColor2];
		vehicleVariables[i][vVehicleScriptID] = CarData[carid][carVehicle];
		format(vehicleVariables[i][vVehiclePlate], 32, "%s", vehicleVariables[i][vVehiclePlate]);

	
		DestroyVehicle(CarData[carid][carVehicle]);
		printf("%s Delete Vehicle ID %d SID %d to Faction Vehicle %d", ReturnPlayerName(playerid), CarData[carid][carVehicle], CarData[carid][carSID], vehicleVariables[i][vVehicleScriptID]);

		vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000);
		ResetVehicle(vehicleVariables[i][vVehicleScriptID]);
		LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
		SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);
		SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);			
		//SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehiclePlate]);
		SetVehicleHealthEx(vehicleVariables[i][vVehicleScriptID], GetVehicleDataHealth(vehicleVariables[i][vVehicleModelID]));
	
		PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);
				
				
		Iter_Add(sv_servercar, i);
	
		systemVariables[vehicleCounts][0]++;
		systemVariables[vehicleCounts][1]--;
	

		for(new x = 0; x != MAX_CAR_WEAPONS; x++) if(IsValidDynamicObject(CarPlace[carid][x][cPobj])) DestroyDynamicObject(CarPlace[carid][x][cPobj]);
		
		for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
		{
			CarData[carid][carPackageWP][x]=0;
			CarData[carid][carPackageAmmo][x]=0;
		}
		
		CarData[carid][carSID] = 0;
		CarData[carid][carOwner] = 0;
		CarData[carid][carVehicle]=INVALID_VEHICLE_ID;
		
		for(new x = 0; x != MAX_CAR_WEAPONS; x++)
		{
			CarData[carid][carWeapon][x] = 0;
			CarData[carid][carAmmo][x] = 0;
			CarData[carid][carWeaponLicense][x] = 0;
		}
		Iter_Remove(sv_playercar, carid);

		playerData[playerid][pPCarkey] = 9999;
		SendClientMessage(playerid, COLOR_GREEN, "ยานพาหนะของคุณถูกย้ายเป็นของแฟคชั่นอย่างถาวร (ใช้ /park เพื่อปรับตำแหน่งของยานพาหนะ)");
	
		SendClientMessageEx(playerid, 0xADFF2FFF, "PROCESSED: รายการปรับปรุงใหม่ %s", (GetNumberOwnerCar(playerid)) ? (""):("คุณไม่มียานพาหนะเหลืออยู่แล้ว"));
	
		return 1;
	}
	SendClientMessage(playerid, COLOR_RED, "มีข้อผิดพลาดโปรดติดต่อผู้ดูแลระบบ");
	return 1;
}

forward Vehicle_Load();
public Vehicle_Load()
{
    new
	    rows,
	    bool: success = true,
		str[32];

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++)
	{
        if(systemVariables[vehicleCounts][0] + systemVariables[vehicleCounts][1] + systemVariables[vehicleCounts][2] < MAX_VEHICLES) {

			cache_get_value_name_int(i, "vehicleID", vehicleVariables[i][vVehicleID]);
			cache_get_value_name_int(i, "vehicleModelID", vehicleVariables[i][vVehicleModelID]);
			cache_get_value_name_float(i, "vehiclePosX", vehicleVariables[i][vVehiclePosition][0]);
			cache_get_value_name_float(i, "vehiclePosY", vehicleVariables[i][vVehiclePosition][1]);
			cache_get_value_name_float(i, "vehiclePosZ", vehicleVariables[i][vVehiclePosition][2]);
			cache_get_value_name_float(i, "vehiclePosRotation", vehicleVariables[i][vVehicleRotation]);

			cache_get_value_name_int(i, "vehicleFaction", vehicleVariables[i][vVehicleFaction]);

			cache_get_value_name_int(i, "vehicleCol1", vehicleVariables[i][vVehicleColour][0]);
			cache_get_value_name_int(i, "vehicleCol2", vehicleVariables[i][vVehicleColour][1]);
			cache_get_value_name_int(i, "vehicleWorld", vehicleVariables[i][vVehicleWorld]);
			cache_get_value_name_int(i, "vehicleInterior", vehicleVariables[i][vVehicleInterior]);

			cache_get_value_index(i, 16, str);
			format(vehicleVariables[i][vVehiclePlate], 32, "%s", str);
			
			if(vehicleVariables[i][vVehicleColour][0] < 0) {
				vehicleVariables[i][vVehicleColour][0] = random(126);
			}
			if(vehicleVariables[i][vVehicleColour][1] < 0) {
				vehicleVariables[i][vVehicleColour][1] = random(126);
			}

			vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000);
			ResetVehicle(vehicleVariables[i][vVehicleScriptID]);

			LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
			SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);
	
			if(vehicleVariables[i][vVehicleFaction] != -1) {
				//SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);				
				new Float:vVehicleHealth, vVehicleDamage1, vVehicleDamage2, vVehicleDamage3, vVehicleDamage4;
				cache_get_value_name_int(i, "vehicleDamage0", vVehicleDamage1);
				cache_get_value_name_int(i, "vehicleDamage1", vVehicleDamage2);
				cache_get_value_name_int(i, "vehicleDamage2", vVehicleDamage3);
				cache_get_value_name_int(i, "vehicleDamage3", vVehicleDamage4);
				cache_get_value_name_float(i, "vehicleHealth", vVehicleHealth);
				
				if(vVehicleHealth == -1) {
					vVehicleHealth = GetVehicleDataHealth(vehicleVariables[i][vVehicleModelID]);
				}
				if(vVehicleHealth < 250.0)
					vVehicleHealth = 250.0;

				SetVehicleHealthEx(vehicleVariables[i][vVehicleScriptID], vVehicleHealth);
				SetVehicleDamageStatus(vehicleVariables[i][vVehicleScriptID], vVehicleDamage1, vVehicleDamage2, vVehicleDamage3, vVehicleDamage4);
				SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);
			}
			else {
				new plate[8];
				format(plate, sizeof(plate), RandomVehiclePlate());
				SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], plate);
			}

            Iter_Add(sv_servercar, i);

			switch(vehicleVariables[i][vVehicleModelID]) {
				case 427, 428, 432, 528, 601: SetVehicleHealthEx(vehicleVariables[i][vVehicleScriptID], 10000.0);
				default: {
					SetVehicleHealthEx(vehicleVariables[i][vVehicleScriptID], GetVehicleDataHealth(vehicleVariables[i][vVehicleModelID]));
				}
			}

			systemVariables[vehicleCounts][0]++;
		}
		else {
			success = false;
			printf("ERROR: Vehicle limit reached (MODEL %d, VEHICLEID %d, MAXIMUM %d, TYPE STATIC) [01x08]", vehicleVariables[i][vVehicleModelID], i, MAX_VEHICLES);
		}
	}

	if(success) printf("[script] %d vehicles loaded.", systemVariables[vehicleCounts][0]);

	return 1;
}

ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
		if(CoreVehicles[ vehicleid ][ vELMTimer ] != -1) {
			KillTimer(CoreVehicles[ vehicleid ][ vELMTimer ]);
			CoreVehicles[ vehicleid ][ vELMTimer ] = -1;
		}
		
	    CoreVehicles[vehicleid][startup_delay_sender] = INVALID_PLAYER_ID;
	    CoreVehicles[vehicleid][startup_delay] = 0;
	    CoreVehicles[vehicleid][startup_delay_random] = 0;
	    CoreVehicles[vehicleid][vehHealth] = 0;

	    CoreVehicles[vehicleid][vehicleBadlyDamage] = 0;

		CoreVehicles[vehicleid][vOwnerID] = INVALID_PLAYER_ID;
		CoreVehicles[vehicleid][vUpgradeID] = 0;
        for(new i=0;i<MAX_TRUCKER_ITEMS;i++) CoreVehicles[vehicleid][vehicleCrate][i] = 0;
      	for(new i=0;i<6;i++) {
      	    if(i < 4) CoreVehicles[vehicleid][vehDamage][i]=0;

 			if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
		}

		if(IsValidDynamicObject(CoreVehicles[vehicleid][vSiren])) DestroyDynamicObject(CoreVehicles[vehicleid][vSiren]);
		if(IsValidDynamicObject(CoreVehicles[vehicleid][vSiren2])) DestroyDynamicObject(CoreVehicles[vehicleid][vSiren2]);

		if(CoreVehicles[vehicleid][vehSign]) {
			Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
			CoreVehicles[vehicleid][vehSign]=false;
 		}
		CoreVehicles[vehicleid][vehicleIsCargoLoad] = 0;
		CoreVehicles[vehicleid][vehicleCargoTime] = 0;
		CoreVehicles[vehicleid][vehicleCargoStorage] = 0;
		CoreVehicles[vehicleid][vehicleCargoPlayer] = INVALID_PLAYER_ID;
		CoreVehicles[vehicleid][vehicleCargoAction]= 0;
		CoreVehicles[vehicleid][vehicleCargoType]=0;

		CoreVehicles[vehicleid][vbreakin] = 0;
		CoreVehicles[vehicleid][vbreaktime] = 0;
		CoreVehicles[vehicleid][vbreakdelay] = 0;

		if(Siren[vehicleid])
		{
			Siren[vehicleid] = 0;
	        if(IsValidDynamicObject(SirenObject[vehicleid])) DestroyDynamicObject(SirenObject[vehicleid]);
        }
        
		new bool:global_vehicle = false;

		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] == -1) {
                global_vehicle = true;
                break;
			}
		}

		if(!global_vehicle) {
		    if(Car_GetID(vehicleid) == -1) {
				new vmodel = GetVehicleModel(vehicleid);
				CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(vmodel);
				switch(vmodel) {
					case 427, 428, 432, 528, 601: SetVehicleHealthEx(vehicleid, 10000.0);
					default: {
						SetVehicleHealthEx(vehicleid, GetVehicleDataHealth(vmodel));
					}
				}
			}
		}
		else {
			new vmodel = GetVehicleModel(vehicleid);
			CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(vmodel) / 2.0;
			SetVehicleHealthEx(vehicleid, GetVehicleDataHealth(vmodel));
		}
  		/*for (new i = 0; i != MAX_DYNAMIC_VEHICLES; i ++)
		{
			if (vehicleVariables[i][vVehicleExists] && vehicleid == i) break;
			else {
				CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(GetVehicleModel(vehicleid));
				SetVehicleHealthEx(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
				break;
			}
		}*/
		//printf("RESET %d", vehicleid);
	}
	return 1;
}

forward House_Load();
public House_Load()
{
    new rows, i;

    cache_get_row_count(rows);

    new msg[128];
	new weapons[256];
	new items[64];

    if(rows)
    {
		for (; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, HouseInfo[i][hID]);
			cache_get_value_index_float(i, 1, HouseInfo[i][hEntranceX]);
			cache_get_value_index_float(i, 2, HouseInfo[i][hEntranceY]);
			cache_get_value_index_float(i, 3, HouseInfo[i][hEntranceZ]);
			cache_get_value_index_float(i, 4, HouseInfo[i][hExitX]);
			cache_get_value_index_float(i, 5, HouseInfo[i][hExitY]);
			cache_get_value_index_float(i, 6, HouseInfo[i][hExitZ]);

			cache_get_value_index(i, 7, msg);
			strmid(HouseInfo[i][hAddress], msg, 0, strlen(msg), 128);

			cache_get_value_index(i, 8, msg);
			strmid(HouseInfo[i][hOwner], msg, 0, strlen(msg), MAX_PLAYER_NAME);

			cache_get_value_index_int(i, 9, HouseInfo[i][hOwned]);
			cache_get_value_index_int(i, 10, HouseInfo[i][hLocked]);
			cache_get_value_index_int(i, 11, HouseInfo[i][hPrice]);
			cache_get_value_index_int(i, 12, HouseInfo[i][hLevelbuy]);
			cache_get_value_index_int(i, 13, HouseInfo[i][hRentprice]);
			cache_get_value_index_int(i, 14, HouseInfo[i][hRentable]);
			cache_get_value_index_int(i, 15, HouseInfo[i][hInterior]);
			cache_get_value_index_int(i, 16, HouseInfo[i][hWorld]);
			cache_get_value_index_int(i, 17, HouseInfo[i][hCash]);
			cache_get_value_index(i, 18, weapons);
			cache_get_value_index_float(i, 19, HouseInfo[i][hCheckPosX]);
			cache_get_value_index_float(i, 20, HouseInfo[i][hCheckPosY]);
			cache_get_value_index_float(i, 21, HouseInfo[i][hCheckPosZ]);
			
			cache_get_value_index_int(i, 23, HouseInfo[i][hSubid]);

            cache_get_value_index(i, 24, items);
			
			cache_get_value_index_int(i, 25, HouseInfo[i][hSwitch]);
			cache_get_value_index_int(i, 26, HouseInfo[i][hSwitchStatus]);

			cache_get_value_index_int(i, 27, HouseInfo[i][hEntranceInt]);
			cache_get_value_index_int(i, 28, HouseInfo[i][hEntranceWorld]);
			cache_get_value_index_int(i, 29, HouseInfo[i][hType]);
			
			cache_get_value_index_int(i, 30, HouseInfo[i][hSQLSubid]);

			AssignHouseWeapons(i, weapons);
			AssignHouseItems(i, items);

            if(!HouseInfo[i][hOwned]) {
                format(msg, sizeof(msg), ""EMBED_YELLOW"%s\nราคา: $%d\nเลเวล: %d", GetHouseAddress(i, false), HouseInfo[i][hPrice], HouseInfo[i][hLevelbuy]);
                HouseInfo[i][hLabel] = CreateDynamic3DTextLabel(msg, -1, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[i][hEntranceWorld], HouseInfo[i][hEntranceInt], -1, 100.0);
			}
			
			if(HouseInfo[i][hType] == 1)
				HouseInfo[i][hPickup] = CreateDynamicPickup(1314, 23, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], -1, -1);

            Iter_Add(sv_houses, i);

			HouseInfo[i][hAreaID][0] = CreateDynamicSphere(HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 3.0, HouseInfo[i][hEntranceWorld], HouseInfo[i][hEntranceInt]); // The house exterior.
			HouseInfo[i][hAreaID][1] = CreateDynamicSphere(HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ], 3.0, HouseInfo[i][hWorld], HouseInfo[i][hInterior]); // The house interior.
				
			Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[i][hAreaID][0], E_STREAMER_EXTRA_ID, i);
			Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[i][hAreaID][1], E_STREAMER_EXTRA_ID, i);
			
			LoadHouseFurnitures(i);
		}
    }
	
	foreach(new y: sv_houses) {
		if(HouseInfo[y][hSQLSubid] != 0) {
			foreach(new x : sv_houses) {
				if(HouseInfo[x][hID] == HouseInfo[y][hSQLSubid]) {
					HouseInfo[y][hSubid] = x;
					//printf("Complex Room %d SID: %d", x, HouseInfo[x][hID]);
					break;
				}
			}
			//printf("hSQLSubid != 0", hSQLSubid);
		}
	}
	printf("Loaded %d dynamic houses from MySQL.", i);
    return 1;
}

// ฟังชั่นที่มีการเปลี่ยนแปลง.

GetGunObjectID(wpid)
{
    if (wpid < 0 || wpid > 64)
    {
        return 1575;
    }
    return GunObjectIDs[wpid];
}

//forward DropGun(playerid, GunID, GunAmmo, Float:X, Float:Y, Float:Z);
DropGun(playerid, GunID, GunAmmo, license = 0, Float:X, Float:Y, Float:Z, saving = true)
{
    if(GunID != 0 && GunAmmo != 0)
    {
        for(new i = 0; i != sizeof(GunInfo); ++i)
        {
            if(GunInfo[i][DropGunPosX] == 0.0 && GunInfo[i][DropGunPosY] == 0.0 && GunInfo[i][DropGunPosZ] == 0.0)
            {
                GunInfo[i][DropGunAmmount][0] = GunID;
                GunInfo[i][DropGunAmmount][1] = GunAmmo;
                GunInfo[i][DropGunPosX] = X;
                GunInfo[i][DropGunPosY] = Y;
                GunInfo[i][DropGunPosZ] = Z;
                GunInfo[i][DropLicense] = license;
                GunInfo[i][DropID] = i;
                GunInfo[i][DropSaving] = saving;
                //GunInfo[i][DropLabel] = CreateDynamic3DTextLabel(ReturnWeaponName(GunID), 0x2E9AFEFF, X, Y, Z - 0.8, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
                GunInfo[i][DropObj] = CreateDynamicObject(GetGunObjectID(GunID), X, Y, Z-1, 80.0, 0.0, 0.0, 0, 0);
				GunInfo[i][DropTimer] = SetTimerEx("ResetDropGun", 600000, 0, "i", i);

                //Log_Write("logs/dropgun.txt", "[%s] %s: %s(%d)", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(GunID), GunAmmo);

                if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) drop %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(GunID), GunAmmo, license);
				else Log_Write("logs/weapon.txt", "[%s] %s (%s) drop %s(%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(GunID), GunAmmo);

                return 1;
            }
        }
        return 1;
    }
    return 1;
}

forward ResetDropGun(gunid);
public ResetDropGun(gunid)
{
	//printf("ResetDropGun %d", gunid);
 	for(new i = 0; i != sizeof(GunInfo); ++i)
  	{
      	if(GunInfo[i][DropID] == gunid)
     	{
      		GunInfo[i][DropGunAmmount][0] = 0;
          	GunInfo[i][DropGunAmmount][1] = 0;
           	GunInfo[i][DropGunPosX] = 0.0;
          	GunInfo[i][DropGunPosY] = 0.0;
          	GunInfo[i][DropGunPosZ] = 0.0;
          	GunInfo[i][DropLicense] = 0;
          	GunInfo[i][DropID] = -1;
          	KillTimer(GunInfo[i][DropTimer]);
			DestroyDynamicObject(GunInfo[i][DropObj]);
            //DestroyDynamic3DTextLabel(GunInfo[i][DropLabel]);
           	return 1;
      	}
 	}
 	return 1;
}

DropGun_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROP_ITEMS; i ++) if (GunInfo[i][DropID] != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, GunInfo[i][DropGunPosX], GunInfo[i][DropGunPosY], GunInfo[i][DropGunPosZ])) return i;

	return -1;
}

RemoveWeapon(playerid, weaponid)
{
    deleyNop{ playerid } = true;

	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (playerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, playerData[playerid][pGuns][i], playerData[playerid][pAmmo][i]);
		}
		else {
            playerData[playerid][pGuns][i] = 0;
            playerData[playerid][pAmmo][i] = 0;
	    }
	}

    cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

	deleyNop{ playerid } = false;
	return 1;
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
    	playerData[playerid][pGuns][i] = 0;
    	playerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 5000)
{
	if (playerData[playerid][pFreeze])
	{
	    KillTimer(playerData[playerid][pFreezeTimer]);
	    playerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	TogglePlayerControllable(playerid, 0);
	SetPlayerPos(playerid, x, y, z + 0.5);

	if(time != -1) {
		playerData[playerid][pFreeze] = 1;
		playerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerUnfreeze", time, 0, "i", playerid);
	}
	return 1;
}

forward SetPlayerUnfreeze(playerid);
public SetPlayerUnfreeze(playerid)
{
	playerData[playerid][pFreeze] = 0;
	TogglePlayerControllable(playerid, 1);
	return 1;
}

SetCooldown(playerid,type,amount)
{

	cooldowns[playerid][type] = gettime();
	cooldowns_expire[playerid][type] = amount;

}

HasCooldown(playerid,type)
{

	new diff = (gettime() - cooldowns[playerid][type]);
	if(diff >= cooldowns_expire[playerid][type]) return false;
	return true;

}

ResetCooldowns(playerid) for(new i = 0; i != MAX_COOLDOWNS; ++i) cooldowns[playerid][i] = 0;

GetCooldownLevel(playerid,type)
{

	new diff = (cooldowns_expire[playerid][type] - (gettime() - cooldowns[playerid][type]));
	return diff;

}

RemoveBuilding(playerid)
{
	//Sheriff Dillimore Retexture
	RemoveBuildingForPlayer(playerid, 13250, 622.9453, -577.0625, 21.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 12855, 622.9453, -577.0625, 21.8125, 0.25);

	//Vinewood LSPD HQ Interior
	RemoveBuildingForPlayer(playerid, 5842, 1292.070, -1122.023, 37.406, 0.250);
	RemoveBuildingForPlayer(playerid, 727, 1319.687, -1112.906, 22.257, 0.250);
	RemoveBuildingForPlayer(playerid, 727, 1327.976, -1124.343, 21.968, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1322.273, -1134.234, 23.000, 0.250);
	RemoveBuildingForPlayer(playerid, 5738, 1292.070, -1122.023, 37.406, 0.250);

	//Vinewood LSPD HQ Exterior
	RemoveBuildingForPlayer(playerid, 5842, 1292.070, -1122.023, 37.406, 0.250);
	RemoveBuildingForPlayer(playerid, 727, 1319.687, -1112.906, 22.257, 0.250);
	RemoveBuildingForPlayer(playerid, 727, 1327.976, -1124.343, 21.968, 0.250);
	RemoveBuildingForPlayer(playerid, 717, 1322.273, -1134.234, 23.000, 0.250);
	RemoveBuildingForPlayer(playerid, 5738, 1292.070, -1122.023, 37.406, 0.250);

	//Vinewood LSPD HQ Jail
	RemoveBuildingForPlayer(playerid, 3291, 246.562, 1435.195, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3291, 246.562, 1410.539, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3291, 246.562, 1385.890, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3291, 246.562, 1361.242, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3255, 246.562, 1361.242, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3255, 246.562, 1385.890, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3255, 246.562, 1410.539, 9.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3255, 246.562, 1435.195, 9.687, 0.250);

	//CreenShaw
	RemoveBuildingForPlayer(playerid, 3562, 2232.398, -1464.796, 25.648, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2247.531, -1464.796, 25.546, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2263.718, -1464.796, 25.437, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2243.710, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2230.609, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 3562, 2256.664, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 2265.617, -1410.335, 21.773, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2226.851, -1404.742, 23.632, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2230.609, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2243.710, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 645, 2237.531, -1395.484, 23.039, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2256.664, -1401.781, 25.640, 0.250);
	RemoveBuildingForPlayer(playerid, 645, 2239.570, -1468.804, 22.687, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2232.398, -1464.796, 25.648, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2247.531, -1464.796, 25.546, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2267.468, -1470.195, 21.718, 0.250);
	RemoveBuildingForPlayer(playerid, 3582, 2263.718, -1464.796, 25.437, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2251.289, -1461.828, 23.632, 0.250);
	RemoveBuildingForPlayer(playerid, 3593, 2261.773, -1441.101, 23.500, 0.250);
	RemoveBuildingForPlayer(playerid, 3593, 2265.078, -1424.476, 23.500, 0.250);

	//Impound Lot
	RemoveBuildingForPlayer(playerid, 3686, 2195.0859, -2216.8438, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2174.6406, -2215.6563, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2193.0625, -2196.6406, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 5305, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3578, 2194.4766, -2242.8750, 13.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2183.1719, -2237.2734, 14.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2174.6406, -2215.6563, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 3627, 2195.0859, -2216.8438, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 5244, 2198.8516, -2213.9219, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2193.0625, -2196.6406, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2223.7422, -2207.1875, 16.3125, 0.25);

	//LSDMD Parking Lots
	RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);

	//Mongols
	RemoveBuildingForPlayer(playerid, 4976, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1879.9922, -1879.8906, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1885.2578, -1879.8984, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1864.1797, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1869.4609, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1874.7344, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1890.5234, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1904.3750, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1909.6563, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1914.9297, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1920.1953, -1879.9531, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1925.4609, -1879.9609, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1930.7188, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 4848, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1931.8750, -1863.4609, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1915.7422, -1863.4609, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1957.3672, -1867.2891, 16.3203, 0.25);
	
	
	// Atlas EL CORONA
	RemoveBuildingForPlayer(playerid, 1226, 1725.7266, -2116.8906, 16.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 1729.2969, -2122.9297, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1733.2422, -2125.8438, 21.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 1734.5781, -2122.9297, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1468, 1739.8516, -2122.9297, 13.7578, 0.25);
	
	/*// THE SS
	RemoveBuildingForPlayer(playerid, 5849, 1046.6797, -935.1953, 46.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 5854, 992.5313, -962.7344, 60.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1029.1797, -939.5156, 52.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1029.1797, -939.5156, 52.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1034.7891, -950.3750, 46.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 5848, 1046.6797, -935.1953, 46.9922, 0.25);*/
	
	// Atlast
	
	//LSFD และ ที่จอดรถรวมกล้องด้วย
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 5967, 1259.437, -1246.812, 17.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1391, 1238.375, -1258.273, 44.664, 0.250);
	RemoveBuildingForPlayer(playerid, 5857, 1259.437, -1246.812, 17.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1327.429, -1239.984, 13.937, 0.250);
	RemoveBuildingForPlayer(playerid, 1412, 1327.429, -1234.742, 13.937, 0.250);


	//All Spray Tag

	RemoveBuildingForPlayer(playerid, 1490, 2046.41, -1635.84, 13.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1490, 2066.43, -1652.48, 14.2812, 0.25);
	RemoveBuildingForPlayer(playerid, 1490, 2102.20, -1648.76, 13.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1490, 2399.41, -1552.03, 28.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1490, 2353.54, -1508.21, 24.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1490, 2394.10, -1468.37, 24.7812, 0.25);

	RemoveBuildingForPlayer(playerid, 1531, 1724.73, -1741.50, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1767.21, -1617.54, 15.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1799.13, -1708.77, 14.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1746.75, -1359.77, 16.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1850.01, -1876.84, 14.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1889.24, -1982.51, 15.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1950.62, -2034.40, 14.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1936.88, -2134.91, 14.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1808.34, -2092.27, 14.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 2273.90, -2265.80, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 2173.59, -2165.19, 15.3047, 0.25);

	RemoveBuildingForPlayer(playerid, 1530, 2281.46, -1118.96, 27.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2239.78, -999.75, 59.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2122.69, -1060.90, 25.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2062.72, -996.46, 48.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2076.73, -1071.13, 27.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2841.37, -1312.96, 18.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2820.34, -1190.98, 25.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2766.09, -1197.14, 69.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2756.01, -1388.12, 39.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2821.23, -1465.09, 16.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2767.78, -1621.19, 11.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2767.76, -1819.95, 12.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2667.89, -1469.13, 31.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2612.93, -1390.77, 35.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2536.22, -1352.77, 31.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2580.95, -1274.09, 46.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2603.16, -1197.81, 60.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2576.82, -1143.27, 48.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2621.51, -1092.20, 69.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2797.92, -1097.70, 31.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 1332.13, -1722.30, 14.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 1732.73, -963.08, 41.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 1118.91, -2008.24, 75.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2273.20, -2529.12, 8.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1530, 2704.23, -2144.30, 11.8203, 0.25);

	RemoveBuildingForPlayer(playerid, 1529, 2379.32, -2166.22, 24.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 810.57, -1797.57, 13.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 730.45, -1482.01, 2.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 947.48, -1466.72, 17.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 399.01, -2066.88, 11.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 466.98, -1283.02, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 583.46, -1502.11, 16.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 944.27, -985.82, 39.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 1072.91, -1012.80, 35.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 1206.25, -1162.00, 23.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1529, 1098.81, -1292.55, 17.1406, 0.25);

	RemoveBuildingForPlayer(playerid, 1528, 2763.00, -2012.11, 14.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1528, 2794.53, -1906.81, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1528, 2812.94, -1942.07, 11.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1528, 2874.50, -1909.38, 8.3906, 0.25);

	RemoveBuildingForPlayer(playerid, 1527, 2182.23, -1467.90, 25.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2132.23, -1258.09, 24.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2233.95, -1367.62, 24.5312, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2224.77, -1193.06, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2119.20, -1196.62, 24.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2522.46, -1478.74, 24.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2322.45, -1254.41, 22.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1448.23, -1755.90, 14.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1574.71, -2691.88, 13.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1071.14, -1863.79, 14.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2392.36, -1914.57, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2430.33, -1997.91, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2587.32, -2063.52, 4.6094, 0.25);

	RemoveBuildingForPlayer(playerid, 1525, 1974.09, -1351.16, 24.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2093.76, -1413.45, 24.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1969.59, -1289.70, 24.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1966.95, -1174.73, 20.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1911.87, -1064.40, 25.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2462.27, -1541.41, 25.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2346.52, -1350.78, 24.2812, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2273.02, -1687.43, 14.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2422.91, -1682.30, 13.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1549.89, -1714.52, 15.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1498.63, -1207.35, 24.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1519.42, -1010.95, 24.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1687.23, -1239.12, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1783.97, -2156.54, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1624.62, -2296.24, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2065.44, -1897.23, 13.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 2134.33, -2011.20, 10.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1271.48, -1662.32, 20.2500, 0.25);


	RemoveBuildingForPlayer(playerid, 1524, 2162.78, -1786.07, 14.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2034.40, -1801.67, 14.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1910.16, -1779.66, 18.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1837.20, -1814.19, 4.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1837.66, -1640.38, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1959.40, -1577.76, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2074.18, -1579.15, 14.0312, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2542.95, -1363.24, 31.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2704.20, -1966.69, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 2489.24, -1959.07, 13.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 1295.18, -1465.22, 10.2812, 0.25);
	RemoveBuildingForPlayer(playerid, 1524, 482.63, -1761.59, 5.9141, 0.25);

	//


	//LSPD Police Academy
	RemoveBuildingForPlayer(playerid, 10396, -2752.1016, -252.2422, 7.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 10397, -2752.1328, -252.2344, 10.0781, 0.25);

	//เคนแถว ๆ meal
    RemoveBuildingForPlayer(playerid, 3474, 978.28906, 2094.9922, 16.74219, 16.442955); // removeWorldObject (Freightcrane1) (1)
/*	//ก่อสร้าง Pershing Square
	RemoveBuildingForPlayer(playerid, 4054, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 4005, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);*/
    //Pershing
    RemoveBuildingForPlayer(playerid, 4054, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4055, 1394.3594, -1620.6641, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 4220, 1370.6406, -1643.4453, 33.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 4005, 1402.5000, -1682.0234, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 4006, 1394.3594, -1620.6641, 32.1484, 0.25);
	//[SFCARS] ร้านแต่งรถแถวๆ Idlewood
    RemoveBuildingForPlayer(playerid, 6359, 421.4297, -1307.9922, 24.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 394.1172, -1317.8750, 13.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 395.8594, -1323.7578, 13.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 404.8359, -1303.7266, 13.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 404.9766, -1329.1016, 13.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 418.6953, -1321.5469, 13.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 6355, 421.4297, -1307.9922, 24.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 6363, 428.1016, -1348.8125, 29.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 441.8672, -1305.8438, 14.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 450.2813, -1295.9688, 14.2891, 0.25);
    //PRISON-Exterior
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3366, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16619, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 188.2422, 2081.6484, 22.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 188.2422, 2081.6484, 22.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 16294, 15.1797, 1719.3906, 21.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 15.6172, 1719.1641, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 15.6016, 1719.1719, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 237.6953, 1696.8750, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 237.6797, 1696.8828, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16293, 238.0703, 1697.5547, 21.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16093, 211.6484, 1810.1563, 20.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 16638, 211.7266, 1809.1875, 18.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 262.0938, 1807.6719, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 347.1953, 1799.2656, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 342.9375, 1796.2891, 18.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 16670, 330.7891, 1813.2188, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 113.3828, 1814.4531, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 165.9531, 1849.9922, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 220.3828, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 228.7969, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 1697, 236.9922, 1835.3438, 23.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 16095, 279.1328, 1829.7813, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 16094, 191.1406, 1870.0391, 21.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 103.8906, 1901.1016, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16096, 120.5078, 1934.0313, 19.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 161.9063, 1933.0938, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 16323, 199.3359, 1943.8750, 18.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 16671, 193.9531, 2051.7969, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 233.4297, 1934.8438, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3279, 267.0625, 1895.2969, 16.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 2023.7578, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1989.5469, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3268, 276.6563, 1955.7656, 16.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3267, 354.4297, 2028.4922, 22.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3277, 354.4141, 2028.5000, 22.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 16668, 357.9375, 2049.4219, 16.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 16669, 380.2578, 1914.9609, 17.4297, 0.25);

	//Cargo Ship
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);

	// - Box
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3746, 2814.2656, -2356.5703, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3620, 2814.2656, -2356.5703, 25.5156, 0.25);

	//LSPD Units East Los Santos
	/*RemoveBuildingForPlayer(playerid, 17535, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17965, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 2317.5859, -1355.8281, 37.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 17970, 2364.0547, -1391.5313, 41.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 17543, 2322.2813, -1355.1953, 25.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 2317.5938, -1355.8203, 37.2266, 0.25);*/

	//[LSFMD] ที่จอดรถและลานจอดฮอ
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);

	//LSMALL
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1147.6016, -1416.8750, 13.9531, 0.25);


	// Remove Bank

	RemoveBuildingForPlayer(playerid, 2010, 377.00781, 180.14063, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2011, 371.07813, 188.92969, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 373.97656, 176.94531, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 374.00781, 170.64063, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 363.46094, 158.6875, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 359.86719, 158.6875, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 364.60156, 170.64844, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2001, 364.66406, 176.97656, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 360.10156, 171.82031, 1008.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 360.3125, 174.96094, 1008.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 2163, 353.53906, 175.16406, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2164, 353.53906, 169.61719, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 354.95313, 168.54688, 1007.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 168.77344, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 166.03906, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 162.95313, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 355.85156, 163.24219, 1007.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2186, 355.51563, 158.71875, 1007.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2202, 354.05469, 160.69531, 1007.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 355.85156, 178.86719, 1007.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 178.45313, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 355.85156, 182.40625, 1007.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 182.41406, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1806, 355.85156, 186.3125, 1007.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2190, 357.29688, 186.03125, 1008.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2169, 354.33594, 189.125, 1007.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 2162, 353.52344, 183.64063, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2161, 353.59375, 181.83594, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2163, 353.53906, 179.51563, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2164, 353.59375, 177.75, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2167, 353.53906, 173.88281, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2164, 353.53906, 163.73438, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2164, 353.53906, 167.84375, 1007.375, 0.25);
	RemoveBuildingForPlayer(playerid, 2164, 353.53906, 166.07031, 1007.375, 0.25);
    RemoveBuildingForPlayer(playerid, 2002, 354.03125, 187.40625, 1007.375, 0.25);
	// Sprunk machines
 	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);


    // Remove the original mall mesh
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 10.0);

	// This is the mall mesh LOD
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 10.0);

	// There are some trees on the outside of the mall which poke through one of the interiors
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);


	//ที่จอดรถข้างปั้ม Idlewood
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);

	//ร้านค้าแถว El Corona
	RemoveBuildingForPlayer(playerid, 3625, 1941.9844, -1970.7031, 14.9844, 0.25);

    //ตลาดแถวสนามบาส
	RemoveBuildingForPlayer(playerid, 1412, 2305.9375, -1394.1641, 24.1953, 0.25);

	//Bone Country
	RemoveBuildingForPlayer(playerid, 16060, -192.0469, 1147.3906, 17.6953, 0.25);

	// LSPD NEW HQ 2 Station
	RemoveBuildingForPlayer(playerid, 3687, 2135.742, -2186.445, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 3687, 2162.851, -2159.750, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 3687, 2150.195, -2172.359, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 1531, 2173.593, -2165.187, 15.304, 0.250);
	RemoveBuildingForPlayer(playerid, 3622, 2135.742, -2186.445, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 3622, 2150.195, -2172.359, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 3622, 2162.851, -2159.750, 15.671, 0.250);
	RemoveBuildingForPlayer(playerid, 726, 608.046, -1657.320, 14.804, 0.250);

}

CreateGlobalTextDraw()
{
	LSRP_LOGO = TextDrawCreate(187.000000, 46.000000, "mdl-2003:charselection");
	TextDrawFont(LSRP_LOGO, 4);
	TextDrawLetterSize(LSRP_LOGO, 0.600000, 2.000000);
	TextDrawTextSize(LSRP_LOGO, 253.000000, 112.500000);
	TextDrawSetOutline(LSRP_LOGO, 1);
	TextDrawSetShadow(LSRP_LOGO, 0);
	TextDrawAlignment(LSRP_LOGO, 1);
	TextDrawColor(LSRP_LOGO, -1);
	TextDrawBackgroundColor(LSRP_LOGO, 255);
	TextDrawBoxColor(LSRP_LOGO, 50);
	TextDrawUseBox(LSRP_LOGO, 1);
	TextDrawSetProportional(LSRP_LOGO, 1);

    g_ServerRestartCount = TextDrawCreate(237.000000, 409.000000, "~r~Server Restart:~w~ 00:00");
	TextDrawBackgroundColor(g_ServerRestartCount, 255);
	TextDrawFont(g_ServerRestartCount, 1);
	TextDrawLetterSize(g_ServerRestartCount, 0.480000, 1.300000);
	TextDrawColor(g_ServerRestartCount, -1);
	TextDrawSetOutline(g_ServerRestartCount, 1);
	TextDrawSetProportional(g_ServerRestartCount, 1);
	TextDrawSetSelectable(g_ServerRestartCount, 0);

	TD_Restaurant[0] = TextDrawCreate(93.899887, 140.222320, "box");
	TextDrawLetterSize(TD_Restaurant[0], 0.000000, 24.239885);
	TextDrawTextSize(TD_Restaurant[0], 549.000000, 0.000000);
	TextDrawAlignment(TD_Restaurant[0], 1);
	TextDrawColor(TD_Restaurant[0], -1);
	TextDrawUseBox(TD_Restaurant[0], 1);
	TextDrawBoxColor(TD_Restaurant[0], 255);
	TextDrawSetShadow(TD_Restaurant[0], 0);
	TextDrawSetOutline(TD_Restaurant[0], 0);
	TextDrawBackgroundColor(TD_Restaurant[0], 255);
	TextDrawFont(TD_Restaurant[0], 1);
	TextDrawSetProportional(TD_Restaurant[0], 1);
	TextDrawSetShadow(TD_Restaurant[0], 0);

	TD_Restaurant[1] = TextDrawCreate(115.999969, 172.577804, "This restaurant offers multiple meals.~n~Choose one by clicking on its picture.");
	TextDrawLetterSize(TD_Restaurant[1], 0.248797, 1.346132);
	TextDrawAlignment(TD_Restaurant[1], 1);
	TextDrawColor(TD_Restaurant[1], -1);
	TextDrawSetShadow(TD_Restaurant[1], 0);
	TextDrawSetOutline(TD_Restaurant[1], 0);
	TextDrawBackgroundColor(TD_Restaurant[1], 255);
	TextDrawFont(TD_Restaurant[1], 1);
	TextDrawSetProportional(TD_Restaurant[1], 1);
	TextDrawSetShadow(TD_Restaurant[1], 0);

	TD_Restaurant[2] = TextDrawCreate(531.199890, 142.711166, "X");
	TextDrawLetterSize(TD_Restaurant[2], 0.456398, 1.739377);
	TextDrawAlignment(TD_Restaurant[2], 1);
	TextDrawColor(TD_Restaurant[2], -1);
	TextDrawSetShadow(TD_Restaurant[2], 0);
	TextDrawSetOutline(TD_Restaurant[2], 0);
	TextDrawBackgroundColor(TD_Restaurant[2], 255);
	TextDrawFont(TD_Restaurant[2], 2);
	TextDrawSetProportional(TD_Restaurant[2], 1);
	TextDrawSetShadow(TD_Restaurant[2], 0);
	TextDrawSetSelectable(TD_Restaurant[2], true);

	TD_PhoneCover[0] = TextDrawCreate(333.600036, 121.804512, "SELECT COLOR");
	TextDrawLetterSize(TD_PhoneCover[0], 0.279599, 1.465599);
	TextDrawTextSize(TD_PhoneCover[0], -0.149999, 139.000000);
	TextDrawAlignment(TD_PhoneCover[0], 2);
	TextDrawColor(TD_PhoneCover[0], -1);
	TextDrawUseBox(TD_PhoneCover[0], 1);
	TextDrawBoxColor(TD_PhoneCover[0], 80);
	TextDrawSetShadow(TD_PhoneCover[0], 0);
	TextDrawSetOutline(TD_PhoneCover[0], 0);
	TextDrawBackgroundColor(TD_PhoneCover[0], 255);
	TextDrawFont(TD_PhoneCover[0], 2);
	TextDrawSetProportional(TD_PhoneCover[0], 1);
	TextDrawSetShadow(TD_PhoneCover[0], 0);

	TD_PhoneCover[1] = TextDrawCreate(269.399841, 146.537796, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[1], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[1], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[1], 1);
	TextDrawColor(TD_PhoneCover[1], 286331391);
	TextDrawSetShadow(TD_PhoneCover[1], 0);
	TextDrawSetOutline(TD_PhoneCover[1], 0);
	TextDrawBackgroundColor(TD_PhoneCover[1], 255);
	TextDrawFont(TD_PhoneCover[1], 4);
	TextDrawSetProportional(TD_PhoneCover[1], 0);
	TextDrawSetShadow(TD_PhoneCover[1], 0);
	TextDrawSetSelectable(TD_PhoneCover[1], true);

	TD_PhoneCover[2] = TextDrawCreate(302.999847, 146.537841, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[2], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[2], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[2], 1);
	TextDrawColor(TD_PhoneCover[2], 1628113919);
	TextDrawSetShadow(TD_PhoneCover[2], 0);
	TextDrawSetOutline(TD_PhoneCover[2], 0);
	TextDrawBackgroundColor(TD_PhoneCover[2], 255);
	TextDrawFont(TD_PhoneCover[2], 4);
	TextDrawSetProportional(TD_PhoneCover[2], 0);
	TextDrawSetShadow(TD_PhoneCover[2], 0);
	TextDrawSetSelectable(TD_PhoneCover[2], true);

	TD_PhoneCover[3] = TextDrawCreate(268.999877, 181.880020, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[3], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[3], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[3], 1);
	TextDrawColor(TD_PhoneCover[3], 2104099071);
	TextDrawSetShadow(TD_PhoneCover[3], 0);
	TextDrawSetOutline(TD_PhoneCover[3], 0);
	TextDrawBackgroundColor(TD_PhoneCover[3], 255);
	TextDrawFont(TD_PhoneCover[3], 4);
	TextDrawSetProportional(TD_PhoneCover[3], 0);
	TextDrawSetShadow(TD_PhoneCover[3], 0);
	TextDrawSetSelectable(TD_PhoneCover[3], true);

	TD_PhoneCover[4] = TextDrawCreate(302.599945, 181.880142, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[4], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[4], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[4], 1);
	TextDrawColor(TD_PhoneCover[4], 405561855);
	TextDrawSetShadow(TD_PhoneCover[4], 0);
	TextDrawSetOutline(TD_PhoneCover[4], 0);
	TextDrawBackgroundColor(TD_PhoneCover[4], 255);
	TextDrawFont(TD_PhoneCover[4], 4);
	TextDrawSetProportional(TD_PhoneCover[4], 0);
	TextDrawSetShadow(TD_PhoneCover[4], 0);
	TextDrawSetSelectable(TD_PhoneCover[4], true);

	TD_PhoneCover[5] = TextDrawCreate(269.399963, 217.222259, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[5], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[5], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[5], 1);
	TextDrawColor(TD_PhoneCover[5], 388831231);
	TextDrawSetShadow(TD_PhoneCover[5], 0);
	TextDrawSetOutline(TD_PhoneCover[5], 0);
	TextDrawBackgroundColor(TD_PhoneCover[5], 255);
	TextDrawFont(TD_PhoneCover[5], 4);
	TextDrawSetProportional(TD_PhoneCover[5], 0);
	TextDrawSetShadow(TD_PhoneCover[5], 0);
	TextDrawSetSelectable(TD_PhoneCover[5], true);

	TD_PhoneCover[6] = TextDrawCreate(303.000061, 216.724502, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[6], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[6], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[6], 1);
	TextDrawColor(TD_PhoneCover[6], 0xce9100ff);
	TextDrawSetShadow(TD_PhoneCover[6], 0);
	TextDrawSetOutline(TD_PhoneCover[6], 0);
	TextDrawBackgroundColor(TD_PhoneCover[6], 255);
	TextDrawFont(TD_PhoneCover[6], 4);
	TextDrawSetProportional(TD_PhoneCover[6], 0);
	TextDrawSetShadow(TD_PhoneCover[6], 0);
	TextDrawSetSelectable(TD_PhoneCover[6], true);

	TD_PhoneCover[7] = TextDrawCreate(269.400024, 253.560089, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[7], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[7], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[7], 1);
	TextDrawColor(TD_PhoneCover[7], -2063576577);
	TextDrawSetShadow(TD_PhoneCover[7], 0);
	TextDrawSetOutline(TD_PhoneCover[7], 0);
	TextDrawBackgroundColor(TD_PhoneCover[7], 255);
	TextDrawFont(TD_PhoneCover[7], 4);
	TextDrawSetProportional(TD_PhoneCover[7], 0);
	TextDrawSetShadow(TD_PhoneCover[7], 0);
	TextDrawSetSelectable(TD_PhoneCover[7], true);

	TD_PhoneCover[8] = TextDrawCreate(364.400238, 262.177764, "Purchase");
	TextDrawLetterSize(TD_PhoneCover[8], 0.279599, 1.465599);
	TextDrawTextSize(TD_PhoneCover[8], 10.0, 77.000000);
	TextDrawAlignment(TD_PhoneCover[8], 2);
	TextDrawColor(TD_PhoneCover[8], -1);
	TextDrawUseBox(TD_PhoneCover[8], 1);
	TextDrawBoxColor(TD_PhoneCover[8], 80);
	TextDrawSetShadow(TD_PhoneCover[8], 0);
	TextDrawSetOutline(TD_PhoneCover[8], 0);
	TextDrawBackgroundColor(TD_PhoneCover[8], 255);
	TextDrawFont(TD_PhoneCover[8], 2);
	TextDrawSetProportional(TD_PhoneCover[8], 1);
	TextDrawSetShadow(TD_PhoneCover[8], 0);
	TextDrawSetSelectable(TD_PhoneCover[8], true);

	TD_PhoneCover[9] = TextDrawCreate(302.599945, 253.560089, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[9], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[9], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[9], 1);
	TextDrawColor(TD_PhoneCover[9], 0xb9b9b9ff);
	TextDrawSetShadow(TD_PhoneCover[9], 0);
	TextDrawSetOutline(TD_PhoneCover[9], 0);
	TextDrawBackgroundColor(TD_PhoneCover[9], 255);
	TextDrawFont(TD_PhoneCover[9], 4);
	TextDrawSetProportional(TD_PhoneCover[9], 0);
	TextDrawSetShadow(TD_PhoneCover[9], 0);
	TextDrawSetSelectable(TD_PhoneCover[9], true);

	TD_BLINDFOLD = TextDrawCreate(-2.399991, -2.142246, "_");
	TextDrawLetterSize(TD_BLINDFOLD, 0.057199, 50.003871);
	TextDrawTextSize(TD_BLINDFOLD, 650.000000, 0.000000);
	TextDrawAlignment(TD_BLINDFOLD, 1);
	TextDrawColor(TD_BLINDFOLD, -1);
	TextDrawUseBox(TD_BLINDFOLD, 1);
	TextDrawBoxColor(TD_BLINDFOLD, 255);
	TextDrawBackgroundColor(TD_BLINDFOLD, 255);
	TextDrawFont(TD_BLINDFOLD, 1);
	TextDrawSetProportional(TD_BLINDFOLD, 1);
}

Create3DText()
{
    CreateDynamic3DTextLabel("ใช้ /buy เพื่อซื้อเคสโทรศัพท์", COLOR_WHITE, 1086.8405,-1449.5437,22.7434, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/buy\nเพื่อดูรายชื่อไอเท็มกีฬาที่มีอยู่", COLOR_WHITE, 1112.4480,-1527.4012,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel(""EMBED_YELLOW"ร้านเครื่องแต่งกายของ srysgag"EMBED_WHITE"\n/buy เพื่อดูรายชื่อเครื่องแต่งกายที่มีขาย", COLOR_WHITE, 1096.2791,-1439.8060,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/buy\nเพื่อดูรายชื่อเครื่องมือ", COLOR_WHITE, 1089.4680,-1527.4622,22.7393, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/buy\nเพื่อดูรายชื่อไอเท็มดนตรี", COLOR_WHITE, 1091.9843,-1506.8433,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/buy\nเพื่อดูรายชื่อนาฬิกา", COLOR_WHITE, 1144.9119,-1527.0886,15.7963, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("{00d900}ป้ายโฆษณา\n{FFFFFF}/buy", COLOR_WHITE, 1162.8340, -1470.7634, 15.7943, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	//CreateDynamic3DTextLabel("/playpool\nเพื่อเริ่มเล่นเกม", COLOR_WHITE, 508.1812,-84.8574,998.9609, 8.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 18, 11);
}

AddVehicleRental()
{
    CarRent[0] = AddStaticVehicleEx(492,1664.2168,-2248.0488,-2.9842,90.2306,223,0, -1); // Green 1
    CarRent[1] = AddStaticVehicleEx(492,1653.5485,-2313.4810,-2.9741,269.5144,223,0, -1); // Green 2
	CarRent[2] = AddStaticVehicleEx(492,1560.7415,-2308.8511,13.3286,269.5454,223,0, -1); // 1
	CarRent[3] = AddStaticVehicleEx(492,1560.7153,-2312.1589,13.3285,269.5454,223,0, -1); // 2
	CarRent[4] = AddStaticVehicleEx(492,1560.6952,-2315.5034,13.3498,269.5466,223,0, -1); // 3
	CarRent[5] = AddStaticVehicleEx(422,1560.6693,-2318.7683,13.3567,269.5466,223,0, -1); // 4
	CarRent[6] = AddStaticVehicleEx(422,1560.6440,-2321.9934,13.3636,269.5466,223,0, -1); // 5
	CarRent[7] = AddStaticVehicleEx(422,1560.6185,-2325.2891,13.3706,269.5466,223,0, -1); // 6
	CarRent[8] = AddStaticVehicleEx(492,1560.5928,-2328.5264,13.3775,269.5466,223,0, -1); // 7
	CarRent[9] = AddStaticVehicleEx(492,1560.5668,-2331.8062,13.3845,269.5466,223,0, -1); // 8
    for(new c=0;c<sizeof(CarRent);c++)
    {
		ResetVehicle(CarRent[c]);
		SetVehicleNumberPlate(CarRent[c], "RENTAL");
		SetVehicleHealthEx(CarRent[c], GetVehicleDataHealth(GetVehicleModel(CarRent[c])));

        systemVariables[vehicleCounts][0]++;
    }
}

AddVehicleDMV() {

    CarDMV[0] = AddStaticVehicle(516,1274.8179,-1551.0402,13.2833,270.4145,1,1); //  Nebula
	CarDMV[1] = AddStaticVehicle(516,1274.6558,-1560.1385,13.2891,269.5308,1,1); //  Nebula
	CarDMV[2] = AddStaticVehicle(438,1286.9663,-1529.9735,13.5456,270.5405,1,1); // cabbie license exam1
	CarDMV[3] = AddStaticVehicle(438,1272.5927,-1534.6504,13.5632,269.5325,1,1); // cabbie license exam2

    for(new c=0;c<sizeof(CarDMV);c++)
    {
		ResetVehicle(CarDMV[c]);
		SetVehicleNumberPlate(CarDMV[c], "DMV");
		SetVehicleHealthEx(CarDMV[c], GetVehicleDataHealth(GetVehicleModel(CarRent[c])));

        systemVariables[vehicleCounts][0]++;
    }
}

/*CreateBuilding()
{

}*/

ReturnRealName(playerid)
{
    new pname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pname, MAX_PLAYER_NAME);

    if(bf_get(player_bf[playerid], IS_MASKED)) {
 	    new mname[MAX_MASK_NAME];
	    GetPVarString(playerid, "MaskedName", mname, sizeof mname);
        format(pname, sizeof(pname), "[Mask %s]", mname);
    }
    else {
    	for (new i = 0, len = strlen(pname); i < len; i ++) if (pname[i] == '_') pname[i] = ' ';
    }
    return pname;
}

ApplyAnimationEx(playerid, const animlib[], const animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	if(isInjuredmode{playerid})
	    return 0;

	if(isKNOmode{playerid})
	    return 0;

	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}

ResetPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerRaceCheckpoint(playerid);
	DisablePlayerCheckpoint(playerid);
	HidePlayerFooter(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);
}

ResetStatistics(playerid) // ล้างสถานะผู้เล่น
{
    ResetDamages(playerid);
    ResetCooldowns(playerid);
    ResetPlayerMoney(playerid);
    CancelSelectTextDraw(playerid);
	// 0 - ปิดธง (เป็นเท็จ)
	player_bf[playerid] = PlayerFlags:0;

	/*for(new x = 0; x != 40; ++x) {
		ContactData[playerid][x][contactNumber] = 0;
		if(x < MAX_SMS) SmsData[playerid][x][smsExist] = false;
	}*/

	for(new i=0;i!=MAX_CLOTHES; ++i) cl_dataslot[playerid][i] = -1, ClothingData[playerid][i][cl_object] = INVALID_OBJECT_ID;
	for(new i=0; i!=5; ++i)
	{
		characterData[playerid][i][charName][0]='\0';
		characterData[playerid][i][charID]=
		characterData[playerid][i][charLevel]=
		characterData[playerid][i][charSkin]=-1;
	}
				
	if(playerData[playerid][pPrisonCell] != -1 && playerData[playerid][pPrisonDept]) {
	    new dt = (playerData[playerid][pPrisonDept] > 2) ? 3 : playerData[playerid][pPrisonDept] - 1;
	    if(PrisonDepartment[dt][pPrisoner][playerData[playerid][pPrisonCell]] == playerid) PrisonDepartment[dt][pPrisoner][playerData[playerid][pPrisonCell]] = INVALID_PLAYER_ID;
	    if(PrisonDepartment[dt][pPrisoner2][playerData[playerid][pPrisonCell]] == playerid) PrisonDepartment[dt][pPrisoner2][playerData[playerid][pPrisonCell]] = INVALID_PLAYER_ID;
	}
	   
	charselectPlayerTextDrawCount[playerid]=0;
  	//for(new i=0;i!=MAX_TOY_OBJECT; ++i) ToyData[playerid][i] = INVALID_OBJECT_ID;
		
	// Pool System
    /*if(PoolAimer == playerid)
	{
        PoolAimer = -1;
        TextDrawHideForPlayer(playerid, PoolTD[0]);
        TextDrawHideForPlayer(playerid, PoolTD[1]);
        TextDrawHideForPlayer(playerid, PoolTD[2]);
        TextDrawHideForPlayer(playerid, PoolTD[3]);
        DestroyObject(AimObject);
	}
    if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			KillTimer(PoolTimer_);
			RespawnPoolBalls();
        }
    }*/

    PlayerAttachWeapon[playerid][0][awWid] = 3;
    PlayerAttachWeapon[playerid][1][awWid] = 4;
    PlayerAttachWeapon[playerid][2][awWid] = 5;
    PlayerAttachWeapon[playerid][3][awWid] = 8;
    PlayerAttachWeapon[playerid][4][awWid] = 22;
    PlayerAttachWeapon[playerid][5][awWid] = 23;
    PlayerAttachWeapon[playerid][6][awWid] = 24;
    PlayerAttachWeapon[playerid][7][awWid] = 25;
    PlayerAttachWeapon[playerid][8][awWid] = 26;
    PlayerAttachWeapon[playerid][9][awWid] = 27;
    PlayerAttachWeapon[playerid][10][awWid] = 28;
    PlayerAttachWeapon[playerid][11][awWid] = 29;
    PlayerAttachWeapon[playerid][12][awWid] = 30;
    PlayerAttachWeapon[playerid][13][awWid] = 31;
    PlayerAttachWeapon[playerid][14][awWid] = 32;
    PlayerAttachWeapon[playerid][15][awWid] = 33;
    PlayerAttachWeapon[playerid][16][awWid] = 34;

	for(new i=0;i!=MAX_ATTACH_WEAPON; ++i) {
		PlayerAttachWeapon[playerid][i][awID] = 0;
		PlayerAttachWeapon[playerid][i][awHide] = 0;
		PlayerAttachWeapon[playerid][i][awBone] = 1;
		PlayerAttachWeapon[playerid][i][aPx] = 0.0;
		PlayerAttachWeapon[playerid][i][aPy] = 0.0;
		PlayerAttachWeapon[playerid][i][aPz] = 0.0;
		PlayerAttachWeapon[playerid][i][aPrx] = 0.0;
		PlayerAttachWeapon[playerid][i][aPry] = 0.0;
		PlayerAttachWeapon[playerid][i][aPrz] = 0.0;
	}
	playerData[playerid][pSprayPermission] = 0;

	cl_selected[playerid]=-1;
	cl_buying[playerid]=0; cl_buyingpslot[playerid]=-1;

	if(EffectDrugs[playerid] != 0.0) {
		stop EffectDrugs_Timer[playerid];
		EffectDrugs_Timer[playerid] = Timer:0;
	}
	
	if(AddictTimer[playerid] != Timer:0) {
		stop AddictTimer[playerid];
		AddictTimer[playerid] = Timer:0;
	}

	usingAdminSpectate{playerid}=false;
    JustCasinoed[playerid] = 0; SufferDrugs{playerid}=false; EffectDrugs[playerid]=0.0;
    FishingPlace[playerid]=-1; TazerActive{playerid} = false; BeanbagActive{playerid} = false;
	ConvoID[playerid]=INVALID_PLAYER_ID; MedicBill[playerid] = 0; gLastCar[playerid] = 0;
	loginValidTime[playerid] = 0; isDeathmode{playerid} = false; deathtime[playerid] = 300;
	isInjuredmode{playerid}=false;
    TaxiDuty{playerid} = false; TaxiFare{playerid} = 0; TaxiStart{playerid} = false; TaxiMoney[playerid] = 0; TaxiMade[playerid] = 0;

	isKNOmode{playerid} = false; knotime[playerid] = 120;

	if(resprayTimer[playerid] != -1) {
		KillTimer(resprayTimer[playerid]);
		resprayTimer[playerid]=-1;
	}
	if(spraytimer[playerid] != -1) {
		KillTimer(spraytimer[playerid]);
		spraytimer[playerid]=-1;
	}
	
    HouseEntered[playerid]=-1;
    BizEntered[playerid]=-1;
	GarageEntered[playerid]=-1;
	grantbuild[playerid]=-1;
	TazerCount[playerid]=0;

    gPlayerCheckpointValue[playerid]=-1;
    gPlayerCheckpointStatus[playerid]=CHECKPOINT_NONE;

    nearHouse_var[playerid]=-1;
	nearBiz_var[playerid]=-1;
	//nearGarage_var[playerid]=-1;

	serviceComp[playerid] = 0;
	serviceTowtruck[playerid] = 0;
	serviceCustomer[playerid] = 0;
	serviced[playerid] = 0;
	RepairTime{playerid}=0;

	playerData[playerid][pHUDStyle]=0;

	//-----------------------------------------------------------------
	for(new i = 0; i != 10; i++)
		RoadBlocks[playerid][i] = INVALID_OBJECT_ID;
	//-----------------------------------------------------------------

    //Courier
    carryCrate[playerid]=-1;

    RentCarKey[playerid]=9999;

    PlayerPlaceCar[playerid]=-1;
    PlayerPlaceSlot[playerid]=-1;

    deleyNop{ playerid } = false;

    // ================== [ Farmer ] ===================
    far_start[playerid]=0; far_place[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;
	// ================== [ Hotwire ] ==================
	h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
    h_word[playerid][0]='\0';

    // ================== [ Phone Cover ] ================================
    PCoverOpening{ playerid } = false; PCoverColor[playerid]=0;
	// ================== [ Car GUI System ] =============================
	PCarOpening{ playerid } = false;
	PCarPage[playerid] = 1;
    PCarType[playerid] = 0;
	// Dealership
	VDealerSelectCatalog[playerid] = -1;
	for(new i = 0; i != 6; i++)
	{
		VDealerData[playerid][i][0] = 0;
		VDealerData[playerid][i][1] = -1;
		VDealerData[playerid][i][2] = -1;
		VDealerData[playerid][i][3] = 0;
		VDealerData[playerid][i][4] = 0;
	}

	// new ATM System
	atm_auth{ playerid }= false;
	atm_opening{ playerid }= false;
	atm_tnumber[playerid]{0} = '\0';
	//strpack(atm_tnumber[playerid], "", 12 char);
	atm_page[playerid]=0;

    fish_timer[playerid]=0;
    adTick[playerid]=0;

	BoomboxData[playerid][boomboxPlaced] = false;
	BoomboxData[playerid][boomboxOn] = false;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;
	playerData[playerid][pBoombox] = 0;

	playerData[playerid][pGasCan]=0;
	playerData[playerid][pCigarettes]=0;
	playerData[playerid][pDrink]=0;

    playerData[playerid][pBadgeNumber] = 0;
    
	playerData[playerid][pInCCTV] = 0;
    
	playerData[playerid][pUserid]=
	playerData[playerid][pID]=-1;
	playerData[playerid][pCreated]=0;
	playerData[playerid][pTutorialStep]=0;
	playerData[playerid][pGender]=0;
	playerData[playerid][pBirthdate] = 1958;
    playerData[playerid][pModel] = 1;
    playerData[playerid][pPmodel] = 0;
    playerData[playerid][pPnumber] = 0;
    playerData[playerid][pChar] = 0;
	playerData[playerid][pContractTime]=0;
	playerData[playerid][pPos] = 0.0;
	playerData[playerid][pSHealth] = 0.0;
	playerData[playerid][pArmour] = 0.0;
	playerData[playerid][pHealth] = 100.0;
    playerData[playerid][pInterior] = 0;
    playerData[playerid][pWorld] = 0;
    playerData[playerid][pHunger] = 0;
    playerData[playerid][pTimeout] = 0;
    playerData[playerid][pSpawnPoint] = 0;
    playerData[playerid][pSpawnType] = 0;
    playerData[playerid][pOnDuty] = 0;
    playerData[playerid][pLocal] = 255;
    playerData[playerid][pHouseKey] = -1;
    playerData[playerid][pAdmin] = 0;
    playerData[playerid][pTester] = 0;
    playerData[playerid][pJob] = 0;
    playerData[playerid][pSideJob] = 0;
    playerData[playerid][pJobRank] = 0;
    playerData[playerid][pADPoint] = 0;
	playerData[playerid][pArrested] = 0;
	playerData[playerid][pPrisoned] = 0;
    playerData[playerid][pCareer] = 0;
    playerData[playerid][pPlayingHours] = 0;
    playerData[playerid][pLevel] = 0;
    playerData[playerid][pExp] = 0;
    playerData[playerid][pPUpgrade] = 0;
    playerData[playerid][pDonateRank] = 0;
	playerData[playerid][pDonateUnix] = 0;
 	playerData[playerid][pPayDay] = 0;
	playerData[playerid][pPayDayHad] = 0;
	playerData[playerid][pPayCheck] = 0;
	playerData[playerid][pChequeCash] = 0;
	playerData[playerid][pAccount] = 0;
	playerData[playerid][pBankPin][0] = '\0';
	playerData[playerid][pBankNumber] = 0;
	playerData[playerid][pCash] = 0;
	playerData[playerid][pSavings] = 0;
	playerData[playerid][pSavingsCollect] = 0;
	playerData[playerid][pAlcoholPerk] = 0;
	playerData[playerid][pDrugPerk] = 0;
	playerData[playerid][pMiserPerk] = 0;
	playerData[playerid][pPainPerk] = 0;
	playerData[playerid][pTraderPerk] = 0;

	playerData[playerid][pFishes] = 0;
 	playerData[playerid][pJailed] = 0;
 	playerData[playerid][pJailTime] = 0;
 	playerData[playerid][pJailTime2] = 0;
 	
 	playerData[playerid][pPrisonCell] = -1;
 	playerData[playerid][pPrisonDept] = 0;
 	playerData[playerid][pPrisonTime] = 0;
 	playerData[playerid][pIsolateTime] = 0;

	if(IsValidDynamic3DTextLabel(playerData[playerid][pPrisonNumber]))
		DestroyDynamic3DTextLabel(playerData[playerid][pPrisonNumber]);
		
    // Checkpoint Mission
    playerData[playerid][pCP_Type] = -1;
    playerData[playerid][pCP_X] = 0.0;
    playerData[playerid][pCP_Y] = 0.0;
    playerData[playerid][pCP_Z] = 0.0;

  	playerData[playerid][pCellTime] = 0;
	playerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	playerData[playerid][pCallConnect] = INVALID_PLAYER_ID;

	playerData[playerid][pIncomingCall] = 0;
	playerData[playerid][pCallNumb] = 0;
	playerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	playerData[playerid][pFactionOffered] = -1;
	playerData[playerid][pFaction] = -1;
	playerData[playerid][pFactionID] = -1;
	playerData[playerid][pFactionRank] = 0;
	playerData[playerid][pFactionEdit] = -1;
	playerData[playerid][pSwat] = 0;
	playerData[playerid][pSelectedSlot] = -1;
	playerData[playerid][pShowFooter] = 0;
	playerData[playerid][pFreeze] = 0;
	playerData[playerid][pPCarkey]=9999;
	playerData[playerid][pPDupkey]=9999;

	playerData[playerid][pWorkOn] = -1;

    //playerData[playerid][pMask_Name] = randomEx(100000, 999999);
    playerData[playerid][pOOCMask] = 0;
    playerData[playerid][pFightStyle] = 0;
	playerData[playerid][pHelpup] = -1;
	playerData[playerid][pOfficialSkin] = 0;
	playerData[playerid][pOffSkin] = 0;

	playerData[playerid][pAK47] = 0;
	playerData[playerid][pEagle] = 0;
	playerData[playerid][pShotgun] = 0;
	playerData[playerid][pMP5] = 0;
	playerData[playerid][pUZI] = 0;
	playerData[playerid][pColt45] = 0;
	playerData[playerid][pArtMoney] = 0;

	AEditSkin[playerid] = -1;
	MoneyEdit[playerid] = -1;

	for (new i = 0; i < 13; i ++) {
		playerData[playerid][pGuns][i] = 0;
		playerData[playerid][pAmmo][i] = 0;

		if(i < MAX_PLAYER_WEAPON_PACKAGE) {
			playerData[playerid][pPackageWP][i]=0;
			playerData[playerid][pPackageAmmo][i]=0;
		}
	}

	for (new i=0;i!=MAX_PLAYER_DRUG_PACKAGE;i++) {
		PlayerDrug[playerid][i][drugQTY]=0.0;
	}
	
	
	for (new i=0;i!=MAX_DRUGS;i++) {
		playerData[playerid][pDrugAddiction][i]=0;
	}
	playerData[playerid][pDrugAddict] = 0;
	playerData[playerid][pDrugAddictStrength] = 0;
	
	
	playerData[playerid][pGun1] = 0;
	playerData[playerid][pGun2] = 0;
	playerData[playerid][pGun3] = 0;

	playerData[playerid][pAmmo1] = 0;
	playerData[playerid][pAmmo2] = 0;
	playerData[playerid][pAmmo3] = 0;

	playerData[playerid][pPLicense] = 0;
	playerData[playerid][pSLicense] = 0;

	playerData[playerid][pSpectating] = INVALID_PLAYER_ID;

	playerData[playerid][pReport] = 0;
	format(playerData[playerid][pReportMessage], 64, "(null)");
	playerData[playerid][pHelpme] = 0;
	format(playerData[playerid][pReportMessage], 64, "(null)");

	format(playerData[playerid][pAdvertiseText], 128, "(null)");

	format(playerData[playerid][pAttribute], 128, "");
	format(playerData[playerid][pAdminName], MAX_PLAYER_NAME, "(null)");

	GraffiModel[playerid]=0;
	GraffiName[playerid]{0} = '\0';
	GraffiFont[playerid]{0} = '\0';

	playerData[playerid][pAdverts] = 0;

	playerData[playerid][pRequestVehicle] = 0;
	format(playerData[playerid][pRVehicleMessage], 64, "(null)");

	playerData[playerid][pVehicleID] = 0;
}

CreateTextdraws(playerid)
{
	TD_CarModing[playerid] = CreatePlayerTextDraw(playerid, 310.400115, 288.560028, "~y~nitro ~w~(~<~) exhaust (~>~) ~y~wheels~n~~w~----------------~n~~y~price:~w~$11140~n~~y~name:~w~slamin exhaust (#1114).~n~~y~buying this will replace your current mod for this.~n~~w~press (~y~y~w~) to ~y~confirm~w~. press (~y~n~w~) to ~y~exit~w~.");
	PlayerTextDrawLetterSize(playerid, TD_CarModing[playerid], 0.411999, 1.814042);
	PlayerTextDrawTextSize(playerid, TD_CarModing[playerid], 630.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TD_CarModing[playerid], 1);
	PlayerTextDrawColor(playerid, TD_CarModing[playerid], -1);
	PlayerTextDrawSetOutline(playerid, TD_CarModing[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_CarModing[playerid], 255);
	PlayerTextDrawFont(playerid, TD_CarModing[playerid], 3);
	PlayerTextDrawSetProportional(playerid, TD_CarModing[playerid], 1);

	/*jail_timeleft[playerid] = CreatePlayerTextDraw(playerid, 277.000000,371.000000,"~p~Time remaining: ~w~Loading...");
	PlayerTextDrawAlignment(playerid,jail_timeleft[playerid],0);
	PlayerTextDrawBackgroundColor(playerid,jail_timeleft[playerid],0x000000ff);
	PlayerTextDrawFont(playerid,jail_timeleft[playerid],3);
	PlayerTextDrawLetterSize(playerid,jail_timeleft[playerid],0.299999,1.200000);
	PlayerTextDrawColor(playerid,jail_timeleft[playerid],0xffffffff);
	PlayerTextDrawSetOutline(playerid,jail_timeleft[playerid],1);
	PlayerTextDrawSetProportional(playerid,jail_timeleft[playerid],1);
	PlayerTextDrawSetShadow(playerid,jail_timeleft[playerid],1);*/

	PTD_Restaurant[playerid][0] = CreatePlayerTextDraw(playerid,103.800018, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][0], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][0], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][0], 2218);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][0], -60.000000, 30.000000, 50.000000, 0.879998);
	//103.19999
	PTD_Restaurant[playerid][1] = CreatePlayerTextDraw(playerid,207.000008, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][1], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][1], 2219);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][1], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][2] = CreatePlayerTextDraw(playerid,310.199998, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][2], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][2], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][2], 2220);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][2], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][3] = CreatePlayerTextDraw(playerid,413.399988, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][3], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][3], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][3], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][3], 2355);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][3], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][4] = CreatePlayerTextDraw(playerid,119.600013, 277.389923, "Buster~n~~r~Health: +30~n~Removes hunger~n~~b~Price: $170");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][4], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][4], 65535);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][4], 0);

	PTD_Restaurant[playerid][5] = CreatePlayerTextDraw(playerid,222.800003, 277.389923, "Double D-Luxe~n~~r~Health: +60~n~Removes hunger~n~~b~Price: $270");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][5], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][5], 65535);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][5], 0);
	//103.19999

	PTD_Restaurant[playerid][6] = CreatePlayerTextDraw(playerid,325.999993, 277.389923, "Full Rack~n~~r~Health: +100~n~Removes hunger~n~~b~Price: $400");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][6], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][6], -1061109505);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][6], 0);

	PTD_Restaurant[playerid][7] = CreatePlayerTextDraw(playerid,429.199983, 277.389923, "Salad Meal~n~~r~Health: +100~n~Removes hunger~n~~b~Price: $400");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][7], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][7], -1061109505);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][7], 0);

	PTD_Restaurant[playerid][8] = CreatePlayerTextDraw(playerid, 112.000015, 145.199874, "] Idlewood Pizza Stack ]");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][8], 0.743197, 2.112709);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][8], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][8], 255);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][8], 0);

	TD_PhoneCoverModel[playerid] = CreatePlayerTextDraw(playerid, 325.400177, 140.0, "");
	PlayerTextDrawLetterSize(playerid, TD_PhoneCoverModel[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_PhoneCoverModel[playerid], 90.000000, 119.000000);
	PlayerTextDrawAlignment(playerid, TD_PhoneCoverModel[playerid], 1);
	PlayerTextDrawColor(playerid, TD_PhoneCoverModel[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawFont(playerid, TD_PhoneCoverModel[playerid], 5);
	PlayerTextDrawSetProportional(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetShadow(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	PlayerTextDrawSetPreviewRot(playerid, TD_PhoneCoverModel[playerid], 80.000000, -30.000000, 0.000000, 0.600000);

	// NEW ATM SYSTEM
	TDEditor_ATM[playerid][0] = CreatePlayerTextDraw(playerid, 175.300125, 108.106666, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][0], 291.739746, 213.059967);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][0], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][0], 286331391);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][0], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][0], 0);

	TDEditor_ATM[playerid][1] = CreatePlayerTextDraw(playerid, 175.400070, 108.213394, "ld_spac:tvcorn");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][1], 146.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][1], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][1], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][1], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][1], 0);

	TDEditor_ATM[playerid][2] = CreatePlayerTextDraw(playerid, 466.899932, 108.295654, "ld_spac:tvcorn");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][2], -146.000000, 107.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][2], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][2], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][2], 0);

	TDEditor_ATM[playerid][3] = CreatePlayerTextDraw(playerid, 466.999786, 322.411102, "ld_spac:tvcorn");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][3], -146.500000, -107.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][3], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][3], 0);

	TDEditor_ATM[playerid][4] = CreatePlayerTextDraw(playerid, 175.499771, 322.320098, "ld_spac:tvcorn");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][4], 146.500000, -107.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][4], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][4], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][4], 0);

	TDEditor_ATM[playerid][5] = CreatePlayerTextDraw(playerid, 320.000061, 120.311111, "~g~$ ~w~Bank of San Andreas ~g~$");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][5], 0.462399, 2.097774);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][5], 0.000000, 169.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][5], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, TDEditor_ATM[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid, TDEditor_ATM[playerid][5], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][5], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][5], 1);

	TDEditor_ATM[playerid][6] = CreatePlayerTextDraw(playerid, 223.899353, 142.342086, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][6], 190.000000, 155.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][6], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][6], 1347440895);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][6], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][6], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][6], 0);

	TDEditor_ATM[playerid][7] = CreatePlayerTextDraw(playerid, 225.799316, 144.137680, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][7], 186.000000, 151.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][7], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][7], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][7], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][7], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][7], 0);

	TDEditor_ATM[playerid][8] = CreatePlayerTextDraw(playerid, 194.000183, 152.813385, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][8], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][8], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][8], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][8], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][8], true);

	TDEditor_ATM[playerid][9] = CreatePlayerTextDraw(playerid, 194.000183, 198.332412, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][9], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][9], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][9], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][9], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][9], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][9], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][9], true);

	TDEditor_ATM[playerid][10] = CreatePlayerTextDraw(playerid, 194.000183, 243.781906, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][10], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][10], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][10], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][10], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][10], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][10], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][10], true);

	TDEditor_ATM[playerid][11] = CreatePlayerTextDraw(playerid, 413.900787, 152.813385, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][11], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][11], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][11], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][11], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][11], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][11], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][11], true);

	TDEditor_ATM[playerid][12] = CreatePlayerTextDraw(playerid, 413.900787, 198.332412, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][12], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][12], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][12], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][12], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][12], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][12], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][12], true);

	TDEditor_ATM[playerid][13] = CreatePlayerTextDraw(playerid, 413.900787, 243.781906, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][13], 30.000000, 37.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][13], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][13], 1920103167);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][13], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][13], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][13], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][13], true);

	TDEditor_ATM[playerid][14] = CreatePlayerTextDraw(playerid, 262.700073, 327.628906, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][14], 109.000000, 102.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][14], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][14], 1347440895);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][14], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][14], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][14], 0);

	TDEditor_ATM[playerid][15] = CreatePlayerTextDraw(playerid, 264.700195, 330.129058, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][15], 105.000000, 97.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][15], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][15], 286331391);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][15], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][15], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][15], 0);

	TDEditor_ATM[playerid][16] = CreatePlayerTextDraw(playerid, 328.199981, 340.173339, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][16], 38.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][16], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][16], -16776961);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][16], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][16], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][16], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][16], true);

	TDEditor_ATM[playerid][17] = CreatePlayerTextDraw(playerid, 328.199981, 367.972778, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][17], 38.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][17], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][17], -65281);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][17], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][17], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][17], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][17], true);

	TDEditor_ATM[playerid][18] = CreatePlayerTextDraw(playerid, 328.199981, 395.772216, "LD_SPAC:white");
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][18], 38.000000, 23.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][18], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][18], 8388863);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][18], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][18], 4);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][18], 0);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][18], true);

	TDEditor_ATM[playerid][19] = CreatePlayerTextDraw(playerid, 348.800140, 340.920043, "CANCEL");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][19], 0.181198, 1.251554);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][19], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][19], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][19], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][19], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][19], 1);

	TDEditor_ATM[playerid][20] = CreatePlayerTextDraw(playerid, 348.800140, 367.921691, "CLEAR");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][20], 0.181198, 1.251554);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][20], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][20], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][20], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][20], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][20], 1);

	TDEditor_ATM[playerid][21] = CreatePlayerTextDraw(playerid, 348.800140, 395.523376, "ENTER");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][21], 0.181198, 1.251554);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][21], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][21], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][21], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][21], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][21], 1);

	TDEditor_ATM[playerid][22] = CreatePlayerTextDraw(playerid, 295.599822, 403.757965, "0");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][22], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][22], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][22], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][22], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][22], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][22], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][22], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][22], true);

	TDEditor_ATM[playerid][23] = CreatePlayerTextDraw(playerid, 276.399414, 381.737854, "1");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][23], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][23], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][23], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][23], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][23], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][23], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][23], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][23], true);

	TDEditor_ATM[playerid][24] = CreatePlayerTextDraw(playerid, 295.700592, 381.737854, "2");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][24], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][24], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][24], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][24], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][24], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][24], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][24], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][24], true);

	TDEditor_ATM[playerid][25] = CreatePlayerTextDraw(playerid, 314.801757, 381.737854, "3");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][25], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][25], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][25], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][25], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][25], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][25], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][25], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][25], true);

	TDEditor_ATM[playerid][26] = CreatePlayerTextDraw(playerid, 276.399414, 359.336486, "4");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][26], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][26], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][26], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][26], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][26], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][26], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][26], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][26], true);

	TDEditor_ATM[playerid][27] = CreatePlayerTextDraw(playerid, 295.700592, 359.336486, "5");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][27], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][27], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][27], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][27], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][27], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][27], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][27], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][27], true);

	TDEditor_ATM[playerid][28] = CreatePlayerTextDraw(playerid, 314.701751, 359.336486, "6");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][28], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][28], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][28], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][28], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][28], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][28], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][28], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][28], true);

	TDEditor_ATM[playerid][29] = CreatePlayerTextDraw(playerid, 276.399414, 337.635162, "7");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][29], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][29], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][29], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][29], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][29], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][29], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][29], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][29], true);

	TDEditor_ATM[playerid][30] = CreatePlayerTextDraw(playerid, 295.700592, 337.635162, "8");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][30], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][30], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][30], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][30], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][30], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][30], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][30], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][30], true);

	TDEditor_ATM[playerid][31] = CreatePlayerTextDraw(playerid, 314.701751, 338.132934, "9");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][31], 0.461598, 2.276978);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][31], 13.000000, 13.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][31], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][31], -1);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][31], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][31], 2);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][31], 1);
	PlayerTextDrawSetSelectable(playerid, TDEditor_ATM[playerid][31], true);

	TDEditor_ATM[playerid][32] = CreatePlayerTextDraw(playerid, 226.500015, 163.122283, "Deposit");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][32], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][32], 299.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][32], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][32], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][32], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][32], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][32], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][32], 1);

	TDEditor_ATM[playerid][33] = CreatePlayerTextDraw(playerid, 226.100021, 209.025085, "Withdraw");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][33], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][33], 231.100021, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][33], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][33], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][33], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][33], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][33], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][33], 1);

	TDEditor_ATM[playerid][34] = CreatePlayerTextDraw(playerid, 226.100021, 254.827880, "Transfer");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][34], 0.400000, 1.600000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][34], 1);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][34], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][34], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][34], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][34], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][34], 1);

	TDEditor_ATM[playerid][35] = CreatePlayerTextDraw(playerid, 411.699890, 163.122283, "Savings");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][35], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][35], 299.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][35], 3);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][35], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][35], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][35], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][35], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][35], 1);

	TDEditor_ATM[playerid][36] = CreatePlayerTextDraw(playerid, 411.699890, 209.025085, "Balance");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][36], 0.400000, 1.600000);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][36], 299.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][36], 3);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][36], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][36], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][36], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][36], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][36], 1);

	TDEditor_ATM[playerid][37] = CreatePlayerTextDraw(playerid, 318.800262, 147.688812, "Balance~n~~n~Current Balance~n~~g~$0~l~~n~~n~Interest (0.10 %)~n~~g~$0~l~~n~~n~Savings Balance~n~~g~$0");
	PlayerTextDrawLetterSize(playerid, TDEditor_ATM[playerid][37], 0.290400, 1.485513);
	PlayerTextDrawTextSize(playerid, TDEditor_ATM[playerid][37], 0.000000, 180.000000);
	PlayerTextDrawAlignment(playerid, TDEditor_ATM[playerid][37], 2);
	PlayerTextDrawColor(playerid, TDEditor_ATM[playerid][37], 255);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_ATM[playerid][37], 255);
	PlayerTextDrawFont(playerid, TDEditor_ATM[playerid][37], 2);
	PlayerTextDrawSetShadow(playerid, TDEditor_ATM[playerid][37], 0);
	PlayerTextDrawSetProportional(playerid, TDEditor_ATM[playerid][37], 1);
	
	new
	    Float:x = 160.0,
	    Float:y = 280.0;

	for (new i = 0; i < 8; i ++)
	{
		if (i > 0 && (i == 4))
		{
		    x = 160.0;
			y = 280.0+14.0;
		}
		else if(i > 0)
		{
			x += 13;
		}
 		ColorSelection[playerid][i] = CreatePlayerTextDraw(playerid, x, y, "_");
		PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i], 0);
		PlayerTextDrawFont(playerid, ColorSelection[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, ColorSelection[playerid][i], 13, 14);
		PlayerTextDrawColor(playerid, ColorSelection[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, ColorSelection[playerid][i], 0);
		PlayerTextDrawTextSize(playerid, ColorSelection[playerid][i], 13.0000, 14.000000);
		PlayerTextDrawSetSelectable(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, ColorSelection[playerid][i], 19300);

		ColorSelection2[playerid][i] = CreatePlayerTextDraw(playerid, 260+x, y, "_");
		PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i], 0);
		PlayerTextDrawFont(playerid, ColorSelection2[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, ColorSelection2[playerid][i], 13, 14);
		PlayerTextDrawColor(playerid, ColorSelection2[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, ColorSelection2[playerid][i], 0);
		PlayerTextDrawTextSize(playerid, ColorSelection2[playerid][i], 13.0000, 14.000000);
		PlayerTextDrawSetSelectable(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, ColorSelection2[playerid][i], 19300);
	}
	ColorSelectText[playerid] = CreatePlayerTextDraw(playerid, 185.599990, 311.795379, "Primary Colors");
	PlayerTextDrawAlignment(playerid,ColorSelectText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,ColorSelectText[playerid], 255);
	PlayerTextDrawFont(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawLetterSize(playerid,ColorSelectText[playerid], 0.389999, 1.699998);
	PlayerTextDrawColor(playerid,ColorSelectText[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ColorSelectText[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawUseBox(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawBoxColor(playerid,ColorSelectText[playerid], 0);
	PlayerTextDrawTextSize(playerid,ColorSelectText[playerid], 190.000000, 128.000000);
	PlayerTextDrawSetSelectable(playerid,ColorSelectText[playerid], 1);


	ColorSelectLeft[playerid] = CreatePlayerTextDraw(playerid, 145.599945, 287.422149, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, ColorSelectLeft[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectLeft[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectLeft[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectLeft[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectLeft[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectLeft[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectLeft[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, ColorSelectLeft[playerid], true);


	ColorSelectRight[playerid] = CreatePlayerTextDraw(playerid, 212.200164, 287.422149, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, ColorSelectRight[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectRight[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectRight[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectRight[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectRight[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectRight[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectRight[playerid], 4);
	PlayerTextDrawSetProportional(playerid, ColorSelectRight[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ColorSelectRight[playerid], true);

	ColorSelectText2[playerid] = CreatePlayerTextDraw(playerid, 260+185.599990, 311.795379, "Secondary Colors");
	PlayerTextDrawAlignment(playerid,ColorSelectText2[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,ColorSelectText2[playerid], 255);
	PlayerTextDrawFont(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawLetterSize(playerid,ColorSelectText2[playerid], 0.389999, 1.699998);
	PlayerTextDrawColor(playerid,ColorSelectText2[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ColorSelectText2[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawUseBox(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawBoxColor(playerid,ColorSelectText2[playerid], 0);
	PlayerTextDrawTextSize(playerid,ColorSelectText2[playerid], 190.000000, 128.000000);
	PlayerTextDrawSetSelectable(playerid,ColorSelectText2[playerid], 1);

	ColorSelectLeft2[playerid] = CreatePlayerTextDraw(playerid, 260+145.599945, 287.422149, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, ColorSelectLeft2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectLeft2[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectLeft2[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectLeft2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectLeft2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectLeft2[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectLeft2[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, ColorSelectLeft2[playerid], true);

	ColorSelectRight2[playerid] = CreatePlayerTextDraw(playerid, 260+212.200164, 287.422149, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, ColorSelectRight2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectRight2[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectRight2[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectRight2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectRight2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectRight2[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectRight2[playerid], 4);
	PlayerTextDrawSetProportional(playerid, ColorSelectRight2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ColorSelectRight2[playerid], true);

	pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, "_");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.45, 1.05);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 3);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);

	/*pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.320000, 1.604979);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);

	pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.540798, 2.535822);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], -2139062017);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);*/

	pPT_Footer[playerid] = CreatePlayerTextDraw(playerid,118.000000, 283.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,pPT_Footer[playerid], 255);
	PlayerTextDrawFont(playerid,pPT_Footer[playerid], 2);
	PlayerTextDrawLetterSize(playerid,pPT_Footer[playerid], 0.220000, 1.199999);
	PlayerTextDrawColor(playerid,pPT_Footer[playerid], -1);
	PlayerTextDrawSetOutline(playerid,pPT_Footer[playerid], 1);
	PlayerTextDrawSetProportional(playerid,pPT_Footer[playerid], 1);
}

TerminateConnection(playerid)
{
	if(VCarModingSetting{playerid}) {
		SetVehicleExitCarModingShop(playerid);
	}

	if(TaxiMoney[playerid] > 0 && IsPlayerInAnyVehicle(playerid))
	{
		ChargePerson(playerid);
	}

	/*if(playerData[playerid][pPCarkey] != 99999)
	{
	    if(CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID]) {
			for(new i=0;i<sizeof(removelist_playervehicle);i++) {
				if(!removelist_playervehicle[i]) {
					removelist_playervehicle[i] = playerData[playerid][pPCarkey] + 1;
					break;
				}
			}
		}
	}*/
	
	//========================================
	for(new i = 0; i < 10; i++)
	{
		if(RoadBlocks[playerid][i] != INVALID_OBJECT_ID)
		{
			DestroyDynamicObject(RoadBlocks[playerid][i]);
		}
	}
	//========================================

	if (BoomboxData[playerid][boomboxPlaced]) {
		Boombox_Destroy(playerid);

		foreach (new i : Player)
		{
			if(grantboombox[i]==playerid) grantboombox[i] = INVALID_PLAYER_ID;
		}
	}

	if(playerData[playerid][pPCarkey] != 9999) {
		if(Iter_Contains(sv_playercar, playerData[playerid][pPCarkey])) {
			CarData[playerData[playerid][pPCarkey]][carDespawn]=true;
		}
	}
	//ฆ่าเวลา
	if (playerData[playerid][pShowFooter]) {
		playerData[playerid][pShowFooter] = false;
		PlayerTextDrawHide(playerid, pPT_Footer[playerid]);
	    KillTimer(playerData[playerid][pFooterTimer]);
	}
	if (playerData[playerid][pFreeze])
	    KillTimer(playerData[playerid][pFreezeTimer]);

		
	//ฆ่าตัวแปรผู้เล่นอื่นที่ใช้เชื่อมต่อกับผู้เล่นนี้
	foreach (new i : Player)
	{
		if (playerData[i][pFactionOffer] == playerid) {
		    playerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    playerData[i][pFactionOffered] = -1;
		}

		if(playerData[i][pSpectating] == playerid) {
			TogglePlayerSpectating(i, false);
			SendClientMessage(i, COLOR_GREY, "ผู้เล่นนั้นตัดขาดการเชื่อมต่อจากเซิร์ฟเวอร์");
		}
	}

	for(new i=0;i!=MAX_VEHICLES;i++) {
	
		if(CoreVehicles[i][vOwnerID] == playerid)
		{
			if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime])
			{
				VehicleLabel[i][vLabelCount] = 0;
				VehicleLabel[i][vLabelTime] = 0;
				VehicleLabel[i][vLabelType] = 0;

				DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
			}
			CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;
			CoreVehicles[i][vUpgradeID] = 0;
			break;
		}
	}
	Poker_LeaveTable(playerid);
    ExitSettingVehicle(playerid);


	// Poker System
/*	
	if(GetPVarType(playerid, "pkrTableID")) {

		new tableid = GetPVarInt(playerid, "pkrTableID")-1;

		playerData[playerid][pCash] += GetPVarInt(playerid, "pkrChips");

		Log_Write("logs/poker.txt", "[%s] %s (%s) has left the table with %s (%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], FormatNumber(GetPVarInt(playerid, "pkrChips")), tableid);

		PokerTable[tableid][pkrPot] -= GetPVarInt(playerid, "pkrChips"); // Poker Table Money Exploit fix.
		// De-occuply Slot
		PokerTable[tableid][pkrPlayers] -= 1;
		if(GetPVarInt(playerid, "pkrStatus")) PokerTable[tableid][pkrActivePlayers] -= 1;
		PokerTable[tableid][pkrSlot][GetPVarInt(playerid, "pkrSlot")] = -1;

		// Check & Stop the Game Loop if No Players at the Table
		if(PokerTable[tableid][pkrPlayers] == 0) {

			for(new i = 0, pID; i < 6; i++) {
				
				targetid = PokerTable[tableid][pkrSlot][i];
				if(targetid != INVALID_PLAYER_ID) {
					
					SetPVarInt(targetid, "pkrChips", GetPVarInt(targetid, "pkrChips")+PokerTable[tableid][pkrPot]); // Last one gets all.
					LeavePokerTable(targetid);
				}
			}

			KillTimer(PokerTable[tableid][pkrPulseTimer]);

			new tmpString[64];
			format(tmpString, sizeof(tmpString), "Poker Table %d", tableid);
			Update3DTextLabelText(PokerTable[tableid][pkrText3DID], COLOR_YELLOW, tmpString);

			ResetPokerTable(tableid);
		}

		if(PokerTable[tableid][pkrRound] == 0 && PokerTable[tableid][pkrDelay] < 5) {
			ResetPokerRound(tableid);
		}

		SetPlayerInterior(playerid, PokerTable[tableid][pkrInt]);
		SetPlayerVirtualWorld(playerid, PokerTable[tableid][pkrVW]);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "pkrTableJoinX"), GetPVarFloat(playerid, "pkrTableJoinY"), GetPVarFloat(playerid, "pkrTableJoinZ")+0.1);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 1);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);

		if(GetPVarInt(playerid, "pkrActiveHand")) {
			PokerTable[tableid][pkrActiveHands]--;
		}

		// Destroy Poker Memory
		DeletePVar(playerid, "pkrWinner");
		DeletePVar(playerid, "pkrCurrentBet");
		DeletePVar(playerid, "pkrChips");
		DeletePVar(playerid, "pkrTableJoinX");
		DeletePVar(playerid, "pkrTableJoinY");
		DeletePVar(playerid, "pkrTableJoinZ");
		DeletePVar(playerid, "pkrTableID");
		DeletePVar(playerid, "pkrSlot");
		DeletePVar(playerid, "pkrStatus");
		DeletePVar(playerid, "pkrRoomLeader");
		DeletePVar(playerid, "pkrRoomBigBlind");
		DeletePVar(playerid, "pkrRoomSmallBlind");
		DeletePVar(playerid, "pkrRoomDealer");
		DeletePVar(playerid, "pkrCard1");
		DeletePVar(playerid, "pkrCard2");
		DeletePVar(playerid, "pkrActivePlayer");
		DeletePVar(playerid, "pkrActiveHand");
		DeletePVar(playerid, "pkrHide");

		// Destroy GUI
		DestroyPokerGUI(playerid);
	}
*/
	if (SQL_IsLogged(playerid))
	{
		SQL_SaveCharacter(playerid);
		RunDisconnect(playerid);
	}
	
	ResetStatistics(playerid);
	
	UnSetLastCaller(playerid);
	
	/*for(new i = 0; i != MAX_ARREST; i++) if(ArrestInfo[i][arrestTaken]) {
		if(ArrestInfo[i][arrestSuspect] == playerid) {
			ArrestInfo[i][arrestTaken] = false;
			ArrestInfo[i][arrestSuspect] = INVALID_PLAYER_ID;
		}
	}*/
	return 1;
}

RunDisconnect(playerid)
{
	if(playerData[playerid][pConnectionID])
	{
		new query[128];
		format(query,sizeof(query),"UPDATE logs_connection SET disconnected = NOW() WHERE id = '%d'",playerData[playerid][pConnectionID]);
		mysql_query(dbCon, query);
	}

}

SQL_SaveCharacter(playerid, thread = MYSQL_UPDATE_TYPE_SINGLE)
{
	if (!SQL_IsLogged(playerid))
		return 0;

	new
	    query[MAX_STRING];

  	MySQLUpdateInit("characters", "ID", playerData[playerid][pID], thread);

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && playerData[playerid][pTimeout] || isInjuredmode{playerid} || playerData[playerid][pJailed] || isKNOmode{playerid})
	{
		if(playerData[playerid][pInCCTV] == 0) {

			if(GetPVarInt(playerid, "WeaponSlot2")) {
				playerData[playerid][pGuns][2] = 24;
				playerData[playerid][pAmmo][2] = GetPVarInt(playerid, "WeaponSlot2");
				DeletePVar(playerid, "WeaponSlot2");
			}

			GetPlayerHealth(playerid, playerData[playerid][pHealth]);
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);

			MySQLUpdateInt(query, "OnDuty", playerData[playerid][pOnDuty]);
			MySQLUpdateFlo(query, "PosX", playerData[playerid][pPos][0]);
			MySQLUpdateFlo(query, "PosY", playerData[playerid][pPos][1]);
			MySQLUpdateFlo(query, "PosZ", playerData[playerid][pPos][2]);
			MySQLUpdateFlo(query, "PosA", playerData[playerid][pPos][3]);
			MySQLUpdateInt(query, "Interior", playerData[playerid][pInterior]);
			MySQLUpdateInt(query, "World", playerData[playerid][pWorld]);
			MySQLUpdateInt(query, "Local", playerData[playerid][pLocal]);
			MySQLUpdateInt(query, "HouseEntered", HouseEntered[playerid]);
			MySQLUpdateInt(query, "BizEntered", BizEntered[playerid]);

			/*format(query, sizeof(query), "UPDATE `characters` SET `OnDuty` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Interior` = '%d', `World` = '%d', `Local` = '%d', `HouseEntered` = '%d', `BizEntered` = '%d'",
			playerData[playerid][pOnDuty],
			playerData[playerid][pPos][0],
			playerData[playerid][pPos][1],
			playerData[playerid][pPos][2],
			playerData[playerid][pPos][3],
			playerData[playerid][pInterior],
			playerData[playerid][pWorld],
			playerData[playerid][pLocal],
			HouseEntered[playerid],
			BizEntered[playerid]
			);*/

			//RentCarKey[playerid]

			new update_str[16];
			for (new i = 0; i < 13; i ++) {
				format(update_str, sizeof update_str, "WpGun%d", i + 1);
				MySQLUpdateInt(query, update_str, playerData[playerid][pGuns][i]);
				format(update_str, sizeof update_str, "WpAmmo%d", i + 1);
				MySQLUpdateInt(query, update_str, playerData[playerid][pAmmo][i]);
			}
		}
	}
	if(playerData[playerid][pOOCMask] && !playerData[playerid][pDonateRank]) playerData[playerid][pOOCMask] = 0;
	new temp_house = 0;
	if(playerData[playerid][pHouseKey] != -1) {
	    temp_house = HouseInfo[playerData[playerid][pHouseKey]][hID];
	}
   	GetPlayerArmour(playerid, playerData[playerid][pArmour]);

	MySQLUpdateInt(query, "Created", playerData[playerid][pCreated]);
	MySQLUpdateInt(query, "Gender", playerData[playerid][pGender]);
	MySQLUpdateInt(query, "Birthdate", playerData[playerid][pBirthdate]);
	MySQLUpdateInt(query, "Model", playerData[playerid][pModel]);
	MySQLUpdateInt(query, "Char", playerData[playerid][pChar]);
	MySQLUpdateInt(query, "PhoneNumbr", playerData[playerid][pPnumber]);
	MySQLUpdateInt(query, "PhoneModel", playerData[playerid][pPmodel]);
	MySQLUpdateInt(query, "SpawnPoint", playerData[playerid][pSpawnPoint]);
	MySQLUpdateInt(query, "SpawnType", playerData[playerid][pSpawnType]);
	MySQLUpdateInt(query, "Admin", playerData[playerid][pAdmin]);
	MySQLUpdateInt(query, "Level", playerData[playerid][pLevel]);
	MySQLUpdateInt(query, "Exp", playerData[playerid][pExp]);
	MySQLUpdateInt(query, "PayDay", playerData[playerid][pPayDay]);
	MySQLUpdateInt(query, "PayDayHad", playerData[playerid][pPayDayHad]);
	MySQLUpdateInt(query, "PayCheck", playerData[playerid][pPayCheck]);
	MySQLUpdateInt(query, "ChequeCash", playerData[playerid][pChequeCash]);
	MySQLUpdateInt(query, "Injured", isInjuredmode{playerid});
	MySQLUpdateInt(query, "playerTimeout", playerData[playerid][pTimeout]);
	MySQLUpdateInt(query, "MedicBill", MedicBill[playerid]);
	MySQLUpdateFlo(query, "Armour", playerData[playerid][pArmour]);
	MySQLUpdateFlo(query, "Health", playerData[playerid][pHealth]);
	MySQLUpdateFlo(query, "Hunger", playerData[playerid][pHunger]);
	MySQLUpdateInt(query, "FightStyle", playerData[playerid][pFightStyle]);
	MySQLUpdateInt(query, "BankAccount", playerData[playerid][pAccount]);
	MySQLUpdateInt(query, "Cash", playerData[playerid][pCash]);
	MySQLUpdateInt(query, "Savings", playerData[playerid][pSavings]);
	MySQLUpdateInt(query, "PlayingHours", playerData[playerid][pPlayingHours]);
	MySQLUpdateInt(query, "plaUpgrade", playerData[playerid][pPUpgrade]);
	MySQLUpdateInt(query, "DonateRank", playerData[playerid][pDonateRank]);
	MySQLUpdateInt(query, "AlcoholPerk", playerData[playerid][pAlcoholPerk]);
	MySQLUpdateInt(query, "DrugPerk", playerData[playerid][pDrugPerk]);
	MySQLUpdateInt(query, "MiserPerk", playerData[playerid][pMiserPerk]);
	MySQLUpdateInt(query, "PainPerk", playerData[playerid][pPainPerk]);
	MySQLUpdateInt(query, "TraderPerk", playerData[playerid][pTraderPerk]);
	MySQLUpdateFlo(query, "SpawnHealth", playerData[playerid][pSHealth]);
	MySQLUpdateInt(query, "Faction", playerData[playerid][pFactionID]);
	MySQLUpdateInt(query, "FactionRank", playerData[playerid][pFactionRank]);
	MySQLUpdateInt(query, "Gun1", playerData[playerid][pGun1]);
	MySQLUpdateInt(query, "Gun2", playerData[playerid][pGun2]);
	MySQLUpdateInt(query, "Gun3", playerData[playerid][pGun3]);
	MySQLUpdateInt(query, "Ammo1", playerData[playerid][pAmmo1]);
	MySQLUpdateInt(query, "Ammo2", playerData[playerid][pAmmo2]);
	MySQLUpdateInt(query, "Ammo3", playerData[playerid][pAmmo3]);
	MySQLUpdateInt(query, "playerJobRank", playerData[playerid][pJobRank]);
	MySQLUpdateInt(query, "playerCareer", playerData[playerid][pCareer]);
	MySQLUpdateInt(query, "SQLHouseKey", temp_house);
	MySQLUpdateInt(query, "PlayerBusinessKey", playerData[playerid][pPbiskey]);
	MySQLUpdateInt(query, "PlayerCarkey", playerData[playerid][pPCarkey]);
	MySQLUpdateInt(query, "Checkpoint_Type", playerData[playerid][pCP_Type]);
	MySQLUpdateFlo(query, "Checkpoint_X", playerData[playerid][pCP_X]);
	MySQLUpdateFlo(query, "Checkpoint_Y", playerData[playerid][pCP_Y]);
	MySQLUpdateFlo(query, "Checkpoint_Z", playerData[playerid][pCP_Z]);
	MySQLUpdateInt(query, "Fishes", playerData[playerid][pFishes]);
	MySQLUpdateInt(query, "SavingsCollect", playerData[playerid][pSavingsCollect]);
	MySQLUpdateInt(query, "BadgeNumber", playerData[playerid][pBadgeNumber]);
	MySQLUpdateInt(query, "DrugAddict", playerData[playerid][pDrugAddict]);
	MySQLUpdateInt(query, "DrugAddictStrength", playerData[playerid][pDrugAddictStrength]);
	MySQLUpdateInt(query, "PrisonDept", playerData[playerid][pPrisonDept]);
	MySQLUpdateInt(query, "PrisonTime", playerData[playerid][pPrisonTime]);
	MySQLUpdateInt(query, "IsolateTime", playerData[playerid][pIsolateTime]);
	MySQLUpdateStr(query, "DrugAddiction", FormatDrugAddiction(playerid));
	MySQLUpdateInt(query, "Arrested", playerData[playerid][pArrested]);
	MySQLUpdateInt(query, "Prisoned", playerData[playerid][pPrisoned]);
	MySQLUpdateInt(query, "ContractTime", playerData[playerid][pContractTime]);
	MySQLUpdateInt(query, "OOCMask", playerData[playerid][pOOCMask]);
	MySQLUpdateInt(query, "Jailed", playerData[playerid][pJailed]);
	MySQLUpdateInt(query, "Jailtime", playerData[playerid][pJailTime]);
	MySQLUpdateInt(query, "CarLic", playerData[playerid][pCarLic]);
	MySQLUpdateInt(query, "Radio", playerData[playerid][pRadio]);
	MySQLUpdateInt(query, "RadioChannel", playerData[playerid][pRChannel]);
	MySQLUpdateInt(query, "RadioSlot", playerData[playerid][pRSlot]);
	MySQLUpdateStr(query, "RadioAuth", playerData[playerid][pRAuth]);
	MySQLUpdateInt(query, "playerJob", playerData[playerid][pJob]);
	MySQLUpdateInt(query, "playerSideJob", playerData[playerid][pSideJob]);
	MySQLUpdateInt(query, "Jailtime2", playerData[playerid][pJailTime2]);
	MySQLUpdateInt(query, "ADPoint", playerData[playerid][pADPoint]);
	MySQLUpdateInt(query, "WepLic", playerData[playerid][pWepLic]);
	MySQLUpdateInt(query, "PrimaryLicense", playerData[playerid][pPLicense]);
	MySQLUpdateInt(query, "SecondaryLicense", playerData[playerid][pSLicense]);
	MySQLUpdateInt(query, "CCWLicense", playerData[playerid][pCCWLic]);
	MySQLUpdateInt(query, "playerSWAT", playerData[playerid][pSwat]);
	MySQLUpdateInt(query, "playerTester", playerData[playerid][pTester]);
	MySQLUpdateInt(query, "playerWork", playerData[playerid][pWorkOn]);
	MySQLUpdateStr(query, "BankPin", playerData[playerid][pBankPin]);
	MySQLUpdateInt(query, "BankNumber", playerData[playerid][pBankNumber]);
	//MySQLUpdateStr(query, "hudToggle", FormatHUDSettings(playerid));
	MySQLUpdateInt(query, "FlyLic", playerData[playerid][pFlyLic]);
	MySQLUpdateInt(query, "MedicalLic", playerData[playerid][pMedicLic]);
	MySQLUpdateInt(query, "DriverWarning", playerData[playerid][pDW]);
	MySQLUpdateInt(query, "GasCan", playerData[playerid][pGasCan]);
	MySQLUpdateInt(query, "Adverts", playerData[playerid][pAdverts]);
	MySQLUpdateInt(query, "Cigarettes", playerData[playerid][pCigarettes]);
	MySQLUpdateInt(query, "Knockout", isKNOmode{playerid});
	MySQLUpdateInt(query, "OfficialSkin", playerData[playerid][pOfficialSkin]);
	MySQLUpdateInt(query, "OffSkin", playerData[playerid][pOffSkin]);

	MySQLUpdateInt(query, "pAK47", playerData[playerid][pAK47]);
	MySQLUpdateInt(query, "pEagle", playerData[playerid][pEagle]);
	MySQLUpdateInt(query, "pShotgun", playerData[playerid][pShotgun]);
	MySQLUpdateInt(query, "pMP5", playerData[playerid][pMP5]);
	MySQLUpdateInt(query, "pUZI", playerData[playerid][pUZI]);
	MySQLUpdateInt(query, "pColt45", playerData[playerid][pColt45]);
	MySQLUpdateInt(query, "pArtMoney", playerData[playerid][pArtMoney]);

	MySQLUpdateFinish(query);


	/*for (new x = 0; x < MAX_SMS; x ++)
	{
		if(SmsData[playerid][x][smsExist])
		{
			format(query, sizeof(query), "UPDATE `phone_sms` SET `Archive` = %d,`ReadSMS` = %d WHERE `id` = %d", SmsData[playerid][x][smsArchive], SmsData[playerid][x][smsRead], SmsData[playerid][x][smsID]);
			mysql_query(dbCon, query);
		}
	}*/

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID)
	    {
		 	mysql_format(dbCon, query,sizeof(query),"UPDATE clothing SET object = '%d', bone = '%d', slot = '%d', equip = '%d', name = '%e', materialColor1 = %d, materialColor2 = %d WHERE id = '%d' AND owner = '%d' LIMIT 1",
		    ClothingData[playerid][id][cl_object],
		    ClothingData[playerid][id][cl_bone],
		    ClothingData[playerid][id][cl_slot],
			ClothingData[playerid][id][cl_equip],
			ClothingData[playerid][id][cl_name],
			ClothingData[playerid][id][cl_mc1],
			ClothingData[playerid][id][cl_mc2],
			ClothingData[playerid][id][cl_sid],
			playerData[playerid][pID]);
			mysql_query(dbCon, query);
		}
	}
	return 1;
}

ResetDamages(playerid)
{
	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    DamageData[playerid][i][dExists] = false;
		DamageData[playerid][i][dSec] = 0;
		DamageData[playerid][i][dDamage] = 0;
		DamageData[playerid][i][dShotType] = 0;
		DamageData[playerid][i][dWeaponid] = 0;
		DamageData[playerid][i][dArmour] = false;
	}
}

AddPlayerDamage(playerid, weaponid, Float:damage, bool:armour, bodypart)
{
	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    if(!DamageData[playerid][i][dExists])
	    {
	        DamageData[playerid][i][dExists] = true;
	        DamageData[playerid][i][dSec] = gettime();
	        DamageData[playerid][i][dDamage] = floatround(damage);
	        DamageData[playerid][i][dShotType] = bodypart;
	        DamageData[playerid][i][dArmour] = armour;
	        DamageData[playerid][i][dWeaponid] = weaponid;
	    	break;
	    }
	}
}

CountPlayerDamage(playerid)
{
	new count = 0;
	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    if(DamageData[playerid][i][dExists])
			count++;
	}
	return count;
}

GetBodyPartName(bodypart)
{
	new name[16];
	switch(bodypart)
	{
		case 3: name = "ลำตัว";
		case 4: name = "ขาหนีบ";
		case 5: name = "แขนซ้าย";
		case 6: name = "แขนขวา";
		case 7: name = "ขาซ้าย";
		case 8: name = "ขาขวา";
		case 9: name = "หัว";
	}
	return name;
}

/*
forward OnCheatDetected(playerid, hacking[]);
public OnCheatDetected(playerid, hacking[])
{
	if (!SQL_IsLogged(playerid))
		return 0;
		
	SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะ %s", playerid, ReturnPlayerName(playerid), hacking);
	SQL_LogCheat(playerid, "OnCheatDetected", hacking);

    //}

	return 1;
}*/

forward OnCheatDetected(playerid, const ip_address[], type, code);
public OnCheatDetected(playerid, const ip_address[], type, code) {


	if(type == 1) {
		SendAdminAlert(COLOR_YELLOW, "ANTI-CHEAT: IP %s ถูกสงสัยว่าใช้โปรแกรมโกงรหัส %d", ip_address, code);
		printf("IP %s Cheat detected code %d", ip_address, code);
	}
	else {
		SendAdminAlert(COLOR_YELLOW, "ANTI-CHEAT: [%d]%s ถูกสงสัยว่าใช้โปรแกรมโกงรหัส %d", playerid, ReturnPlayerName(playerid), code);
		printf("Player [%d]%s Cheat detected code %d", playerid, ReturnPlayerName(playerid), code);
		
		if(code == 11) { // Health hack (in vehicle) 
			new Float:extrafloat, temp_vehicle = GetPlayerVehicleID(playerid);
			GetVehicleHealth(temp_vehicle, extrafloat);
			SetVehicleHealthEx(temp_vehicle, extrafloat);
			UpdateVehicleDamageStatus(temp_vehicle, CoreVehicles[temp_vehicle][vehDamage][0], CoreVehicles[temp_vehicle][vehDamage][1], CoreVehicles[temp_vehicle][vehDamage][2], CoreVehicles[temp_vehicle][vehDamage][3]);
		}
		else if(code == 12) { // Health Hack
			/*new Float:extrafloat;
			GetPlayerHealth(playerid, extrafloat);*/
			SetPlayerHealthEx(playerid, playerData[playerid][pHealth]);
		}
		else if(code == 13) { // Armour Hack
			new Float:extrafloat;
			GetPlayerArmour(playerid, extrafloat);
			SetPlayerArmour(playerid, extrafloat);
		}
	}
	return 1;
}

/*
forward OnCheatWarning(playerid, ip_address[], type, code, code2, count);
public OnCheatWarning(playerid, ip_address[], type, code, code2, count)
{
	if (!SQL_IsLogged(playerid))
		return 0;

	if(type == 1) {
		SendAdminAlert(COLOR_YELLOW, "ANTI-CHEAT: IP %s ถูกเตือนโดย LSRP-AC รหัส %d(%d) (คำเตือนครั้งที่ %d)", ip_address, code, code2, count);
	}
	else {
		SendAdminAlert(COLOR_YELLOW, "ANTI-CHEAT: [%d]%s ถูกเตือนโดย LSRP-AC รหัส %d(%d) (คำเตือนครั้งที่ %d)", playerid, ReturnPlayerName(playerid), code, code2, count);
	}
	return 1;
}*/

/*public OnCheatDetected(playerid, type, extraint, Float:extrafloat, extraint2)
{
	switch(type)
	{
		case CHEAT_WEAPON:
		{
			ResetPlayerWeapons(playerid);
			for (new i = 0; i < 13; i ++) GivePlayerWeapon(playerid, playerData[playerid][pGuns][i], playerData[playerid][pAmmo][i]);

			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ Weapon Cheat (%s)", playerid, ReturnPlayerName(playerid), ReturnWeaponName(extraint));
		}
		case CHEAT_SPEED:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ Speed Hack (%s)", playerid, ReturnPlayerName(playerid), g_arrVehicleNames[GetVehicleModel(extraint) - 400]);
		}
		case CHEAT_HEALTHARMOUR:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ %s (%.2f)", playerid, ReturnPlayerName(playerid), (extraint) ? ("Armour Hack") : ("Health Hack"), g_arrVehicleNames[GetVehicleModel(extraint) - 400], extrafloat);
		}
		case CHEAT_MASSCARTELEPORT:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ MASSCAR Teleport", playerid, ReturnPlayerName(playerid));
		}
		case CHEAT_CARJACKHACK:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ CarJack Hack", playerid, ReturnPlayerName(playerid));
		}
		case CHEAT_TELEPORT:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ Teleport(%d%%) ในระยะ %.2f", playerid, ReturnPlayerName(playerid), extraint, extrafloat);
		}
		case CHEAT_AIRBREAK:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะใช้ Airbreak(%d%%) ในระยะ %.2f", playerid, ReturnPlayerName(playerid), extraint, extrafloat);

		}
		case CHEAT_INACTIVITY:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะ INACTIVITY", playerid, ReturnPlayerName(playerid));

		}
		case CHEAT_SPOOFKILL:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะ Spoof Kill %s (%d%%)", playerid, ReturnPlayerName(playerid), ReturnName(extraint), extrafloat);
		}
	}
	return 1;
	//if(playerData[playerid][pAdmin] < 2)
//SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s มีความเป็นไปได้ที่จะ %d", playerid, ReturnPlayerName(playerid), type);
}*/

public OnPlayerRequestClass(playerid, classid)
{
	if (IsPlayerNPC(playerid))
	    return 1;
		
	//TextDrawShowForPlayer(playerid, LSRP_LOGO);
	
	if (!bf_get(player_bf[playerid], IS_PLAYER_KICKED))
	{
		RemovePlayerClothing(playerid);
	    TogglePlayerSpectating(playerid, true);
		SetPlayerColor(playerid, COLOR_GREY);
		SetTimerEx("AccountCheck", 400, 0, "i", playerid);
	}
	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
	if(IsPlayerConnected(playerid)) {
		switch(random(4))
		{
			case 0:
			{
				SetPlayerPos(playerid, 290.4137,-1555.2571,-15.9629);
				SetPlayerCameraPos(playerid, 189.4343,-1600.7451,74.6708);
				SetPlayerCameraLookAt(playerid, 290.4137,-1555.2571,67.9629);
			}
			case 1:
			{
				SetPlayerPos(playerid, 1044.0846,-1621.3650,-38.9547);
				SetPlayerCameraPos(playerid, 1044.0846,-1621.3650,108.2995);
				SetPlayerCameraLookAt(playerid, 1154.1254,-1770.6908,16.5938);
			}
			case 2:
			{
				SetPlayerPos(playerid, 2170.4578,-1674.4376,-78.3328);
				SetPlayerCameraPos(playerid, 2161.3362,-1687.6860,143.4194);
				SetPlayerCameraLookAt(playerid, 2537.1755,-1705.1808,13.3828);
			}
			case 3: {
				SetPlayerPosEx(playerid, 2091.1182,-1849.2242,8.5529);
				SetPlayerCameraPos(playerid, 2091.1182,-1849.2242,27.5529);
				SetPlayerCameraLookAt(playerid, 2070.0266,-1813.8236,13.3828);
			}
		}
		SQL_AccountCheck(playerid);
	}
	/*SendClientMessage(playerid, -1, "{FF5500}มี {FF0000}เฟอร์นิเจอร์\t{FF5500}และ {00FFFF}เครื่องยนต์\t{FF5500}Hmm");
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Header:", "{FF5500}สก์\t{FF0000}ยร์\t{FF5500}ยร์\t{00FFFF}ยต์\t{FF5500}ฟม์", "Y", "N");
 */
}

public OnPlayerConnect(playerid)
{
	if (IsPlayerNPC(playerid))
	    return 1;

   /*new TempId[80], TempNumb;  
    gpci(playerid, TempId, sizeof(TempId));  
    for(new i = 0; i < strlen(TempId); i++)  
    {  
        if(TempId[i] >= '0' && TempId[i] <= '9')  
        {  
             TempNumb++;  
            }  
        }  
    if(TempNumb >= 30 || strlen(TempId) <= 30)  
    {  
        format(TempId, sizeof(TempId), "Server kicked %s, reason: Suspected hacked client.",ReturnPlayerName(playerid));  
		printf(TempId);
        //SendClientMessageToAll(-1,TempId);  
        Kick(playerid);  
	}  */
	
	/*if ((GetTickCount() - playerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), playerData[playerid][pLeaveIP]))
	{
	    return SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s (%s) ถูกเตะเนื่องจากเป็นไปได้ที่จะ Rejoin hacks.", ReturnPlayerName(playerid), ReturnIP(playerid)), Kick(playerid);
	}*/

	new str[128];
    format(str,sizeof(str),"*** %s เข้าร่วมเซิร์ฟเวอร์", ReturnPlayerName(playerid));
    ProxJoinServer(playerid, 20.0, str);
    SetPlayerColor(playerid, 0xB4B5B700);
	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	IssueTimer[playerid] = Timer:0;
	nosTimer[playerid] = Timer:0;
	EffectDrugs_Timer[playerid] = Timer:0;
	AddictTimer[playerid] = Timer:0;

	//HUDtoggle[playerid] = 1;

    ResetStatistics(playerid);

	/*SpeedoText[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, SpeedoText[playerid], 0.513199, 1.445687);
	PlayerTextDrawAlignment(playerid, SpeedoText[playerid], 1);
	PlayerTextDrawColor(playerid, SpeedoText[playerid], -1);
	PlayerTextDrawSetShadow(playerid, SpeedoText[playerid], 2);
	PlayerTextDrawSetOutline(playerid, SpeedoText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, SpeedoText[playerid], 255);
	PlayerTextDrawFont(playerid, SpeedoText[playerid], 3);
	PlayerTextDrawSetProportional(playerid, SpeedoText[playerid], 1);*/

	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new str[128];

	/*playerData[playerid][pLeaveTime] = GetTickCount();
	format(playerData[playerid][pLeaveIP], 16, playerData[playerid][pIP]);
*/

 	new szDisconnectReason[3][] = {"Timeout","Leaving","Kicked"};
 	format(str, sizeof str, "*** %s ออกจากเซิร์ฟเวอร์ (%s)", ReturnPlayerName(playerid), szDisconnectReason[reason]);
    ProxJoinServer(playerid, 20.0, str);
	if(reason == 0) playerData[playerid][pTimeout]= gettime();
	//printf("reason %d", reason);
 	TerminateConnection(playerid);

	return 1;
}

SetPlayerWeaponSkill(playerid, skill) {
	switch(skill) {
	    case NORMAL_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 200);
            SetPlayerSkillLevel(playerid, 0, 40);
            SetPlayerSkillLevel(playerid, 6, 50);
	    }
	    case MEDIUM_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 500);
            SetPlayerSkillLevel(playerid, 0, 500);
            SetPlayerSkillLevel(playerid, 6, 500);
	    }
	    case FULL_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 999);
            SetPlayerSkillLevel(playerid, 0, 998);
            SetPlayerSkillLevel(playerid, 6, 998);
	    }
	}
}

public OnPlayerSpawn(playerid)
{
	if (!bf_get(player_bf[playerid], IS_LOGGED))
		Kick(playerid);
		
    // Skill levels

		//SetPlayerWeaponSkill(playerid, FULL_SKILL);
	    //for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 999);

	//SetPlayerMaxHealth(playerid, 100.0 + playerData[playerid][pSHealth]);
		
	if(playerData[playerid][pChar] > 0 && playerData[playerid][pOnDuty] || playerData[playerid][pChar] >= 25000) SetPlayerSkin(playerid, playerData[playerid][pChar]);
	else SetPlayerSkin(playerid, playerData[playerid][pModel]);
	
	Streamer_ToggleIdleUpdate(playerid, true);
	SetPlayerTeam(playerid, 1);
	SetPlayerSpawn(playerid);

	if(!playerData[playerid][pJailed]) cl_DressPlayer(playerid);

	return 1;
}

forward SetPlayerSpawn(playerid);
public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(playerData[playerid][pSpectating] != INVALID_PLAYER_ID) {
			playerData[playerid][pSpectating] = INVALID_PLAYER_ID;
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			SetPlayerInterior(playerid, playerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, playerData[playerid][pWorld]);
			UpdateAdminSpectate(playerid);
			return 1;
		}
		if(MedicBill[playerid])
		{
		    new cut = deathcost + playerData[playerid][pLevel]*50; //playerData[playerid][pLevel]*deathcost;
			playerData[playerid][pCash] -= cut;

			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "EMT: ค่ารักษาพยาบาลของคุณมาถึงแล้ว $%d ขอให้โชคดี", cut);
			MedicBill[playerid] = 0;

			if(playerData[playerid][pDonateRank] > 0) SetPlayerHealthEx(playerid, 100.0 + playerData[playerid][pSHealth]);
			else SetPlayerHealthEx(playerid, 50.0+playerData[playerid][pSHealth]);
		}
	  	if(playerData[playerid][pJailed] == 1)
		{
		    SetPlayerToTeamColor(playerid);
		    SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
		    SetPlayerPos(playerid,  2576.7861,2712.2004,22.9507);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		    SendClientMessage(playerid, COLOR_YELLOW, "คุณยังอยู่ในคุกแอดมิน");
	  	}
		else if(playerData[playerid][pJailed] == 2)
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			SetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			SetPlayerInterior(playerid, playerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, playerData[playerid][pWorld]);
			SendClientMessage(playerid, COLOR_YELLOW, "คุณยังอยู่ในคุก");
		}
		else if(playerData[playerid][pPrisonDept] != 0) {
		
			SetPlayerToTeamColor(playerid);

			if(playerData[playerid][pPrisonCell] == -1) {
			    AssignToCell(playerid);
		    }
		    PutPlayerInCell2(playerid);

		}
		else if(playerData[playerid][pTimeout] || isInjuredmode{playerid} || isKNOmode{playerid})
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			SetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			SetPlayerInterior(playerid, playerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, playerData[playerid][pWorld]);

			if(playerData[playerid][pTimeout]) {
				if(playerData[playerid][pOnDuty])
				{
					if (GetFactionType(playerid) == FACTION_TYPE_POLICE)
						SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "** HQ: %s %s ได้กลับมาปฏิบัติหน้าที่ในขณะนี้! [CRASH] **", Faction_GetRank(playerid), ReturnRealName(playerid));
					else if(GetFactionType(playerid) == FACTION_TYPE_MEDIC)
					    SendFactionMessage(FACTION_TYPE_MEDIC, COLOR_RADIO, "** HQ: %s %s ได้กลับมาปฏิบัติหน้าที่ในขณะนี้! [CRASH] **", Faction_GetRank(playerid), ReturnRealName(playerid));
					else if(GetFactionType(playerid) == FACTION_TYPE_SASD)
					    SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "** HQ: %s %s ได้กลับมาปฏิบัติหน้าที่ในขณะนี้! [CRASH] **", Faction_GetRank(playerid), ReturnRealName(playerid));

					SetFactionColor(playerid);			
				}

				if(playerData[playerid][pHealth]) SetPlayerHealthEx(playerid, playerData[playerid][pHealth]);
				if(playerData[playerid][pArmour]) SetPlayerArmour(playerid, playerData[playerid][pArmour]);

                cl_DressPlayer(playerid);
				SetWeapons(playerid);

				GameTextForPlayer(playerid, "~r~crashed.~w~returning to last position", 5000, 1);
				playerData[playerid][pTimeout] = 0;
				
			}

			if(!isDeathmode{playerid} && isInjuredmode{playerid})
			{
				SetPlayerHealthEx(playerid, 25.0);
				deathtime[playerid] = 300;

				new countdamage;
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้รับบาดเจ็บอย่างรุนแรง หากคุณไม่ได้รับการช่วยเหลือคุณจะตายในที่สุด");
				SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อยอมรับความตาย, พิมพ์: /acceptdeath");
				if((countdamage = CountPlayerDamage(playerid)) != 0)
				{
					new damageString[64];
					format(damageString, sizeof(damageString), "(( ได้รับความบาดเจ็บ %d ครั้ง /damages %d เพื่อดูรายละเอียด ))", countdamage, playerid);
                    SetPlayerChatBubble(playerid, damageString, 0xFF6347FF, 20.0, 60000);
					SendClientMessage(playerid, COLOR_LIGHTRED, damageString);
				}
				GameTextForPlayer(playerid, "~b~brutally wounded", 5000, 4);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}

			if(isKNOmode{playerid})
			{
				SetPlayerHealthEx(playerid, 25.0);
				knotime[playerid] = 120;

				new countdamage;
				//SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้รับบาดเจ็บอย่างรุนแรง หากคุณไม่ได้รับการช่วยเหลือคุณจะตายในที่สุด");
				//SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อยอมรับความตาย, พิมพ์: /acceptdeath");
				if((countdamage = CountPlayerDamage(playerid)) != 0)
				{
					new damageString[64];
					format(damageString, sizeof(damageString), "(( ได้ถูกต่อย %d ครั้งแล้วหมดสติ /helpup %d เพื่อช่วยเหลือ ))", countdamage, playerid);
                    SetPlayerChatBubble(playerid, damageString, 0xFF6347FF, 20.0, 60000);
					SendClientMessage(playerid, COLOR_LIGHTRED, damageString);
				}
				GameTextForPlayer(playerid, "~b~KNOCK-OUT", 5000, 4);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}

			/*printf("playerData[playerid][pTimeout] %d", playerData[playerid][pTimeout]);
			printf("isInjuredmode{playerid} %d", isInjuredmode{playerid});
			printf("isDeathmode[playerid] %d", isDeathmode[playerid]);*/
		}
		else
		{

			/*format(string, sizeof(string), "~w~Welcome ~n~~y~   %s", ReturnRealName(playerid));
			GameTextForPlayer(playerid, string, 5000, 1);*/

		    switch(playerData[playerid][pSpawnPoint])
		    {
				case 0: // airport
				{
				    SetPlayerToTeamColor(playerid);
					SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
					SetPlayerFacingAngle(playerid,359.8919);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);

					playerData[playerid][pInterior] = 0;
					playerData[playerid][pWorld] = 0;
					playerData[playerid][pLocal] = 255;
				}
				case 1:
				{
				    SetPlayerToTeamColor(playerid);

				    new faction = playerData[playerid][pFaction];
 
				    if(faction == -1)
				    {
						SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
						SetPlayerFacingAngle(playerid,359.8919);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						playerData[playerid][pSpawnPoint] = 0;

						playerData[playerid][pInterior] = 0;
						playerData[playerid][pWorld] = 0;
						playerData[playerid][pLocal] = 255;
					}
					else
					{
					    new type = FactionData[faction][factionType];
					    
					    if(type == FACTION_TYPE_POLICE) // LSPD
					    {
							if(playerData[playerid][pSpawnType] == 0) { // Main HQ
								SetPlayerPosEx(playerid, 1344.9730,30.8543,1019.1917);
								SetPlayerFacingAngle(playerid,176.7817);
								SetPlayerInterior(playerid, 10);
								SetPlayerVirtualWorld(playerid, 10001);
								playerData[playerid][pInterior] = 10;
								playerData[playerid][pWorld] = 10001;
								playerData[playerid][pLocal] = 101;
							}
							else if(playerData[playerid][pSpawnType] == 1) { // HABOR Station
								SetPlayerPosEx(playerid, 1408.4630,-6.4146,1000.9465);
								SetPlayerFacingAngle(playerid,179.8106);
								SetPlayerInterior(playerid, 12);
								SetPlayerVirtualWorld(playerid, 10006);
								playerData[playerid][pInterior] = 12;
								playerData[playerid][pWorld] = 10006;
								playerData[playerid][pLocal] = 255;
							}
							else if(playerData[playerid][pSpawnType] == 2) { // West Station
								SetPlayerPosEx(playerid, 1280.2731,-1114.9857,23.9127);
								SetPlayerFacingAngle(playerid,178.6952);
								SetPlayerInterior(playerid, 0);
								SetPlayerVirtualWorld(playerid, 1997);
								playerData[playerid][pInterior] = 0;
								playerData[playerid][pWorld] = 1997;
								playerData[playerid][pLocal] = 255;
							}
					    }
					    else if(type == FACTION_TYPE_MEDIC) // LSFMD
					    {
							if(playerData[playerid][pSpawnType] == 0) {
								SetPlayerPosEx(playerid, 542.2574,218.4133,1019.9844);
								SetPlayerFacingAngle(playerid,179.5279);
								SetPlayerInterior(playerid, 1);
								SetPlayerVirtualWorld(playerid, 10003);
								playerData[playerid][pInterior] = 1;
								playerData[playerid][pWorld] = 10003;
								playerData[playerid][pLocal] = 103;
							}
							else if(playerData[playerid][pSpawnType] == 1) {
								SetPlayerPos(playerid, -1717.7200,1018.1819,17.5859);
								SetPlayerFacingAngle(playerid,90.6517);
								SetPlayerInterior(playerid, 0);
								SetPlayerVirtualWorld(playerid, 2);
								playerData[playerid][pInterior] = 0;
								playerData[playerid][pWorld] = 2;
								playerData[playerid][pLocal] = 255;
							}
					    }
					    else if(type == FACTION_TYPE_SASD) // SASD
					    {
							if(playerData[playerid][pSpawnType] == 0) { // Main HQ
								SetPlayerPosEx(playerid, 1385.8762,-21.8015,1001.1614);
								SetPlayerFacingAngle(playerid,269.7302);
								SetPlayerInterior(playerid, 5);
								SetPlayerVirtualWorld(playerid, 10005);
								playerData[playerid][pInterior] = 5;
								playerData[playerid][pWorld] = 10005;
								playerData[playerid][pLocal] = 105;
							}
					    }
					    else if(type == FACTION_TYPE_SADOC) // SACF
					    {
							if(playerData[playerid][pSpawnType] == 0) { // Main HQ
								SetPlayerPosEx(playerid, 254.3545,77.2077,1003.6406);
								SetPlayerFacingAngle(playerid,183.0759);
								SetPlayerInterior(playerid, 6);
								SetPlayerVirtualWorld(playerid, 10007);
								playerData[playerid][pInterior] = 6;
								playerData[playerid][pWorld] = 10007;
								playerData[playerid][pLocal] = 107;
							}
					    }
						else if(type == FACTION_TYPE_NEWS) // NEWS
						{
							if(playerData[playerid][pSpawnType] == 0) { // Main HQ
								SetPlayerPosEx(playerid, 1537.0662,-1348.2950,290.2202);
								SetPlayerFacingAngle(playerid,181.0759);
								SetPlayerInterior(playerid, 1);
								SetPlayerVirtualWorld(playerid, 10010);
								playerData[playerid][pInterior] = 1;
								playerData[playerid][pWorld] = 10010;
								playerData[playerid][pLocal] = 110;
							}
						}
					    else {
						    SetPlayerToTeamColor(playerid);
							SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
							SetPlayerFacingAngle(playerid,359.8919);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid, 0);

							playerData[playerid][pInterior] = 0;
							playerData[playerid][pWorld] = 0;
							playerData[playerid][pLocal] = 255;
					    }
					}
				}
				case 2: // House
				{
					new house = playerData[playerid][pHouseKey];
					
                    SetPlayerToTeamColor(playerid);
				    if(house == -1 || !HouseInfo[house][hOwned])
				    {
						SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
						SetPlayerFacingAngle(playerid,359.8919);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						playerData[playerid][pSpawnPoint] = 0;

						playerData[playerid][pInterior] = 0;
						playerData[playerid][pWorld] = 0;
						playerData[playerid][pLocal] = 255;

				    	SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" คุณถูกขับไล่ออกจากบ้าน...");
					}
				    else
				    {
				        if(strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true))
				        {
				            SendClientMessage(playerid, COLOR_LIGHTRED, "ค่าเช่าบ้านหลังนี้คือ:");
				            SendClientMessageEx(playerid, COLOR_WHITE, "$%d", HouseInfo[house][hRentprice]);
				        }

						SetPlayerPosEx(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY],HouseInfo[house][hExitZ]);
						SetPlayerFacingAngle(playerid, 0);
						SetPlayerInterior(playerid, HouseInfo[house][hInterior]);
						SetPlayerVirtualWorld(playerid, HouseInfo[house][hWorld]);

						playerData[playerid][pInterior] = HouseInfo[house][hInterior];
						playerData[playerid][pWorld] = HouseInfo[house][hWorld];
						playerData[playerid][pLocal] = house + LOCAL_HOUSE;
						HouseEntered[playerid]=house;
				    }
				}
				default: {
				    SetPlayerToTeamColor(playerid);
					SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
					SetPlayerFacingAngle(playerid,359.8919);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);

					playerData[playerid][pInterior] = 0;
					playerData[playerid][pWorld] = 0;
					playerData[playerid][pLocal] = 255;

					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: จุดเกิดของคุณไม่ถูกต้องโปรดเปลี่ยนจุดเกิดที่ UCP ก่อนเข้าสู่ระบบในเกม");
				}
		    }
			ResetPlayerWeapons(playerid);
      		SetPlayerWeapons(playerid);
      		if(playerData[playerid][pHealth]) SetPlayerHealthEx(playerid, playerData[playerid][pHealth]);
      		else {
				if(playerData[playerid][pDonateRank] > 0) SetPlayerHealthEx(playerid, 100.0 + playerData[playerid][pSHealth]);
				else SetPlayerHealthEx(playerid, 50.0+playerData[playerid][pSHealth]);
      		}
      		SetPlayerArmour(playerid, playerData[playerid][pArmour]);
      		SetCameraBehindPlayer(playerid);
		}
	}
	bf_on(player_bf[playerid], IS_PLAYER_SPAWNED);
	//PlayerTextDrawShow(playerid, SpeedoText[playerid]);
	return 1;
}

forward ShowStats(playerid,targetid);
public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{

		new atext[20], workOn[256], banknumber[16];

		if(playerData[targetid][pWorkOn] != -1) {
			format(workOn, sizeof(workOn), BizInfo[playerData[targetid][pWorkOn]][bInfo]);
		} else format(workOn, 6, "ไม่มี");

		if(playerData[targetid][pBankNumber]) {
			format(banknumber, 16, "%d", playerData[targetid][pBankNumber]);
		} else format(banknumber, 6, "ไม่มี");

		if(playerData[targetid][pGender] == 0) { atext = "ชาย"; }
		else if(playerData[targetid][pGender] == 1) { atext = "หญิง"; }

		new ttext[32], rtext[32], factionid = playerData[targetid][pFaction];
		if(factionid == -1) ttext = "พลเรือน", rtext = "ไม่มีตำแหน่ง";
		else format(ttext, sizeof(ttext),Faction_GetName(targetid)), format(rtext, sizeof(rtext),Faction_GetRank(targetid));

		new carkey[16];
		if(playerData[targetid][pPCarkey] != 9999 && CarData[playerData[targetid][pPCarkey]][carVehicle] != INVALID_VEHICLE_ID) {
			format(carkey, 16, "%d", CarData[playerData[targetid][pPCarkey]][carVehicle]);
		}
		else format(carkey, 16, "ไม่มี");

        new houses[64];
		new hcount;

		format(houses, sizeof(houses), "ไม่มี");
		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
		    if(HouseInfo[i][hOwned] == 1 && !strcmp(ReturnPlayerName(targetid), HouseInfo[i][hOwner], true))
			{
				if(hcount != 0) format(houses, sizeof(houses), "%s,%d", houses, HouseInfo[i][hID]);
                else format(houses, sizeof(houses), "%d", HouseInfo[i][hID]);
                hcount++;
			}
		}

		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring),"|____________________%s [%s]____________________|", ReturnPlayerName(targetid), ReturnDateTime());
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| ตัวละคร | กลุ่ม:[%d][%s] ตำแหน่ง:[%s] อาชีพ:[%s] เบอร์:[%d]", factionid + 1, ttext, rtext, ReturnJobName(targetid, playerData[targetid][pJob]), playerData[targetid][pPnumber]);
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| สิ่งของ | วิทยุ:[%s] บัญชีธนาคาร:[%s] อาวุธระยะประชิด:[%s]", (playerData[targetid][pRadio]) ? ("มี") : ("ไม่มี"), banknumber, ReturnWeaponName(playerData[targetid][pGun1]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| อาวุธ | อาวุธหลัก:[%s] กระสุน:[%d] อาวุธรอง:[%s] กระสุน:[%d]",
		(!playerData[targetid][pGun2] && playerData[targetid][pGun3]) ? ReturnWeaponName(playerData[targetid][pGun3]) : ReturnWeaponName(playerData[targetid][pGun2]),
		(!playerData[targetid][pGun2] && playerData[targetid][pGun3]) ? playerData[targetid][pAmmo3] : playerData[targetid][pAmmo2],
		(!playerData[targetid][pGun2] && playerData[targetid][pGun3]) ? ("ไม่มี") : ReturnWeaponName(playerData[targetid][pGun3]),
		(!playerData[targetid][pGun2] && playerData[targetid][pGun3]) ? 0 : playerData[targetid][pAmmo3]);

		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| เลเวล | เลเวลผู้เล่น:[%d] ประสบการณ์:[%d/%d] ระดับบริจาค:[%s]",playerData[targetid][pLevel],playerData[targetid][pExp], (playerData[targetid][pLevel]+1)*levelexp,ReturnDonateRank(playerData[targetid][pDonateRank]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| ทักษะ | เลือด:[%.1f/%.1f] ความแข็งแรง:[%d] ชั่วโมงที่ออนไลน์:[%d]", playerData[targetid][pHealth], 100.0 + playerData[targetid][pSHealth], floatround(playerData[targetid][pSHealth]/5.0), playerData[targetid][pPlayingHours]);
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| เงิน | เงินสด:[%s] เงินในธนาคาร:[%s] บัญชีออมทรัพย์:[%s] เงินค่าจ้าง:[%s]", FormatNumber(playerData[targetid][pCash]), FormatNumber(playerData[targetid][pAccount]), FormatNumber(playerData[targetid][pSavingsCollect]), FormatNumber(playerData[targetid][pPayCheck]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| อื่น ๆ | กุญแจยานพาหนะ:[%s] ที่ทำงาน:[%s] อาชีพเสริม:[%s]", carkey, workOn, ReturnJobName(playerid, playerData[targetid][pSideJob]));
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);

		if(playerData[playerid][pAdmin])
		{
			format(coordsstring, sizeof(coordsstring), "| สำหรับแอดมิน | กุญแจธุรกิจ:[%d] ภายใน:[%d] โลก:[%d] พื้นที่:[%d]", (playerData[targetid][pPbiskey] != -1) ? BizInfo[playerData[targetid][pPbiskey]][bID] : -1, playerData[targetid][pInterior], playerData[targetid][pWorld], playerData[targetid][pLocal]);
			SendClientMessage(playerid, COLOR_STAT2,coordsstring);
			format(coordsstring, sizeof(coordsstring), "บ้านที่เป็นเจ้าของ:[%s]", houses);
			SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring),"|____________________%s [%s]____________________|", ReturnPlayerName(targetid), ReturnDateTime());
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
}

forward SetPlayerToTeamColor(playerid);
public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetPlayerColor(playerid, DEFAULT_COLOR);

		if(isTesterDuty(playerid)) SetPlayerColor(playerid, TEAM_TDUTY_COLOR);
		if(isAdminDuty(playerid)) SetPlayerColor(playerid, TEAM_ADUTY_COLOR);
		if(TaxiDuty{playerid}) SetPlayerColor(playerid, TAXI_DUTY);
	}
}

CountPlayerOwnHouse(playerid)
{
	new hcount;
	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnPlayerName(playerid), true))
		{
      		hcount++;
		}
	}
	return hcount;
}

OwnBusiness(playerid)
{
	if(playerData[playerid][pPbiskey] != -1 && !strcmp(BizInfo[playerData[playerid][pPbiskey]][bOwner], ReturnPlayerName(playerid)))
		return true;
	return false;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(!playerData[playerid][pJailed] && !playerData[playerid][pPrisonDept])
	{
        if(!isInjuredmode{playerid}) {
			isInjuredmode{playerid} = true;
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			deathtime[playerid] = 300;
			SetPlayerHealthEx(playerid, 25);
		}

        if(!isKNOmode{playerid}) {
			isKNOmode{playerid} = true;
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			knotime[playerid] = 120;
			SetPlayerHealthEx(playerid, 25);
		}

		else {

	     	SetPlayerChatBubble(playerid, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);

	     	SendClientMessage(playerid, COLOR_YELLOW, "-> คุณตายแล้วในขณะนี้ คุณจำเป็นต้องรอ 60 วินาทีและหลังจากนั้นคุณถึงจะสามารถ /respawnme");

			isDeathmode{playerid} = true;
			deathtime[playerid] = 60;

            if (IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
		}
    }
	SQL_LogPlayerDeath(playerid,killerid,reason);
 	bf_off(player_bf[playerid], IS_PLAYER_SPAWNED);
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(!VehicleLabel[vehicleid][vLabelTime]) ResetVehicle(vehicleid);
    else SetVehicleDamage(vehicleid);

	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	new id = -1;

	if((id = Car_GetID(vehicleid)) != -1)
	{
		Log_Write("logs/vehicle_death.txt", "[%s] %s (%s) has destroy car %d (SID:%d) [Ins:%d, E: %f, B: %f]", ReturnDate(), ReturnPlayerName(killerid), playerData[killerid][pIP], id, CarData[id][carSID], CarData[id][carInsurance], CarData[id][carEngineL], CarData[id][carBatteryL]);
		
		CarData[id][carDestroyed]++;
		CarData[id][carEngineL]-=float(10+random(5));
		CarData[id][carBatteryL]-=float(10);

		if (CarData[id][carBatteryL] < 0.0) {
			CarData[id][carBatteryL] = 0.0;
		}
		if (CarData[id][carEngineL] < 0.0) {
			CarData[id][carEngineL] = 0.0;
		}	
		new ownerid = -1;
		if((ownerid = IsCharacterOnline(CarData[id][carOwner])) != -1) {
			SendClientMessageEx(ownerid, COLOR_LIGHTRED, "%s ของคุณถูกทำลาย", g_arrVehicleNames[CarData[id][carModel] - 400]);
			SendClientMessageEx(ownerid, COLOR_LIGHTRED, "อายุการใช้งาน: อายุเครื่องยนต์ลดลงเหลือ "EMBED_WHITE"%.2f{FF6347} อายุแบตเตอรี่ลดลงเหลือ "EMBED_WHITE"%.2f{FF6347}", CarData[id][carEngineL], CarData[id][carBatteryL]);
		}
		GetVehicleDamageStatus(vehicleid,CarData[id][carDamage][0],CarData[id][carDamage][1],CarData[id][carDamage][2],CarData[id][carDamage][3]);
		CarData[id][carHealth]=300.0;
		CarData[id][carArmour]=0.0;
	
		if(CarData[id][carInsurance] > 0)
		{
			if(CarData[id][carOwe] > 0) {
			
				if(ownerid != -1)
					SendClientMessage(ownerid, COLOR_LIGHTRED, "INSURANCE: บริการประกันภัยรถยนต์ของคุณถูกยกเลิกเนื่องจากติดค้างชำระค่าปรับ");
					
				CarData[id][carInsurance]=0;
			}
			else {
				CarData[id][carHealth] = GetVehicleDataHealth(CarData[id][carModel]);
				CarData[id][carOwe] += floatround(((CarData[id][carHealth] - CoreVehicles[vehicleid][vehHealth]) / 30.0 ) * 2.0, floatround_round);
	
				if(CarData[id][carInsurance] > 1)
				{
					CarData[id][carDamage][0]=0;
					CarData[id][carDamage][1]=0;
					CarData[id][carDamage][2]=0;
					CarData[id][carDamage][3]=0;
					
					CarData[id][carOwe] += GetRepairPrice(vehicleid);
				}
	
				if(CarData[id][carInsurance] < 3) {
					CarData[id][carXM]=0;
					CarData[id][carPaintjob]=0;
					for(new x = 0; x < 14; x++) CarData[id][carMods][x]=0;
				}
			}
		}
	
		Car_SaveID(id);
		Car_DespawnEx(id);
		
		if(ownerid != -1)
			playerData[ownerid][pPCarkey] = 9999;
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    //printf("OnPlayerText %s", text);
	if(!SQL_IsLogged(playerid) || playerData[playerid][pInCCTV]) return 0;

	new str[128];
	/*format(str, sizeof(str), "Sarah Candy พูดว่า (โทรศัพท์): %s", FormatTextLowSignal(text));
	SendClientMessage(playerid, COLOR_YELLOW, str);*/

	if(bf_get(player_bf[playerid], PLAYER_CONVO)) {
		format(str, sizeof(str), "/pm %d %s", ConvoID[playerid], text);
		PC_EmulateCommand(playerid, str);
	}
	else if(IsCalline(playerid)) {
		//new signal = GetPlayerRadioSignal(playerid);

		if(GetPVarType(playerid, "callLine")) {
			new temp_targetid = GetPVarInt(playerid, "callLine");
			if(IsPlayerConnected(temp_targetid))
			{
				if(callineNumber(playerid) == playerData[temp_targetid][pPnumber])
				{
					if(speakerStatus(temp_targetid))
					{
						format(str, sizeof(str), "%s พูดว่า [ลำโพง] (โทรศัพท์): %s", ReturnRealName(playerid), text);
						ProxDetector(temp_targetid, 20.0, str);
					}

					//format(str, sizeof(str), "%s พูดว่า (โทรศัพท์): %s", ReturnRealName(playerid), FormatTextSignal(text, signal));
					format(str, sizeof(str), "%s พูดว่า (โทรศัพท์): %s", ReturnRealName(playerid), text);
					SendClientMessage(temp_targetid, COLOR_YELLOW, str);
				}
			}
		}
		format(str, sizeof(str), "%s พูดว่า (โทรศัพท์): %s", ReturnRealName(playerid), text);
		ProxDetector(playerid, 20.0, str);

		PhoneCall(playerid, text);
	}
	/*else if(GetPlayerInterior(playerid) != 0)
	{
		if (strlen(text) > 80) {
			format(str, sizeof(str), "%s พูดว่า [เบา]: %.80s", ReturnRealName(playerid), text);
			ProxDetector(playerid, 5.0, str);

			format(str, sizeof(str), "... %s", text[80]);
			ProxDetector(playerid, 5.0, str);
		}
		else format(str, sizeof(str), "%s พูดว่า [เบา]: %s", ReturnRealName(playerid), text), ProxDetector(playerid, 5.0, str);
	}*/
	else if(ActiveLow[playerid] == 1)
	{
		if (strlen(text) > 80) {
			format(str, sizeof(str), "%s พูดว่า [เบา]: %.80s", ReturnRealName(playerid), text);
			ProxDetector(playerid, 5.0, str);

			format(str, sizeof(str), "... %s", text[80]);
			ProxDetector(playerid, 5.0, str);
		}
		else format(str, sizeof(str), "%s พูดว่า [เบา]: %s", ReturnRealName(playerid), text), ProxDetector(playerid, 5.0, str);
	}
	else
	{
		format(str, sizeof(str), "%s พูดว่า: %s", ReturnRealName(playerid), text);
		ProxDetector(playerid, 20.0, str);

		ChatAnimation(playerid, strlen(text));
    }
	printf("[%d]%s: %s", playerid, ReturnPlayerName(playerid), text);
	IdleInfo[playerid][aAmount] = 0;
	return 0;
}

forward StopChatting(playerid);
public StopChatting(playerid) ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0), playerData[playerid][pAnimation] = 0;

/*
public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) return SendClientMessage(playerid, COLOR_GENANNOUNCE, "Error: "EMBED_WHITE"ขออภัยคำสั่งนี้ไม่มีอยู่จริง {A9C4E4}/help"EMBED_WHITE" หรือ {A9C4E4}/helpme"EMBED_WHITE" ถ้าคุณต้องการความช่วยเหลือ");  //If the command was wrong/invalid
	return 1;
}*/

public OnPlayerCommandReceived(playerid, cmd[], params[], flags)
{
	if (!SQL_IsLogged(playerid)) {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ACCESS DENIED:"EMBED_WHITE" คุณต้องเข้าสู่ระบบก่อนที่จะใช้คำสั่ง");
	    return 0;
	}
	printf("[%d]%s: /%s %s", playerid, ReturnPlayerName(playerid), cmd, params);
    /*else if (!(flags & playerData[playerid][pCMDPermission]) && flags)
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ACCESS DENIED: "EMBED_WHITE"คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
        return 0;
    }*/

    return 1;
}

public OnPlayerCommandPerformed(playerid, cmd[], params[], result, flags)
{
    if(result == -1)
    {
        SendClientMessage(playerid, COLOR_GENANNOUNCE, "Error: "EMBED_WHITE"ขออภัยคำสั่งนี้ไม่มีอยู่จริง {A9C4E4}/help"EMBED_WHITE" หรือ {A9C4E4}/helpme"EMBED_WHITE" ถ้าคุณต้องการความช่วยเหลือ");
        return 0;
    }
/*
	if(flags) { // Permission CMD
		if (flags & playerData[playerid][pCMDPermission])
		{
			Log(a_action_log, INFO, "%s: /%s %s", ReturnPlayerName(playerid), cmd, params);
		}
	}*/
    return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new str[128];

	if ((!ispassenger && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || isInjuredmode{playerid} || isKNOmode{playerid}) {
	    ClearAnimations(playerid);

	    return 0;
	}

	/*if (CoreVehicles[vehicleid][vehFuel] == 0 || CoreVehicles[vehicleid][vehFuel] >= 101)
	{
		CoreVehicles[vehicleid][vehFuel] = 100;
	}

	if (CarData[vehicleid][carFuel] == 0 || CarData[vehicleid][carFuel] >= 101)
	{
		CarData[vehicleid][carFuel] = 100;
	}*/

	foreach(new i : sv_servercar) {
		if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] != playerData[playerid][pFaction]) {

			if(playerData[playerid][pAdmin] >= 1 && isAdminDuty(playerid)) {
				format(str, sizeof(str), "   %s (model %d, ID %d) ถูกล็อกโดยกลุ่ม %s (%d)", g_arrVehicleNames[GetVehicleModel(vehicleVariables[i][vVehicleScriptID]) - 400], GetVehicleModel(vehicleVariables[i][vVehicleScriptID]), vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionName], vehicleVariables[i][vVehicleFaction]);
				SendClientMessage(playerid, COLOR_GREY, str);
				return 1;
			}
			else {
                if (GetLockStatus(vehicleid) || !ispassenger) {
				    SetVehicleLabel(vehicleid, VLT_TYPE_PERMITFACTION, 5);
				    ClearAnimations(playerid);
                }
				return 1;
			}
		}
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    gPassengerCar[playerid] = vehicleid;

	if(CoreVehicles[vehicleid][vradioOn])
	{
		StopAudioStreamForPlayer(playerid);
	}

	if(RepairTime{playerid} && serviced[playerid])
	{
		SetPlayerAttachedObject(playerid,FREESLOT9,18693,5,-0.081999,0.239,-1.152,-18.0001,2.1,12.2,0.173998,0.18,0.560998);
		ShowPlayerFooter(playerid, "~h~~p~START SPRAYING THE VEHICLE.", -1);
		GivePlayerWeaponEx(playerid, 41, 9999);
	}

    if(GetPVarInt(playerid, "InDriveTest")) {
		DeletePVar(playerid, "LessonStarted");
		DeletePVar(playerid, "LessonSeconds");
		DeletePVar(playerid, "InDriveTest");
		SendClientMessage(playerid, COLOR_GREEN, "คุณออกจากยานพาหนะการทดสอบจึงล้มเหลว");

		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		gPlayerCheckpointValue[playerid]=-1;
		SetVehicleToRespawn(vehicleid);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{

	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) {
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (isInjuredmode{playerid} || isKNOmode{playerid} && newstate != PLAYER_STATE_DRIVER) RemoveFromVehicle(playerid);

		if(RepairTime{playerid} || serviced[playerid])
		{
			serviceComp[playerid] = 0;
			serviceTowtruck[playerid] = 0;
			serviceCustomer[playerid] = 0;
			serviced[playerid] = 0;
			RepairTime{playerid}=0;

			RemoveWeapon(playerid, 41);
			
			SetPlayerArmedWeapon(playerid, 0);

			if(IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) RemovePlayerAttachedObject(playerid, FREESLOT9);

			HidePlayerFooter(playerid);
		}
		
		if(Boombox_Nearest(playerid) != INVALID_PLAYER_ID) {
		    StopAudioStreamForPlayer(playerid);
		}

		if(CoreVehicles[vehicleid][vradioOn])
		{
			PlayAudioStreamForPlayer(playerid, CoreVehicles[vehicleid][vradioURL]);
		}

        gPassengerCar[playerid] = vehicleid;
		/*foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] != playerData[playerid][pFaction]) {

				if(playerData[playerid][pAdmin] >= 1 && isAdminDuty(playerid)) {
					return 1;
				}
				else {
	                if (GetLockStatus(vehicleid) || newstate == PLAYER_STATE_PASSENGER) {
					    RemoveFromVehicle(playerid);
	                }
					return 1;
				}
			}
		}*/
	}

	if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {

		new id=-1, str[128];

		if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID && BoomboxData[id][boomboxOn]) {
			strunpack(str, BoomboxData[id][boomboxURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
	}

	if(newstate == PLAYER_STATE_SPAWNED)
	{
		/*if (!isInjuredmode{playerid} && !playerData[playerid][pTimeout]) {
			MedicBill[playerid] = 1;
			if(playerData[playerid][pDonateRank] > 0) { SetPlayerHealthEx(playerid, 100.0 + playerData[playerid][pSHealth]); }
			else { SetPlayerHealthEx(playerid, 50.0+playerData[playerid][pSHealth]); }
		}
		else
		{
			if(playerData[playerid][pDonateRank] > 0) { SetPlayerHealthEx(playerid, 100.0); }
			else { SetPlayerHealthEx(playerid, playerData[playerid][pHealth]); }

			if(playerData[playerid][pArmour]) SetPlayerArmour(playerid, playerData[playerid][pArmour]);
		}*/
		if(!bf_get(player_bf[playerid], TOGGLE_HUD) && playerData[playerid][pHUDStyle] != 2)
			PlayerTextDrawShow(playerid, pPT_Radio[playerid]);

        CheckFightStyle(playerid);
	}

	if (newstate == PLAYER_STATE_WASTED)
	{
	    ResetPlayer(playerid);

	    PlayerTextDrawHide(playerid, pPT_Radio[playerid]);

		bf_off(player_bf[playerid], IS_PLAYER_SPAWNED);

		if(!isInjuredmode{playerid}) {
			isInjuredmode{playerid} = true;
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			deathtime[playerid] = 300;
			SetPlayerHealthEx(playerid, 25);
		}
		if(!isKNOmode{playerid}) {
			isKNOmode{playerid} = true;
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
			knotime[playerid] = 120;
			SetPlayerHealthEx(playerid, 25);
		}
		else if (isDeathmode{playerid} && isInjuredmode{playerid} || playerData[playerid][pJailed])
		{
 		    ResetDamages(playerid);
		    isInjuredmode{playerid} = false;
		    isDeathmode{playerid} = false;
		    deathtime[playerid] = 0;
		    MedicBill[playerid] = 1;
		}
		else if (isKNOmode{playerid} || playerData[playerid][pJailed])
		{
 		    ResetDamages(playerid);
		    isKNOmode{playerid} = false;
		    knotime[playerid] = 0;
		    MedicBill[playerid] = 1;
		}
	}

	if (oldstate == PLAYER_STATE_DRIVER)
	{
		if(h_vid[playerid] != -1) {
		    ShowPlayerFooter(playerid, "~r~You're left the vehicle.~n~~w~Hotwiring process ended.");
			h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
			h_word[playerid][0]='\0';
		}
	}

	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

        if (GetLockStatus(vehicleid)) {

			SetVehicleLabel(vehicleid, VLT_TYPE_LOCK, 5);
			RemovePlayerFromVehicle(playerid);
		}
	}

	if (newstate == PLAYER_STATE_DRIVER)
	{
	    new vehicleid, oldcar = gLastCar[playerid], id = -1, model;
		vehicleid = GetPlayerVehicleID(playerid);
		model = GetVehicleModel(vehicleid);

		if (!IsEngineVehicle(vehicleid)) SetEngineStatus(vehicleid, true);

		if(playerData[playerid][pCarLic] == 0) {
			SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีใบอนุณาตขับขี่! ต้องผ่านการทดสอบการขับรถเพื่อให้ได้มัน");
			if(IsVehicleDMV(vehicleid)) {
			    if(model == 516) SendClientMessage(playerid, COLOR_WHITE,"License exam: ทดลองสอบใบอนุญาตให้ผ่าน /licenseexam หากสำเร็จจะมีค่าใช้จ่าย $5000");
				else if(model == 438) SendClientMessage(playerid, COLOR_WHITE,"Taxi exam: ทดลองสอบแท็กซี่ให้ผ่าน /licenseexam หากสำเร็จจะมีค่าใช้จ่าย $5000");
				return 1;
			}
		}

		if (!playerData[playerid][pDonateRank] && (model == 481 || model == 510)) { // BMX Permission
			if(Car_GetID(vehicleid) == -1) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับผู้เล่นระดับ VIP เท่านั้น");
				RemovePlayerFromVehicle(playerid);
			}
		}

		if(!GetEngineStatus(vehicleid) && IsEngineVehicle(vehicleid)) SendClientMessage(playerid, COLOR_GREEN, "เครื่องยนต์ดับอยู่ (/engine)");

		if((id = Car_GetID(vehicleid)) != -1)
		{
			if(CarData[id][carOwner] == playerData[playerid][pID])
			{
		
				SendClientMessageEx(playerid, COLOR_WHITE, "ยินดีต้อนรับสู่ %s ของคุณ", g_arrVehicleNames[CarData[id][carModel] - 400]);
				
				if(CarData[id][carInsurance] > 0 && CarData[id][carOwe] > 0) {
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "INSURANCE: คุณมีหนี้ $%d", CarData[id][carOwe]);
					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: /v insurance pay (ขณะอยู่ในรถยนต์ ณ ตัวแทนจำหน่ายยานพาหนะ)");
					return 1;
				}
			}
		}

		if(IsVehicleRental(vehicleid) && !IsVehicleRented(vehicleid))
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "บริการเช่ายานพาหนะ: เช่า %s ในราคา %s (/rentvehicle)", g_arrVehicleNames[model - 400], FormatNumber(GetVehicleRentalPrice(model)));
            SendClientMessage(playerid, COLOR_GREEN, "การเช่ายานพาหนะคุณจะสามารถ /lock มันได้");
		}
		/*if(playerData[playerid][pPCarkey] != 9999 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid || playerData[playerid][pPDupkey] == CarData[id][carDupKey]))
		{
			if(!GetEngineStatus(vehicleid) && IsEngineVehicle(vehicleid)) SendClientMessage(playerid, COLOR_GREEN, "เครื่องยนต์ดับอยู่ (/engine)");

			if(CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID])
			{
				format(str, sizeof(str), "ยินดีต้อนรับสู่ %s ของคุณ", g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, COLOR_WHITE, str);
			}
			return 1;
		}*/

		if(oldcar != 0)
		{
			if(Car_GetID(oldcar) == -1)
			{
				if(oldcar != vehicleid)
				{
			 		new
					    engine,
					    lights,
					    alarm,
					    doors,
					    bonnet,
					    boot,
					    objective;

					GetVehicleParamsEx(oldcar, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(oldcar, engine, lights, alarm, 0, bonnet, boot, objective);
				}
			}
		}

        gLastCar[playerid] = vehicleid;


	   	if(IsTrucker(vehicleid))
	 	{
		 	new trailerid = GetVehicleTrailer(vehicleid);
			if(GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid) != -1 && !IsVehicleCargoSkill(model, playerData[playerid][pJobRank])) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, COLOR_WHITE, "ทักษะของคุณมีไม่เพียงพอสำหรับการขนส่งสินค้าบนยานพาหนะคันนี้");
		}
	}

	if (newstate == PLAYER_STATE_ONFOOT)
	{
		if(TaxiMoney[playerid] > 0)
		{
			ChargePerson(playerid);
		}
	}

	foreach (new x : Player) {
		if(playerData[x][pSpectating] != INVALID_PLAYER_ID && playerData[x][pSpectating] == playerid) {
			if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT) {
				PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
			}
			else {
				PlayerSpectatePlayer(x, playerid);
			}
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(GetPlayerVisibleDynamicCP(playerid)) return 1;

	//new string[128];
	switch (gPlayerCheckpointStatus[playerid])
	{
	    /*case CHECKPOINT_HOUSE: {
			if(gPlayerCheckpointValue[playerid] != -1)
			{
			    new i = nearHouse_var[playerid];

				if(i == -1) return 1;

				if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnPlayerName(playerid), true))
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับเข้าสู่%sของคุณ", HouseInfo[i][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"));
					SendClientMessage(playerid, COLOR_WHITE, "Available commands: /enter, /ds(hout), ddo, /knock");
				}
				else if(HouseInfo[i][hOwned] == 1)
				{
					if(HouseInfo[i][hRentable] == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "ค่าเช่าบ้านหลังนี้คือ:");
						SendClientMessageEx(playerid, COLOR_WHITE, "$%d", HouseInfo[i][hRentprice]);
					    SendClientMessage(playerid, COLOR_WHITE, "ต้องการเช่าที่นี่ไหม /rentroom");
						SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับสู่%sของ %s", HouseInfo[i][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[i][hOwner]);
						SendClientMessage(playerid, COLOR_WHITE, "Available commands: /enter, /ds(hout), ddo, /knock");
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับสู่%sของ %s", HouseInfo[i][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[i][hOwner]);
						SendClientMessage(playerid, COLOR_WHITE, "Available commands: /enter, /ds(hout), ddo, /knock");
					}
				}
				if(HouseInfo[i][hOwned] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับเข้าสู่%s %s", HouseInfo[i][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[i][hAddress]);
					SendClientMessageEx(playerid, COLOR_GREEN, "ราคาบ้านหลังนี้คือ: $%d",HouseInfo[i][hPrice]);
					SendClientMessage(playerid, COLOR_WHITE, "Command: /buyhouse");
				}
			    gPlayerCheckpointValue[playerid] = -1;
			}
	    }*/
	    case CHECKPOINT_NEWSPAPER: {
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	    }
		case CHECKPOINT_VEH:
		{
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			GameTextForPlayer(playerid, "~p~You have found it", 4000, 3);
			//Streamer_ToggleIdleUpdate(playerid, false);
		}
		case CHECKPOINT_UNLOADFISHING:
		{
		    if(IsAFK{playerid}) return 1;
		    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

		    if (IsPlayerInRangeOfPoint(playerid, 2.5, 2475.2932,-2710.7759,3.1963))
		    {
			    new str[128], earn = playerData[playerid][pFishes], rand = playerData[playerid][pFishes]/4;
			    if(rand) earn+=random(rand);

			    playerData[playerid][pCash]+=earn;

			    format(str, sizeof(str), "~p~SOLD FISHES WEIGHT ~w~%d FOR %d", playerData[playerid][pFishes], earn);
			    GameTextForPlayer(playerid, str, 8000, 4);

			    playerData[playerid][pFishes] = 0;

				gPlayerCheckpointX[playerid]=0.0;
				gPlayerCheckpointY[playerid]=0.0;
				gPlayerCheckpointZ[playerid]=0.0;

				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			}
		}
		case CHECKPOINT_GOFISHING:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && gPlayerCheckpointValue[playerid] != 3) {
		    	SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 30.0);
		        return 1;
		    }
		    else if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT && gPlayerCheckpointValue[playerid] == 3) {
		        SetPlayerCheckpoint(playerid, 383.5097,-2087.5281,7.8359, 30.0);
		        return 1;
		    }

			FishingPlace[playerid] = gPlayerCheckpointValue[playerid];
			SendClientMessage(playerid, COLOR_WHITE, "เริ่มตกปลาได้ที่นี่ (/fish) เมื่อเสร็จแล้วให้คุณ /stopfishing และ /unloadfish");

			gPlayerCheckpointX[playerid]=0.0;
			gPlayerCheckpointY[playerid]=0.0;
			gPlayerCheckpointZ[playerid]=0.0;

			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
            gPlayerCheckpointValue[playerid]=-1;
		}
		case CHECKPOINT_CAREXAM: {
		 	new vehicleid = GetPlayerVehicleID(playerid);
			if(IsVehicleDMV(vehicleid) && GetPVarInt(playerid, "InDriveTest") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);

				if(gPlayerCheckpointValue[playerid] == 1)
				{
				    GameTextForPlayer(playerid, "~w~75", 1200, 3);
					SetPVarInt(playerid, "LessonStarted", 1);
					DisablePlayerCheckpoint(playerid);

                    SendClientMessage(playerid, COLOR_GREEN, "ไปทางเครื่องหมายสีแดง โปรดจำไว้ว่าให้ขับเลนขวาของถนน");

					SetPlayerCheckpointEx(playerid, 1142.9375,-1569.5576,12.9785, 4.0, CHECKPOINT_CAREXAM, 2);
				}
				else if(gPlayerCheckpointValue[playerid] == 2)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1040.8793,-1569.6158,13.0935, 4.0, CHECKPOINT_CAREXAM, 3);
				}
				else if(gPlayerCheckpointValue[playerid] == 3)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1048.6573,-1492.2428,13.0935, 4.0, CHECKPOINT_CAREXAM, 4);
				}
				else if(gPlayerCheckpointValue[playerid] == 4)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 930.3591,-1486.9060,13.0795, 4.0, CHECKPOINT_CAREXAM, 5);
				}
				else if(gPlayerCheckpointValue[playerid] == 5)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 915.2392,-1524.6128,13.0875, 4.0, CHECKPOINT_CAREXAM, 6);
				}
				else if(gPlayerCheckpointValue[playerid] == 6)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 915.0828,-1574.5353,13.0882, 4.0, CHECKPOINT_CAREXAM, 7);
				}
				else if(gPlayerCheckpointValue[playerid] == 7)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 907.6953,-1769.6998,13.0873, 4.0, CHECKPOINT_CAREXAM, 8);
				}
				else if(gPlayerCheckpointValue[playerid] == 8)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 813.3115,-1764.1138,13.1047, 4.0, CHECKPOINT_CAREXAM, 9);
				}
				else if(gPlayerCheckpointValue[playerid] == 9)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 813.3115,-1764.1138,13.1047, 4.0, CHECKPOINT_CAREXAM, 10);
				}
				else if(gPlayerCheckpointValue[playerid] == 10)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 876.8595,-1580.0282,13.0877, 4.0, CHECKPOINT_CAREXAM, 11);
				}
				else if(gPlayerCheckpointValue[playerid] == 11)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1012.6880,-1574.8156,13.0875, 4.0, CHECKPOINT_CAREXAM, 12);
				}
				else if(gPlayerCheckpointValue[playerid] == 12)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1249.2765,-1574.5369,13.0878, 4.0, CHECKPOINT_CAREXAM, 13);
				}
				else if(gPlayerCheckpointValue[playerid] == 13)
				{
					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		            gPlayerCheckpointValue[playerid]=-1;

					if(GetPVarInt(playerid, "LessonSeconds") <= 10)
					{
						if(GetPVarInt(playerid, "InDriveTest") == 1)
						{
							playerData[playerid][pCarLic] = 1;
    						GameTextForPlayer(playerid, "~w~Congratulations! here is your license!", 5000, 1);
			    			playerData[playerid][pCash]-=5000;
							DeletePVar(playerid, "LessonStarted");
							DeletePVar(playerid, "LessonSeconds");
							DeletePVar(playerid, "InDriveTest");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREEN, "การขับรถเร็วเกินไปไม่เป็นที่ยอมรับ");
						DeletePVar(playerid, "LessonStarted");
						DeletePVar(playerid, "LessonSeconds");
						DeletePVar(playerid, "InDriveTest");
					}

					SetVehicleToRespawn(vehicleid);
				}
			}
			else if(IsVehicleDMV(vehicleid) && GetPVarInt(playerid, "InDriveTest") == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);

				if(gPlayerCheckpointValue[playerid] == 1)
				{
				    GameTextForPlayer(playerid, "~w~75", 1200, 3);
					SetPVarInt(playerid, "LessonStarted", 1);
					DisablePlayerCheckpoint(playerid);

                    SendClientMessage(playerid, COLOR_GREEN, "ไปทางเครื่องหมายสีแดง โปรดจำไว้ว่าให้ขับเลนขวาของถนน");

					SetPlayerCheckpointEx(playerid, 1288.9124,-1573.6912,13.3828, 4.0, CHECKPOINT_CAREXAM, 2); // Go 2

					SendClientMessage(playerid, COLOR_WHITE, "ยินดีต้อนรับเข้าสู่การทดสอบแท็กซี่! โปรดใส่ใจกับข้อความ");
					SendClientMessage(playerid, COLOR_WHITE, "ที่กำลังจะเกิดขึ้น");
				}
				else if(gPlayerCheckpointValue[playerid] == 2) // 2
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1359.0680,-1419.6614,13.3828, 4.0, CHECKPOINT_CAREXAM, 3); // Go 3

					SendClientMessage(playerid, COLOR_WHITE, "มีเส้นทางไม่มากนักตลอดการเดินรถนี้คุณจะ");
					SendClientMessage(playerid, COLOR_WHITE, "ได้รับงานแท็กซี่เมื่อทำการทดสอบจนสำเร็จ");
				}
				else if(gPlayerCheckpointValue[playerid] == 3)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1333.9957,-1398.6868,13.3542, 4.0, CHECKPOINT_CAREXAM, 4);

                    SendClientMessage(playerid, COLOR_WHITE, "เป้าหมายตลอดเส้นทางนี้คือการขับรถของคุณจากจุด");
                    SendClientMessage(playerid, COLOR_WHITE, "A ไปยังจุด B มันทำให้คุณได้รู้เกี่ยวกับเส้นทางรอบ ๆ เมือง Los Santos!");
				}
				else if(gPlayerCheckpointValue[playerid] == 4)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1211.2808,-1322.8888,13.5589, 4.0, CHECKPOINT_CAREXAM, 5);

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ข้างหน้าโรงพยาบาล All Saint !");
					SendClientMessage(playerid, COLOR_WHITE, "ข้อแนะ: ขับอย่างระมัดระวังและทำใจให้เย็นเข้าไว้ตลอดเส้นทางการเดินรถ");
				}
				else if(gPlayerCheckpointValue[playerid] == 5)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1072.5366,-1278.2339,13.3828, 4.0, CHECKPOINT_CAREXAM, 6);
					SendClientMessage(playerid, COLOR_WHITE, "ผู้โดยสาร: โปรดพาฉันไปที่สตูดิโอภาพยนต์");
				}
				else if(gPlayerCheckpointValue[playerid] == 6)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 952.7286,-1218.6337,16.7341, 4.0, CHECKPOINT_CAREXAM, 7);
				}
				else if(gPlayerCheckpointValue[playerid] == 7)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 937.3082,-1281.0801,14.9837, 4.0, CHECKPOINT_CAREXAM, 8);
                    SendClientMessage(playerid, COLOR_WHITE, "ผู้โดยสาร: ขอบคุณที่มาส่ง!");
				}
				else if(gPlayerCheckpointValue[playerid] == 8)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1132.1293,-1411.0457,13.6248, 4.0, CHECKPOINT_CAREXAM, 9);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 50);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ที่เดอะมอลล์ !");

				}
				else if(gPlayerCheckpointValue[playerid] == 9)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1193.5734,-1561.8549,13.3828, 4.0, CHECKPOINT_CAREXAM, 10);

					SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร: โปรดไปที่ตลาด!");
				}
				else if(gPlayerCheckpointValue[playerid] == 10)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1206.1475,-1717.4045,13.5469, 4.0, CHECKPOINT_CAREXAM, 11);
				}
				else if(gPlayerCheckpointValue[playerid] == 11)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1534.5322,-1657.3186,13.3828, 4.0, CHECKPOINT_CAREXAM, 12);

                    SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร: ขอบคุณที่มาส่ง!");
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: สถานีตำรวจ! อย่างเร่งด่วน");
				}
				else if(gPlayerCheckpointValue[playerid] == 12)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1437.5542,-1553.3374,13.5469, 4.0, CHECKPOINT_CAREXAM, 13);
					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: ฉันจะนั่งไปสเก็ตพาร์คเร็ว ๆ ด้วย");
				}
				else if(gPlayerCheckpointValue[playerid] == 13)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1457.3812,-1314.1404,13.3828, 4.0, CHECKPOINT_CAREXAM, 14);

				}
				else if(gPlayerCheckpointValue[playerid] == 14)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1703.0131,-1304.3083,13.4166, 4.0, CHECKPOINT_CAREXAM, 15);
					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: โอ้ไม่ฉันมาไม่ทัน!");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[ผู้โดยสารอารมณ์เสีย-เวลาถูกหัก]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 10);

				}
				else if(gPlayerCheckpointValue[playerid] == 15)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1655.6829,-1456.3467,13.3837, 4.0, CHECKPOINT_CAREXAM, 16);

					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: พาฉันกลับไปที่สถานีตำรวจ");

				}
				else if(gPlayerCheckpointValue[playerid] == 16)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1524.3076,-1663.1096,13.5469, 4.0, CHECKPOINT_CAREXAM, 17);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[คุณทำได้เกินความคาดหมาย](เวลาเพิ่ม)");

				}
				else if(gPlayerCheckpointValue[playerid] == 17)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1827.0012,-1680.2316,13.5469, 4.0, CHECKPOINT_CAREXAM, 18);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ที่อาลัมบรา");
				}
				else if(gPlayerCheckpointValue[playerid] == 18)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1968.9856,-1622.3890,15.9688, 4.0, CHECKPOINT_CAREXAM, 19);

                    SendClientMessage(playerid, COLOR_WHITE, "ผู้โดยสาร: พิซซ่าสแต็ค IDLEWOOD");

				}
				else if(gPlayerCheckpointValue[playerid] == 19)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2079.0129,-1658.8647,13.3906, 4.0, CHECKPOINT_CAREXAM, 20);

					SendClientMessage(playerid, COLOR_WHITE, "ผู้โดยสาร: ฉันหิวจริง ๆ ...");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[ผู้โดยสารอารมณ์เสีย-เวลาถูกหัก]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 15);
				}
				else if(gPlayerCheckpointValue[playerid] == 20)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2115.4177,-1778.2894,13.3903, 4.0, CHECKPOINT_CAREXAM, 21);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[คุณทำได้เกินความคาดหมาย](เวลาเพิ่ม)");


				}
				else if(gPlayerCheckpointValue[playerid] == 21)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2648.0222,-1676.4285,10.8086, 4.0, CHECKPOINT_CAREXAM, 22);


					SendClientMessage(playerid, COLOR_WHITE, "ผู้โดยสาร: ขอบคุณพระเจ้าเราทำมันได้");
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 50);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ที่สนามกีฬา เพื่อนของฉันและฉันต้องการรถโดยสาร!");

				}
				else if(gPlayerCheckpointValue[playerid] == 22)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2645.4697,-1234.8927,49.8451, 4.0, CHECKPOINT_CAREXAM, 23);

					SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร: ฉันต้องการนั่งไปบ้าน เพื่อนเก่าของฉันมันเห็นแก่ตัวอีกอย่างเธอคงมาเองได้");
				}
				else if(gPlayerCheckpointValue[playerid] == 23)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2607.1348,-1037.3793,69.6366, 4.0, CHECKPOINT_CAREXAM, 24);

					SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร: มันทำให้ฉันโกรธเวลาฉันคิดถึงเธอคิดขึ้นมา");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[ผู้โดยสารอารมณ์เสีย-เวลาถูกหัก]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 40);
				}
				else if(gPlayerCheckpointValue[playerid] == 24)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2501.7471,-972.1787,82.2425, 4.0, CHECKPOINT_CAREXAM, 25);
				}
				else if(gPlayerCheckpointValue[playerid] == 25)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2647.6921,-1672.7454,10.7948, 4.0, CHECKPOINT_CAREXAM, 26);

					SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร: คุณช่วยไปรับเธอได้ไหม ฉันกังวลเหลือเกิน...");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 200);
				}
				else if(gPlayerCheckpointValue[playerid] == 26)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2229.6445,-1729.9596,13.3828, 4.0, CHECKPOINT_CAREXAM, 27);
					SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร 2: โปรดไปที่เดอะมอลล์!");
				}
				else if(gPlayerCheckpointValue[playerid] == 27)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1962.4601,-1749.5858,13.3828, 4.0, CHECKPOINT_CAREXAM, 28);
				}
				else if(gPlayerCheckpointValue[playerid] == 28)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1936.6576,-1772.4995,13.3828, 4.0, CHECKPOINT_CAREXAM, 29);
				}
				else if(gPlayerCheckpointValue[playerid] == 29)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1762.6610,-1729.7421,13.3828, 4.0, CHECKPOINT_CAREXAM, 30);

                    SendClientMessage(playerid, 0xF8E0ECFF, "ผู้โดยสาร 2: หากคุณไม่ว่าอะไร แวะไปทางอาลัมบราได้ไหม?");
				}
				else if(gPlayerCheckpointValue[playerid] == 30)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1762.2166,-1606.8145,13.3797, 4.0, CHECKPOINT_CAREXAM, 31);
				}
				else if(gPlayerCheckpointValue[playerid] == 31)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1816.7012,-1682.6655,13.3828, 4.0, CHECKPOINT_CAREXAM, 32);
				}
				else if(gPlayerCheckpointValue[playerid] == 32)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1279.2948,-1398.0652,13.0750, 4.0, CHECKPOINT_CAREXAM, 33);
					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร 2: *ถอนหายใจ* โปรดพาฉันไปที่เดอะมอลล์ก็พอ");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[ผู้โดยสารอารมณ์เสีย-เวลาถูกหัก]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 10);
				}
				else if(gPlayerCheckpointValue[playerid] == 33)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1120.0308,-1390.4103,13.4627, 4.0, CHECKPOINT_CAREXAM, 34);
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 10);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[คุณทำได้เกินความคาดหมาย](เวลาเพิ่ม)");
				}
				else if(gPlayerCheckpointValue[playerid] == 34)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 642.6805,-1355.8063,13.5621, 4.0, CHECKPOINT_CAREXAM, 35);
					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร 2: ขอบคุณ");
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ที่สตูดิโอภาพยนต์");

					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 145);
				}
				else if(gPlayerCheckpointValue[playerid] == 35)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1375.0747,-2287.1389,13.3530, 4.0, CHECKPOINT_CAREXAM, 36);
					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: สนามบิน เร็ว ๆ ด้วยก่อนที่ฉันจะตกเครื่อง !");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[ผู้โดยสารอารมณ์เสีย-เวลาถูกหัก]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 15);
				}
				else if(gPlayerCheckpointValue[playerid] == 36)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1540.4331,-2287.9326,13.3828, 4.0, CHECKPOINT_CAREXAM, 37);
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[คุณทำได้เกินความคาดหมาย](เวลาเพิ่ม)");
				}
				else if(gPlayerCheckpointValue[playerid] == 37)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1683.5861,-2248.6130,-2.6732, 4.0, CHECKPOINT_CAREXAM, 38);

				}
				else if(gPlayerCheckpointValue[playerid] == 38)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1680.6915,-2324.1389,-2.8516, 4.0, CHECKPOINT_CAREXAM, 39);

					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: ขอบคุณมากกก !");

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Call_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "ผู้โทร: Taxi_Instructor เบอร์: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "ตำแหน่ง: ที่สนามบิน");

					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);

				}
				else if(gPlayerCheckpointValue[playerid] == 39)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1556.8877,-2284.6323,13.3828, 4.0, CHECKPOINT_CAREXAM, 40);

					SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: โปรดไปที่โรงเรียนสอนขับรถ..");

				}
				else if(gPlayerCheckpointValue[playerid] == 40)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1383.1172,-2285.7288,13.3110, 4.0, CHECKPOINT_CAREXAM, 41);

				}
				else if(gPlayerCheckpointValue[playerid] == 41)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1837.4260,-1558.3635,13.3704, 4.0, CHECKPOINT_CAREXAM, 42);


				}
				else if(gPlayerCheckpointValue[playerid] == 42)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1441.3636,-1590.0765,13.3828, 4.0, CHECKPOINT_CAREXAM, 43);

				}
				else if(gPlayerCheckpointValue[playerid] == 43)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1280.8734,-1567.3806,13.3828, 4.0, CHECKPOINT_CAREXAM, 44);


				}
				else if(gPlayerCheckpointValue[playerid] == 44)
				{
					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		            gPlayerCheckpointValue[playerid]=-1;

					if(GetPVarInt(playerid, "InDriveTest") == 2)
					{
							SendClientMessage(playerid, COLOR_STAT2, "ผู้โดยสาร: ขอบคุณ!");

							if(playerData[playerid][pJob] == JOB_NONE)
							{
						        playerData[playerid][pJob] = JOB_TAXI;

								if(playerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_GRAD6, "/jobswitch เพื่อทำให้มันเป็นอาชีพเสริม");
							}
							else
							{
							    if(playerData[playerid][pSideJob] == JOB_NONE)
							    {
							        playerData[playerid][pSideJob] = JOB_TAXI;
							    }
							    else
							    {
                                    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องออกจากงานก่อน (/leavejob หรือ /leavesidejob)");
							    }
							}

    						GameTextForPlayer(playerid, "~w~Congratulations! you are now a taxi driver!", 5000, 1);
			    			playerData[playerid][pCash]-=5000;
							DeletePVar(playerid, "LessonStarted");
							DeletePVar(playerid, "LessonSeconds");
							DeletePVar(playerid, "InDriveTest");
					}

					SetVehicleToRespawn(vehicleid);
				}
			}
			else {
			    SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 4.0);
			}
		}
		case CHECKPOINT_COMP: {
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		}

		case CHECKPOINT_FARMER: { // เก็บเกี่ยว
		    new vehicleid = GetPlayerVehicleID(playerid);
			if(far_start[playerid] && far_veh[playerid] == vehicleid)
			{
                if(far_place[playerid])
                {
				    if(gPlayerCheckpointValue[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 5.0, BlueFarm[gPlayerCheckpointValue[playerid]][0],BlueFarm[gPlayerCheckpointValue[playerid]][1],BlueFarm[gPlayerCheckpointValue[playerid]][2])) {

						PlayerPlaySoundEx(playerid, 17803);
						SetPlayerCheckpointEx(playerid, -53.5525,70.3079,4.0933, 5.0, CHECKPOINT_FARMER2);
					}
                }
                else
                {
				    if(gPlayerCheckpointValue[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 5.0, FlintFarm[gPlayerCheckpointValue[playerid]][0],FlintFarm[gPlayerCheckpointValue[playerid]][1],FlintFarm[gPlayerCheckpointValue[playerid]][2])) {

						PlayerPlaySoundEx(playerid, 17803);
						SetPlayerCheckpointEx(playerid, -377.8374,-1433.8853,25.7266, 5.0, CHECKPOINT_FARMER2);
					}
				}
			}
		}
		case CHECKPOINT_FARMER2: { // ส่งเก็บเกี่ยว
			new vehicleid = GetPlayerVehicleID(playerid);
			if(far_start[playerid] && far_veh[playerid] == vehicleid) {
	            new randmoney = 200 + random(100), farmString[52];

	            format(farmString, sizeof(farmString), "~w~you got some wheat and sold it for~n~~y~for %d$", randmoney);
	            GameTextForPlayer(playerid, farmString, 5000, 1);

	            playerData[playerid][pPayCheck] += randmoney;

	            PlayerPlaySoundEx(playerid, 17803);

				//Next Harvesting
				if(playerData[playerid][pLevel] > 3) {

					gPlayerCheckpointX[playerid]=0.0;
					gPlayerCheckpointY[playerid]=0.0;
					gPlayerCheckpointZ[playerid]=0.0;

					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

					far_start[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;
				}
				else StartHarvesting(playerid);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	/*switch (gPlayerCheckpointStatus[playerid])
	{
	    case CHECKPOINT_HOUSE: {
	        DisablePlayerCheckpoint(playerid);
	        gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	        gPlayerCheckpointValue[playerid] = -1;
	        nearHouse_var[playerid] = -1;
		}
	}*/
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(GetPlayerVisibleDynamicCP(playerid)) return 1;

	switch (playerData[playerid][pCP_Type])
	{
	    case RCHECKPOINT_TRUCKER: {
		    playerData[playerid][pCP_Type] = -1;
		    playerData[playerid][pCP_X] = 0.0;
		    playerData[playerid][pCP_Y] = 0.0;
		    playerData[playerid][pCP_Z] = 0.0;

			DisablePlayerRaceCheckpoint(playerid);
	    }

	    case RCHECKPOINT_TRUCKERJOB: {
		    playerData[playerid][pCP_Type] = -1;
		    playerData[playerid][pCP_X] = 0.0;
		    playerData[playerid][pCP_Y] = 0.0;
		    playerData[playerid][pCP_Z] = 0.0;

			DisablePlayerRaceCheckpoint(playerid);

			SendClientMessage(playerid, -1, "คุณมาถึงจุดหมายปลายทางแล้ว");
	    }
	}

	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:Current = GetPlayerMenu(playerid);
	if(Current == Guide)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            ShowMenuForPlayer(GuideJob1, playerid);
	            return 1;
			}
			case 1: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________How to call taxi:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/call 544");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
			case 2: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Bus routes:___________");
				SendClientMessage(playerid, COLOR_WHITE,"BLACK ROUTE: LS Airport -> License Office -> Alhambra -> LS Bank -> Motel");
                SendClientMessage(playerid, COLOR_WHITE,"RED ROUTE: Food Mart -> Marina -> Rodeo -> Vinewood -> Hospital");
                SendClientMessage(playerid, COLOR_WHITE,"GREEN ROUTE: Vinewood 24/7 -> Dillimore -> Blueberry -> Montgomery -> Palomino Creek");
                SendClientMessage(playerid, COLOR_WHITE,"YELLOW ROUTE: Restaurant -> Market st. -> Bank -> Glen Park -> East LS -> Red Pen -> Grove st. -> LS Gym");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
			case 3: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Where to live:___________");
				SendClientMessage(playerid, COLOR_WHITE,"- จ่ายเพื่อเช่าห้องในโรงแรม");
                SendClientMessage(playerid, COLOR_WHITE,"- เช่าห้องอยู่ในบ้านสักหลัง");
                SendClientMessage(playerid, COLOR_WHITE,"- หรืออาศัยอยู่ที่ LS Airport Motel");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
			case 4: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Medic help:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/call 911");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
			case 5: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Police help:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/call 911");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
			case 6: {
			    SendClientMessage(playerid, COLOR_GREEN,"_____LA Roleplay Server Forums:_____");
				SendClientMessage(playerid, COLOR_WHITE,"(อ่านกฏและคำแนะนำได้ที่นั้น)");
                SendClientMessage(playerid, COLOR_WHITE,"forum.la-rp.site");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");
			}
		}
        SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(Guide, playerid);
	}

	if(Current == GuideJob1)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(GuideJob1, playerid);
	            ShowMenuForPlayer(GuideJob2, playerid);
	            return 1;
			}
	        case 1: // Farmer
	        {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Farmer:___________");
				SendClientMessage(playerid, COLOR_WHITE,"ชาวไร่ที่เก็บเกี่ยวผลผลิตให้เจ้าของฟาร์ม");
                SendClientMessage(playerid, COLOR_WHITE,"/harvest");
                SendClientMessage(playerid, COLOR_YELLOW,"> สถานที่ของอาชีพนี้ถูกทำเครื่องหมายอยู่บนแผนที่");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, -382.5893,-1426.3422,26.2217, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;
				TogglePlayerControllable(playerid, 1);
				return 1;
			}
		}
        SendClientMessage(playerid, COLOR_WHITE,"เพื่อยืนขึ้นใช้ /stopanim");

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(GuideJob1, playerid);
	}


	if(Current == GuideJob2)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(GuideJob2, playerid);
	            ShowMenuForPlayer(Guide, playerid);
	            return 1;
			}

	        case 1: // Car mechanic
	        {
		    	SendClientMessage(playerid, COLOR_GREEN,"___________Mechanic:___________");
				SendClientMessage(playerid, COLOR_WHITE,"ช่างซ่อมและทาสีรถโดยใช้");
				SendClientMessage(playerid, COLOR_WHITE,"ชิ้นส่วนรถยนต์และรถลากจูง");
                SendClientMessage(playerid, COLOR_WHITE,"/paintcar /repaircar /carparts /refillcar");
                SendClientMessage(playerid, COLOR_YELLOW,"> สถานที่ของอาชีพนี้ถูกทำเครื่องหมายอยู่บนแผนที่");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, 88.4620,-165.0116,2.5938, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;
				TogglePlayerControllable(playerid, 1);
	            return 1;
			}
	        case 2: // Trucker
	        {
		    	SendClientMessage(playerid, COLOR_GREEN,"___________Trucker:___________");
				SendClientMessage(playerid, COLOR_WHITE,"รถบรรทุกลอสซานโตส; ทําให้เศรษฐกิจในเมืองเคลื่อนไหว");
				SendClientMessage(playerid, COLOR_WHITE,"ต้องพร้อมสำหรับการขับขี่! (/truckerjob)");
                SendClientMessage(playerid, COLOR_YELLOW,"> สถานที่ของอาชีพนี้ถูกทำเครื่องหมายอยู่บนแผนที่");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, -78.0338,-1136.1221,1.0781, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;
				TogglePlayerControllable(playerid, 1);
	            return 1;
			}

		}

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(GuideJob1, playerid);
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid,1);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    /*if(PlayingPool[playerid])
    {
        PlayingPool[playerid] = 0;
        new
		    count = GetPoolPlayersCount();
        if(count <= 0)
        {
			PoolStarted = 0;
			KillTimer(PoolTimer_);
			RespawnPoolBalls();
        }
        RemoveWeapon(playerid, 7);
    }*/

	return 1;
}

UpdatePlayerAttachWeapon(playerid, slot) {

    if(!PlayerAttachWeapon[playerid][slot][awID]) {
		format(XLQuery, sizeof(XLQuery), "INSERT INTO `weapon` (weaponid, x, y, z, rx, ry, rz, bone, hide, owner) VALUES(%d, %f, %f, %f, %f, %f, %f, %d, %d, %d)", PlayerAttachWeapon[playerid][slot][awWid],
		PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz],
		PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz],
		PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][awHide], playerData[playerid][pID]);
		mysql_tquery(dbCon, XLQuery, "OnPlayerAttachWeaponInsert", "dd", playerid, slot);
	}
	else
	{
	    format(XLQuery, sizeof(XLQuery), "UPDATE weapon SET x='%f',y='%f',z='%f',rx='%f',ry='%f',rz='%f',bone='%d',hide='%d' WHERE id = '%d'",
		PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz],
		PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz],
		PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][awHide], PlayerAttachWeapon[playerid][slot][awID]);
		mysql_query(dbCon,XLQuery);
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{

	if(GetPVarInt(playerid, "AttachEdit") == 1)
	{
   		DeletePVar(playerid, "AttachEdit");
    	SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
		printf("SetPlayerAttachedObject(%d,%d,%d,%d,%f,%f,%f,%f,%f,%f,%f,%f,%f);", playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
	}

	if(bf_get(player_bf[playerid], IS_PLAYER_EDITWEAPON))
	{
		if(response)
		{
			new i = GetPVarInt(playerid, "AttachSlot");

			PlayerAttachWeapon[playerid][i][awBone] = boneid;
			PlayerAttachWeapon[playerid][i][aPx] = fOffsetX;
			PlayerAttachWeapon[playerid][i][aPy] = fOffsetY;
			PlayerAttachWeapon[playerid][i][aPz] = fOffsetZ;
			PlayerAttachWeapon[playerid][i][aPrx] = fRotX;
			PlayerAttachWeapon[playerid][i][aPry] = fRotY;
			PlayerAttachWeapon[playerid][i][aPrz] = fRotZ;

			UpdatePlayerAttachWeapon(playerid, i);
			//PlayerAttachWeapon[playerid][i][awID] = 0;
			cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

		    SendClientMessage(playerid, COLOR_YELLOW, "ปรับปรุงแล้ว");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ยกเลิกแล้ว");

		bf_off(player_bf[playerid], IS_PLAYER_EDITWEAPON);
        RemovePlayerAttachedObject(playerid, FREESLOT9);

        DeletePVar(playerid, "AttachSlot");
	}
	/*if(bf_get(player_bf[playerid], IS_PLAYER_EDITTOY))
	{
		if(response)
		{
			ToyData[playerid][cl_selected[playerid]][cl_x] = fOffsetX;
			ToyData[playerid][cl_selected[playerid]][cl_y] = fOffsetY;
			ToyData[playerid][cl_selected[playerid]][cl_z] = fOffsetZ;
			ToyData[playerid][cl_selected[playerid]][cl_rx] = fRotX;
			ToyData[playerid][cl_selected[playerid]][cl_ry] = fRotY;
			ToyData[playerid][cl_selected[playerid]][cl_rz] = fRotZ;
			ToyData[playerid][cl_selected[playerid]][cl_scalex] = fScaleX;
			ToyData[playerid][cl_selected[playerid]][cl_scaley] = fScaleY;
			ToyData[playerid][cl_selected[playerid]][cl_scalez] = fScaleZ;
			printf("%f,%f,%f,%f,%f,%f,%f,%f,%f", fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		}
		RemovePlayerClothing(playerid);
		cl_DressPlayer(playerid);
		bf_off(player_bf[playerid], IS_PLAYER_EDITTOY);
	}*/
	
	if(bf_get(player_bf[playerid], IS_PLAYER_EDITCLOTHING))
	{
		if(response)
		{
		    new str[1024];

		    format(str,sizeof(str),"UPDATE clothing SET x = '%f', y = '%f', z = '%f', rx = '%f', ry = '%f', rz = '%f', scalex = '%f', scaley = '%f', scalez = '%f' WHERE id = '%d' AND owner = '%d' LIMIT 1",
		    fOffsetX,
		    fOffsetY,
		    fOffsetZ,
			fRotX,
			fRotY,
			fRotZ,
			fScaleX,
			fScaleY,
			fScaleZ,
			ClothingData[playerid][cl_selected[playerid]][cl_sid],
			playerData[playerid][pID]);
			mysql_query(dbCon, str);

			ClothingData[playerid][cl_selected[playerid]][cl_x] = fOffsetX;
			ClothingData[playerid][cl_selected[playerid]][cl_y] = fOffsetY;
			ClothingData[playerid][cl_selected[playerid]][cl_z] = fOffsetZ;
			ClothingData[playerid][cl_selected[playerid]][cl_rx] = fRotX;
			ClothingData[playerid][cl_selected[playerid]][cl_ry] = fRotY;
			ClothingData[playerid][cl_selected[playerid]][cl_rz] = fRotZ;
			ClothingData[playerid][cl_selected[playerid]][cl_scalex] = fScaleX;
			ClothingData[playerid][cl_selected[playerid]][cl_scaley] = fScaleY;
			ClothingData[playerid][cl_selected[playerid]][cl_scalez] = fScaleZ;

		}
		ClearAnimations(playerid);

		RemovePlayerClothing(playerid);

		ShowPlayerFooter(playerid, "~g~UPDATED YOUR ITEM!~n~~w~Use ~y~/clothing ~w~to put it back on.", 10000);

		bf_off(player_bf[playerid], IS_PLAYER_EDITCLOTHING);
	}
	

	if(bf_get(player_bf[playerid], IS_PLAYER_BUYCLOTHING))
	{
		if(response)
		{//cl_SportsData[cl_buyingslot[playerid]][e_model]
		    new str[1024], money, name[32];

			switch(cl_buying[playerid])
			{
			    case BUYSPORTS: for(new i=0;i!=sizeof(cl_SportsData);++i) if(cl_SportsData[i][e_model] == modelid) format(name, 32, cl_SportsData[i][e_name]), money = cl_SportsData[i][e_price];
				case BUYHARDWARE: for(new i=0;i!=sizeof(cl_HardwareData);++i) if(cl_HardwareData[i][e_model] == modelid) format(name, 32, cl_HardwareData[i][e_name]), money = cl_HardwareData[i][e_price];
				case BUYWATCH: for(new i=0;i!=sizeof(cl_DsShopData);++i) if(cl_DsShopData[i][e_model] == modelid) format(name, 32, cl_DsShopData[i][e_name]), money = cl_DsShopData[i][e_price];
                case BUYZIP: for(new i=0;i!=sizeof(cl_ZipData);++i) if(cl_ZipData[i][e_model] == modelid) format(name, 32, cl_ZipData[i][e_name]), money = cl_ZipData[i][e_price];
				case BUYMUSIC: for(new i=0;i!=sizeof(cl_MusicalData);++i) if(cl_MusicalData[i][e_model] == modelid) format(name, 32, cl_MusicalData[i][e_name]), money = cl_MusicalData[i][e_price];
				case BUYPOLICE: for(new i=0;i!=sizeof(cl_PoliceData);++i) if(cl_PoliceData[i][e_model] == modelid) format(name, 32, cl_PoliceData[i][e_name]), money = cl_PoliceData[i][e_price];
				case BUYMEDIC: for(new i=0;i!=sizeof(cl_MedicData);++i) if(cl_MedicData[i][e_model] == modelid) format(name, 32, cl_MedicData[i][e_name]), money = cl_MedicData[i][e_price];
				
			}

			if(!strcmp(name, "Holster", true) && playerData[playerid][pCCWLic]==0) 
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องมีใบอนุญาตในการพกอาวุธเพื่อจะซื้อไอเท็มชิ้นนี้");
				RemovePlayerClothing(playerid);
				cl_ResetDressPlayer(playerid);

				cl_buying[playerid]=0; cl_buyingpslot[playerid]=-1;
				ClearAnimations(playerid);
				bf_off(player_bf[playerid], IS_PLAYER_BUYCLOTHING);
				return 1;
			}
            if(playerData[playerid][pCash] >= money)
            {
				new id = -1;
				if((id = AddPlayerClothing(playerid,modelid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,boneid,index,fScaleX,fScaleY,fScaleZ,0,0,name)) != -1)
				{
					format(str,sizeof(str),"INSERT INTO `clothing` (`object`, `x`, `y`, `z`, `rx`, `ry`, `rz`, `bone`, `slot`, `owner`, `equip`, `scalex`, `scaley`, `scalez`, `name`) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '0', '%f', '%f', '%f', '%s')",
					modelid,
					fOffsetX,
					fOffsetY,
					fOffsetZ,
					fRotX,
					fRotY,
					fRotZ,
					boneid,
					index,
					playerData[playerid][pID],
					fScaleX,
					fScaleY,
					fScaleZ,
					name);
					mysql_tquery(dbCon, str, "OnQueryBuyClothing", "dd", playerid, id);
	
					playerData[playerid][pCash] -= money;
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ "EMBED_YELLOW"/clothing"EMBED_WHITE" เพื่อแก้ไขไอเท็มเครื่องแต่งกายของคุณ");
					ShowPlayerFooter(playerid, "~g~Enjoy your purchase!~n~~w~Use ~y~/clothing ~w~to edit your clothing items.", 10000);
	
					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
					mysql_query(dbCon, szQuery);
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อได้มากกว่านี้แล้ว");
				}
            }
			else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถจ่ายมันได้ขออถัยด้วย");
		}
		RemovePlayerClothing(playerid);
        cl_ResetDressPlayer(playerid);

		cl_buying[playerid]=0; cl_buyingpslot[playerid]=-1;
		ClearAnimations(playerid);
	    bf_off(player_bf[playerid], IS_PLAYER_BUYCLOTHING);
	}
	return 1;

}

timer NosUpdate[100](playerid, carid) {
	if (Iter_Contains(sv_playercar, carid)) {
		if(CarData[carid][carNos] > 0)
		{
			CarData[carid][carNos] -= 1;
		}
		else if(CarData[carid][carNos] <= 0)
		{
			CarData[carid][carNos] = 0;
			RemoveVehicleComponent(CarData[carid][carVehicle], 1010);
			stop nosTimer[playerid];
			nosTimer[playerid] = Timer:0;
		}
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
		new carid = -1, vehicleid = GetPlayerVehicleID(playerid);
		if((carid = Car_GetID(vehicleid)) != -1) {
			if (Holding( 4 ))
			{
				if(CarData[carid][carNos] > 0)
				{
					AddVehicleComponent(vehicleid, 1010);

					if (nosTimer[playerid] != Timer:0) {
						stop nosTimer[playerid];
						nosTimer[playerid] = Timer:0;
					}
					nosTimer[playerid] = repeat NosUpdate(playerid, carid);
				}
			}
			if (RELEASED( 4 ))
			{
				RemoveVehicleComponent(vehicleid, 1010);
				stop nosTimer[playerid];
				nosTimer[playerid] = Timer:0;
			}
		}
	}

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && Pressed(KEY_JUMP)) {
		/*ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	ClearAnimations(playerid);
    	*/
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	}

	new weaponid = GetPlayerWeapon(playerid);
	if(newkeys & KEY_FIRE && weaponid >= 16 && weaponid <= 18)
	{
	    playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]]--;
	    if(!playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]])
	    {
	        playerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = 0;
	        playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = 0;
	    }
	}

	if(VCarModingSetting{playerid}) {

        if (IsPlayerInAnyVehicle(playerid)) {

		   	new keys, ud, lr;
			GetPlayerKeys(playerid, keys, ud, lr);

			if ( newkeys & KEY_LOOK_RIGHT ) {
			    VCarModingType[playerid]+=1;
			    VCarModingCompRow[playerid]=0;
			    RenderPlayerModingMenu(playerid, VCarModingType[playerid]);
			}
			else if ( newkeys & KEY_LOOK_LEFT ) {
			    VCarModingType[playerid]-=1;
			    VCarModingCompRow[playerid]=0;
			    RenderPlayerModingMenu(playerid, VCarModingType[playerid]);
			}
			else if ( newkeys & KEY_SPRINT || keys == 8) {
			    VCarModingCompRow[playerid]--;
			    if(VCarModingCompRow[playerid] < 0) VCarModingCompRow[playerid] = 0;
			    RenderPlayerModingMenu(playerid, VCarModingType[playerid]);
			}
			else if ( newkeys & KEY_JUMP || keys == 32) {
			    VCarModingCompRow[playerid]++;
			    if(VCarModingCompRow[playerid] >= VCarModingTypeMax[playerid]) VCarModingCompRow[playerid]=VCarModingTypeMax[playerid]-1;
			    RenderPlayerModingMenu(playerid, VCarModingType[playerid]);
			}
		}
	}

	if ( Pressed(KEY_FIRE) && GetPVarInt(playerid, "GraffitiReplace") == 0 && GetPVarInt(playerid, "GraffitiReplacing") == 0)
	{
		if( GetPlayerWeapon(playerid) == 41 && GraffiModel[playerid] && (playerData[playerid][pSprayPermission] || GetFactionType(playerid) == FACTION_TYPE_GANG))
		{
		 	for(new ID = 0; ID != MAX_GRAFFITI; ID++)
			{
			    if (IsPlayerInRangeOfPoint(playerid, 3.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

			        SetPVarInt(playerid, "GraffitiReplacing", 1);
				    SetPVarInt(playerid, "GraffitiReplace", ID);
					if(spraytimer[playerid] != -1) {
						KillTimer(spraytimer[playerid]);
						spraytimer[playerid]=-1;
					}
		    	 	spraytimer[playerid] = SetTimerEx("replacingGraff", 1000, 1, "i", playerid);
			    	break;
		    	}
		    }
		}
	}

	if ( RELEASED( KEY_FIRE ) && GetPVarInt(playerid, "GraffitiReplacing") == 1 )
	{
	    GameTextForPlayer(playerid, "~r~Spray canceled",5000, 5);
		KillTimer(spraytimer[playerid]);
		spraytimer[playerid]=-1;
		sprayammount[playerid]=0;
		DeletePVar( playerid,"GraffitiReplace");
		DeletePVar( playerid,"GraffitiReplacing");

	}
	/* FIRE KEY */
	if(newkeys & KEY_FIRE && (weaponid == 41 && !IsPlayerInAnyVehicle(playerid))) {
		new nearveh=Vehicle_Nearest(playerid);
		if(IsPlayerFacingVehicle(playerid,nearveh)) {
			if(resprayTimer[playerid] != -1) {
				KillTimer(resprayTimer[playerid]);
				resprayTimer[playerid]=-1;
			}
			resprayTimer[playerid] = SetTimerEx("ResprayTime", 1000, 1, "i", playerid);
			Firehold[playerid] = nearveh;
		}
	}
	if(oldkeys & KEY_FIRE && (Firehold[playerid] != INVALID_VEHICLE_ID)) {
		Firehold[playerid] = INVALID_VEHICLE_ID;
		KillTimer(resprayTimer[playerid]);
		resprayTimer[playerid]=-1;
	}

    if(Pressed(KEY_WALK)) {
		if(playerData[playerid][pSpectating] != INVALID_PLAYER_ID && (playerData[playerid][pAdmin] >= 1 || playerData[playerid][pTester] >= 1)) {
		    TogglePlayerSpectating(playerid, false);
			return 1;
		}
    }
    

	if(Pressed(KEY_SUBMISSION)) {

	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 525) { // For impounding cars.

	        new
				playerTowTruck = GetPlayerVehicleID(playerid);

	        if(!IsTrailerAttachedToVehicle(playerTowTruck)) {
				new
					targetVehicle = GetClosestVehicle(playerid, playerTowTruck); // Exempt the player's own vehicle from the loop.

				if(IsPlayerInRangeOfVehicle(playerid, targetVehicle, 10.0)) {
					AttachTrailerToVehicle(targetVehicle, playerTowTruck);

				}
	        }
	        else DetachTrailerFromVehicle(playerTowTruck);
	    }
	}
	
	if(Pressed(KEY_YES))
	{
		if(VCarModingSetting{playerid}) {

	        if (IsPlayerInAnyVehicle(playerid)) {
				RenderPlayerModingMenu(playerid, VCarModingType[playerid], true);
				return 1;
			}
		}
		/*for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

				new
					Float:oldRotX, Float:oldRotY, Float:oldRotZ;

				GetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, oldRotZ);

				graff_Info[ID][ZYpos] += 90.0;
				SetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, graff_Info[ID][ZYpos]);

				SaveGraffiti(ID);
				break;
			}
		}*/
		if(tToAccept[playerid] != OFFER_TYPE_NONE) {

			new str[128];
			format(str, sizeof(str), "~n~~n~~n~~y~%s ~g~has accepted your offer!", ReturnRealName(playerid));
			GameTextForPlayer(pToAccept[playerid], str, 3000, 5);

			format(str, sizeof(str), "~n~~n~~n~~g~You have accepted ~y~%s~g~ offer!", ReturnRealName(pToAccept[playerid]));
			GameTextForPlayer(playerid, str, 3000, 5);

		    switch(tToAccept[playerid]) {
		        case OFFER_TYPE_VSELL: {
					if(playerData[playerid][pCash] >= prToAccept[playerid])
					{
						if(playerData[pToAccept[playerid]][pPCarkey] != 9999) {
							new vehicleid = GetPlayerVehicleID(pToAccept[playerid]);

							if(IsDonateCar(CarData[playerData[pToAccept[playerid]][pPCarkey]][carModel])) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อยานพาหนะบริจาคนี้ได้");

							if(IsPlayerInAnyVehicle(pToAccept[playerid]) && vehicleid == CarData[vToAccept[playerid]][carVehicle] && CarData[vToAccept[playerid]][carOwner] == playerData[pToAccept[playerid]][pID])
							{
								SendClientMessage(pToAccept[playerid], 0xADFF2FFF, "PROCESSING: กำลังสร้าง /v list ของคุณใหม่..");
								SendClientMessageEx(pToAccept[playerid], 0xADFF2FFF, "PROCESSED: รายการปรับปรุงใหม่ %s", (GetNumberOwnerCar(pToAccept[playerid])) ? (""):("คุณไม่มียานพาหนะเหลืออยู่แล้ว"));

								playerData[pToAccept[playerid]][pCash] += prToAccept[playerid];
								playerData[playerid][pCash] -= prToAccept[playerid];

								playerData[playerid][pPCarkey] = vToAccept[playerid];
								playerData[pToAccept[playerid]][pPCarkey] = 9999;

								Log(pveh_log, INFO, "%s sell %s to %s for %d", ReturnPlayerName(playerid), g_arrVehicleNames[CarData[playerData[playerid][pPCarkey]][carModel] - 400],  ReturnPlayerName(pToAccept[playerid]), prToAccept[playerid]);

								CarData[vToAccept[playerid]][carOwner] = playerData[playerid][pID];

								Car_SaveID(playerData[playerid][pPCarkey]);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
								mysql_query(dbCon, szQuery);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[pToAccept[playerid]][pCash], playerData[pToAccept[playerid]][pID]);
								mysql_query(dbCon, szQuery);

								//pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = 9999; prToAccept[playerid] = 0; tToAccept[playerid] = 0;
							}
							else
							{
								SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: เจ้าของต้องอยู่ในยานพาหนะเพื่อทำข้อเสนอนี้ให้สำเร็จ!");
								SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "SERVER: เจ้าของต้องอยู่ในยานพาหนะเพื่อทำข้อเสนอนี้ให้สำเร็จ!");
							}
						}
			 		}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอ!");
						SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "ยานพาหนะของคุณไม่สามารถขายได้เพราะผู้เล่นนั้นมีเงินไม่เพียงพอ");
					}
					pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = 9999; prToAccept[playerid] = 0; tToAccept[playerid] = 0;
          		}
		        case OFFER_TYPE_SERVICE: {
		      		ShowPlayerFooter(pToAccept[playerid], "~h~~p~PULL OUT YOUR SPRAYCAN.", -1);
			     	RepairTime{pToAccept[playerid]} = serviceComp[pToAccept[playerid]];
		            pToAccept[playerid] = INVALID_PLAYER_ID; tToAccept[playerid] = 0;
		        }
			}
   			HidePlayerFooter(playerid);
		}
		else {
			new targetplayer = GetPlayerTargetPlayer(playerid);
		    if(targetplayer != INVALID_PLAYER_ID)
		    {
				new playerAttr[154];
		        format(playerAttr, sizeof(playerAttr), "%s%s%s", ReturnRealName(targetplayer), strlen(playerData[targetplayer][pAttribute]) ? (" | ") : (""), playerData[targetplayer][pAttribute]);
				SetPlayerChatBubble(targetplayer, playerAttr, COLOR_PURPLE, 30.0, 6000);
		    }
		    else {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "-> ไม่พบเป้าหมาย เคล็ดลับ: แน่ใจแล้วหรือว่าลูกศรเขียวได้อยู่บนหัวของพวกเขาก่อนที่จะกดปุ่ม Y");
		    }
		}
	}

	if(Pressed(KEY_NO))
	{
		if(VCarModingSetting{playerid}) {

	        if (IsPlayerInAnyVehicle(playerid)) {
				SetVehicleExitCarModingShop(playerid);
				return 1;
			}
		}
		/*for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

				new
					Float:oldRotX, Float:oldRotY, Float:oldRotZ;

				GetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, oldRotZ);

				graff_Info[ID][ZYpos] -= 90.0;
				SetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, graff_Info[ID][ZYpos]);

				SaveGraffiti(ID);
				break;
			}
		}*/
		if(tToAccept[playerid] != OFFER_TYPE_NONE) {
		    new str[128];
		    format(str, sizeof(str), "~n~~n~~n~~y~%s ~r~has denied your offer!", ReturnRealName(playerid));
		    GameTextForPlayer(pToAccept[playerid], str, 3000, 5);

		    format(str, sizeof(str), "~n~~n~~n~~r~You have denied ~y~%s~r~ offer!", ReturnRealName(pToAccept[playerid]));
		    GameTextForPlayer(playerid, str, 3000, 5);

		    SendClientMessage(pToAccept[playerid], 0xADFF2FFF, "SERVER: ผู้เล่นปฏิเสธข้อเสนอ");

			switch(tToAccept[playerid]) {
		  		case OFFER_TYPE_VSELL: {
		  		    vToAccept[playerid] = 9999; prToAccept[playerid] = 0;
				}
		  		case OFFER_TYPE_SERVICE: {
					serviceComp[pToAccept[playerid]] = 0;
					serviceTowtruck[pToAccept[playerid]] = 0;
					serviceCustomer[pToAccept[playerid]] = 0;
					serviced[pToAccept[playerid]] = 0;
				}
			}
 	 		tToAccept[playerid] = 0;
 	 		pToAccept[playerid] = INVALID_PLAYER_ID;
		   	HidePlayerFooter(playerid);
		}
	}

	if(Pressed(KEY_SECONDARY_ATTACK)) if(playerData[playerid][pAnimation]) {
		PC_EmulateCommand(playerid, "/stopanim");
	}

	if(Pressed(KEY_FIRE)) playershottick[playerid] = GetTickCount();

	if(Pressed(KEY_SPRINT) || Pressed(KEY_JUMP))
	{
	    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !isDeathmode{playerid} && !isInjuredmode{playerid} && !isKNOmode{playerid})
	    {
	    	for(new i = 0; i != MAX_DAMAGES; ++i)
			{
			    if(DamageData[playerid][i][dShotType] == 7 || DamageData[playerid][i][dShotType] == 8)
				{
			        if(random(10) <= 1 && Pressed(KEY_SPRINT)) return 1;
					
			        ClearAnimations(playerid);
		    		ApplyAnimationEx(playerid, "PED", "FALL_COLLAPSE", 4.1, 0, 1, 1, 0, 0, 1);
		    		LegDelay[playerid] = 5;
				}
			}
		}
	}

	if(playerData[playerid][pTutorialStep]) //gotutorial
	{
	    if(RELEASED(KEY_SPRINT)) // บทเรียนไปข้างหน้า
	    {
            playerData[playerid][pTutorialStep]++;
            ClearChatBox(playerid);
            switch(playerData[playerid][pTutorialStep])
            {
                case 2: {

				    SendClientMessage(playerid, COLOR_GRAD3, "ตู้หนังสือพิมพ์ตั้งอยู่ติดกับ Airport Motel จุดเกิดในปัจจุบันของคุณ");
				    SendClientMessage(playerid, COLOR_GRAD3, "ไปที่เครื่องหมาย 'i' และพิมพ์ /newspaper เพื่ออ่าน");

				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");


				    SendClientMessage(playerid, COLOR_WHITE, " ครั้งแรกในเมืองลอสแซนโตส");
				    SendClientMessage(playerid, COLOR_GRAD3, "ยินดีต้อนรับเข้าสู่เมืองลอสแซนโตส เมืองที่ใหญ่ที่สุดในรัฐซานแอนเดรียส");
				    SendClientMessage(playerid, COLOR_GRAD3, "ขณะนี้คุณอาศัยอยู่ที่ Airport Motel จนกว่าคุณจะหาสถานที่ที่ดีกว่าด้วยตัวคุณเอง");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณอาจต้องการที่จะเริ่มต้นด้วยการอ่านหนังสือพิมพ์ของวันนี้ ที่คุณสามารถหาข้อมูลบางอย่างที่เป็นประโยชน์");

                    InterpolateCameraPos(playerid, 1541.1512,-2287.1345,91.9661, 1669.1499,-2328.8406,-3.5769, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1623.3582,-2288.0413,77.9914, 1654.4652,-2333.6084,-2.6797, 1500, CAMERA_MOVE);

				}
                case 3: {

				    SendClientMessage(playerid, COLOR_WHITE, " การขนส่ง");
				    SendClientMessage(playerid, COLOR_GRAD3, "เพื่อเคลื่อนตัวไปรอบ ๆ เมือง คุณจะต้องพาตัวเองนั่งรถ");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถรอรถบัสเรียกแท็กซี่หรือเช่ารถ และใช้เงินจำนวนหนึ่ง");
				    SendClientMessage(playerid, COLOR_GRAD3, "โทร 544 เพื่อใช้บริการแท็กซี่หรือรอรถบัสตามบูธ รถยนต์ให้เช่าสามารถพบได้รอบ ๆ เมือง");

                    GameTextForPlayer(playerid, "~p~/call 544 ~w~to call~n~~y~los santos public transportation service", 20000, 3);

                    InterpolateCameraPos(playerid, 1669.1499,-2328.8406,-3.5769, 1807.2902,-1939.7085,67.2748, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1654.4652,-2333.6084,-2.6797, 1773.8251,-1902.2825,13.5502, 1500, CAMERA_MOVE);
				}
                case 4: {

				    SendClientMessage(playerid, COLOR_WHITE, " อยู่ได้ด้วยตัวเอง");
				    SendClientMessage(playerid, COLOR_GRAD3, "เมื่อคุณรู้สึกว่ามันถึงเวลาที่จะย้ายออกจาก Airport Motel ไปยังสถานที่ของคุณเอง คุณควรเริ่มมองหาบ้านใหม่หรือโมเต็ลที่อื่น");
				    SendClientMessage(playerid, COLOR_GRAD3, "มีบ้านมากมายอยู่อยู่รอบ ๆ เมืองลอสแซนโตส ซึ่งสามารถซื้อหรือเช่าได้ทุกคนโดยการแลกเปลี่ยนเงินบางส่วนเท่านั้น");
				    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้ยังมีไม่กี่โรงแรมและโมเต็ลรอบ ๆ เมืองที่คุณสามารถเช่าห้องพักได้แค่บางช่วง");

                    GameTextForPlayer(playerid, "~y~Idlewood motel~n~~w~(~p~/rent~w~) or (~p~/rentroom~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 1807.2902,-1939.7085,67.2748, 2119.4541,-1751.1744,21.5524, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1773.8251,-1902.2825,13.5502, 2155.6519,-1776.4888,18.5486, 1500, CAMERA_MOVE);
				}
                case 5: {

				    SendClientMessage(playerid, COLOR_WHITE, " รักษาสุขภาพ");
				    SendClientMessage(playerid, COLOR_GRAD3, "พยายามที่จะให้ชีวิตของคุณมีสุขภาพที่ดีและกินให้ตรงเวลา คุณจะเริ่มสูญเสีย HP อย่างต่อเนื่องเมื่อตัวละครของคุณหิว");
				    SendClientMessage(playerid, COLOR_GRAD3, "การใช้ยาเสพติดมันอาจจะลด HP ของคุณ เพิ่มระดับความหิวของคุณ และยังจะทำให้คุณป่วยหรือเสียชีวิต");
				    SendClientMessage(playerid, COLOR_GRAD3, "มีร้านอาหารหลายแห่งทั่วเมืองที่คุณสามารถกินเพื่อเพิ่ม HP ของคุณและลดระดับความหิวของคุณ");

                    GameTextForPlayer(playerid, "~y~Idlewood pizza stack~n~~w~(~p~/eat~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 2119.4541,-1751.1744,21.5524, 2070.5469,-1834.5552,30.9983, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2155.6519,-1776.4888,18.5486, 2108.1138,-1779.3624,13.3898, 1500, CAMERA_MOVE);
				}
                case 6: {

				    SendClientMessage(playerid, COLOR_WHITE, " การสื่อสารและการพบปะผู้คนใหม่");
				    SendClientMessage(playerid, COLOR_GRAD3, "สังคมของเมืองลอสแซนโตสค่อนข้างใหญ่ มีผู้คนที่อยู่รอบ ๆ หลากหลายประเภทที่มีงานอดิเรกและความสนใจที่แตกต่างกัน");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถพบกับผู้คนใหม่ ๆ รอบ ๆ สถานที่ที่นิยมมากที่สุดในเมือง มันอาจจะเป็น สโมสร ผับ ร้านอาหาร หรือที่อื่น ๆ");
				    SendClientMessage(playerid, COLOR_GRAD3, "หนึ่งในสถานที่ที่นิยมมากที่สุดซึ่งทำหน้าที่เป็นสถานที่นัดพบหรือการช้อปปิ้งก็คือห้างสรรพสินค้า");
                    SendClientMessage(playerid, COLOR_GRAD3, "ห้างสรรพสินค้าที่เป็นหนึ่งในจุดที่สำคัญในลอสแซนโตสที่คุณสามารถสื่อสารและมีปฏิสัมพันธ์กับผู้คนแบบสุ่ม");
                    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถซื้อไอเท็มที่สามารถบันทึกเก็บไว้ได้มากมาย นั้นมันสามารถปรับปรุงบรรยากาศของบทบาทสมมุติและรูปลักษณ์ตัวละครของคุณ");

					GameTextForPlayer(playerid, "~w~Los Santos Mall", 4000, 3);

                    InterpolateCameraPos(playerid, 2070.5469,-1834.5552,30.9983, 1129.1364,-1359.0806,60.4063, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2108.1138,-1779.3624,13.3898, 1129.1011,-1488.4135,22.7614, 1500, CAMERA_MOVE);
				}
                case 7: {

				    SendClientMessage(playerid, COLOR_WHITE, " ได้รับและเป็นเจ้าของทรัพย์สิน");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถรับและเป็นเจ้าของทรัพย์สินได้รอบ ๆ เมืองจาก โฆษณาที่เผยแพร่ พูดคุยกับผู้คน หรือเยี่ยมชมร้านค้า");
				    SendClientMessage(playerid, COLOR_GRAD3, "ทรัพย์สินสามารถให้คุณได้ในการแลกเปลี่ยนกับของเงินบางส่วนหรือไม่ต้องจ่ายเลย มันขึ้นอยู่กับการที่คุณสวมบทบาทกับมันยังไง");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถซื้อบ้านใหม่และยานพาหนะจากตัวแทนจำหน่ายหรือผู้เล่นอื่น ๆ ทั่วทั้งเซิร์ฟเวอร์");
                    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้คุณยังสามารถขโมยทรัพย์สินจากผู้เล่นคนอื่น ๆ ในรูปแบบบทบาทสมมุติและเทคนิคของคุณเอง");
                    SendClientMessage(playerid, COLOR_GRAD3, "อย่างไรก็ตาม การขโมยอาจไม่ได้เป็นวิธีที่สะอาดนักและใครบางคนอาจจะตามหาคุณในภายหลัง");

                    GameTextForPlayer(playerid, "~w~Advertisement Office", 4000, 3);

                    InterpolateCameraPos(playerid, 1129.1364,-1359.0806,60.4063, 1697.8542,-1308.5330,60.4948, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1129.1011,-1488.4135,22.7614, 1736.1309,-1267.8335,13.5431, 1500, CAMERA_MOVE);
				}
                case 8: {

				    SendClientMessage(playerid, COLOR_WHITE, " เพิ่มรายได้ของคุณ");
				    SendClientMessage(playerid, COLOR_GRAD3, "ก่อนจะทำการซื้อขายของในแต่ละอย่างนั้น คุณจะต้องมีเงินเสียก่อนโดยมีหลายหนทางที่แตกต่างกันในการหาเงินรอบ ๆ เมืองลอสแซนโตส");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถทำการโฆษณา สอบถามผู้คนสำหรับความต้องการในหนทางของคุณเอง หรืออาจจะตามหนังสือพิมพ์ก็ได้เช่นกัน");
				    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้คุณยังสามารถสร้างรายได้ในหนทางที่ไม่ซ้ำใคร มันขึ้นอยู่กับคุณและความคิดสร้างสรรค์ของคุณ");

                    GameTextForPlayer(playerid, "~w~Detective job", 4000, 3);

                    InterpolateCameraPos(playerid, 1697.8542,-1308.5330,60.4948, 1744.5216,-1693.8655,52.5560, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1736.1309,-1267.8335,13.5431, 1774.4377,-1658.4363,30.9402, 1500, CAMERA_MOVE);
				}
                case 9: {

				    SendClientMessage(playerid, COLOR_WHITE, " บริการสาธารณะ");
					SendClientMessage(playerid, COLOR_GRAD3, "งานบริการสาธารณะแห่งเมืองลอสแซนโตสก็คงให้บริการเสมอ เมื่อไหร่ที่คุณต้องที่จะใช่บริการพวกเขา");
                    SendClientMessage(playerid, COLOR_GRAD3, "นั้นก{8D8DFF}็คือ Los Santos Police Depart"EMBED_GRAD"men{8D8DFF}t และ San Andreas Sheriff's Department");
					SendClientMessage(playerid, COLOR_GRAD3, "{C68DFF}Department of Corrections"EMBED_GRAD" นั้นทำหน้าในการรับผิดชอบเรือนจำดูแลผู้ต้องขังทั่วทั้งรัฐซานแอนเดรียส");
					SendClientMessage(playerid, COLOR_GRAD3, "{FF8282}Los Santos Fire Department"EMBED_GRAD" มีหน้าในการรับผิดชอบด้านรักษาสุขภาพและช่วยเหลือปฐมพยาบาลผู้เจ็บป่วย ");
                    SendClientMessage(playerid, COLOR_GRAD3, "พวกเขาประสานงานกับโรงพยาบาลและหน่วยกู้ภัยทั้งคู่");
					SendClientMessage(playerid, COLOR_GRAD3, "ถ้าคุณต้องการหน่วยงานใดๆดังกล่าวในตามชื่อนี้อย่ามัวลังเลกรุณาโทรหรือติดต่อไปที่ 911 และเรียกพวกเขาเพื่อให้มาช่วยเหลือคุณ");

                    GameTextForPlayer(playerid, "~w~San Andreas~n~Sheriff Department", 4000, 3);

                    InterpolateCameraPos(playerid, 1744.5216,-1693.8655,52.5560, 667.7610,-608.4394,38.1223, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1774.4377,-1658.4363,30.9402, 618.0063,-574.8521,26.1432, 1500, CAMERA_MOVE);
				}
                case 10: {

				    SendClientMessage(playerid, COLOR_WHITE, " กฎของเซิร์ฟเวอร์:");
					SendClientMessage(playerid, COLOR_GRAD3, "สามารถติดตามแวะชมฟอรั่มของเรา"EMBED_WHITE"ได้ที่ forum.la-rp"EMBED_GRAD".site สำหรับข้อมูลเกี่ยวกับเซิร์ฟเวอร์ การสวมบทบาท และอีกมากมายที่ละเอียดและชัดเจน");

                    InterpolateCameraPos(playerid, 667.7610,-608.4394,38.1223, 1474.6232,-1723.1591,42.9895, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 618.0063,-574.8521,26.1432, 1480.6512,-1771.0350,31.6094, 1500, CAMERA_MOVE);
				}
                case 11: {
				    SendClientMessage(playerid, COLOR_WHITE, " ข้อสรุป:");
				    SendClientMessage(playerid, COLOR_GRAD3, "ต้องจดจำไว้เสมอว่าคุณต้องปฏิบัติตามกฎของเซิร์ฟเวอร์ทุกข้อให้ความเคารพหรือเกียรติแก่ผู้เล่นทุกคนและฟังคำแนะนำจากผู้ดูแลเซิร์ฟเวอร์");
				}
				case 12: { // End Tutorial

				    playerData[playerid][pTutorialStep] = 0;

					playerData[playerid][pPos][0] = 1643.0010;
	                playerData[playerid][pPos][1] = -2331.7056;
	                playerData[playerid][pPos][2] = -2.6797;
	                playerData[playerid][pPos][3] = 359.8919;
	                playerData[playerid][pCreated] = 1;
	                playerData[playerid][pLevel] = 1;
	                playerData[playerid][pSHealth] = 0.0;
	                playerData[playerid][pHealth] = 100;
	                playerData[playerid][pPnumber] = 10000 + random(99999);

					SetSpawnInfo(playerid, 1, playerData[playerid][pModel], playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2], playerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
					TogglePlayerSpectating(playerid, 0);
					TogglePlayerControllable(playerid, 1);

	                SendClientMessage(playerid, COLOR_GRAD3, "คุณได้รับบทเรียนวีดิทัศน์เรียบร้อยแล้ว");
	                SendClientMessage(playerid, COLOR_GRAD3, "{FF6347}ยินดีต้อนรับเข้าสู่ Los Angeles Role Play TH");
				}
            }
	    }
	    else if(RELEASED(KEY_JUMP)) // บทเรียนถอยหลัง
	    {
	        if(playerData[playerid][pTutorialStep] == 1)
	        {
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	            return 1;
	        }

	        playerData[playerid][pTutorialStep]--;
            ClearChatBox(playerid);
            switch(playerData[playerid][pTutorialStep])
            {
                case 1: {
				    SendClientMessage(playerid, COLOR_WHITE, " ยินดีต้อนรับเข้าสู่ Los Angeles Role Play!");
				    SendClientMessage(playerid, COLOR_GRAD3, "บทเรียนวีดิทัศน์นี้จะแนะนำคุณสำหรับก้าวแรกบน LA-RP");
				    SendClientMessage(playerid, COLOR_GRAD3, "ใช้ 'SPACE' และ 'LSHIFT' บนคีย์บอร์ดของคุณเพื่อเรียกดูหน้าต่าง ๆ");
				    SendClientMessage(playerid, COLOR_GRAD3, "เราขอแนะนำให้คุณใช้เวลาอ่านมัน");

                    InterpolateCameraPos(playerid, 1669.1499,-2328.8406,-3.5769, 1541.1512,-2287.1345,91.9661, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1654.4652,-2333.6084,-2.6797, 1623.3582,-2288.0413,77.9914, 1500, CAMERA_MOVE);
	        	}
                case 2: {

				    SendClientMessage(playerid, COLOR_GRAD3, "ตู้หนังสือพิมพ์ตั้งอยู่ติดกับ Airport Motel จุดเกิดในปัจจุบันของคุณ");
				    SendClientMessage(playerid, COLOR_GRAD3, "ไปที่เครื่องหมาย 'i' และพิมพ์ /newspaper เพื่ออ่าน");

				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");


				    SendClientMessage(playerid, COLOR_WHITE, " ครั้งแรกในเมืองลอสแซนโตส");
				    SendClientMessage(playerid, COLOR_GRAD3, "ยินดีต้อนรับเข้าสู่เมืองลอสแซนโตส เมืองที่ใหญ่ที่สุดในรัฐซานแอนเดรียส");
				    SendClientMessage(playerid, COLOR_GRAD3, "ขณะนี้คุณอาศัยอยู่ที่ Airport Motel จนกว่าคุณจะหาสถานที่ที่ดีกว่าด้วยตัวคุณเอง");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณอาจต้องการที่จะเริ่มต้นด้วยการอ่านหนังสือพิมพ์ของวันนี้ ที่คุณสามารถหาข้อมูลบางอย่างที่เป็นประโยชน์");

                    InterpolateCameraPos(playerid, 1807.2902,-1939.7085,67.2748, 1669.1499,-2328.8406,-3.5769, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1773.8251,-1902.2825,13.5502, 1654.4652,-2333.6084,-2.6797, 1500, CAMERA_MOVE);

				}
                case 3: {

				    SendClientMessage(playerid, COLOR_WHITE, " การขนส่ง");
				    SendClientMessage(playerid, COLOR_GRAD3, "เพื่อเคลื่อนตัวไปรอบ ๆ เมือง คุณจะต้องพาตัวเองนั่งรถ");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถรอรถบัสเรียกแท็กซี่หรือเช่ารถ และใช้เงินจำนวนหนึ่ง");
				    SendClientMessage(playerid, COLOR_GRAD3, "โทร 544 เพื่อใช้บริการแท็กซี่หรือรอรถบัสตามบูธ รถยนต์ให้เช่าสามารถพบได้รอบ ๆ เมือง");

                    GameTextForPlayer(playerid, "~p~/call 544 ~w~to call~n~~y~los santos public transportation service", 20000, 3);

                    InterpolateCameraPos(playerid, 2119.4541,-1751.1744,21.5524, 1807.2902,-1939.7085,67.2748, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2155.6519,-1776.4888,18.5486, 1773.8251,-1902.2825,13.5502, 1500, CAMERA_MOVE);
				}
                case 4: {

				    SendClientMessage(playerid, COLOR_WHITE, " อยู่ได้ด้วยตัวเอง");
				    SendClientMessage(playerid, COLOR_GRAD3, "เมื่อคุณรู้สึกว่ามันถึงเวลาที่จะย้ายออกจาก Airport Motel ไปยังสถานที่ของคุณเอง คุณควรเริ่มมองหาบ้านใหม่หรือโมเต็ลที่อื่น");
				    SendClientMessage(playerid, COLOR_GRAD3, "มีบ้านมากมายอยู่อยู่รอบ ๆ เมืองลอสแซนโตส ซึ่งสามารถซื้อหรือเช่าได้ทุกคนโดยการแลกเปลี่ยนเงินบางส่วนเท่านั้น");
				    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้ยังมีไม่กี่โรงแรมและโมเต็ลรอบ ๆ เมืองที่คุณสามารถเช่าห้องพักได้แค่บางช่วง");

                    GameTextForPlayer(playerid, "~y~Idlewood motel~n~~w~(~p~/rent~w~) or (~p~/rentroom~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 2070.5469,-1834.5552,30.9983, 2119.4541,-1751.1744,21.5524, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2108.1138,-1779.3624,13.3898, 2155.6519,-1776.4888,18.5486, 1500, CAMERA_MOVE);
				}
                case 5: {

				    SendClientMessage(playerid, COLOR_WHITE, " รักษาสุขภาพ");
				    SendClientMessage(playerid, COLOR_GRAD3, "พยายามที่จะให้ชีวิตของคุณมีสุขภาพที่ดีและกินให้ตรงเวลา คุณจะเริ่มสูญเสีย HP อย่างต่อเนื่องเมื่อตัวละครของคุณหิว");
				    SendClientMessage(playerid, COLOR_GRAD3, "การใช้ยาเสพติดมันอาจจะลด HP ของคุณ เพิ่มระดับความหิวของคุณ และยังจะทำให้คุณป่วยหรือเสียชีวิต");
				    SendClientMessage(playerid, COLOR_GRAD3, "มีร้านอาหารหลายแห่งทั่วเมืองที่คุณสามารถกินเพื่อเพิ่ม HP ของคุณและลดระดับความหิวของคุณ");

					GameTextForPlayer(playerid, "~y~Idlewood pizza stack~n~~w~(~p~/eat~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 1129.1364,-1359.0806,60.4063, 2070.5469,-1834.5552,30.9983, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1129.1011,-1488.4135,22.7614, 2108.1138,-1779.3624,13.3898, 1500, CAMERA_MOVE);
				}
                case 6: {

				    SendClientMessage(playerid, COLOR_WHITE, " การสื่อสารและการพบปะผู้คนใหม่");
				    SendClientMessage(playerid, COLOR_GRAD3, "สังคมของเมืองลอสแซนโตสค่อนข้างใหญ่ มีผู้คนที่อยู่รอบ ๆ หลากหลายประเภทที่มีงานอดิเรกและความสนใจที่แตกต่างกัน");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถพบกับผู้คนใหม่ ๆ รอบ ๆ สถานที่ที่นิยมมากที่สุดในเมือง มันอาจจะเป็น สโมสร ผับ ร้านอาหาร หรือที่อื่น ๆ");
				    SendClientMessage(playerid, COLOR_GRAD3, "หนึ่งในสถานที่ที่นิยมมากที่สุดซึ่งทำหน้าที่เป็นสถานที่นัดพบหรือการช้อปปิ้งก็คือห้างสรรพสินค้า");
                    SendClientMessage(playerid, COLOR_GRAD3, "ห้างสรรพสินค้าที่เป็นหนึ่งในจุดที่สำคัญในลอสแซนโตสที่คุณสามารถสื่อสารและมีปฏิสัมพันธ์กับผู้คนแบบสุ่ม");
                    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถซื้อไอเท็มที่สามารถบันทึกเก็บไว้ได้มากมาย นั้นมันสามารถปรับปรุงบรรยากาศของบทบาทสมมุติและรูปลักษณ์ตัวละครของคุณ");

                    GameTextForPlayer(playerid, "~w~Los Santos Mall", 4000, 3);

                    InterpolateCameraPos(playerid, 1697.8542,-1308.5330,60.4948, 1129.1364,-1359.0806,60.4063, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1736.1309,-1267.8335,13.5431, 1129.1011,-1488.4135,22.7614, 1500, CAMERA_MOVE);
				}
                case 7: {

				    SendClientMessage(playerid, COLOR_WHITE, " ได้รับและเป็นเจ้าของทรัพย์สิน");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถรับและเป็นเจ้าของทรัพย์สินได้รอบ ๆ เมืองจาก โฆษณาที่เผยแพร่ พูดคุยกับผู้คน หรือเยี่ยมชมร้านค้า");
				    SendClientMessage(playerid, COLOR_GRAD3, "ทรัพย์สินสามารถให้คุณได้ในการแลกเปลี่ยนกับของเงินบางส่วนหรือไม่ต้องจ่ายเลย มันขึ้นอยู่กับการที่คุณสวมบทบาทกับมันยังไง");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถซื้อบ้านใหม่และยานพาหนะจากตัวแทนจำหน่ายหรือผู้เล่นอื่น ๆ ทั่วทั้งเซิร์ฟเวอร์");
                    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้คุณยังสามารถขโมยทรัพย์สินจากผู้เล่นคนอื่น ๆ ในรูปแบบบทบาทสมมุติและเทคนิคของคุณเอง");
                    SendClientMessage(playerid, COLOR_GRAD3, "อย่างไรก็ตาม การขโมยอาจไม่ได้เป็นวิธีที่สะอาดนักและใครบางคนอาจจะตามหาคุณในภายหลัง");

                    GameTextForPlayer(playerid, "~w~Advertisement Office", 4000, 3);

                    InterpolateCameraPos(playerid, 1697.8542,-1308.5330,60.4948, 1697.8542,-1308.5330,60.4948, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1736.1309,-1267.8335,13.5431, 1736.1309,-1267.8335,13.5431, 1500, CAMERA_MOVE);
				}
                case 8: {

				    SendClientMessage(playerid, COLOR_WHITE, " เพิ่มรายได้ของคุณ");
				    SendClientMessage(playerid, COLOR_GRAD3, "ก่อนจะทำการซื้อขายของในแต่ละอย่างนั้น คุณจะต้องมีเงินเสียก่อนโดยมีหลายหนทางที่แตกต่างกันในการหาเงินรอบ ๆ เมืองลอสแซนโตส");
				    SendClientMessage(playerid, COLOR_GRAD3, "คุณสามารถทำการโฆษณา สอบถามผู้คนสำหรับความต้องการในหนทางของคุณเอง หรืออาจจะตามหนังสือพิมพ์ก็ได้เช่นกัน");
				    SendClientMessage(playerid, COLOR_GRAD3, "นอกจากนี้คุณยังสามารถสร้างรายได้ในหนทางที่ไม่ซ้ำใคร มันขึ้นอยู่กับคุณและความคิดสร้างสรรค์ของคุณ");

                    GameTextForPlayer(playerid, "~w~Detective job", 4000, 3);

                    InterpolateCameraPos(playerid, 667.7610,-608.4394,38.1223, 1744.5216,-1693.8655,52.5560, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 618.0063,-574.8521,26.1432, 1774.4377,-1658.4363,30.9402, 1500, CAMERA_MOVE);
				}
                case 9: {

				    SendClientMessage(playerid, COLOR_WHITE, " บริการสาธารณะ");
					SendClientMessage(playerid, COLOR_GRAD3, "งานบริการสาธารณะแห่งเมืองลอสแซนโตสก็คงให้บริการเสมอ เมื่อไหร่ที่คุณต้องที่จะใช่บริการพวกเขา");
                    SendClientMessage(playerid, COLOR_GRAD3, "นั้นก{8D8DFF}็คือ Los Santos Police Depart"EMBED_GRAD"men{8D8DFF}t และ San Andreas Sheriff's Department");
					SendClientMessage(playerid, COLOR_GRAD3, "{C68DFF}Department of Corrections"EMBED_GRAD" นั้นทำหน้าในการรับผิดชอบเรือนจำดูแลผู้ต้องขังทั่วทั้งรัฐแซนแอนด์เดียส");
					SendClientMessage(playerid, COLOR_GRAD3, "{FF8282}Los Santos Fire Department"EMBED_GRAD" มีหน้าในการรับผิดชอบด้านรักษาสุขภาพและช่วยเหลือปฐมพยาบาลผู้เจ็บป่วย ");
                    SendClientMessage(playerid, COLOR_GRAD3, "พวกเขาประสานงานกับโรงพยาบาลและหน่วยกู้ภัยทั้งคู่");
					SendClientMessage(playerid, COLOR_GRAD3, "ถ้าคุณต้องการหน่วยงานใดๆดังกล่าวในตามชื่อนี้อย่ามัวลังเลกรุณาโทรหรือติดต่อไปที่ 911 และเรียกพวกเขาเพื่อให้มาช่วยเหลือคุณ");

                    GameTextForPlayer(playerid, "~w~San Andreas~n~Sheriff Department", 4000, 3);

                    InterpolateCameraPos(playerid, 1474.6232,-1723.1591,42.9895, 667.7610,-608.4394,38.1223, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1480.6512,-1771.0350,31.6094, 618.0063,-574.8521,26.1432, 1500, CAMERA_MOVE);
				}
                case 10: {

				    SendClientMessage(playerid, COLOR_WHITE, " กฎของเซิร์ฟเวอร์:");
					SendClientMessage(playerid, COLOR_GRAD3, "สามารถติดตามแวะชมฟอรั่มของเรา"EMBED_WHITE"ได้ที่ forum.la-rp"EMBED_GRAD".site สำหรับข้อมูลเกี่ยวกับเซิร์ฟเวอร์ การสวมบทบาท และอีกมากมายที่ละเอียดและชัดเจน");

                    InterpolateCameraPos(playerid, 1474.6232,-1723.1591,42.9895, 1474.6232,-1723.1591,42.9895, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1480.6512,-1771.0350,31.6094, 1480.6512,-1771.0350,31.6094, 1500, CAMERA_MOVE);
				}
	        }
	    }
    }
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnPlayerUpdate(playerid)
{
	//printf("nearHouse_var[playerid] %d", nearHouse_var[playerid]);
    AFKTimer[playerid] = 3;

	if(GetPlayerSkin(playerid) == 0) SetPlayerSkin(playerid, 2);

	if(IsPlayerInAnyVehicle(playerid)) {
		foreach(new v : sv_spikes) {
			if(spikeVariables[v][sPos][0] != 0 && spikeVariables[v][sPos][1] != 0 && spikeVariables[v][sPos][2] != 0) {
				new temp_vehicleid = GetPlayerVehicleID(playerid);
				if((spikeVariables[v][sType] == 0 && IsVehicleInRangeOfPoint(temp_vehicleid, 2.0, spikeVariables[v][sPos][0], spikeVariables[v][sPos][1], spikeVariables[v][sPos][2])) || (spikeVariables[v][sType] == 1 && IsVehicleInRangeOfPoint(temp_vehicleid, 4.0, spikeVariables[v][sPos][0], spikeVariables[v][sPos][1], spikeVariables[v][sPos][2]))) {
					SetVehicleDamageStatus(temp_vehicleid,CoreVehicles[temp_vehicleid][vehDamage][0],CoreVehicles[temp_vehicleid][vehDamage][1],CoreVehicles[temp_vehicleid][vehDamage][2],15);
				}
			}
		}
	}
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(!IsPlayerNPC(playerid))
	{
		RefreshMaskStatus(playerid,forplayerid);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
   /* new string[32];
    format(string, sizeof(string), "You can now see vehicle %d.", vehicleid);
    SendClientMessage(forplayerid, 0xFFFFFFFF, string);*/
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(playerData[playerid][pAdmin] >= 1 || playerData[playerid][pTester] >= 1) {

		if(!IsPlayerConnected(clickedplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "The specified player is not connected, or has not authenticated.");

		if(playerData[playerid][pSpectating] == INVALID_PLAYER_ID) {
			GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
			playerData[playerid][pInterior] = GetPlayerInterior(playerid);
			playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
		playerData[playerid][pSpectating] = clickedplayerid;
		TogglePlayerSpectating(playerid, true);
		
		SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));

		if(IsPlayerInAnyVehicle(clickedplayerid)) {
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
		}
		else {
			PlayerSpectatePlayer(playerid, clickedplayerid);
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(PRestaurantOpening { playerid }) {
		if(clickedid == TD_Restaurant[2])
		{
			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);

	        PRestaurantOpening{ playerid }=false;
		}
	}
	if(PCoverOpening{ playerid })
	{
	    if(clickedid == TD_PhoneCover[1]) // สีดำ
	    {
			PCoverColor[playerid]=0;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[2]) // สีแดง
	    {
			PCoverColor[playerid]=1;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18870);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[3]) // สีเหลือง
	    {
			PCoverColor[playerid]=2;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18873);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[4]) // สีน้ำเงิน
	    {
			PCoverColor[playerid]=3;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18872);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[5]) // สีน้ำเขียว
	    {
			PCoverColor[playerid]=4;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18871);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[6]) // สีส้ม
	    {
			PCoverColor[playerid]=5;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18865);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[7]) // สีชมพู
	    {
			PCoverColor[playerid]=6;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18869);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[9]) // สีเทา
	    {
			PCoverColor[playerid]=7;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18874);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[8]) // ซื้อ
	    {
			if (PCoverColor[playerid] == 7 && playerData[playerid][pDonateRank] < 2) {
				SendClientMessage(playerid, COLOR_GRAD1, "   สำหรับผู้บริจาคระดับ Silver, Gold เท่านั้น !");
				return 1;
			}
			if(playerData[playerid][pCash] >= 500)
			{
			    playerData[playerid][pPmodel] = PCoverColor[playerid];
				playerData[playerid][pCash]-=500;
				SendClientMessage(playerid, COLOR_WHITE, "คุณได้ซื้อเคสโทรศัพท์ใหม่");
				
				if(playerUsingPhone{ playerid }) 
					PHONE_Show(playerid);

			    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
					TextDrawHideForPlayer(playerid, TD_PhoneCover[i]);

	            PlayerTextDrawHide(playerid, TD_PhoneCoverModel[playerid]);

				PCoverOpening{ playerid } = false;
				CancelSelectTextDraw(playerid);

			}
			else SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ ($500) !");
	    }
		return 1;
	}

// ================== [ Car GUI System ] =========================
  	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
	 	if(atm_opening{ playerid })
		{
		    CancelSelectTextDraw(playerid);
		    for(new i=0;i!=38;i++) PlayerTextDrawHide(playerid, TDEditor_ATM[playerid][i]);
		    atm_opening{ playerid } = false;
		    atm_auth{ playerid }= false;
            strpack(atm_tnumber[playerid], "", 12 char);
		    TogglePlayerControllable(playerid, true);
		}
		
		if(PCoverOpening{ playerid })
		{
		    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
				TextDrawHideForPlayer(playerid, TD_PhoneCover[i]);

            PlayerTextDrawHide(playerid, TD_PhoneCoverModel[playerid]);

			PCoverOpening{ playerid } = false;
		}
		if(PCarOpening{ playerid })
		{
			ClosePlayerCarMenu(playerid);
		}

		if (ColorSelectShow{playerid} || ColorSelectShow2{playerid})
		{
			ClearColorSelect(playerid);
		}

		if(PRestaurantOpening{ playerid }) {
			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);

            PRestaurantOpening{ playerid }=false;

        }
	}
// ================== [ Car GUI System ] =========================


	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(!SQL_IsLogged(playerid)) {
		for (new i; i != MAX_CHARSELECT; i++)
		{
			if (playertextid == charselectPlayerTextDraw[playerid][charselectPlayerTextDrawID[playerid][i]])
			{
				if (!bf_get(player_bf[playerid], IS_LOGGED))
				{
					new str[24], charid=-1;
					format(str, sizeof(str), "characterID%d", i);
					charid = GetPVarInt(playerid, str);

					if(charid!=-1) {
						new query[128];
						format(query, sizeof(query), "SELECT `Activated`,`LastLogin`,`Secret`,`LastIP`,`Character` FROM `characters` WHERE `ID` = %d", charid);
						mysql_tquery(dbCon, query, "checkCharacter", "dd", playerid, charid);
						
						TextDrawHideForPlayer(playerid, LSRP_LOGO);
						CancelSelectTextDraw(playerid);
						
						for (new x; x < charselectPlayerTextDrawCount[playerid]; x++)
						{
							PlayerTextDrawDestroy(playerid, charselectPlayerTextDraw[playerid][x]);
							format(str, sizeof(str), "characterID%d", x);
							DeletePVar(playerid, str);
						}
						charselectPlayerTextDrawCount[playerid]=0;
						printf("Login");
					}
					break;
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวละครนี้มีการเข้าสู่ระบบอยู่ในขณะนี้!");
					Kick(playerid);
					return 1;
				}
			}
		}
	}
	// New Poker 2
	if(playerData[playerid][pTableID])
	{
		new tableid = playerData[playerid][pTableID]-1;

		if(playertextid == PlayerPokerUI[playerid][38]) switch(playerData[playerid][pActionOptions])
	 	{
			case 1: // Raise
			{
				PokerTable[tableid][co_table_rot] = 0;
				Poker_Raise(playerid);
			}
			case 2: Poker_Call(playerid); //Call
			case 3: // Check
			{
				Poker_Check(playerid);
				Poker_RotateGuests(tableid);
			}
			default: return 1;
		}
		else if(playertextid == PlayerPokerUI[playerid][39]) switch(playerData[playerid][pActionOptions])
		{
			case 1: // Check
			{
				Poker_Check(playerid);
				Poker_RotateGuests(tableid);
			}
			case 2: // Raise
			{
				PokerTable[tableid][co_table_rot] = 0;
				Poker_Raise(playerid);
			}
			case 3: // Fold
			{
				Poker_Fold(playerid);
				Poker_RotateGuests(tableid);
			}
			default: return 1;
		}
		else if(playertextid == PlayerPokerUI[playerid][40]) switch(playerData[playerid][pActionOptions])
		{
			case 1: // Fold
			{
				Poker_Fold(playerid);
				Poker_RotateGuests(tableid);
			}
			case 2: // Fold
			{
				Poker_Fold(playerid);
				Poker_RotateGuests(tableid);
			}
			default: return 1;
		}
		else if(playertextid == PlayerPokerUI[playerid][41] && playerData[playerid][pTableID]) Poker_LeaveTable(playerid);
	}
	//=================================== Restaurant
	if(playertextid == PTD_Restaurant[playerid][0])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}

            if(playerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bPriceProducts][0]) {
				GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
				return 1;
            }
			
			new Float:currentHealth;
			GetPlayerHealth(playerid, currentHealth);
			
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(currentHealth < 100.0)
				    {
					    if(currentHealth + 30.0 <= 100.0)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 30.0));
					    }
					    else SetPlayerHealthEx(playerid, 100.0);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Buster"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));

					MealHolding[playerid] = 2218;
				}
				case 2: // Donut
				{
				    if(currentHealth < 100.0)
				    {
					    if(currentHealth + 30.0 <= 100.0)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 30.0));
					    }
					    else SetPlayerHealthEx(playerid, 100.0);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Rusty's D-Luxe"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
                    MealHolding[playerid]=2221;
				}
				case 3: // Burger
				{
				    if(currentHealth < 100.0)
				    {
					    if(currentHealth + 30.0 <= 100.0)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 30.0));
					    }
					    else SetPlayerHealthEx(playerid, 100.0);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Moo Kids Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
                    MealHolding[playerid]=2213;
				}
				case 4: // Cluckin
				{
				    if(currentHealth < 100.0)
				    {
					    if(currentHealth + 30.0 <= 100.0)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 30.0));
					    }
					    else SetPlayerHealthEx(playerid, 100.0);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Cluckin' Little Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
                    MealHolding[playerid]=2215;
				}
			}

            BizInfo[BizEntered[playerid]][bProducts]--;
			playerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bPriceProducts][0];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bPriceProducts][0] * 0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถ {FF6347}/meal place"EMBED_WHITE" มันบนโต๊ะหรือ {FF6347}/meal throw"EMBED_WHITE" มันทิ้ง");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][1])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
            if(playerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bPriceProducts][1]) {
				GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
				return 1;
            }
			
			new Float:currentHealth;
			GetPlayerHealth(playerid, currentHealth);
			
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(currentHealth < 100)
				    {
					    if(currentHealth + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Double D-Luxe"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
                    MealHolding[playerid]=2219;
				}
				case 2: // Donut
				{
				    if(currentHealth < 100)
				    {
					    if(currentHealth + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Rusty's Double Barrel"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
                    MealHolding[playerid]=2223;
				}
 				case 3: // Burger
				{
				    if(currentHealth < 100)
				    {
					    if(currentHealth + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Beef Tower"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
                    MealHolding[playerid]=2214;
				}
 				case 4: // Cluckin
				{
				    if(currentHealth < 100)
				    {
					    if(currentHealth + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(currentHealth + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Cluckin' Big Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
                    MealHolding[playerid]=2216;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			playerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bPriceProducts][1];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bPriceProducts][1]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][1], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถ {FF6347}/meal place"EMBED_WHITE" มันบนโต๊ะหรือ {FF6347}/meal throw"EMBED_WHITE" มันทิ้ง");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][2])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
            if(playerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bPriceProducts][2]) {
				GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
				return 1;
            }
			
			new Float:currentHealth;
			GetPlayerHealth(playerid, currentHealth);
			
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Full Rack"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
                    MealHolding[playerid]=2220;
				}
				case 2: // Donut
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Rusty's Huge Double"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
                    MealHolding[playerid]=2222;
				}
 				case 3: // Burger
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				   // playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Meat Stack"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
                    MealHolding[playerid]=2212;
				}
 				case 4: // Cluckin
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Cluckin' Huge Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
                    MealHolding[playerid]=2217;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			playerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bPriceProducts][2];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bPriceProducts][2]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][2], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถ {FF6347}/meal place"EMBED_WHITE" มันบนโต๊ะหรือ {FF6347}/meal throw"EMBED_WHITE" มันทิ้ง");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][3])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
            if(playerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bPriceProducts][3]) {
				GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
				return 1;
            }
			
			new Float:currentHealth;
			GetPlayerHealth(playerid, currentHealth);
			
			
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Salad Meal"EMBED_WHITE" ในราคา %s{FF6347}", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
					MealHolding[playerid]=2355;
				}
				case 3: // Burger
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Salad Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
                    MealHolding[playerid]=2354;
				}
				case 4: // Cluckin
				{
				    if(currentHealth < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    playerData[playerid][pHunger]=0;
				    //playerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bPriceProducts][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s สั่งอาหาร", ReturnRealName(playerid));
				    SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สั่ง {FF6347}Salad Meal"EMBED_WHITE" ในราคา {FF6347}%s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
                    MealHolding[playerid]=2353;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			playerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bPriceProducts][3];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bPriceProducts][3]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][3], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถ {FF6347}/meal place"EMBED_WHITE" มันบนโต๊ะหรือ {FF6347}/meal throw"EMBED_WHITE" มันทิ้ง");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
// ================== [ Car GUI System ] =========================
	if(PCarOpening{ playerid })
	{
	    if(PCarType[playerid] == 0) {

			if(playertextid == PCARTextLeft[playerid])
			{
			    if(PCarPage[playerid] == 2)
			    {
			        PCarPage[playerid]--;
					ShowPlayerCarMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextRight[playerid])
			{
			    if(PCarPage[playerid] == 1)
			    {
			        PCarPage[playerid]++;
					ShowPlayerCarMenu(playerid);
			    }
			}
			else {
				for(new i = 0; i != 6; ++i)
				{
					if(playertextid == PCARTextSlot[playerid][i])
					{
						if(playerData[playerid][pPCarkey] == 9999)
						{
							SpawnPlayerCar(playerid, i);
							return 1;
						}
						else {
							SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณมียานพาหนะส่วนตัวที่ปรากฏอยู่จำนวนสูงสุดแล้ว");
							return 1;
						}
					}
				}
			}
		}
	    else if(PCarType[playerid] == 1) {

			if(playertextid == PCARTextLeft[playerid])
			{
			    if(PCarPage[playerid] > 1)
			    {
			        PCarPage[playerid]--;
					ShowPlayerDealershipMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextRight[playerid])
			{

			    new caramount;

			    if(VDealerSelectCatalog[playerid]==-1) caramount = sizeof(VehicleMenuInfo);
			    else for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == VDealerSelectCatalog[playerid]) caramount++;

			    if(floatround(caramount/(PCarPage[playerid] * 6), floatround_ceil) && caramount % 6 != 0)
			    {
			        PCarPage[playerid]++;
					ShowPlayerDealershipMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextHeader[playerid])
			{
			    if(VDealerSelectCatalog[playerid] != -1)
			    {
				    VDealerSelectCatalog[playerid] = -1;
				    PCarPage[playerid] = 1;

				    ShowPlayerDealershipMenu(playerid);
			    }
			    else ClosePlayerCarMenu(playerid);
			}
			else {

				for(new i = 0; i != 6; ++i)
				{
					if(playertextid == PCARTextSlot[playerid][i])
					{
					    if(VDealerSelectCatalog[playerid] == -1)
					    {
							VDealerSelectCatalog[playerid] = (PCarPage[playerid] * 6) - (6 - i);
							PCarPage[playerid] = 1;
		                    ShowPlayerDealershipMenu(playerid);
	                    }
	                    else
	                    {
							PutPlayerSettingVehicle(playerid, VDealerData[playerid][i][0], VDealerData[playerid][i][4]);
                            ClosePlayerCarMenu(playerid);
	                    }
						break;
					}
				}
			}
			return 1;
		}
	}
// ================== [ Car GUI System ] =========================

// ================== [ NEW ATM ]
	if(atm_opening{ playerid })
    {
 		if(playertextid == PlayerText:INVALID_TEXT_DRAW || (playertextid == TDEditor_ATM[playerid][16] && atm_page[playerid] == 0))
		{
		    CancelSelectTextDraw(playerid);

		    for(new i=0;i!=38;i++) PlayerTextDrawHide(playerid, TDEditor_ATM[playerid][i]);
		    atm_opening{ playerid } = false;
		    atm_auth{ playerid }= false;
            strpack(atm_tnumber[playerid], "", 12 char);
		    TogglePlayerControllable(playerid, true);
		    return 1;
		}
		
      	if(playertextid == TDEditor_ATM[playerid][17]) { // Clear
			strpack(atm_tnumber[playerid], "", 12 char);
			RenderPlayerATM(playerid, atm_page[playerid]);
			return 1;
       	}
       	
        if(atm_page[playerid] == 0) {

            if(playertextid == TDEditor_ATM[playerid][18]) { // Enter
            
			 	new temp_number[12];
				strunpack(temp_number, atm_tnumber[playerid]);
			    	    
		        if(strlen(playerData[playerid][pBankPin]) > 0 && strlen(temp_number) > 0 && !strcmp(playerData[playerid][pBankPin], temp_number, true)) {
                    atm_auth{ playerid }= true;
                }

                atm_page[playerid] = 1;
                strpack(atm_tnumber[playerid], "", 12 char);
                RenderPlayerATM(playerid, atm_page[playerid]);
            }
            else {
				for(new i=0;i!=10;i++) {
			    	if(playertextid == TDEditor_ATM[playerid][22 + i]) // 0
			    	{
			    	    new temp_number[12];
			    	    strunpack(temp_number, atm_tnumber[playerid]);

			    	    if(strlen(temp_number) < 10) {

				    	    format(temp_number, 12, "%s%d", temp_number, i);
							strpack(atm_tnumber[playerid], temp_number, 12 char);
							RenderPlayerATM(playerid, atm_page[playerid]);
						}
						return 1;
			    	}
				}
			}
		}
		else if(atm_page[playerid] == 1) { // Main
		    if(playertextid == TDEditor_ATM[playerid][16]) {
		        atm_auth{ playerid }= false;
		        strpack(atm_tnumber[playerid], "", 12 char);
          		RenderPlayerATM(playerid, 0);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][8]) { // Deposit
                RenderPlayerATM(playerid, 2);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][9]) { // Withdraw
                RenderPlayerATM(playerid, 3);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][10]) { // Transfer
                RenderPlayerATM(playerid, 4);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][11]) { // Savings
                RenderPlayerATM(playerid, 5);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][12]) { // Balance
                RenderPlayerATM(playerid, 6);
		    }
		    else if(playertextid == TDEditor_ATM[playerid][13]) {

		    }
		}
		else if(atm_page[playerid] == 44) { // Transfer > Bank Number > .... Amount to transfer
		    if(playertextid == TDEditor_ATM[playerid][16]) {
                strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 1);
		        return 1;
		    }

			if(playertextid == TDEditor_ATM[playerid][18]) { // Enter
                RenderPlayerATM(playerid, 444);
            }
            else {
				for(new i=0;i!=10;i++) {
			    	if(playertextid == TDEditor_ATM[playerid][22 + i]) // 0
			    	{
			    	    new temp_number[12];
			    	    strunpack(temp_number, atm_tnumber[playerid]);

			    	    if(strlen(temp_number) < 10) {
				    	    format(temp_number, 12, "%s%d", temp_number, i);
				    	    format(temp_number, 12, "%d", strval(temp_number));
							strpack(atm_tnumber[playerid], temp_number, 12 char);
							RenderPlayerATM(playerid, atm_page[playerid]);
						}
						return 1;
			    	}
				}
			}
		}
		else if(atm_page[playerid] == 4) { // Transfer > .... Bank Number
		    if(playertextid == TDEditor_ATM[playerid][16]) {
                strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 1);
		        return 1;
		    }

			if(playertextid == TDEditor_ATM[playerid][18]) { // Enter
				new temp_number[12];
				strunpack(temp_number, atm_tnumber[playerid]);
			    SetPVarInt(playerid, "BankNumber", strval(temp_number));
			    
			    strpack(atm_tnumber[playerid], "", 12 char);
                RenderPlayerATM(playerid, 44);
            }
            else {
				for(new i=0;i!=10;i++) {
			    	if(playertextid == TDEditor_ATM[playerid][22 + i]) // 0
			    	{
			    	    new temp_number[12];
			    	    strunpack(temp_number, atm_tnumber[playerid]);

			    	    if(strlen(temp_number) < 10) {
				    	    format(temp_number, 12, "%s%d", temp_number, i);
				    	    format(temp_number, 12, "%d", strval(temp_number));
							strpack(atm_tnumber[playerid], temp_number, 12 char);
							RenderPlayerATM(playerid, atm_page[playerid]);
						}
						return 1;
			    	}
				}
			}
		}
		else if(atm_page[playerid] == 3) { // Withdraw
		    if(playertextid == TDEditor_ATM[playerid][16]) {
                strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 1);
		        return 1;
		    }

			if(playertextid == TDEditor_ATM[playerid][18]) { // Enter
                RenderPlayerATM(playerid, 33);
            }
            else {
				for(new i=0;i!=10;i++) {
			    	if(playertextid == TDEditor_ATM[playerid][22 + i]) // 0
			    	{
			    	    new temp_number[12];
			    	    strunpack(temp_number, atm_tnumber[playerid]);

			    	    if(strlen(temp_number) < 10) {
				    	    format(temp_number, 12, "%s%d", temp_number, i);
				    	    format(temp_number, 12, "%d", strval(temp_number));
							strpack(atm_tnumber[playerid], temp_number, 12 char);
							RenderPlayerATM(playerid, atm_page[playerid]);
						}
						return 1;
			    	}
				}
			}
		}
		else if(atm_page[playerid] == 2) { // Deposit
		    if(playertextid == TDEditor_ATM[playerid][16]) {
                strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 1);
		        return 1;
		    }

			if(playertextid == TDEditor_ATM[playerid][18]) { // Enter
                RenderPlayerATM(playerid, 22);
            }
            else {
				for(new i=0;i!=10;i++) {
			    	if(playertextid == TDEditor_ATM[playerid][22 + i]) // 0
			    	{
			    	    new temp_number[12];
			    	    strunpack(temp_number, atm_tnumber[playerid]);

			    	    if(strlen(temp_number) < 10) {
				    	    format(temp_number, 12, "%s%d", temp_number, i);
				    	    format(temp_number, 12, "%d", strval(temp_number));
							strpack(atm_tnumber[playerid], temp_number, 12 char);
							RenderPlayerATM(playerid, atm_page[playerid]);
						}
						return 1;
			    	}
				}
			}
		}
		else if(atm_page[playerid] == 22) {
		    if(playertextid == TDEditor_ATM[playerid][16]) {
		        strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 2);
		    }
		}
		else if(atm_page[playerid] == 33) {
		    if(playertextid == TDEditor_ATM[playerid][16]) {
		        strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 3);
		    }
		}
		else if(atm_page[playerid] == 44 || atm_page[playerid] == 444) {
		    if(playertextid == TDEditor_ATM[playerid][16]) {
		        strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 4);
		    }
		}
		else if(atm_page[playerid] == 5 || atm_page[playerid] == 6) { // Balance
		    if(playertextid == TDEditor_ATM[playerid][16]) {
		        strpack(atm_tnumber[playerid], "", 12 char);
		        RenderPlayerATM(playerid, 1);
		    }
		}
    }

	// Interface
	if(ColorSelectShow{playerid})
	{
		if(playertextid == PlayerText:INVALID_TEXT_DRAW)
		{
			ClearColorSelect(playerid);
		}
		else if(playertextid == ColorSelectText[playerid])
		{
			ColorSelect[playerid] = -1;
			ShowPlayerColorSelection(playerid, 1);
			return 1;
		}

		else if(playertextid == ColorSelectLeft[playerid])
		{
			if (ColorSelectPage[playerid] < 2)
				return 0;

			else
				ShowPlayerColorSelection(playerid, ColorSelectPage[playerid] - 1);
		}

		else if(playertextid == ColorSelectRight[playerid])
		{
			if (ColorSelectPage[playerid] == ColorSelectPages[playerid])
				return 0;

			else
				ShowPlayerColorSelection(playerid, ColorSelectPage[playerid] + 1);
		}

		for(new i = 0; i < 8; i++)
		{
			if(playertextid == ColorSelection[playerid][i])
			{
				if(ColorSelect[playerid] == -1)
				{
					ColorSelect[playerid] = ColorSelectListener[playerid][i];
					ShowPlayerColorSelection(playerid, 1);

				}
				else
				{
					VDealerColor[playerid][0] = ColorSelectListener[playerid][i];
					SetVehicleColor(VDealerVehicle[playerid], VDealerColor[playerid][0], VDealerColor[playerid][1]);
				}
				break;
			}
		}
	}
	if(ColorSelectShow2{playerid})
	{
		if(playertextid == PlayerText:INVALID_TEXT_DRAW)
		{
			ClearColorSelect(playerid);
		}
		else if(playertextid == ColorSelectText2[playerid])
		{
			ColorSelect2[playerid] = -1;
			ShowPlayerColorSelection2(playerid, 1);
			return 1;
		}

		else if(playertextid == ColorSelectLeft2[playerid])
		{
			if (ColorSelectPage2[playerid] < 2)
				return 0;

			else
				ShowPlayerColorSelection2(playerid, ColorSelectPage2[playerid] - 1);
		}

		else if(playertextid == ColorSelectRight2[playerid])
		{
			if (ColorSelectPage2[playerid] == ColorSelectPages2[playerid])
				return 0;

			else
				ShowPlayerColorSelection2(playerid, ColorSelectPage2[playerid] + 1);
		}

		for(new i = 0; i < 8; i++)
		{
			if(playertextid == ColorSelection2[playerid][i])
			{
				if(ColorSelect2[playerid] == -1)
				{
					ColorSelect2[playerid] = ColorSelectListener2[playerid][i];
					ShowPlayerColorSelection2(playerid, 1);

				}
				else
				{
					VDealerColor[playerid][1] = ColorSelectListener2[playerid][i];
					SetVehicleColor(VDealerVehicle[playerid], VDealerColor[playerid][0], VDealerColor[playerid][1]);
				}
				break;
			}
		}
	}
    return 1;
}


//public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(playerid != INVALID_PLAYER_ID && damagedid != INVALID_PLAYER_ID)
	{
		if(DamageSync[playerid] == STATE_PENDING_HIT)
		{
			if (IssueTimer[damagedid] != Timer:0) {
				stop IssueTimer[damagedid];
			}
		  	IssueTimer[damagedid] = defer IssueHit[ISSUE_HIT_DELAY](playerid, damagedid, amount, weaponid, bodypart);
		}
		else
		{
		  	IssueTimer[damagedid] = defer IssueHit[ISSUE_HIT_DELAY](playerid, damagedid, amount, weaponid, bodypart);
		   	DamageSync[damagedid] = STATE_PENDING_HIT;
		}
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(DamageSync[playerid] == STATE_PENDING_HIT) {
		DamageSync[playerid] = STATE_WAIT_HIT;
		stop IssueTimer[playerid];
		IssueTimer[playerid] = Timer:0;
	}
	//SendClientMessageEx(issuerid, -1, "Shoot %d damages: %f", playerid, amount);
	// Ignore unreliable and invalid damage
	if (weaponid < 0 || weaponid >= sizeof(s_ValidDamageTaken) || !s_ValidDamageTaken[weaponid]) {
		return 0;
	}

	if (playerid == INVALID_PLAYER_ID || IsPlayerNPC(playerid)) {
		return 0;
	}

	// Carjack damage
	if (weaponid == 54 && _:amount == _:0.0) {
		return 0;
	}

	// From stealth knife, can be any weaponid
	if (_:amount == _:1833.33154296875) {
		return 0;
	}

	// Climb bug
	if (weaponid == WEAPON_COLLISION) {
		new anim = GetPlayerAnimationIndex(playerid);
		if (1061 <= anim <= 1067) {
			return 0;
		}
	}
	/*
	// only allow damage that's valid for both modes for lagcomp
	if (s_ValidDamageTaken[weaponid] != 2) {
		if (issuerid != INVALID_PLAYER_ID && IsPlayerInAnyVehicle(issuerid) && GetPlayerVehicleSeat(issuerid) == 0 && (weaponid == WEAPON_M4 || weaponid == WEAPON_MINIGUN)) {
			weaponid = weaponid == WEAPON_M4 ? WEAPON_VEHICLE_M4 : WEAPON_VEHICLE_MINIGUN;
		} else {
			return 0;
		}
	}*/
	
	if(issuerid != INVALID_PLAYER_ID)
	{
		if(GetPVarType(issuerid, "TacklingMode") && weaponid == 0) {
			SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s วิ่งไปที่ %s และพยายามที่จะเข้าปะทะให้ลงไปนอนกับพื้น", ReturnRealName(issuerid), ReturnRealName(playerid));
			ApplyAnimation(issuerid, "PED", "EV_dive",4.1,0,1,1,1,0);
			ApplyAnimation(playerid, "PED", "FLOOR_hit_f",4.1,0,1,1,1,0);
			playerData[playerid][pAnimation] = 1;
			playerData[issuerid][pAnimation] = 1;
			return 0;
		}
		if((TazerActive{issuerid} == true && weaponid == 23) || (BeanbagActive{issuerid} == true && weaponid == 25)) {

			if(weaponid == 23)
			{
				if(!bf_get(player_bf[playerid], IS_PLAYER_TAZER))
				{
					ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 1, 1, 0, 1);
					SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "** %s ถูกยิงโดยปืนไฟฟ้าและล้มลงกับพื้น", ReturnRealName(playerid));
					TogglePlayerControllable(playerid, false);
					bf_on(player_bf[playerid], IS_PLAYER_TAZER);
					TazerCount[playerid]=10;
					SetTimerEx("SetUnTazed", 10000, 0, "i", playerid);
					SetPlayerDrunkLevel(playerid, 4000);
				}
				else
				{
					SendClientMessage(issuerid, COLOR_GREY, "ผู้เล่นนี้ได้ถูกไฟฟ้าดูดแล้ว");
				}
			}

		    if(weaponid == 25)
			{
				if(!bf_get(player_bf[playerid], IS_PLAYER_TAZER))
				{
					ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 1, 1, 0, 1);
					SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "** %s ถูกยิงโดยเรมิงตันและล้มลงกับพื้น", ReturnRealName(playerid));
		      		SendClientMessageEx(issuerid, COLOR_YELLOW, "SERVER: คุณยิง %s ด้วยกระสุนยาง", ReturnRealName(playerid));
					TogglePlayerControllable(playerid, false);
					bf_on(player_bf[playerid], IS_PLAYER_TAZER);
					TazerCount[playerid]=10;
					SetTimerEx("SetUnTazed", 10000, 0, "i", playerid);
					SetPlayerDrunkLevel(playerid, 4000);
				}
				else
				{
					SendClientMessage(issuerid, COLOR_GREY, "ผู้เล่นนี้ได้ถูกไฟฟ้าดูดแล้ว");
				}
			}
			return 0;
		}
		new Float:health, Float:armour;

		GetPlayerHealth(playerid, health);
	  	GetPlayerArmour(playerid, armour);

		if(LegDelay[playerid]==0 && !isDeathmode{playerid} && !isInjuredmode{playerid} && !isKNOmode{playerid})
		{
			switch(bodypart)
			{
				case 7,8:
				{
			  	 	SendClientMessage(playerid, COLOR_LIGHTRED, "-> คุุณได้ถูกยิงที่ขา คุณจะลำบากในการวิ่งและกระโดด");
			  	 	ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.1, 0, 1, 1, 0, 0, 1);
			  	  	LegDelay[playerid] = 10;
			  	}
			}
		}

		if(isInjuredmode{playerid})
		{
			if(!isDeathmode{playerid} && deathtime[playerid] <= 297)
			{
	            SetPlayerChatBubble(playerid, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);

	            SendClientMessage(playerid, COLOR_YELLOW, "-> คุณตายแล้วในขณะนี้ คุณจำเป็นต้องรอ 60 วินาทีและหลังจากนั้นคุณถึงจะสามารถ /respawnme");

				isDeathmode{playerid} = true;
				deathtime[playerid] = 60;

                if (IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}
			return 0;
		}
		else
		{
			if(isDeathmode{playerid})
				return 0;

			if(isKNOmode{playerid})
				return 0;
				
			switch(weaponid)
			{
				case 4: amount = 30.0;
				case 8: amount = 35.0;
				case 5, 7: amount = 10.0;
				case 2, 3, 6, 1: amount = 15.0;
				case 22: {
					amount = 20.0;
				}
				case 23: {
					amount = 25.0;
				}
				case 28: {
					amount = 15.0;
				}
				case 30: {
					amount = 40.0;
				}
				case 31: {
					amount = 35.0;
				}
				case 24:
				{
					amount = 45.0;
				}
				// The spas shotguns shoot 8 bullets, each inflicting 4.95 damage
				case 27: 
				{
					new Float:bullets = amount / 4.950000286102294921875;
					if (8.0 - bullets < -0.05) {
						return 0;
					}
					amount = bullets * 9.95;
				}

				// Shotguns and sawed-off shotguns shoot 15 bullets, each inflicting 3.3 damage
				case 25, 26: 
				{
					new Float: bullets = amount / 3.30000019073486328125;
					if (15.0 - bullets < -0.05) {
						return 0;
					}
					amount = bullets * 8.3;
				}
				case 33: {
					amount = 70.0;
				}
				case 29: {
					amount = 28.0;
				}
				case 32: {
					amount = 15.0;
				}
				case 34: {
					amount = 100.0;
				}
			}
				
			switch(bodypart)
			{
				case 5,6,7,8: amount *= 0.8;
				case 9: amount *= 1.5;
			}
			
			new Float:curhealth = health-amount;
	
			if(curhealth <= 30)
			{
				if(GetPlayerWeapon(playerid) != 0) {
	
					SetPlayerWeaponSkill(playerid, NORMAL_SKILL);
	
					SendClientMessage(playerid, COLOR_LIGHTRED, "-> วิกฤตเลือดเหลือน้อย ทักษะการยิงอยู่ในระดับต่ำ");
				}
			}
			else if(curhealth <= 40)
			{
				if(GetPlayerWeapon(playerid) != 0) {
	
					//for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 500);
					SetPlayerWeaponSkill(playerid, MEDIUM_SKILL);
	
					SendClientMessage(playerid, COLOR_LIGHTRED, "-> วิกฤตเลือดเหลือน้อย ทักษะการยิงอยู่ในระดับปานกลาง");
				}
			}

			new bool:nohp;
			
			/*if(armour > 0 && ((bodypart == 3) || (	 == 285 && bodypart == 9))) {
			
			}
			else {
			
			}*/
			
			if(armour > 0 && (bodypart == 3 || (GetPlayerSkin(playerid) == 285 && bodypart == 9)))
			{
				new Float:totalarmour;
				totalarmour = armour - amount;

				if(totalarmour > 0) SetPlayerArmour(playerid, totalarmour);
				else {
					SetPlayerArmour(playerid, 0);
					
					if(health+totalarmour > 0) {
						SetPlayerHealth(playerid,health+totalarmour);
					}
					else nohp = true;
				}
			}
			else {
				if(health-amount > 0)
				{
					SetPlayerHealth(playerid,health-amount);
				}
				else nohp = true;
			}
/*			if(armour < 1 && bodypart != 3 || (armour < 1 && GetPlayerSkin(playerid) != 285 && bodypart != 9)) {
				if(health-amount > 0)
				{
					SetPlayerHealth(playerid,health-amount);
				}
				else nohp = true;
			}
			else if(armour > 0)
			{
				new Float:totalarmour;
				totalarmour = armour - amount;

				if(totalarmour > 0) SetPlayerArmour(playerid, totalarmour);
				else {
					SetPlayerArmour(playerid, 0);
					
					if(health+totalarmour > 0) {
						SetPlayerHealth(playerid,health+totalarmour);
					}
					else nohp = true;
				}

			}
			*/
			AddPlayerDamage(playerid, weaponid, amount, (armour > 0 && (bodypart == 3 || (GetPlayerSkin(playerid) == 285 && bodypart == 9))) ? true : false, bodypart);

			if(nohp)
			{
				if (weaponid == 0 || IsMelee(weaponid)) // Melee Weapon
				{
					ResetPlayerWeapons(playerid);
					for (new i = 0; i < 13; i ++) {
						if (playerData[playerid][pGuns][i] != 0 && (playerData[playerid][pGuns][i] == playerData[playerid][pGun1] || playerData[playerid][pGuns][i] == playerData[playerid][pGun2] || playerData[playerid][pGuns][i] == playerData[playerid][pGun3])) {
							new ammo, license;
							if(playerData[playerid][pGun1] == playerData[playerid][pGuns][i])
							{
								ammo = playerData[playerid][pAmmo1];
				
								playerData[playerid][pGun1]=0;
								playerData[playerid][pAmmo1]=0;
							}
							else if(playerData[playerid][pGun2] == playerData[playerid][pGuns][i])
							{
								ammo = playerData[playerid][pAmmo2];
								license = playerData[playerid][pPLicense];
								playerData[playerid][pGun2]=0;
								playerData[playerid][pAmmo2]=0;
								playerData[playerid][pPLicense]=0;
							}
							else
							{
								ammo = playerData[playerid][pAmmo3];
								license = playerData[playerid][pSLicense];
								playerData[playerid][pGun3]=0;
								playerData[playerid][pAmmo3]=0;
								playerData[playerid][pSLicense]=0;
							}
							if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) %s(%d) drop on bw mode (%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(playerData[playerid][pGuns][i]), ammo, license);
							else Log_Write("logs/weapon.txt", "[%s] %s (%s) %s(%d) drop on death", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(playerData[playerid][pGuns][i]), ammo);
						}
						playerData[playerid][pGuns][i] = 0;
						playerData[playerid][pAmmo][i] = 0;
					}
					
					knotime[playerid] = 120;
					isKNOmode{playerid} = true;
					playerData[playerid][pInterior] = GetPlayerInterior(playerid);
					playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
					GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);

					SetPlayerHealthEx(playerid, 25.0);

					new countdamage;
					/*SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้รับบาดเจ็บอย่างรุนแรงตอนนี้ถ้าหากแพทย์ หรือใครก็ตามไม่สามารถช่วยคุณได้ คุณก็จะตาย");
					SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อยอมรับการตายพิมพ์ /acceptdeath");*/
					if((countdamage = CountPlayerDamage(playerid)) != 0)
					{
						new damageString[64];
						format(damageString, sizeof(damageString), "(( ได้ถูกต่อย %d ครั้งแล้วหมดสติ /helpup %d เพื่อช่วยเหลือ ))", countdamage, playerid);
						SetPlayerChatBubble(playerid, damageString, 0xFF6347FF, 20.0, 60000);
						SendClientMessage(playerid, COLOR_LIGHTRED, damageString);
					}
					GameTextForPlayer(playerid, "~b~KNOCK-OUT", 5000, 4);
				}
				else
				{
					ResetPlayerWeapons(playerid);
					for (new i = 0; i < 13; i ++) {
						if (playerData[playerid][pGuns][i] != 0 && (playerData[playerid][pGuns][i] == playerData[playerid][pGun1] || playerData[playerid][pGuns][i] == playerData[playerid][pGun2] || playerData[playerid][pGuns][i] == playerData[playerid][pGun3])) {
							new ammo, license;
							if(playerData[playerid][pGun1] == playerData[playerid][pGuns][i])
							{
								ammo = playerData[playerid][pAmmo1];
				
								playerData[playerid][pGun1]=0;
								playerData[playerid][pAmmo1]=0;
							}
							else if(playerData[playerid][pGun2] == playerData[playerid][pGuns][i])
							{
								ammo = playerData[playerid][pAmmo2];
								license = playerData[playerid][pPLicense];
								playerData[playerid][pGun2]=0;
								playerData[playerid][pAmmo2]=0;
								playerData[playerid][pPLicense]=0;
							}
							else
							{
								ammo = playerData[playerid][pAmmo3];
								license = playerData[playerid][pSLicense];
								playerData[playerid][pGun3]=0;
								playerData[playerid][pAmmo3]=0;
								playerData[playerid][pSLicense]=0;
							}
							if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) %s(%d) drop on bw mode (%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(playerData[playerid][pGuns][i]), ammo, license);
							else Log_Write("logs/weapon.txt", "[%s] %s (%s) %s(%d) drop on death", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(playerData[playerid][pGuns][i]), ammo);
						}
						playerData[playerid][pGuns][i] = 0;
						playerData[playerid][pAmmo][i] = 0;
					}
					
					deathtime[playerid] = 300;
					isInjuredmode{playerid} = true;
					playerData[playerid][pInterior] = GetPlayerInterior(playerid);
					playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
					GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
					GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);

					
					SetPlayerHealthEx(playerid, 25.0);

					new countdamage;
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้รับบาดเจ็บอย่างรุนแรงตอนนี้ถ้าหากแพทย์ หรือใครก็ตามไม่สามารถช่วยคุณได้ คุณก็จะตาย");
					SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อยอมรับการตายพิมพ์ /acceptdeath");
					if((countdamage = CountPlayerDamage(playerid)) != 0)
					{
						new damageString[64];
						format(damageString, sizeof(damageString), "(( ได้รับความบาดเจ็บ %d ครั้ง /damages %d เพื่อดูรายละเอียด ))", countdamage, playerid);
						SetPlayerChatBubble(playerid, damageString, 0xFF6347FF, 20.0, 60000);
						SendClientMessage(playerid, COLOR_LIGHTRED, damageString);
					}
					GameTextForPlayer(playerid, "~b~brutally wounded", 5000, 4);
					
					new vehicleid = GetPlayerVehicleID(playerid);

					if (vehicleid) {
						new modelid = GetVehicleModel(vehicleid);
						new seat = GetPlayerVehicleSeat(playerid);

						TogglePlayerControllable(playerid, false);

						switch (modelid) {
							case 509, 481, 510, 462, 448, 581, 522,
								461, 521, 523, 463, 586, 468, 471: {
								new Float:vx, Float:vy, Float:vz;
								GetVehicleVelocity(vehicleid, vx, vy, vz);

								if (vx*vx + vy*vy + vz*vz >= 0.4) {
									ApplyAnimation(playerid, "PED", "BIKE_fallR", 4.1, 1, 1, 0, 1, 0, 1);
								} else {
									ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.1, 1, 1, 0, 1, 0, 1);
								}
							}

							default: {
								if (seat & 1) {
									ApplyAnimation(playerid, "PED", "CAR_dead_LHS", 4.1, 0, 0, 0, 1, 0, 1);
								} else {
									ApplyAnimation(playerid, "PED", "CAR_dead_RHS", 4.1, 0, 0, 0, 1, 0, 1);
								}
							}
						}
					} else {
			
						new anim = GetPlayerAnimationIndex(playerid);

						if (anim == 1250 || (1538 <= anim <= 1544) || weaponid == WEAPON_DROWN) {
							// In water
							ApplyAnimation(playerid, "PED", "Drown", 4.1, 0, 0, 0, 1, 0, 1);
							
						} else if (1195 <= anim <= 1198) {
							// Jumping animation
							ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0, 1);
						} else if (WEAPON_SHOTGUN <= weaponid <= WEAPON_SHOTGSPA) {
							if (IsPlayerBehindPlayer(issuerid, playerid)) {
								MakePlayerFacePlayer(playerid, issuerid, true);
								ApplyAnimation(playerid, "PED", "KO_shot_front", 4.1, 0, 0, 0, 1, 0, 1);
							} else {
								MakePlayerFacePlayer(playerid, issuerid);
								ApplyAnimation(playerid, "PED", "BIKE_fall_off", 4.1, 0, 0, 0, 1, 0, 1);
							}
						} else if (WEAPON_RIFLE <= weaponid <= WEAPON_SNIPER) {
							if (bodypart == 9) {
								ApplyAnimation(playerid, "PED", "KO_shot_face", 4.1, 0, 0, 0, 1, 0, 1);
							} else if (IsPlayerBehindPlayer(issuerid, playerid)) {
								ApplyAnimation(playerid, "PED", "KO_shot_front", 4.1, 0, 0, 0, 1, 0, 1);
							} else {
								ApplyAnimation(playerid, "PED", "KO_shot_stom", 4.1, 0, 0, 0, 1, 0, 1);
							}
						} else if (IsBulletWeapon(weaponid)) {
							if (bodypart == 9) {
								ApplyAnimation(playerid, "PED", "KO_shot_face", 4.1, 0, 0, 0, 1, 0, 1);
							} else {
								ApplyAnimation(playerid, "PED", "KO_shot_front", 4.1, 0, 0, 0, 1, 0, 1);
							}
						} else if (weaponid == WEAPON_PISTOLWHIP) {
							ApplyAnimation(playerid, "PED", "KO_spin_R", 4.1, 0, 0, 0, 1, 0, 1);
						} else if (IsMeleeWeapon(weaponid) || weaponid == WEAPON_CARPARK) {
							ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 0, 1, 0, 1);
						} else if (weaponid == WEAPON_SPRAYCAN || weaponid == WEAPON_FIREEXTINGUISHER) {
							ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 1, 0, 1);
						} else {
							ApplyAnimation(playerid, "PED", "KO_skid_back", 4.1, 0, 0, 0, 1, 0, 1);
						}
					}
				}
				//ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
				SQL_LogPlayerDeath(playerid,issuerid,weaponid);
			}
		}
		return 1;
	}

	if (amount > 0.0)
		playerData[playerid][pHealth] -= amount;

    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	/*if(hittype == BULLET_HIT_TYPE_PLAYER) {

		GetPlayerPos(hitid, fX, fY, fZ);
		
		SendClientMessageEx(playerid, -1, "ระยะ %f", GetPlayerDistanceFromPoint(playerid, fX, fY, fZ));
	}
	else {
		SendClientMessageEx(playerid, -1, "ระยะ %f", GetPlayerDistanceFromPoint(playerid, fX, fY, fZ));
	}*/
	
	/*if(weaponid < 0 && weaponid > 45)
		return 0;

    if( hittype != BULLET_HIT_TYPE_NONE ) // Bullet Crashing uses just this hittype
    {
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
        {
            Kick(playerid);
            return 0; // let's desynchronize that bullet, so players won't crash
        }
    }*/

    /*if(hittype == BULLET_HIT_TYPE_PLAYER) {
        new Float:rDist = frandom(-5.0, 6.0);
        if(rDist > 0.0) {
            new Float:vX, Float:vY, Float:vZ,
                Float:pX, Float:pY, Float:pZ;
            GetPlayerLastShotVectors(playerid, vX, vY, vZ, fX, fY, fZ);

            vX = fX - vX;
            vY = fY - vY;
            vZ = fZ - vZ;

            new Float:d = VectorSize(vX, vY, vZ);
            vX /= d;
            vY /= d;
            vZ /= d;

            vX *= rDist;
            vY *= rDist;
            vZ *= rDist;

            vX += fX + frandom(-0.5, 0.5);
            vY += fY + frandom(-0.5, 0.5);
            vZ += fZ + frandom(-0.5, 0.5);

            if(CA_RayCastLineNormal(fX, fY, fZ, vX, vY, vZ, pX, pY, pZ, pX, pY, pZ)) {
                rDist = frandom(0.005, 0.020, 4);
                pX *= rDist;
                pY *= rDist;
                pZ *= rDist;

                CA_RayCastLineAngle(fX, fY, fZ, vX, vY, vZ, fX, fY, fZ, vX, vY, vZ);

                new objectid = CreateDynamicObject(19836, fX + pX, fY + pY, fZ + pZ, vX, vY, vZ);
                if(IsValidDynamicObject(objectid)) {
                    SetDynamicObjectMaterial(objectid, 0, -1, "none", "none", 0xFFFF0000);

                    SetTimerEx("FadeBlood", 1500, false, "ii", objectid, 255);
                }
            }
        }
    }*/

    if(!playerData[playerid][pOnDuty])
    {
	    if(playerData[playerid][pGun1] == weaponid)
		{
			if(playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= playerData[playerid][pAmmo1])
				playerData[playerid][pAmmo1]--;

			if(!playerData[playerid][pAmmo1])
			{
			    playerData[playerid][pGun1] = 0;
			    playerData[playerid][pAmmo1] = 0;
			}
		}
	    else if(playerData[playerid][pGun2] == weaponid)
		{
		    if(playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= playerData[playerid][pAmmo2])
				playerData[playerid][pAmmo2]--;

	 		if(!playerData[playerid][pAmmo2])
			{
			    playerData[playerid][pGun2] = 0;
			    playerData[playerid][pAmmo2] = 0;
			    playerData[playerid][pPLicense] = 0;
			}
		}
	    else if(playerData[playerid][pGun3] == weaponid)
		{
		    if(playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= playerData[playerid][pAmmo3])
				playerData[playerid][pAmmo3]--;

			if(!playerData[playerid][pAmmo3])
			{
			    playerData[playerid][pGun3] = 0;
			    playerData[playerid][pAmmo3] = 0;
			    playerData[playerid][pSLicense] = 0;
			}
		}
	}

	if((BeanbagActive{playerid} == true && weaponid == 25) || (TazerActive{playerid} == true && weaponid == 23))
	{
		if(weaponid == 23) {
			if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0, 1);
			else ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 4.0, 0, 1, 1, 0, 0, 1);
		}
		else if(weaponid == 25) {
			if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
			else ApplyAnimation(playerid, "BUDDY", "buddy_crouchreload", 4.0, 0, 1, 1, 0, 0, 1);
		}
	}
	else playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]]--;

    if(!playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]])
    {
        playerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = 0;
        playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = 0;

        cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));
    }
    return 1;
}

/*forward IssueHit(playerid, damagedid, Float:amount, weaponid, bodypart);
public IssueHit(playerid, damagedid, Float:amount, weaponid, bodypart)*/
timer IssueHit[ISSUE_HIT_DELAY](playerid, damagedid, Float:amount, weaponid, bodypart)
{
	IssueTimer[damagedid] = Timer:0;
    if(DamageSync[damagedid] == STATE_PENDING_HIT)
	{
		OnPlayerTakeDamage(damagedid, playerid, Float: amount, weaponid, bodypart);
	}
    return 1;
}

GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;


	playerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

IsInvalidWeapon(weaponid)
{
	if(weaponid == 34 || weaponid == 35 || weaponid == 16 || weaponid == 18) return 1;
	else return 0;
}

GivePlayerValidWeapon(playerid, weaponid, ammo, license=0)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

    RemoveWeapon(playerid, weaponid);

	if(!IsInvalidWeapon(weaponid))
	{
		if(IsMelee(weaponid))
		{
		    playerData[playerid][pGun1] = weaponid;
		    playerData[playerid][pAmmo1] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Melee] คุณจะเกิดด้วย %s", ReturnWeaponName(weaponid));
		}
		else if(IsPrimary(weaponid))
		{
		    playerData[playerid][pGun2] = weaponid;
		    playerData[playerid][pAmmo2] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Primary weapon] คุณจะเกิดด้วย %s", ReturnWeaponName(weaponid));

		    playerData[playerid][pPLicense] = license;
		}
		else if(IsSecondary(weaponid))
		{
		    playerData[playerid][pGun3] = weaponid;
		    playerData[playerid][pAmmo3] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Secondary weapon] คุณจะเกิดด้วย %s", ReturnWeaponName(weaponid));

		    playerData[playerid][pSLicense] = license;
		}
	}

	playerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	playerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = ammo;

	GivePlayerWeapon(playerid, weaponid, ammo);

	return license;
}

Industry_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_industry) if (IsPlayerInRangeOfPoint(playerid, radius, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz]))
	{
		return i;
	}
	return -1;
}
/*
BizEntered[playerid]
{
	if (playerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_business) if (playerData[playerid][pLocal]-LOCAL_BIZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BizInfo[i][bWorld]) {
	        return i;
		}
	}
	return -1;
}

Biz_Exit(playerid, Float:radius = 2.0)
{
	if (playerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_business) if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bExitX], BizInfo[i][bExitY], BizInfo[i][bExitZ]) && playerData[playerid][pLocal]-LOCAL_BIZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior] && GetPlayerVirtualWorld(playerid) == BizInfo[i][bWorld]) {
	        return i;
		}
	}
	return -1;
}

Biz_Nearest(playerid, Float:radius = 2.5)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach (new i : sv_business) {

		new
		 	Float:temp = GetPlayerDistanceFromPoint(playerid, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]);

		if (temp < fDistance && temp <= radius)
		{
			fDistance = temp;
			iIndex = i;
		}
	}
	return iIndex;
}*/

Biz_Nearest(playerid, Float:radius = 2.5)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach (new i : sv_business) {

		new
		 	Float:temp = GetPlayerDistanceFromPoint(playerid, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]);

		if (temp < fDistance && temp <= radius)
		{
			fDistance = temp;
			iIndex = i;
		}
	}
	return iIndex;
}

BizType_Nearest(playerid, type, active=0)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach (new i : sv_business) {
		if(BizInfo[i][bType] == type && BizInfo[i][bLocked] == 0 && (BizInfo[i][bActive] == active || active==0)) {
			new
				Float:temp = GetPlayerDistanceFromPoint(playerid, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]);

			if (temp < fDistance)
			{
				fDistance = temp;
				iIndex = i;
			}
		}
	}
	return iIndex;
}

stock GetPropertyID(property_number)
{
	foreach (new i : sv_houses) {
		if(HouseInfo[i][hID] == property_number && HouseInfo[i][hSubid] == -1) {
			return i;
		}
	}
	return 0;
}

stock GetPropertyLocation(property_number, const property_info[], &Float:pos_x, &Float:pos_y, &Float:pos_z)
{
	foreach (new i : sv_houses) {
		if(HouseInfo[i][hID] == property_number && HouseInfo[i][hSubid] == -1 && strequal(property_info, HouseInfo[i][hAddress], true)) {
			pos_x = HouseInfo[i][hEntranceX];
			pos_y = HouseInfo[i][hEntranceY];
			pos_z = HouseInfo[i][hEntranceZ];
			return true;
		}
	}
	return false;
}


/*
House_Exit(playerid, Float:radius = 2.0)
{
	if (playerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_houses) if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && playerData[playerid][pLocal]-LOCAL_HOUSE == i  && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld]) {
	        return i;
		}
	}
	return -1;
}
*/
House_IsInside(playerid, houseid)
{
	if (playerData[playerid][pLocal] != 255)
	{
	    if (HouseEntered[playerid] == houseid || (playerData[playerid][pLocal]-LOCAL_HOUSE == houseid  && GetPlayerInterior(playerid) == HouseInfo[houseid][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[houseid][hWorld])) {
	        return true;
		}
	}
	return false;
}

/*
House_Nearest(playerid, Float:radius = 2.5)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach (new i : sv_houses) {

		new
		 	Float:temp = GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]);

		if (temp < fDistance && temp <= radius)
		{
			fDistance = temp;
			iIndex = i;
		}
	}
	return iIndex;
}

House_Inside(playerid)
{
	if (playerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_houses) if (playerData[playerid][pLocal]-LOCAL_HOUSE == i && GetPlayerInterior(playerid) == HouseInfo[i][hInterior] && GetPlayerVirtualWorld(playerid) == HouseInfo[i][hWorld]) {
	        return i;
		}
	}
	return -1;
}*/

/*
House_Nearest(playerid)
{
	return nearHouse_var[playerid];
}*/
/*
House_Inside(playerid)
{
	return HouseEntered[playerid];
}*/

Biz_IsOwner(playerid, bizid)
{
	if (!bf_get(player_bf[playerid], IS_LOGGED) || playerData[playerid][pID] == -1)
	    return 0;

	if (playerData[playerid][pAdmin] > 3)
		return 1;

    if (BizInfo[bizid][bOwned] != 0 && playerData[playerid][pPbiskey] == bizid)
		return 1;

	return 0;
}

Biz_IsInside(playerid, bizid)
{
	if (playerData[playerid][pLocal] != 255)
	{
	    if (BizEntered[playerid] == bizid || (playerData[playerid][pLocal]-LOCAL_BIZ == bizid && GetPlayerInterior(playerid) == BizInfo[bizid][bInterior] && GetPlayerVirtualWorld(playerid) == BizInfo[bizid][bWorld])) {
	        return true;
		}
	}
	return false;
}

/*House_IsPermission(playerid, houseid)
{
	if (!bf_get(player_bf[playerid], IS_LOGGED) || playerData[playerid][pID] == -1)
	    return 0;

	if (playerData[playerid][pAdmin] > 3)
		return 1;

    if (HouseInfo[houseid][hOwned] != 0 && playerData[playerid][pHouseKey] == houseid)
    //if (HouseInfo[houseid][hOwned] == 1 && !strcmp(ReturnPlayerName(playerid), HouseInfo[houseid][hOwner], true))
		return 1;

	return 0;
}*/

House_IsOwner(playerid, houseid)
{
	if(houseid == -1)
	    return 0;

	if (!bf_get(player_bf[playerid], IS_LOGGED) || playerData[playerid][pID] == -1)
	    return 0;

	if (playerData[playerid][pAdmin] > 3)
		return 1;

    if (HouseInfo[houseid][hOwned] == 1 && !strcmp(ReturnPlayerName(playerid), HouseInfo[houseid][hOwner], true))
		return 1;

	return 0;
}

Warehouse_Refresh(whid) {
	if (whid != -1)
	{
		if (IsValidDynamicPickup(WareHouseInfo[whid][whPickup]))
		    DestroyDynamicPickup(WareHouseInfo[whid][whPickup]);

		WareHouseInfo[whid][whPickup] = CreateDynamicPickup(1318, 23, WareHouseInfo[whid][whX], WareHouseInfo[whid][whY], WareHouseInfo[whid][whZ], WareHouseInfo[whid][whWorld], WareHouseInfo[whid][whInt]);

		new warehouse_str[56];
		if(!IsValidDynamic3DTextLabel(WareHouseInfo[whid][whLabel])) {

			format(warehouse_str, sizeof(warehouse_str), "["EMBED_ORANGE"โกดัง%s"EMBED_WHITE"]\nความจุโกดัง: %d / %d", WareHouseInfo[whid][whType] == 1 ? ("อาวุธ") : ("ยาเสพติด"), WareHouseInfo[whid][whStock], WareHouseInfo[whid][whMaxstock]);
			WareHouseInfo[whid][whLabel] = CreateDynamic3DTextLabel(warehouse_str, -1, WareHouseInfo[whid][whX], WareHouseInfo[whid][whY], WareHouseInfo[whid][whZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, WareHouseInfo[whid][whWorld], WareHouseInfo[whid][whInt], -1, 100.0);
            return 1;
		}
		format(warehouse_str, sizeof(warehouse_str), "["EMBED_ORANGE"โกดัง%s"EMBED_WHITE"]\nความจุโกดัง: %d / %d", WareHouseInfo[whid][whType] == 1 ? ("อาวุธ") : ("ยาเสพติด"), WareHouseInfo[whid][whStock], WareHouseInfo[whid][whMaxstock]);
        UpdateDynamic3DTextLabelText(WareHouseInfo[whid][whLabel], -1, warehouse_str);
	}
	return 1;
}

Warehouse_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_warehouse) if (IsPlayerInRangeOfPoint(playerid, radius, WareHouseInfo[i][whX], WareHouseInfo[i][whY], WareHouseInfo[i][whZ]) && GetPlayerInterior(playerid) == WareHouseInfo[i][whInt] && GetPlayerVirtualWorld(playerid) == WareHouseInfo[i][whWorld])
	{
		return i;
	}
	return -1;
}

Biz_Refresh(bizid)
{
	if (bizid != -1)
	{
		if (IsValidDynamicPickup(BizInfo[bizid][bPickup]))
		    DestroyDynamicPickup(BizInfo[bizid][bPickup]);

		if(BizInfo[bizid][bOwned]) BizInfo[bizid][bPickup] = CreateDynamicPickup(1239, 2, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
		else BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 2, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
	
		Streamer_SetIntData(STREAMER_TYPE_PICKUP, BizInfo[bizid][bPickup], E_STREAMER_EXTRA_ID, bizid);
	}
	return 1;
}

forward PrintBizInfo(playerid,targetid);
public PrintBizInfo(playerid,targetid)
{
    new employeename[MAX_PLAYER_NAME], rows;
	new employee[4][MAX_PLAYER_NAME] = {"ไม่มี", "ไม่มี", "ไม่มี", "ไม่มี"};

	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_GREEN,"*** %s ***",BizInfo[targetid][bInfo]);
	SendClientMessageEx(playerid, COLOR_WHITE,"เจ้าของ: [%s] เลเวล:[%d] ราคา:[%d] ประเภท:[%d]", BizInfo[targetid][bOwner], BizInfo[targetid][bLevelNeeded], BizInfo[targetid][bBuyPrice], BizInfo[targetid][bType]);
	SendClientMessageEx(playerid, COLOR_WHITE,"อัพเกรด:[%d] กล่องเงินสด:[%d] ค่าธรรมเนียมแรกเข้า:[%d]", 0, BizInfo[targetid][bTill], BizInfo[targetid][bEntranceCost]);
	SendClientMessageEx(playerid, COLOR_WHITE,"ข้อมูลทางเทคนิค: 1 สินค้า = %d ผลิตภัณฑ์ ปัจจุบัน: ผลิตภัณฑ์[%d / %d] ราคาสินค้า[%d]", GetProductPerCargo(BizInfo[targetid][bType]), BizInfo[targetid][bProducts], BizInfo[targetid][bMaxProducts], BizInfo[targetid][bPriceProd]);

	format(szQuery, sizeof(szQuery), "SELECT `Character` FROM `characters` WHERE `playerWork` = %d", targetid);
	mysql_query(dbCon, szQuery);

    cache_get_row_count(rows);

    if(rows) {
		for(new i=0; i!=rows; ++i) if(i < 4)
		{
			cache_get_value_index(i, 0, employeename);
			employee[i] = employeename;
		}
	}

	SendClientMessageEx(playerid, COLOR_WHITE,"การว่าจ้าง: 1.[%s] 2.[%s] 3.[%s] 4.[%s]", employee[0], employee[1], employee[2], employee[3]);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");

	ShowBizItemDetail(playerid, targetid);
}

CMD:hire(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/hire [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(!OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของธุรกิจ");

	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(id == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถจ้างตัวเองได้");

	if (!IsPlayerNearPlayer(playerid, id, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	HireRequester[id] = playerid;
	SendClientMessageEx(id, COLOR_LIGHTBLUE, "* %s เชิญคุณมาทำงานที่ธุรกิจของเขา (/accept job) ถ้าคุณต้องการเข้าร่วม", ReturnRealName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW3, "* คุณเชิญ %s ให้ทำงานในธุรกิจของคุณ", ReturnRealName(id));
	return 1;
}

CMD:fire(playerid, params[])
{
	new id;
	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/fire [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(!OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของธุรกิจ");

	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(id == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถเลิกจ้างตัวเองได้");

	if (!IsPlayerNearPlayer(playerid, id, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(playerData[id][pWorkOn] != playerData[playerid][pPbiskey]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้ทำงานให้ธุรกิจของคุณ");
	SendClientMessageEx(id, COLOR_LIGHTBLUE, "* คุณได้ลาออกจากการทำงานในธุรกิจของ %s", ReturnRealName(playerid));
	SendClientMessageEx(playerid, COLOR_YELLOW3, "* %s ได้ลาออกจากการทำงานที่ธุรกิจของคุณ ดังนั้นเขาจึงไม่มีความสำคัญกับธุรกิจอีกต่อไป", ReturnRealName(id));
	playerData[id][pWorkOn] = -1;
	return 1;
}

GetProductPerCargo(type)
{
	switch(type)
	{
	    case 1: return 10; // Gas Station
	    case 2: return 10; // Ammunations
	    case 3: return 5; // 24/7
	    case 4: return 3; // Vehicle Dealerships
	    case 5: return 10; // Car Modding Shops
	    case 6: return 3; // Pay & Spray
	    case 7: return 5; // Clothing Shops
	    case 8: return 5; // Bars
	    case 9: return 5; // Restaurant
	    case 10: return 10; // Furniture Shop
	    case 11: return 20; // Advertisement Center
	    case 12: return 100; // Bank
	}
	return -1;
}

GetProductCargo(type)
{
	switch(type)
	{
	    case 1: return 13; // Gas Station
	    case 2: return 19; // Ammunations
	    case 3: return 11; // 24/7
	    case 4: return 17; // Vehicle Dealerships
	    case 5: return 23; // Car Modding Shops
	    case 6: return 0; // Pay & Spray
	    case 7: return 12; // Clothing Shops
     	case 8: return 7; // Bars
	    case 9: return 24; // Restaurant
	    case 10: return 14; // Furniture Shop
	    case 11: return 21; // Advertisement Center
	    case 12: return 2; // Bank
	}
	return -1;
}

// ฟังชั่น Public

// Private Vehicle System

/*Vehicle_Nearest(playerid)
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) {
		GetVehiclePos(i, fX, fY, fZ);
		if (IsPlayerInRangeOfPoint(playerid, 6.0, fX, fY, fZ))
		    return i;
	}
	return -1;
}*/

GetDistancePlayerVeh(playerid, veh) {

	new
	    Float:Floats[7];

	GetPlayerPos(playerid, Floats[0], Floats[1], Floats[2]);
	GetVehiclePos(veh, Floats[3], Floats[4], Floats[5]);
	Floats[6] = floatsqroot((Floats[3]-Floats[0])*(Floats[3]-Floats[0])+(Floats[4]-Floats[1])*(Floats[4]-Floats[1])+(Floats[5]-Floats[2])*(Floats[5]-Floats[2]));

	return floatround(Floats[6]);
}

GetClosestVehicle(playerid, exception = INVALID_VEHICLE_ID) {

	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	for(new i=0;i!=MAX_VEHICLES;i++) {
		if(i != exception) {
			new
	        	Float:temp = GetDistancePlayerVeh(playerid, i);

			if (temp < fDistance && temp < 6.0)
			{
			    fDistance = temp;
			    iIndex = i;
			}
		}
	}
	return iIndex;
}

Vehicle_Nearest(playerid)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    Float:fX,
	    Float:fY,
	    Float:fZ,
	    iIndex = -1
	;
	for(new i=0;i!=MAX_VEHICLES;i++) {

	    GetVehiclePos(i, fX, fY, fZ);

		new
        	Float:temp = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);

		if (temp < fDistance && temp < 6.0)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Car_Nearest(playerid)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    Float:fX,
	    Float:fY,
	    Float:fZ,
	    iIndex = -1
	;
	

	foreach(new i : sv_playercar) {

	    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

	    new Float:temp = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);

		if (temp < fDistance && temp < 6.0)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Car_GetID(vehicleid)
{
	if(vehicleid == -1 || vehicleid == INVALID_VEHICLE_ID) return -1;

	foreach(new i : sv_playercar) {
		if(CarData[i][carVehicle]==vehicleid) {
			return i;
		}
	}
	
	return -1;
}

SetVehicleDamage(vehicleid)
{
	new slot = -1;

	if((slot = Car_GetID(vehicleid)) != -1)
	{
	    SetVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		if(CarData[slot][carHealth] > 249) SetVehicleHealthEx(CarData[slot][carVehicle],CarData[slot][carHealth]);
		else SetVehicleHealthEx(CarData[slot][carVehicle],250);
	}

}

forward SetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
public SetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4)
{
	CoreVehicles[vehicleid][vehDamage][0]=damage1;
	CoreVehicles[vehicleid][vehDamage][1]=damage2;
	CoreVehicles[vehicleid][vehDamage][2]=damage3;
	CoreVehicles[vehicleid][vehDamage][3]=damage4;
	
    UpdateVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
    return 1;
}

forward SetVehicleHealthEx(vehicleid, Float:hp);
public SetVehicleHealthEx(vehicleid, Float:hp)
{
	CoreVehicles[vehicleid][vehHealth]=hp;
    SetVehicleHealth(vehicleid, hp);
    return 1;
}

SaveVehicleDamage(vehicleid)
{
	new slot = -1;

	if((slot = Car_GetID(vehicleid)) != -1)
	{
	    // panels,doors,lights,tires
		GetVehicleDamageStatus(vehicleid,CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		GetVehicleHealth(vehicleid,CarData[slot][carHealth]);
	}

}

SaveSlotVehicleDamage(slot)
{
	if(Iter_Contains(sv_playercar, slot)) {
		GetVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		GetVehicleHealth(CarData[slot][carVehicle],CarData[slot][carHealth]);
	}
}

Car_DespawnEx(carid)
{
    if(Iter_Contains(sv_playercar, carid))
	{
		for(new x = 0; x != MAX_CAR_WEAPONS; x++) if(IsValidDynamicObject(CarPlace[carid][x][cPobj])) DestroyDynamicObject(CarPlace[carid][x][cPobj]);

		for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
		{
			CarData[carid][carPackageWP][x]=0;
			CarData[carid][carPackageAmmo][x]=0;
		}

		DestroyVehicle(CarData[carid][carVehicle]);

	    CarData[carid][carSID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle]=INVALID_VEHICLE_ID;
		CarData[carid][carDespawn]=false;
	    
		for(new x = 0; x != MAX_CAR_WEAPONS; x++)
		{
			CarData[carid][carWeapon][x] = 0;
			CarData[carid][carAmmo][x] = 0;
			CarData[carid][carWeaponLicense][x] = 0;
		}
		for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
			VehicleDrug[carid][x][drugQTY] = 0;
		}
		Iter_Remove(sv_playercar, carid);
	}
}

Car_Save(vehicleid)
{
	new
		carid = -1;

	if((carid = Car_GetID(vehicleid)) != -1)
	{
        /*CarData[carid][carFuel] = CoreVehicles[vehicleid][vehFuel];

		SaveSlotVehicleDamage(carid);*/

        return Car_SaveID(carid);
		/*format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carAlarm` = '%d', `carFuel` = '%f', `carXM` = '%d'",
	        CarData[carid][carModel],
	        CarData[carid][carOwner],
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carColor1],
	        CarData[carid][carColor2],
	        CarData[carid][carPaintjob],
	        CarData[carid][carLocked],
            CarData[carid][carAlarm],
	        CarData[carid][carFuel],
	        CarData[carid][carXM]
		);

		for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
		}
		format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
			query,
			CarData[carid][carMods][0],
			CarData[carid][carMods][1],
			CarData[carid][carMods][2],
			CarData[carid][carMods][3],
			CarData[carid][carMods][4],
			CarData[carid][carMods][5],
			CarData[carid][carMods][6],
			CarData[carid][carMods][7],
			CarData[carid][carMods][8],
			CarData[carid][carMods][9],
			CarData[carid][carMods][10],
			CarData[carid][carMods][11],
			CarData[carid][carMods][12],
			CarData[carid][carMods][13]
		);

		format(query, sizeof(query), "%s, `carWeapon0` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carAmmo0` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d'",
			query,
			CarData[carid][carWeapon][0],
			CarData[carid][carWeapon][1],
			CarData[carid][carWeapon][2],
			CarData[carid][carWeapon][3],
			CarData[carid][carAmmo][0],
			CarData[carid][carAmmo][1],
			CarData[carid][carAmmo][2],
			CarData[carid][carAmmo][3]
		);

		format(query, sizeof(query), "%s, `carInsurance` = '%d', `carDamage1` = '%d', `carDamage2` = '%d', `carDamage3` = '%d', `carDamage4` = '%d', `carHealth` = '%f', `carArmour` = '%f', `carDestroyed` = '%d', `carLock` = '%d', `carMileage` = '%f', `carImmob` = '%d', `carBatteryL` = '%f', `carEngineL` = '%f', `carPlate` = '%s', `carComps` = '%d', `carDuplicate` = '%d', `carPlacePos` = '%s' WHERE `carID` = '%d'",
			query,
			CarData[carid][carInsurance],
			CarData[carid][carDamage][0],
			CarData[carid][carDamage][1],
			CarData[carid][carDamage][2],
			CarData[carid][carDamage][3],
			CarData[carid][carHealth],
			CarData[carid][carArmour],
			CarData[carid][carDestroyed],
			CarData[carid][carLock],
			CarData[carid][carMileage],
			CarData[carid][carImmob],
			CarData[carid][carBatteryL],
			CarData[carid][carEngineL],
			CarData[carid][carPlate],
			CarData[carid][carComps],
			CarData[carid][carDupKey],
			FormatPlaceItems(carid),
			FormatVehicleWeapons(carid),
			CarData[carid][carSID]
		);
		printf("Vehicle Save %d", strlen(query));
		return mysql_tquery(dbCon, query);*/
	}
	else
	{
	    return 0;
	}
}

Car_SaveID(carid)
{
	new
	    query[2000];

	if(Iter_Contains(sv_playercar, carid))
	{
		if(CarData[carid][carVehicle] != INVALID_VEHICLE_ID && CarData[carid][carVehicle] < MAX_VEHICLES)
			CarData[carid][carFuel] = CoreVehicles[CarData[carid][carVehicle]][vehFuel];

		//SaveSlotVehicleDamage(carid);

		format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carAlarm` = '%d', `carFuel` = '%f', `carXM` = '%d'",
	        CarData[carid][carModel],
	        CarData[carid][carOwner],
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carColor1],
	        CarData[carid][carColor2],
	        CarData[carid][carPaintjob],
	        CarData[carid][carLocked],
            CarData[carid][carAlarm],
	        CarData[carid][carFuel],
	        CarData[carid][carXM]
		);

		format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
			query,
			CarData[carid][carMods][0],
			CarData[carid][carMods][1],
			CarData[carid][carMods][2],
			CarData[carid][carMods][3],
			CarData[carid][carMods][4],
			CarData[carid][carMods][5],
			CarData[carid][carMods][6],
			CarData[carid][carMods][7],
			CarData[carid][carMods][8],
			CarData[carid][carMods][9],
			CarData[carid][carMods][10],
			CarData[carid][carMods][11],
			CarData[carid][carMods][12],
			CarData[carid][carMods][13]
		);

		format(query, sizeof(query), "%s, `carWeapon0` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carAmmo0` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d'",
			query,
			CarData[carid][carWeapon][0],
			CarData[carid][carWeapon][1],
			CarData[carid][carWeapon][2],
			CarData[carid][carWeapon][3],
			CarData[carid][carAmmo][0],
			CarData[carid][carAmmo][1],
			CarData[carid][carAmmo][2],
			CarData[carid][carAmmo][3]
		);

		format(query, sizeof(query), "%s, `carInsurance` = '%d', `carDamage1` = '%d', `carDamage2` = '%d', `carDamage3` = '%d', `carDamage4` = '%d', `carHealth` = '%f', `carArmour` = '%f', `carDestroyed` = '%d', `carLock` = '%d', `carMileage` = '%f', `carImmob` = '%d', `carBatteryL` = '%f', `carEngineL` = '%f', `carPlate` = '%s', `carComps` = '%d', `carDuplicate` = '%d', `carWorld` = '%d', `carInt` = '%d', `carImpound` = '%d'",
			query,
			CarData[carid][carInsurance],
			CarData[carid][carDamage][0],
			CarData[carid][carDamage][1],
			CarData[carid][carDamage][2],
			CarData[carid][carDamage][3],
			CarData[carid][carHealth],
			CarData[carid][carArmour],
			CarData[carid][carDestroyed],
			CarData[carid][carLock],
			CarData[carid][carMileage],
			CarData[carid][carImmob],
			CarData[carid][carBatteryL],
			CarData[carid][carEngineL],
			CarData[carid][carPlate],
			CarData[carid][carComps],
			CarData[carid][carDupKey],
			CarData[carid][carWorld],
			CarData[carid][carInt],
			CarData[carid][carImpound]
		);
		
		format(query, sizeof(query), "%s, `carImpoundX` = '%f', `carImpoundY` = '%f', `carImpoundZ` = '%f', `carImpoundA` = '%f', `carOwe` = %d, `carNos` = %d WHERE `carID` = '%d'",
			query,
			CarData[carid][carImpoundPos][0],
			CarData[carid][carImpoundPos][1],
			CarData[carid][carImpoundPos][2],
			CarData[carid][carImpoundPos][3],
			CarData[carid][carOwe],
			CarData[carid][carNos],
			CarData[carid][carSID]
		);

		return mysql_tquery(dbCon, query);
	}
	else
	{
	    return 0;
	}
}

Car_SavePlace(carid)
{
	new
	    query[1024];

	if(Iter_Contains(sv_playercar, carid))
	{

		format(query, sizeof(query), "UPDATE `cars` SET `carPlacePos` = '%s', `licenseWeapons` = '%s' WHERE `carID` = '%d'",
			FormatPlaceItems(carid),
			FormatCarLicenseWeapons(carid),
	        CarData[carid][carSID]
		);

		return mysql_tquery(dbCon, query);
	}
	else
	{
	    return 0;
	}
}
// Private Vehicle System
//===========================================================================================================================

forward SetPlayerWeapons(playerid);
public SetPlayerWeapons(playerid)
{
	if(playerData[playerid][pLevel] >= 2 && playerData[playerid][pJailed] < 1)
	{
		if (GetFactionType(playerid) == FACTION_TYPE_GANG) {
		    GivePlayerWeaponEx(playerid, 41, 5000);
		}
		if (playerData[playerid][pGun1] > 0)
		{
			GivePlayerWeaponEx(playerid, playerData[playerid][pGun1], playerData[playerid][pAmmo1]);
		}
		if (playerData[playerid][pGun2] > 0)
		{
			GivePlayerWeaponEx(playerid, playerData[playerid][pGun2], playerData[playerid][pAmmo2]);
		}
		if (playerData[playerid][pGun3] > 0)
		{
			GivePlayerWeaponEx(playerid, playerData[playerid][pGun3], playerData[playerid][pAmmo3]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (playerData[playerid][pGuns][i] > 0 && playerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, playerData[playerid][pGuns][i], playerData[playerid][pAmmo][i]);
	}
	SetPlayerArmedWeapon(playerid, 0);
	
	return 1;
}

IsMeleeSlotTaken(playerid)
{
	if(playerData[playerid][pGun1]) return true;
	return false;
}

IsPrimarySlotTaken(playerid)
{
	if(playerData[playerid][pGun2]) return true;
	return false;
}

IsSecondarySlotTaken(playerid)
{
	if(playerData[playerid][pGun3]) return true;
	return false;
}

IsMelee(weaponid)
{
    if(weaponid >= 1 && weaponid <= 15) return true;
	//switch(weaponid) { case 1..8,10..13,43: { return 1; } }
	return 0;
}

IsPrimary(weaponid)
{
    if(weaponid >= 25 && weaponid <= 33) return true;
	//switch(weaponid) { case 25,27,29..34: { return 1; } }
	return 0;
}

IsSecondary(weaponid)
{
    if(weaponid >= 22 && weaponid <= 24) return true;
	//switch(weaponid) { case 22..24: { return 1; } }
	return 0;
}

forward PlayerPlayMusic(playerid);
public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimerEx("StopMusic", 5000, 0, "i", playerid);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

forward StopMusic(playerid);
public StopMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
	}
}


/*forward OwnerVehicleTimer();
public OwnerVehicleTimer()
{*/
task OwnerVehicleTimer[1000]() 
{
	new vid = INVALID_VEHICLE_ID;
	foreach(new i : sv_playercar) {
		if((vid = CarData[i][carVehicle]) != INVALID_VEHICLE_ID) {

			if(CarData[i][carProtect] > 0) {
				CarData[i][carProtect]--;
				if(CarData[i][carProtect]<0) {
					CarData[i][carProtect]=0;
				}
			}

			if(IsEngineVehicle(vid) && GetEngineStatus(vid))
			{
				CarData[i][carMileage] += GetPlayerMileage(vid);
				CarData[i][carEngineL] -= 0.000016;
				CarData[i][carBatteryL] -= 0.000016;

				//GetVehicleDamageStatus(vid,CoreVehicles[vid][vehDamage][0],CoreVehicles[vid][vehDamage][1],CoreVehicles[vid][vehDamage][2],CoreVehicles[vid][vehDamage][3]);
			}
		}
	}
	return 1;
}

/*forward ServerVehicleFuelTimer();
public ServerVehicleFuelTimer()
{*/
task ServerVehicleFuelTimer[120000]() { // 1000 = 1 Seconds , 60,000 = 1 Minutes

	for(new i=0;i!=MAX_VEHICLES;i++) if(IsValidVehicle(i))
	{
		if(IsEngineVehicle(i) && GetEngineStatus(i) && CoreVehicles[i][vehFuel]) {
			CoreVehicles[i][vehFuel] -= GetVehicleConsumptionPerSecond(i);
			if (CoreVehicles[i][vehFuel] < 0.0) {
				CoreVehicles[i][vehFuel] = 0.0;
			}
		}
	}
}

/*forward ServerTimeSAMP();
public ServerTimeSAMP()*/
ptask ServerTimeSAMP[1000]()
{
	foreach(new i : Player)
	{
		if(PlayerLabel[i][pLabelTime])
		{
		    PlayerLabel[i][pLabelCount]++;

			switch(PlayerLabel[i][pLabelType])
			{
				case PLT_TYPE_KNOCKOUT: 
				{
					new labelstring[11], first = PlayerLabel[i][pLabelCount], second = PlayerLabel[i][pLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

					for(new x = 10; x > 0; --x)
					{
					    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
					    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     			}
					new str[45];
	     			switch(PlayerLabel[i][pLabelType])
	     			{
						case PLT_TYPE_KNOCKOUT: format(str, sizeof(str), "(( %s ))\nการช่วยเหลือ", labelstring);
					}

			        UpdateDynamic3DTextLabelText(PlayerLabel[i][pLabel], COLOR_GREEN2, str);

					if(PlayerLabel[i][pLabelCount] >= PlayerLabel[i][pLabelTime]) {

						new targetid = playerData[i][pHelpup];

			     		switch(PlayerLabel[i][pLabelType])
			     		{
							case PLT_TYPE_KNOCKOUT:
							{
								ResetPlayer(targetid);
								ResetDamages(targetid);
								knotime[targetid]=0;
								isKNOmode{targetid}=false;
								ClearAnimations(targetid);

								SetPlayerHealth(targetid, 50);

								SendClientMessage(targetid, COLOR_GREEN2, "คุณได้ถูกทำการช่วยเหลือ .. จากการหมดสติเรียบร้อยแล้ว");
							}
						}

						playerData[i][pHelpup] = INVALID_PLAYER_ID;

						PlayerLabel[i][pLabelCount] = 0;
						PlayerLabel[i][pLabelTime] = 0;
						PlayerLabel[i][pLabelType] = 0;

						DestroyDynamic3DTextLabel(PlayerLabel[i][pLabel]);
					}
				}
			}
		}
	}
}

/*task PlayerTimerSAMP[1000](playerid) 
{
	foreach(new i : Player)
	{
		if(!isDeathmode{i} && isInjuredmode{i})
		{
			if(deathtime[i] > 0) deathtime[i]--;
				
			if(deathtime[i] <= 0 && isInjuredmode{i})
			{
				SetPlayerChatBubble(i, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);
				SendClientMessage(i, COLOR_YELLOW, "-> คุณตายแล้วในขณะนี้ คุณจำเป็นต้องรอ 60 วินาทีและหลังจากนั้นคุณถึงจะสามารถ /respawnme");
				
				isDeathmode{i} = true;
				deathtime[i] = 60;
				
				if (!IsPlayerInAnyVehicle(i)) ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}
		}
		else if(isKNOmode{i})
		{
			if(knotime[i] > 0) knotime[i]--;

			SetPlayerHealthEx(i, 25.0);

			if (!IsPlayerInAnyVehicle(i)) ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
		}
		else if(isDeathmode{i})
		{
			SetPlayerChatBubble(i, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);
			
			if(deathtime[i] > 0) deathtime[i]--;
				
			if(deathtime[i] <= 0 && isInjuredmode{i})
			{
				SendClientMessage(i, COLOR_YELLOW, "-> เวลาตายของคุณหมดลงแล้ว คุณสามารถ /respawnme ได้ในขณะนี้");
				isInjuredmode{i} = false;
			}
		}
	}
}*/

/*forward ServerVehicleTimer();
public ServerVehicleTimer() {*/
task ServerVehicleTimer[120000]() 
{
	for(new i=0;i!=MAX_VEHICLES;i++) if(IsValidVehicle(i))
	{
		/*new Float:hp=FLOAT_NAN;
		GetVehicleHealth(i, hp);
		
		if(hp < 250.0) {
			SetVehicleHealthEx(i, 250.0);
		}*/

		/*if(IsEngineVehicle(i) && GetEngineStatus(i) && CoreVehicles[i][vehFuel]) {
			CoreVehicles[i][vehFuel] -= GetVehicleConsumptionPerSecond(i);
			if (CoreVehicles[i][vehFuel] < 0.0) {
				CoreVehicles[i][vehFuel] = 0.0;
			}
		}*/

		if(CoreVehicles[i][vbreaktime])
		{
		    CoreVehicles[i][vbreaktime]--;
		    if(CoreVehicles[i][vbreakdelay]) CoreVehicles[i][vbreakdelay]--;
			if(CoreVehicles[i][vbreaktime] <= 0)
			{
			    CoreVehicles[i][vbreakin] = 0;
			    CoreVehicles[i][vbreaktime] = 0;

				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, engine, lights, 0, doors, bonnet, boot, 0);
			}
		}
		if(CoreVehicles[i][vehicleIsCargoLoad])
		{
		    new industryid = CoreVehicles[i][vehicleCargoStorage];
			if ((!CoreVehicles[i][vehicleCargoType] && IsVehicleRangeOfPoint(i, 20.0, StorageData[industryid][in_posx], StorageData[industryid][in_posy], StorageData[industryid][in_posz])) || (CoreVehicles[i][vehicleCargoType] && IsVehicleRangeOfPoint(i, 20.0, BizInfo[industryid][bEntranceX], BizInfo[industryid][bEntranceY], BizInfo[industryid][bEntranceZ])))
		    {
		    	new playerid = CoreVehicles[i][vehicleCargoPlayer];
          		if(IsPlayerConnected(playerid)) {
				    CoreVehicles[i][vehicleCargoTime]--;
				    if(CoreVehicles[i][vehicleCargoTime] < 1)
				    {
				        if(!CoreVehicles[i][vehicleCargoAction]) // Buy
				        {

				            CoreVehicles[i][vehicleCrate][StorageData[industryid][in_item]] += CoreVehicles[i][vehicleIsCargoLoad];

						    if(playerid != INVALID_PLAYER_ID) {
								SendClientMessage(playerid, COLOR_WHITE, "ขนบรรทุกสินค้าสำเร็จ");
						   	}
					   	}
					   	else
					   	{
							if(CoreVehicles[i][vehicleCargoType]) {

								BizInfo[industryid][bProducts] += CoreVehicles[i][vehicleIsCargoLoad] * GetProductPerCargo(BizInfo[industryid][bType]);
								playerData[playerid][pCash]+=BizInfo[industryid][bPriceProd] * CoreVehicles[i][vehicleIsCargoLoad];
								BizInfo[industryid][bTill]-=BizInfo[industryid][bPriceProd] * CoreVehicles[i][vehicleIsCargoLoad];

								new cargotype = GetProductCargo(BizInfo[industryid][bType]);
						   	    CoreVehicles[i][vehicleCrate][cargotype] -= CoreVehicles[i][vehicleIsCargoLoad];

							    if(playerid != INVALID_PLAYER_ID) {
									SendClientMessage(playerid, COLOR_WHITE, "ขนถ่ายสินค้าสำเร็จ");
							   	}

							}
							else {
						   	    playerData[playerid][pCash] += StorageData[industryid][in_price] * CoreVehicles[i][vehicleIsCargoLoad];
						   	    CoreVehicles[i][vehicleCrate][StorageData[industryid][in_item]] = 0;

							    if(playerid != INVALID_PLAYER_ID) {
									SendClientMessage(playerid, COLOR_WHITE, "ขนถ่ายสินค้าสำเร็จ");
							   	}
							}
					   	}

					   	CoreVehicles[i][vehicleCargoAction] = 0;
					   	CoreVehicles[i][vehicleIsCargoLoad] = 0;
					   	CoreVehicles[i][vehicleCargoStorage] = 0;
					   	CoreVehicles[i][vehicleCargoPlayer] = 0;
	                    CoreVehicles[i][vehicleCargoTime] = 0;
				    }
				    else
				    {
						new str[70];
					    format(str, sizeof(str), "~r~Cargo is being (un)loaded,~n~~b~Please wait...~n~(%d Seconds left)", CoreVehicles[i][vehicleCargoTime]);
						GameTextForPlayer(playerid, str, 1000, 3);
				    }
			    }
			    else
			    {
					CoreVehicles[i][vehicleCargoAction] = 0;
					CoreVehicles[i][vehicleIsCargoLoad] = 0;
					CoreVehicles[i][vehicleCargoStorage] = 0;
					CoreVehicles[i][vehicleCargoPlayer] = 0;
		           	CoreVehicles[i][vehicleCargoTime] = 0;
			    }
		    }
		}
		

		if(CoreVehicles[i][startup_delay] > 0 && CoreVehicles[i][startup_delay_sender] != INVALID_PLAYER_ID)
		{
			CoreVehicles[i][startup_delay] -= 5;
			if(CoreVehicles[i][startup_delay] <= 0 && GetVehicleDriver(i) == CoreVehicles[i][startup_delay_sender])
			{
				if(random(9) < CoreVehicles[i][startup_delay_random]) {
					GameTextForPlayer(CoreVehicles[i][startup_delay_sender], "~r~Engine Refuse", 2000, 4);
				}
				else
				{
					SetEngineStatus(i, true);
					GameTextForPlayer(CoreVehicles[i][startup_delay_sender], "~g~Engine On", 2000, 4);
					SendNearbyMessage(CoreVehicles[i][startup_delay_sender], 30.0, COLOR_PURPLE, "** %s เริ่มเครื่องยนต์ของ %s", ReturnRealName(CoreVehicles[i][startup_delay_sender]), g_arrVehicleNames[GetVehicleModel(i) - 400]);
				}

				CoreVehicles[i][startup_delay_sender] = INVALID_PLAYER_ID;
			}
			else if(CoreVehicles[i][startup_delay] <= 0) { CoreVehicles[i][startup_delay_sender] = INVALID_PLAYER_ID; }

		}

		if(VehicleLabel[i][vLabelTime])
		{
			
		    VehicleLabel[i][vLabelCount]++;

			switch(VehicleLabel[i][vLabelType])
			{
			    case VLT_TYPE_TOWING: {
				    new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

					for(new x = 10; x > 0; --x)
					{

					    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
					    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
     				}
					new str[36];
					format(str, sizeof(str), "(( %s ))\nกำลังลากยานพาหนะ", labelstring);
		            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
		            //printf(str);

				    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

						new
							engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
						/*if(!IsABicycle(i)) SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
			            else SetVehicleParamsEx(i, 1, lights, alarm, 0, bonnet, boot, objective);*/

			            new carid = INVALID_PLAYER_ID;
						if(CoreVehicles[i][vOwnerID] != INVALID_PLAYER_ID) {
						    carid = playerData[CoreVehicles[i][vOwnerID]][pPCarkey];
						}
						else {
						    carid = Car_GetID(i);
						}

						SaveVehicleDamage(i);
						SetVehicleToRespawn(i);
						LinkVehicleToInterior(i, CarData[carid][carInt]);
						SetVehicleVirtualWorld(i, CarData[carid][carWorld]);

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;

				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					}

				}
				case VLT_TYPE_REFILL: {
				    new bool:dealership, id = -1;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 1)
					{
						if(IsVehicleRangeOfPoint(i, 20, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
						    id = x;
							dealership = true;
							break;
						}
					}

					if(id != -1) {
						if (dealership)
						{
							new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

							for(new x = 10; x > 0; --x)
							{

								if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
								else format(labelstring, sizeof(labelstring), "%s-", labelstring);
							}
							new str[36];
							format(str, sizeof(str), "(( %s ))\nการเติมเชื้อเพลิง", labelstring);
							UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
							//printf(str);

							if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

								new targetid = CoreVehicles[i][vOwnerID];
								new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(i));
								new Float:fueladd = maxfuel - CoreVehicles[i][vehFuel];
								new uprice = floatround(fueladd*float(BizInfo[id][bPriceProducts][0]), floatround_ceil);
								
								SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

								if(playerData[targetid][pCash] >= uprice) {
									playerData[targetid][pCash] -= uprice;
									CoreVehicles[i][vehFuel]=GetVehicleDataFuel(GetVehicleModel(i));

									format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[targetid][pCash], playerData[targetid][pID]);
									mysql_query(dbCon, szQuery);
								}

								VehicleLabel[i][vLabelCount] = 0;
								VehicleLabel[i][vLabelTime] = 0;
								VehicleLabel[i][vLabelType] = 0;

								DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

							}
						}
						else {

							new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(i));
							new Float:fueladd = maxfuel - CoreVehicles[i][vehFuel];
							BizInfo[id][bProducts]+=floatround(fueladd, floatround_ceil);
							
							VehicleLabel[i][vLabelCount] = 0;
							VehicleLabel[i][vLabelTime] = 0;
							VehicleLabel[i][vLabelType] = 0;
							DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

							SetVehicleLabel(i, VLT_TYPE_OPERAOUTOFRANG, 5);
						}
					}
				}
			    case VLT_TYPE_ARMOUR: {

				    new bool:dealership;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
					    new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{

						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}
						new str[36];
						format(str, sizeof(str), "(( %s ))\nกำลังอัปเกรดเกราะ", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
			            //printf(str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							new targetid = CoreVehicles[i][vOwnerID];
							new uplevel = CoreVehicles[i][vUpgradeID];
		                   	new vid = playerData[targetid][pPCarkey];
							new uprice = uplevel*GetVehicleDataArmourCost(CarData[vid][carModel]);

							SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

							if(playerData[targetid][pCash] >= uprice) {
								playerData[targetid][pCash] -= uprice;

		                        CarData[vid][carArmour]+=float(uplevel);

								SetVehicleHealthEx(i, CoreVehicles[i][vehHealth] + float(uplevel));

		                        format(str, sizeof(str), "Armour added: %d~n~Armour will result in a more durable vehicle~n~and aid protection to the occupants", uplevel);
		                        ShowPlayerFooter(targetid, str, 10000);

		                        Car_SaveID(vid);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[targetid][pCash], playerData[targetid][pID]);
								mysql_query(dbCon, szQuery);
							}

					        VehicleLabel[i][vLabelCount] = 0;
					        VehicleLabel[i][vLabelTime] = 0;
					        VehicleLabel[i][vLabelType] = 0;

					        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_PERMITFACTION, VLT_TYPE_LOCK, VLT_TYPE_OPERAFAILED, VLT_TYPE_BREAKIN, VLT_TYPE_OPERAOUTOFRANG:
				{
				    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime])
				    {
				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;

		        		DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
				    }
				}
		        case VLT_TYPE_UPGRADELOCK, VLT_TYPE_UPGRADEALARM, VLT_TYPE_UPGRADEIMMOB, VLT_TYPE_UPGRADEINSURANCE, VLT_TYPE_UPGRADEBATTERY, VLT_TYPE_UPGRADEENGINE: {

					new bool:dealership;

					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
						new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}
						new str[45];
	     				switch(VehicleLabel[i][vLabelType])
	     				{
							case VLT_TYPE_UPGRADELOCK: format(str, sizeof(str), "(( %s ))\nการอัปเกรดล็อก", labelstring);
							case VLT_TYPE_UPGRADEIMMOB: format(str, sizeof(str), "(( %s ))\nการอัปเกรดอิมโมบิไลเซอร์", labelstring);
							case VLT_TYPE_UPGRADEALARM: format(str, sizeof(str), "(( %s ))\nการอัปเกรดสัญญาณเตือนภัย", labelstring);
							case VLT_TYPE_UPGRADEINSURANCE: format(str, sizeof(str), "(( %s ))\nการอัปเกรดประกัน", labelstring);
							case VLT_TYPE_UPGRADEBATTERY: format(str, sizeof(str), "(( %s ))\nการเปลี่ยนแบตเตอรี่", labelstring);
							case VLT_TYPE_UPGRADEENGINE: format(str, sizeof(str), "(( %s ))\nการเปลี่ยนเครื่องยนต์", labelstring);
						}
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

							new targetid = CoreVehicles[i][vOwnerID];
							new uplevel = CoreVehicles[i][vUpgradeID];
                            new vid = playerData[targetid][pPCarkey];

                            if(vid != 9999) {
			     				switch(VehicleLabel[i][vLabelType])
			     				{
									case VLT_TYPE_UPGRADELOCK:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeLock[uplevel-1][u_rate]) + VehicleUpgradeLock[uplevel-1][u_price];
                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carLock] = uplevel;
					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~g~LOCK Level 1~n~+~w~500 second wait time protection against prying break-in method.~n~~g~+~w~Stronger armor- better defense against physical attack breaching. -Fist & melee.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~g~LOCK Level 2~n~+~w~750 second wait time protection against prying break-in method.~n~~g~+~w~Special armor- better defense x2 against melee attack breaching.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~g~LOCK Level 3~n~+~w~750 second wait time protection against prying break-in method.~n~~g~+~w~Special armor- better defense x2 against melee attack breaching.~n~~g~+~w~Special armor protection blocks physical attack breaching. -Fist", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~g~LOCK Level 4~n~+~w~1,250 second wait time protection against prying break-in method.~n~~g~+~w~Special armor protection blocks all types of physical attack breaching.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEIMMOB:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeImmob[uplevel-1][u_rate]) + VehicleUpgradeImmob[uplevel-1][u_price];
                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carImmob] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~y~IMMOBILSER Level 1~n~+~w~The Engine Immobiliser will help prevent your ~n~vehicle from running without an authorized key.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~y~IMMOBILSER Level 2~n~+~w~The Engine Immobiliser will help prevent your ~n~vehicle from running without an authorized key.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~y~IMMOBILSER Level 3~n~+~w~The Engine Immobiliser will help prevent your ~n~vehicle from running without an authorized key.", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~y~IMMOBILSER Level 4~n~+~w~The Engine Immobiliser will help prevent your ~n~vehicle from running without an authorized key.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEALARM:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeAlarm[uplevel-1][u_rate]) + VehicleUpgradeAlarm[uplevel-1][u_price];

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carAlarm] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~r~ALARM Level 1~n~+~w~Loud vehicle alarm.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~r~ALARM Level 2~n~+~w~Loud vehicle alarm.~n~~r~+~w~Vehicle alerts the owner of a possible breach.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~r~ALARM Level 3~n~+~w~Loud vehicle alarm.~n~~r~+~w~Vehicle alerts the owner of a possible breach.~n~~r~+~w~Vehicle alerts the local police department of a possible breach.", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~r~ALARM Level 4~n~+~w~Loud vehicle alarm.~n~~r~+~w~Vehicle alerts the owner of a possible breach.~n~~r~+~w~Vehicle alerts the local police department of a possible breach.~n~~r~+~w~Vehicle blip will appear on the law enforcement's radar.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEINSURANCE:
									{
										new uprice = (IsABike(i)) ? (1000) : (2500) * uplevel;

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carInsurance] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~b~INSURANCE Level 1~n~+~w~Vehicle will always respawn with its max health.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~b~INSURANCE Level 2~n~+~w~Vehicle will always respawn with its max health.~n~~b~+~w~Protection against cosmetic vehicle damage. Vehicle will re-spawn good as new.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~b~INSURANCE Level 3~n~+~w~Vehicle will always respawn with its max health.~n~~b~+~w~Protection against cosmetic vehicle damage. Vehicle will re-spawn good as new.~n~~b~+~w~Vehicle Edittion coverage. We got your fancy layout and XM tunes covered!", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEBATTERY:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / 2.48) + floatround(VehicleData[CarData[vid][carModel] - 400][c_battery] * 13.0);

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carBatteryL] = VehicleData[CarData[vid][carModel] - 400][c_battery];

					                     	ShowPlayerFooter(targetid, "~w~BATTERY REPLACED!", 10000);
									   	}
									}
									case VLT_TYPE_UPGRADEENGINE: {
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / 1.72) + floatround(VehicleData[CarData[vid][carModel] - 400][c_engine] * 13.0);

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ %s", FormatNumber(uprice));

										if(playerData[targetid][pCash] >= uprice) {
					                     	playerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carEngineL] = VehicleData[CarData[vid][carModel] - 400][c_engine];

					                     	ShowPlayerFooter(targetid, "~w~ENGINE REPLACED!", 10000);
									   	}
									}
								}
								Car_SaveID(vid);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[targetid][pCash], playerData[targetid][pID]);
								mysql_query(dbCon, szQuery);
							}
							CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;
							CoreVehicles[i][vUpgradeID] = 0;

							VehicleLabel[i][vLabelCount] = 0;
							VehicleLabel[i][vLabelTime] = 0;
							VehicleLabel[i][vLabelType] = 0;

							DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

							/*if(playerData[targetid][pCash] >= 100)

								new vid = playerData[targetid][pPCarkey];
								if(vid != 9999)
								{
									new plate[8];
									format(plate, 8, "%s", RandomVehiclePlate());
									mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
									mysql_tquery(dbCon, str, "RegisterPlates", "iis", targetid, vid, plate);


		                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

							        VehicleLabel[i][vLabelCount] = 0;
							        VehicleLabel[i][vLabelTime] = 0;
							        VehicleLabel[i][vLabelType] = 0;

							        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
						        }
						   	}
						   	else SendClientMessage(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ $100");*/
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_REGISTER: {

				    new bool:dealership;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
						new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}
						new str[41];
						format(str, sizeof(str), "(( %s ))\nกำลังลงทะเบียนยานพาหนะ", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							// ลงทะเบียน
							new targetid = CoreVehicles[i][vOwnerID];

							if(playerData[targetid][pCash] >= 100)
							{
	                            SendClientMessage(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ $100");


								new vid = playerData[targetid][pPCarkey];
								if(vid != 9999)
								{
									new Float: vPos[4];

									GetVehiclePos(CarData[vid][carVehicle], vPos[0], vPos[1], vPos[2]);
									GetVehicleZAngle(CarData[vid][carVehicle], vPos[3]);

									CarData[vid][carPlateInvisible]=false;	
									SetVehicleNumberPlate(CarData[vid][carVehicle], CarData[vid][carPlate]);
									SaveVehicleDamage(CarData[vid][carVehicle]);
									SetVehicleToRespawn(CarData[vid][carVehicle]);
									SetVehicleDamage(CarData[vid][carVehicle]);
									SetVehiclePos(CarData[vid][carVehicle], vPos[0], vPos[1], vPos[2]);
									SetVehicleZAngle(CarData[vid][carVehicle], vPos[3]);
									if(GetVehicleDriver(CarData[vid][carVehicle]) != INVALID_PLAYER_ID) PutPlayerInVehicle(targetid, CarData[vid][carVehicle], 0);
									
									new plate_text[40];
									format(plate_text, sizeof(plate_text), "Your plate has been set~n~~y~%s.", CarData[vid][carPlate]);
									ShowPlayerFooter(targetid, plate_text);
									
                                    Car_SaveID(vid);

                                    playerData[targetid][pCash] -= 100;

									format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[targetid][pCash], playerData[targetid][pID]);
									mysql_query(dbCon, szQuery);

		                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

							        VehicleLabel[i][vLabelCount] = 0;
							        VehicleLabel[i][vLabelTime] = 0;
							        VehicleLabel[i][vLabelType] = 0;

							        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
						        }
						   	}
						   	else SendClientMessage(targetid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ $100");
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_UNREGISTER: {

					if(IsVehicleRangeOfPoint(i, 10, 2520.3499,-1486.5232,23.9993)) // Black Market
					{
					    new labelstring[11], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}
						new str[34];
						format(str, sizeof(str), "(( %s ))\nกำลังถอดทะเบียน", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							// ถอดสำเร็จ

							new targetid = CoreVehicles[i][vOwnerID];
							new vid = playerData[targetid][pPCarkey];
							if(vid != 9999)
							{
								new Float: vPos[4]; // x, y, z + z angle

							    GetVehiclePos(i, vPos[0], vPos[1], vPos[2]);
							    GetVehicleZAngle(i, vPos[3]);

								//format(CarData[vid][carPlate], 32, "_");
								CarData[vid][carPlateInvisible] = true;
						        SetVehicleNumberPlate(i, "_");
						        SaveVehicleDamage(i);
						        SetVehicleToRespawn(i);
						        SetVehicleDamage(i);

								SetVehiclePos(i, vPos[0], vPos[1], vPos[2]);
								SetVehicleZAngle(i, vPos[3]);

						        if(GetVehicleDriver(i) != INVALID_PLAYER_ID) PutPlayerInVehicle(targetid, i, 0);
						        Car_SaveID(vid);

								ShowPlayerFooter(targetid, "~w~Your plate has been ~y~removed~n~Keep in mind It's illegal, don't let the cops notice.");

	                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

						        VehicleLabel[i][vLabelCount] = 0;
						        VehicleLabel[i][vLabelTime] = 0;
						        VehicleLabel[i][vLabelType] = 0;

						        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
					        }
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
			}
			//printf("i %d %d/%d", i, VehicleLabel[i][vLabelCount], VehicleLabel[i][vLabelTime]);
		}
		if(IsATaxi(i))
		{
			new driver=INVALID_PLAYER_ID;
			if((driver=GetVehicleDriver(i)) != INVALID_PLAYER_ID)
			{
				if(TaxiDuty{driver} && TaxiStart{driver} && CountVehiclePlayers(i) > 0)
				{
					new str[24];
					format(str, sizeof(str), "~y~TAXIMETER: $%d", TaxiMade[driver]);
					GameTextForPlayer(driver, str, 1000, 6);
		
					foreach(new p : Player)
					{
						if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(p) == GetPlayerVehicleID(driver))
						{
							format(str, sizeof(str), "~y~TAXIMETER: $%d", TaxiMoney[p]);
							GameTextForPlayer(p, str, 1000, 6);
							if(TaxiMoney[p] + TaxiFare{driver} < playerData[p][pCash]) {
								TaxiMoney[p] += TaxiFare{driver};
								TaxiMade[driver] += TaxiFare{driver};
							}
							else {
								SendClientMessageEx(driver, COLOR_YELLOW, "%s มีเงินไม่พอที่จะจ่ายค่าโดยสาร", ReturnRealName(p));
								SendClientMessage(p, COLOR_YELLOW, "คุณมีเงินไม่พอที่จะจ่ายค่าแท็กซี่");
								RemovePlayerFromVehicle(p);
							}
						}
					}
				}
			}
		}
	}
}

CountVehiclePlayers(vehicle)
{
	new count;
	foreach(new i : Player) if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle && GetPlayerState(i) != PLAYER_STATE_DRIVER) count++;
	return count;
}

CMD:gate(playerid) {

	if(GetFactionType(playerid) == FACTION_TYPE_SADOC) {
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 268.6396,1849.0005,17.6406)) {
			if(!sacf_imOpenned) {
				MoveDynamicObject(sacf_im, 268.26059, 1848.28589, 11.0, 2.5, 0.00000, 0.00000, 0.00000);
				sacf_imOpenned = true;
			}
			sacf_imTimer=10;
		}
	}
	return 1;
}

CMD:cell(playerid) {

	if(GetFactionType(playerid) == FACTION_TYPE_SADOC && (playerData[playerid][pLocal] == 201 || playerData[playerid][pLocal] == 202 || playerData[playerid][pLocal] == 203)) {

        for(new x=0;x!=20;x++) {
        
            new deptid = playerData[playerid][pLocal] - 201;
			new Float:objX, Float:objY, Float:objZ, Float:objRX, Float:objRY, Float:objRZ;
			GetDynamicObjectPos(PrisonDepartment[deptid][pCell][x], objX, objY, objZ);
			GetDynamicObjectRot(PrisonDepartment[deptid][pCell][x], objRX, objRY, objRZ);
			
			if(IsPlayerInRangeOfPoint(playerid, 3.0, objX, objY, objZ)) {
				
				if(PrisonDepartment[deptid][pStatus][x]) {
					MoveDynamicObject(PrisonDepartment[deptid][pCell][x], objX + (objRZ == 180.0 ? -1.5 :  1.5 ), objY, objZ, 2.5, objRX, objRY, objRZ);
					PrisonDepartment[deptid][pStatus][x] = false;
					
					new tmp_prisoner = PrisonDepartment[deptid][pPrisoner][x];

					if(tmp_prisoner != INVALID_PLAYER_ID) {
					    SendClientMessageEx(tmp_prisoner, COLOR_LIGHTRED, "PRISON: ห้องขัง %s1%02d ของคุณถูกล็อก", deptid == 0 ? ("A") : deptid == 1 ? ("B") : ("C"), playerData[tmp_prisoner][pPrisonCell]);
					}
					
					tmp_prisoner = PrisonDepartment[deptid][pPrisoner2][x];
					if(tmp_prisoner != INVALID_PLAYER_ID) {
					    SendClientMessageEx(tmp_prisoner, COLOR_LIGHTRED, "PRISON: ห้องขัง %s2%02d ของคุณถูกล็อก", deptid == 0 ? ("A") : deptid == 1 ? ("B") : ("C"), playerData[tmp_prisoner][pPrisonCell]);
					}
				}
				else {
					MoveDynamicObject(PrisonDepartment[deptid][pCell][x], objX + (objRZ == 180.0 ? 1.5 :  -1.5 ), objY, objZ, 2.5, objRX, objRY, objRZ);
					PrisonDepartment[deptid][pStatus][x] = true;

					new tmp_prisoner = PrisonDepartment[deptid][pPrisoner][x];

					if(tmp_prisoner != INVALID_PLAYER_ID) {
					    SendClientMessageEx(tmp_prisoner, COLOR_LIGHTRED, "PRISON: ห้องขัง %s1%02d ของคุณถูกปลดล็อก", deptid == 0 ? ("A") : deptid == 1 ? ("B") : ("C"), playerData[tmp_prisoner][pPrisonCell]);
					}

					tmp_prisoner = PrisonDepartment[deptid][pPrisoner2][x];
					if(tmp_prisoner != INVALID_PLAYER_ID) {
					    SendClientMessageEx(tmp_prisoner, COLOR_LIGHTRED, "PRISON: ห้องขัง %s2%02d ของคุณถูกปลดล็อก", deptid == 0 ? ("A") : deptid == 1 ? ("B") : ("C"), playerData[tmp_prisoner][pPrisonCell]);
					}
				}

			    break;
			}
		}
	}
	return 1;
}

CMD:tognames(playerid, params[])
{
	switch(ShowNametags[playerid]) {
		case 0: {
			foreach(new i : Player) { 
				ShowPlayerNameTagForPlayer(playerid, i, 0); 
			}
			ShowNametags[playerid] = 1;
			SendClientMessage(playerid, COLOR_WHITE, "คุณได้ปิดการใช้งาน Nametags บนหัวของผู้เล่น");
			return 1;
		}
		case 1: {
			foreach(new i : Player) { 
				ShowPlayerNameTagForPlayer(playerid, i, 1); 
			}	
			ShowNametags[playerid] = 0;
			SendClientMessage(playerid, COLOR_WHITE, "คุณได้เปิดการใช้งาน Nametags บนหัวของผู้เล่น");
			return 1;			
		}
	}
    return 1;
}

CMD:auto_low(playerid, params[])
{
	switch(ActiveLow[playerid]) 
	{
		case 0: 
		{
			ActiveLow[playerid] = 1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้เปิดการใช้งานระบบ Auto-Low สำหรับการพูดคุยบทบาท");
			return 1;
		}
		case 1: 
		{
			ActiveLow[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้ปิดการใช้งานระบบ Auto-Low สำหรับการพูดคุยบทบาท");
			return 1;			
		}
	}
    return 1;
}

/*forward CheckPlayerUNS(playerid);
public CheckPlayerUNS(playerid)*/
ptask CheckPlayerUNS[10000](playerid)
{
	if(h_vid[playerid] != -1)
	{
		new string[128];
		format(string, sizeof(string), "* %s กำลังนั่งอยู่ในยานพาหนะและกำลังทำอะไรบางอย่าง", ReturnRealName(playerid));
		SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 6000);
	}
}

/*forward PlayerTimer(playerid);
public PlayerTimer(playerid) {*/
ptask PlayerTimer[1000](playerid) {

	// Auto Door
	if(bf_get(player_bf[playerid], IS_LOGGED)) {
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 135.4694,1960.6049,19.4666) && (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SADOC || GetFactionType(playerid) == FACTION_TYPE_SASD)) {
			if(!sacf_fdOpenned) {
				MoveDynamicObject(sacf_fdR, 123.36090, 1960.34510, 20.10000, 2.5, 0.00000, 0.00000, 0.00000); 
				MoveDynamicObject(sacf_fdL, 147.2008, 1960.1115, 20.10000, 2.5, 0.00000, 0.00000, 0.00000);
				sacf_fdOpenned = true;
			}
			sacf_fdTimer=2;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 262.6938,1943.1864,17.6406) && GetFactionType(playerid) == FACTION_TYPE_SADOC) {
			if(!sacf_is1Openned) {
				MoveDynamicObject(sacf_is1, 263.15341, 1943.36963, 12.7, 2.5, 0.00000, 0.00000, 90.00000); 
				sacf_is1Openned = true;
			}
			sacf_is1Timer=2;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 288.9087,1799.1699,17.6406) && GetFactionType(playerid) == FACTION_TYPE_SADOC) {
			if(!sacf_is2Openned) {
				MoveDynamicObject(sacf_is2, 288.93246, 1799.27673, 12.7, 2.5, 0.00000, 0.00000, -50.00000); 
				sacf_is2Openned = true;
			}
			sacf_is2Timer=2;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 285.3393,1821.1715,17.6406) && GetFactionType(playerid) == FACTION_TYPE_SADOC) {
			if(!sacf_omOpenned) {
				MoveDynamicObject(sacf_om, 285.46521, 1821.08679, 11.0, 2.5, 0.00000, 0.00000, 90.00000); // Outside Main
				sacf_omOpenned = true;
			}
			sacf_omTimer=2;
		}	
				
		new weaponid = GetPlayerWeapon(playerid);
		if(CurrentHoldingWeapon[playerid] != weaponid) {
			cl_DressHoldWeapon(playerid, weaponid);
			CurrentHoldingWeapon[playerid] = weaponid;
		}

		if(adTick[playerid])
			adTick[playerid]--;

		if(GetFactionType(playerid) == FACTION_TYPE_POLICE) // Check Police
		{
			if(playerData[playerid][pSideJob] != JOB_POLICE)
			{
				playerData[playerid][pSideJob] = JOB_POLICE;
			}
		}

		if(GetFactionType(playerid) == FACTION_TYPE_SASD) // Check Police
		{
			if(playerData[playerid][pSideJob] != JOB_POLICE)
			{
				playerData[playerid][pSideJob] = JOB_POLICE;
			}
		}
				
		if(TazerCount[playerid]) {
			TazerCount[playerid]--;
			if(TazerCount[playerid] <= 0) {
				TazerCount[playerid]=0;
				ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
				bf_off(player_bf[playerid], IS_PLAYER_TAZER);
				TogglePlayerControllable(playerid, true);
			}
		}

		if(!isDeathmode{playerid} && isInjuredmode{playerid})
		{
			if(deathtime[playerid] > 0) deathtime[playerid]--;
				
			if(deathtime[playerid] <= 0 && isInjuredmode{playerid})
			{
				/*if(!IsValidDynamic3DTextLabel(DamageLabel[playerid])) DamageLabel[playerid] = CreateDynamic3DTextLabel("(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 0, 0, 0.8, 10, playerid, INVALID_VEHICLE_ID, 1);
				else UpdateDynamic3DTextLabelText(DamageLabel[playerid], 0xFF6347FF, "(( ผู้เล่นนี้ตายแล้ว ))");*/
				
				SetPlayerChatBubble(playerid, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);
				SendClientMessage(playerid, COLOR_YELLOW, "-> คุณตายแล้วในขณะนี้ คุณจำเป็นต้องรอ 60 วินาทีและหลังจากนั้นคุณถึงจะสามารถ /respawnme");
				
				isDeathmode{playerid} = true;
				deathtime[playerid] = 60;
				
				if (!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}
		}

		else if(isKNOmode{playerid})
		{
			if(knotime[playerid] > 0) knotime[playerid]--;

			SetPlayerHealthEx(playerid, 25.0);

			if (!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
		}

		else if(isDeathmode{playerid})
		{
			SetPlayerChatBubble(playerid, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);
			
			if(deathtime[playerid] > 0) deathtime[playerid]--;
				
			if(deathtime[playerid] <= 0 && isInjuredmode{playerid})
			{
				SendClientMessage(playerid, COLOR_YELLOW, "-> เวลาตายของคุณหมดลงแล้ว คุณสามารถ /respawnme ได้ในขณะนี้");
				isInjuredmode{playerid} = false;
				/*ResetDamages(playerid);
				isInjuredmode{playerid} = 0;
				isDeathmode[playerid] = 0;
				deathtime[playerid] = 0;
				MedicBill[playerid] = 0;
				SpawnPlayer(playerid);*/
			}
		}				
				
		if(AFKTimer[playerid] > 0)
		{
			AFKTimer[playerid]--;
			if(AFKTimer[playerid] <= 0)
			{
				AFKTimer[playerid] = 0;
				AFKCount[playerid]=1;
				IsAFK{playerid} = true;
			}
			else IsAFK{playerid} = false;
		}
		else {
			AFKCount[playerid]++;
		}
				
		if(fish_timer[playerid]) {
			fish_timer[playerid]--;
		}
		if (isInjuredmode{playerid} || isKNOmode{playerid} && GetPlayerAnimationIndex(playerid) != 1701 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !playerData[playerid][pJailed]) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1); //หลังส่งขึ้นรถโรงพยาบาลต้องแก้ไข
		if(LegDelay[playerid] > 0) LegDelay[playerid]--;
		if(h_times[playerid] > 0)
		{
			new str[145];
			format(str, sizeof(str), "~y~/(uns)cramber ~w~<unscrambled word> ~r~to unscramble the word.~n~'~w~%s~r~'.~n~You have ~w~%d ~r~seconds left to finish.", h_word[playerid], h_times[playerid]);
			ShowPlayerFooter(playerid, str, 8000);
				
			h_times[playerid]--;
			if(h_times[playerid] <= 0)
			{
				// TAZER
				new
					Float:x,
					Float:y,
					Float:z;
				
				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+2);
				ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 1, 1, 0, 1);
				bf_on(player_bf[playerid], IS_PLAYER_TAZER);
				TogglePlayerControllable(playerid, false);
				TazerCount[playerid]=10;
				SetPlayerDrunkLevel(playerid, 4000);
				SetTimerEx("SetUnTazed", 10000, 0, "i", playerid);
				GameTextForPlayer(playerid, "YOU ARE TAZER", 5000, 5);
				ShowPlayerFooter(playerid, "~r~You've failed too many words.");
				
				h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_failed[playerid]=0;
				h_word[playerid][0]='\0';
			}
		}
				
		//Checking jail time
		if(playerData[playerid][pJailTime] > 1 && playerData[playerid][pJailed] == 1)
		{
			playerData[playerid][pJailTime]--;
			//format(str,sizeof(str),"~p~Time remaining: ~w~%d second",playerData[playerid][pJailTime]);
			//PlayerTextDrawSetString(playerid, jail_timeleft[playerid], str);
			//PlayerTextDrawShow(playerid, jail_timeleft[playerid]);
		}
		else if(playerData[playerid][pJailTime] == 1 && playerData[playerid][pJailed] == 1)
		{
			playerData[playerid][pJailTime] = 0;
				
			if(!playerData[playerid][pJailTime2]) playerData[playerid][pJailed] = 0;
			else playerData[playerid][pJailed] = 2;
				
			SetPlayerSpawn(playerid);
			GameTextForPlayer(playerid,"~g~You were released",5000,1);
			//PlayerTextDrawHide(playerid, jail_timeleft[playerid]);
		}
				
		//Checking jail time 2
		if(playerData[playerid][pJailTime2] > 1 && playerData[playerid][pJailed] == 2)
		{
			playerData[playerid][pJailTime2]--;
			//format(str,sizeof(str),"~p~Time remaining: ~w~%d second",playerData[playerid][pJailTime2]);
			//PlayerTextDrawSetString(playerid, jail_timeleft[playerid], str);
			//PlayerTextDrawShow(playerid, jail_timeleft[playerid]);
		}
		else if(playerData[playerid][pJailTime2] == 1 && playerData[playerid][pJailed] == 2)
		{
				
			playerData[playerid][pJailTime2] = 0;
			playerData[playerid][pJailed] = 0;
			SetPlayerSpawn(playerid);
			GameTextForPlayer(playerid,"~g~You were released",5000,1);
			//PlayerTextDrawHide(playerid, jail_timeleft[playerid]);
		}
				
		if(playerData[playerid][pPrisonTime] > 1 && playerData[playerid][pPrisonDept] < 3)
		{
			playerData[playerid][pPrisonTime]--;
		}
		else if(playerData[playerid][pPrisonTime] == 1 && playerData[playerid][pPrisonDept] < 3)
		{
			playerData[playerid][pPrisonCell] = -1;
			playerData[playerid][pPrisonTime] = 0;
			playerData[playerid][pPrisonDept] = 0;
			SetPlayerSpawn(playerid);
			GameTextForPlayer(playerid,"~g~You were released",5000,1);
		}
				
		if(playerData[playerid][pIsolateTime] > 1 && playerData[playerid][pPrisonDept] > 2)
		{
			playerData[playerid][pIsolateTime]--;
		}
		else if(playerData[playerid][pIsolateTime] == 1 && playerData[playerid][pPrisonDept] > 2)
		{
			playerData[playerid][pPrisonCell] = -1;
			
			if(!playerData[playerid][pPrisonTime]) playerData[playerid][pPrisonDept] = 0;
			else {
				playerData[playerid][pPrisonDept] -= 2;
				AssignToCell(playerid);
			}
			SetPlayerSpawn(playerid);
		}

				
		if(RepairTime{playerid} && serviced[playerid])
		{
			if (!IsPlayerInAnyVehicle(playerid)) {
				
				new Float:tx, Float:ty, Float:tz;
				GetVehiclePos(CarData[serviceTowtruck[playerid]][carVehicle], tx, ty, tz);
				
				if(RepairTime{playerid} <= 1)
				{
					if(CarData[serviceTowtruck[playerid]][carComps]-serviceComp[playerid] < 0) {
				
						ShowPlayerFooter(playerid, "~h~~p~Component is not enough.", 5000);
						
						RemoveWeapon(playerid, 41);
						
						SetPlayerArmedWeapon(playerid, 0);
						
						RepairTime{playerid} = 0;
				
						serviceTowtruck[playerid] = INVALID_VEHICLE_ID;
						serviceCustomer[playerid] = INVALID_VEHICLE_ID;
				
						serviced[playerid]=0;
						serviceComp[playerid]=0;
				
						if(IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) RemovePlayerAttachedObject(playerid, FREESLOT9);
						
						return 1;
					}
				
					switch(serviced[playerid]) {
						case 1: {
							ShowPlayerFooter(playerid, "~h~~p~REPAIRED VEHICLE.");
							SetVehicleHealthEx(serviceCustomer[playerid], GetVehicleDataHealth(GetVehicleModel(serviceCustomer[playerid])));
						}
						case 2: {
							ShowPlayerFooter(playerid, "~h~~p~REPAIRED BODYWORK.");
							SetVehicleDamageStatus(serviceCustomer[playerid], 0, 0, 0, 0);
						}
						case 3: {
				
							ShowPlayerFooter(playerid, "~h~~p~REPLACED THE BATTERY.");
							new cid=-1;
							if((cid = Car_GetID(serviceCustomer[playerid])) != -1) {
								CarData[cid][carBatteryL] = VehicleData[CarData[cid][carModel] - 400][c_battery];
							}
						}
						case 4: {
				
							ShowPlayerFooter(playerid, "~h~~p~REPLACED THE ENGINE.");
							new cid=-1;
							if((cid = Car_GetID(serviceCustomer[playerid])) != -1) {
								CarData[cid][carEngineL] = VehicleData[CarData[cid][carModel] - 400][c_engine];
							}
						}
						case 5: {
							new cid = -1;
							ShowPlayerFooter(playerid, "~h~~p~SUCCESSFULLY SPRAYED.");
							new temp_color1 = GetPVarInt(playerid, "color1");
							new temp_color2 = GetPVarInt(playerid, "color2");
							
							if((cid = Car_GetID(serviceCustomer[playerid])) != -1) {
								CarData[cid][carColor1] = temp_color1;
								CarData[cid][carColor2] = temp_color2;
							}
							else if((cid = Vehicle_GetID(serviceCustomer[playerid])) != -1) {
								vehicleVariables[cid][vVehicleColour][0] = temp_color1;
								vehicleVariables[cid][vVehicleColour][1] = temp_color2;
							}
							ChangeVehicleColor(serviceCustomer[playerid], temp_color1, temp_color2);
							
							DeletePVar(playerid, "color1");
							DeletePVar(playerid, "color2");
						}
					}
					RemoveWeapon(playerid, 41);
					SetPlayerArmedWeapon(playerid, 0);
					
					RepairTime{playerid} = 0;
				
					CarData[serviceTowtruck[playerid]][carComps] -= serviceComp[playerid];
				
					serviceTowtruck[playerid] = INVALID_VEHICLE_ID;
					serviceCustomer[playerid] = INVALID_VEHICLE_ID;
				
					serviced[playerid]=0;
					serviceComp[playerid]=0;
				
					if(IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) RemovePlayerAttachedObject(playerid, FREESLOT9);
				
				}
				else if(IsPlayerInRangeOfPoint(playerid, 8.0, tx, ty, tz))
				{
					//new temp_vehicleid = serviceCustomer[playerid];
					
					if((Firehold[playerid] == serviceCustomer[playerid] || serviced[playerid] == 3 || serviced[playerid] == 4) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
				
						switch(serviced[playerid]) {
							case 1: {
								new fix_str[80];
								format(fix_str, sizeof(fix_str), "~h~~p~REPAIRING VEHICLE.~n~~w~TOWTRUCK HAS ~b~%d~w~ AMOUNTS OF PRODUCT LEFT.", CarData[serviceTowtruck[playerid]][carComps] - (serviceComp[playerid] - RepairTime{playerid}));
								ShowPlayerFooter(playerid, fix_str, -1);
								RepairTime{playerid}--;
							}
							case 2: {
								new fix_str[80];
								format(fix_str, sizeof(fix_str), "~h~~p~REPAIRING BODYWORK.~n~~w~TOWTRUCK HAS ~b~%d~w~ AMOUNTS OF PRODUCT LEFT.", CarData[serviceTowtruck[playerid]][carComps] - (serviceComp[playerid] - RepairTime{playerid}));
								ShowPlayerFooter(playerid, fix_str, -1);
								RepairTime{playerid}--;
							}
							case 3: {
								ShowPlayerFooter(playerid, "~h~~p~PERFORMING MAINTENANCE...~n~~w~((USE YOUR IMAGINATION AND ROLEPLAY.))", -1);
								RepairTime{playerid}-=100;
							}
							case 4: {
								ShowPlayerFooter(playerid, "~h~~p~PERFORMING MAINTENANCE...~n~~w~((USE YOUR IMAGINATION AND ROLEPLAY.))", -1);
								RepairTime{playerid}-=100;
							}
							case 5: {
								new fix_str[80];
								format(fix_str, sizeof(fix_str), "~h~~p~PAINTING THE CAR.~n~~w~~b~%d~w~ AMOUNTS OF PRODUCT LEFT IN THE TRUCK.", CarData[serviceTowtruck[playerid]][carComps] - (serviceComp[playerid] - RepairTime{playerid}));
								ShowPlayerFooter(playerid, fix_str, -1);
								RepairTime{playerid}--;
							}
						}
					}
					if(Firehold[playerid] == INVALID_VEHICLE_ID && serviced[playerid] != 3 && serviced[playerid] != 4) {
						SetPlayerAttachedObject(playerid,FREESLOT9,18693,5,-0.081999,0.239,-1.152,-18.0001,2.1,12.2,0.173998,0.18,0.560998);
					}
					else {
						SetPlayerAttachedObject(playerid,FREESLOT9,18688,5,0,0.533999,-2.756,0,0,0,1.000000,1.000000,1.000000);
					}
				}
				else
				{
					ShowPlayerFooter(playerid, "~h~~p~YOU NEED TO BE NEAR YOUR TOWTRUCK.", -1);
				}
			}
		}
		//Mechanic fixing
				
				
		/* HUD */
				
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
				
			new vehicleid = GetPlayerVehicleID(playerid);
				
			new Keys, ud, lr;
			GetPlayerKeys(playerid,Keys,ud,lr);
				
			if(CoreVehicles[vehicleid][vehicleBadlyDamage]) {
				if(Keys == 8) {
					if(random(100) <= 10) {
						CoreVehicles[vehicleid][vehicleBadlyDamage] = 0;
						GameTextForPlayer(playerid, "~g~Engine On", 2000, 4);
						SetEngineStatus(vehicleid, true);
					}
				}
				if(CoreVehicles[vehicleid][vehicleBadlyDamage] == 1) {
					GameTextForPlayer(playerid, "~r~Engine Refuse", 2000, 4);
				}
				CoreVehicles[vehicleid][vehicleBadlyDamage]--;
				if(CoreVehicles[vehicleid][vehicleBadlyDamage]<0) {
					CoreVehicles[vehicleid][vehicleBadlyDamage]=0;
				}
			}
				
			if(!bf_get(player_bf[playerid], TOGGLE_HUD)) {
				
				new
					Float:kmh_speed,
					raido_str[128];
				
				kmh_speed = GetPlayerSpeed(playerid);
				
				player_vehicle_speed[playerid] = kmh_speed;
				
				new model = GetVehicleModel(vehicleid);
				if(model != 0) {
					if(playerData[playerid][pHUDStyle] == 0) {
						if (IsEngineVehicle(vehicleid)) format(raido_str, sizeof(raido_str), "~b~km/h: ~g~%.0f~n~~b~Fuel: ~g~%d~n~_~n~_", kmh_speed, floatround(floatdiv(CoreVehicles[vehicleid][vehFuel], GetVehicleDataFuel(model))*100, floatround_round));
						else format(raido_str, sizeof(raido_str), "~b~km/h: ~g~%.0f~n~~b~Fuel: ~g~N/A~n~_~n~_", kmh_speed);
						format(raido_str, sizeof(raido_str), "%s~b~Radio info~n~ chan: ~g~%d~n~ ~b~slot: ~g~%d", raido_str, playerData[playerid][pRChannel], playerData[playerid][pRSlot]);
					}
					else if(playerData[playerid][pHUDStyle] == 1) {
						new Float:mph_speed = GetPlayerSpeed(playerid, false);
						if (IsEngineVehicle(vehicleid)) format(raido_str, sizeof(raido_str), "%s~r~ %d %.0f~y~KMH~w~/~y~%.0f~r~MPH", g_arrVehicleNames[model - 400], floatround(floatdiv(CoreVehicles[vehicleid][vehFuel], GetVehicleDataFuel(model))*100, floatround_round), kmh_speed, mph_speed);
						else format(raido_str, sizeof(raido_str), "%s~r~ N/A %.0f~y~KMH~w~/~y~%.0f~r~MPH", g_arrVehicleNames[model - 400], kmh_speed, mph_speed);
						format(raido_str, sizeof(raido_str), "%s~n~~w~Radio Info: ~y~%d~n~~w~Slot: ~y~%d", raido_str, playerData[playerid][pRChannel], playerData[playerid][pRSlot]);
					}
					else if(playerData[playerid][pHUDStyle] == 2) {
						new Float:mph_speed = GetPlayerSpeed(playerid, false);
						if (IsEngineVehicle(vehicleid)) format(raido_str, sizeof(raido_str), "~l~%s~n~~w~%.0f ~l~%.0f ~w~%.0f ~l~%d", g_arrVehicleNames[model - 400], mph_speed, kmh_speed, CoreVehicles[vehicleid][vehHealth], floatround(floatdiv(CoreVehicles[vehicleid][vehFuel], GetVehicleDataFuel(model))*100, floatround_round));
						else format(raido_str, sizeof(raido_str), "~l~%s~n~~w~%.0f ~l~%.0f ~w~%.0f ~l~N/A", g_arrVehicleNames[model - 400], mph_speed, kmh_speed, CoreVehicles[vehicleid][vehHealth]);
					}
					else if(playerData[playerid][pHUDStyle] == 3) {
						format(raido_str, sizeof(raido_str), "~b~Radio info~n~ chan: ~g~%d~n~ ~b~slot: ~g~%d", playerData[playerid][pRChannel], playerData[playerid][pRSlot]);
					}
				}
				
				PlayerTextDrawSetString(playerid, pPT_Radio[playerid], raido_str);
				PlayerTextDrawShow(playerid, pPT_Radio[playerid]);
			}
		}
		else {
			if(!bf_get(player_bf[playerid], TOGGLE_HUD)) {
				if(playerData[playerid][pHUDStyle] == 0 || playerData[playerid][pHUDStyle] == 3) {
					new raido_str[50];
					format(raido_str, sizeof(raido_str), "~b~Radio info~n~ chan: ~g~%d~n~ ~b~slot: ~g~%d", playerData[playerid][pRChannel], playerData[playerid][pRSlot]);
					PlayerTextDrawSetString(playerid, pPT_Radio[playerid], raido_str);
					PlayerTextDrawShow(playerid, pPT_Radio[playerid]);
				}
				else if(playerData[playerid][pHUDStyle] == 1) {
					new raido_str[50];
					format(raido_str, sizeof(raido_str), "_~n~~w~Radio Info: ~y~%d~n~~w~Slot: ~y~%d", playerData[playerid][pRChannel], playerData[playerid][pRSlot]);
					PlayerTextDrawSetString(playerid, pPT_Radio[playerid], raido_str);
					PlayerTextDrawShow(playerid, pPT_Radio[playerid]);
				}
				else PlayerTextDrawHide(playerid, pPT_Radio[playerid]);
			}
			else PlayerTextDrawHide(playerid, pPT_Radio[playerid]);
		}
				
				
		// Vehicle Crash
		if(IsPlayerInAnyVehicle(playerid))
		{
			new
				Float:hp, vehicleid = GetPlayerVehicleID(playerid), vdamage[4]
			;
			
			if(vehicleid != INVALID_VEHICLE_ID) {
			
				GetVehicleHealth(vehicleid, hp);
				
				GetVehicleDamageStatus(vehicleid, vdamage[0], vdamage[1], vdamage[2], vdamage[3]);
				
				//IsVehicleTrunkBroken(vehicleid);
				
				if(hp < CoreVehicles[vehicleid][vehHealth])
				{
					new carid = -1, Float:vehicle_health_loss = CoreVehicles[vehicleid][vehHealth] - hp;
					CoreVehicles[vehicleid][vehHealth] = hp;
					
					if((carid = Car_GetID(vehicleid)) != -1) {
				
						if(CarData[carid][carArmour]) {
				
							SetVehicleDamageStatus(vehicleid, CoreVehicles[vehicleid][vehDamage][0], CoreVehicles[vehicleid][vehDamage][1], CoreVehicles[vehicleid][vehDamage][2], CoreVehicles[vehicleid][vehDamage][3]);
				
							if(CarData[carid][carArmour] >= vehicle_health_loss)
							{
								//SetVehicleHealthEx(vehicleid, vehicle_health_loss + hp);
								CarData[carid][carArmour]-=vehicle_health_loss;
							}
							else
							{
								//SetVehicleHealthEx(vehicleid, hp + vehicle_health_loss - CarData[carid][carArmour]);
								CarData[carid][carArmour]=0;
							}
						}
						/*printf("before crash %.2f", CoreVehicles[vehicleid][vehHealth]);
						printf("current health %.2f and loss %.2f", hp, vehicle_health_loss);*/
				
						switch(hp)
						{
							case 550..649:
							{
								CarData[carid][carEngineL] -= (vehicle_health_loss/125.0);
								if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/150.0);
							}
							case 390..549:
							{
								CarData[carid][carEngineL] -= (vehicle_health_loss/100.0);
								if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/125.0);
							}
							case 250..389:
							{
								CarData[carid][carEngineL] -= (vehicle_health_loss/75.0);
								if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/100.0);
							}
						}
						//if(CarData[carid][carOwner] == playerData[playerid][pID]) SendClientMessageEx(playerid, COLOR_LIGHTRED, "LIFESPAN: Engine Health reduced to "EMBED_WHITE"%.2f{FF6347}. Battery Health reduced to "EMBED_WHITE"%.2f{FF6347}.", CarData[carid][carEngineL], CarData[carid][carBatteryL]);
					}
					
					if(hp < 390.0 && vehicle_health_loss > 15 && CoreVehicles[vehicleid][vehicleBadlyDamage] == 0) {
						SetEngineStatus(vehicleid, false);
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: เครื่องยนต์เสียหายอย่างหนัก");
						SendClientMessage(playerid, COLOR_YELLOW, "ข้อแนะ: กดปุ่ม "EMBED_WHITE"W"EMBED_YELLOW" เพื่อติดเครื่องยนต์");
						SendClientMessage(playerid, COLOR_YELLOW, "ข้อแนะ: คุณมีเวลา "EMBED_WHITE"10"EMBED_YELLOW" วินาที เพื่อติดเครื่องยนต์");
						CoreVehicles[vehicleid][vehicleBadlyDamage] = 10;
						//GameTextForPlayer(playerid, "~r~ENGINE COULDN'T START DUE TO DAMAGE", 4000, 4);
					}
				
					new Float:phploss = floatround((vehicle_health_loss / 100));
				
					if(phploss>0.0) {
						//new Float:php;
						foreach (new x : Player) {
							if(IsPlayerInVehicle(x, vehicleid)) {
								GetPlayerHealth(x, playerData[x][pHealth]);
								SetPlayerHealthEx(x,(playerData[x][pHealth] - phploss));
							}
						}
					}
				
					if(vehicle_health_loss > 5 && GetPVarInt(playerid, "LessonSeconds") != 0 && GetPVarInt(playerid, "LessonStarted") == 1 && GetPVarInt(playerid, "InDriveTest"))
					{
						DeletePVar(playerid, "LessonStarted");
						DeletePVar(playerid, "LessonSeconds");
						DeletePVar(playerid, "InDriveTest");
						SendClientMessage(playerid, COLOR_GREEN, "ยานพาหนะเสียหายการทดสอบจึงล้มเหลว");
				
						DisablePlayerCheckpoint(playerid);
						gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						gPlayerCheckpointValue[playerid]=-1;
						SetVehicleToRespawn(vehicleid);
					}
					//Engine couldn't start due to damage
				}
				
				if(hp < 250.0) {
					SetVehicleHealthEx(vehicleid, 250.0);
				}
				/*if(vdamage[0] < CoreVehicles[vehicleid][vehDamage][0] || vdamage[1] < CoreVehicles[vehicleid][vehDamage][1] || vdamage[2] < CoreVehicles[vehicleid][vehDamage][2] || vdamage[3] < CoreVehicles[vehicleid][vehDamage][3])
				{
					UpdateVehicleDamageStatus(vehicleid, CoreVehicles[vehicleid][vehDamage][0], CoreVehicles[vehicleid][vehDamage][1], CoreVehicles[vehicleid][vehDamage][2], CoreVehicles[vehicleid][vehDamage][3]);
					//OnCheatDetected(playerid, "ซ่อมตัวถังพาหนะ");
				}
				else GetVehicleDamageStatus(vehicleid, CoreVehicles[vehicleid][vehDamage][0], CoreVehicles[vehicleid][vehDamage][1], CoreVehicles[vehicleid][vehDamage][2], CoreVehicles[vehicleid][vehDamage][3]);
				*/
				if(GetPVarInt(playerid, "LessonSeconds") && GetPVarInt(playerid, "LessonStarted") == 1 && GetPVarInt(playerid, "InDriveTest"))
				{
					new str[9];
					format(str, sizeof(str), "~w~%d", GetPVarInt(playerid, "LessonSeconds"));
					GameTextForPlayer(playerid, str, 1200, 3);
				
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 1);
				}
				else if(GetPVarInt(playerid, "LessonStarted") == 1 && GetPVarInt(playerid, "InDriveTest"))
				{
					DeletePVar(playerid, "LessonStarted");
					DeletePVar(playerid, "LessonSeconds");
					DeletePVar(playerid, "InDriveTest");
					SendClientMessage(playerid, COLOR_GREEN, "เวลาหมด.. การทดสอบจึงล้มเหลว");
				
					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
					gPlayerCheckpointValue[playerid]=-1;
					SetVehicleToRespawn(vehicleid);
				}
			}
		}
	}
	return 1;
}

/*forward OtherTimer();
public OtherTimer()
{*/
task OtherTimer[1000]() {
	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;

	new gShipHour, gShipMinute, gShipSecond;
	TimestampToTime(gShipTime + 2400, gShipHour, gShipMinute, gShipSecond);
	if (!gShipDeparture && tmphour == gShipHour && tmpminute == gShipMinute && tmpsecond == gShipSecond) {
		RampsClosed();
	}
	
	TollUpdate();
	
    for(new i=0;i!=MAX_AD_QUEUE;i++) {
		if(AdvertData[i][ad_id]) {
			AdvertData[i][ad_time]--;
			if(AdvertData[i][ad_time] <= 0) {

			    if(AdvertData[i][ad_type]) {
					new str[110];
					if(strlen(AdvertData[i][ad_text]) > 80)
					{
						format(str, sizeof(str), "[Company Advertisement] %.80s ...", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
						format(str, sizeof(str), "[Company Advertisement] ... %s", AdvertData[i][ad_text][80]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
					else
					{
						format(str, sizeof(str), "[Company Advertisement] %s", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
			    }
			    else {
					new str[128];
					if(strlen(AdvertData[i][ad_text]) > 80)
					{
						format(str, sizeof(str), "[Advertisement] %.80s ...", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
						format(str, sizeof(str), "[Advertisement] ... %s [PH: %d]", AdvertData[i][ad_text][80], playerData[AdvertData[i][ad_owner]][pPnumber]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
					else
					{
						format(str, sizeof(str), "[Advertisement] %s [PH: %d]", AdvertData[i][ad_text], playerData[AdvertData[i][ad_owner]][pPnumber]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
			    }
			    AdvertData[i][ad_id]=0;
			    AdvertData[i][ad_time]=0;
			    AdvertData[i][ad_owner]=INVALID_PLAYER_ID;
			}
		}
	}
	
	if(sacf_fdTimer) {
		sacf_fdTimer--;
		if(sacf_fdTimer == 0 && sacf_fdOpenned) {
			MoveDynamicObject(sacf_fdR, 131.29810, 1960.25110, 20.10000, 2.5, 0.00000, 0.00000, 0.00000); 
			MoveDynamicObject(sacf_fdL, 139.28490, 1960.26000, 20.10000, 2.5, 0.00000, 0.00000, 0.00000);
			sacf_fdOpenned = false;
		}
	}
	if(sacf_is1Timer) {
		sacf_is1Timer--;	
		if(sacf_is1Timer == 0 && sacf_is1Openned) {
			MoveDynamicObject(sacf_is1, 263.15341, 1943.36963, 20.53020, 2.5, 0.00000, 0.00000, 90.00000); 
			sacf_is1Openned = false;
		}
	}
	if(sacf_is2Timer) {
		sacf_is2Timer--;	
		if(sacf_is2Timer == 0 && sacf_is2Openned) {
			MoveDynamicObject(sacf_is2, 288.93246, 1799.27673, 20.53020, 2.5, 0.00000, 0.00000, -50.00000); 
			sacf_is2Openned = false;
		}	
	}
	if(sacf_omTimer) {
		sacf_omTimer--;	
		if(sacf_omTimer == 0 && sacf_omOpenned) {
			MoveDynamicObject(sacf_om, 285.46521, 1821.08679, 20.61800, 2.5, 0.00000, 0.00000, 90.00000); // Outside Main
			sacf_omOpenned = false;
		}	
	}
	if(sacf_imTimer) {
		sacf_imTimer--;	
		if(sacf_imTimer == 0 && sacf_imOpenned) {
			MoveDynamicObject(sacf_im, 268.26059, 1848.28589, 20.61800, 2.5, 0.00000, 0.00000, 0.00000); // Inside Main
			sacf_imOpenned = false;
		}	
	}
	return 1;
}

/*forward SpectatorTimer(playerid);
public SpectatorTimer(playerid)
{*/
ptask SpectatorTimer[2000](playerid) {

	if (GetPlayerMoney(playerid) != playerData[playerid][pCash]) {
		ResetPlayerMoney(playerid),GivePlayerMoney(playerid, playerData[playerid][pCash]);
	}
			
	if(playerData[playerid][pSpectating] != INVALID_PLAYER_ID) {
		if(GetPlayerInterior(playerid) != GetPlayerInterior(playerData[playerid][pSpectating])){
			SetPlayerInterior(playerid, GetPlayerInterior(playerData[playerid][pSpectating]));
			PlayerSpectatePlayer(playerid, playerData[playerid][pSpectating]);
		}
		if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(playerData[playerid][pSpectating])){
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(playerData[playerid][pSpectating]));
			PlayerSpectatePlayer(playerid, playerData[playerid][pSpectating]);
		}
		UpdateAdminSpectate(playerid);
	}

	return 1;
}

//forward drugAddictTimer(playerid);
timer drugAddictTimer[70000](playerid)
{
	if(IsPlayerConnected(playerid)) {
		new Float:decrease;
		decrease = playerData[playerid][pDrugAddiction][playerData[playerid][pDrugAddict]-1]/10;
		if(playerData[playerid][pHealth] - decrease > 0) SetPlayerHealthEx(playerid, playerData[playerid][pHealth] - decrease);
		else SetPlayerHealthEx(playerid, 1);
		AddictDrugs[playerid]-=4;
	}
	if(AddictDrugs[playerid] <= 0) {
		stop AddictTimer[playerid];
		AddictTimer[playerid]=Timer:0;
	}
}


/*forward SyncUpTimer();
public SyncUpTimer()
{*/
task SyncUpTimer[60000]() {
	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;

	foreach(new i : Player) {
		if(AddictDrugs[i] != 0 && AddictTimer[i] == Timer:0) {
			AddictTimer[i] = repeat drugAddictTimer[70000](i);
		}
	}
	
	new gShipHour, gShipMinute, gShipSecond;
	TimestampToTime(gShipTime + 2400, gShipHour, gShipMinute, gShipSecond);
	
	//printf("Ship wait for %02d:%02d but now %02d:%02d", gShipHour, gShipMinute, tmphour, tmpminute);
	
	if (!gShipDeparture && tmphour == gShipHour && tmpminute == gShipMinute) {
		RampsClosed();
		//printf("Ship rams start close in 20 and ship will go in 40 sec");
	}
	
	/*if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		new server_time[22];
	    format(server_time, sizeof(server_time), "SERVER TIME:[ %d.00 ]",tmphour);
		SendClientMessageToAll(COLOR_WHITE, server_time);

		ghour = tmphour;
		//printf("Sync 1");
		IndustryTime();
		//printf("Sync 2");
		PayDay(); // Every hours
		//printf("Sync 3");
		SetWorldTime(tmphour);
		printf("WorldTime 1 Bugged Test");
		
		ResetOwnerVehicle();
		//printf("Sync 4");
	}*/
}

CMD:paycheckrefund(playerid) {

	if(playerData[playerid][pAdmin] < 1339)
		return 0;
		
	foreach (new i : Player) {
		if(playerData[i][pPayDay] < 6) playerData[i][pPayDay] += 5; //+ 5 min to PayDay anti-abuse
	}
	PayDay();

	return 1;
}

CMD:resetownercar(playerid) {

	if(playerData[playerid][pAdmin] < 1339)
		return 0;
		
	ResetOwnerVehicle();

	return 1;
}


ResetOwnerVehicle() {
	/*new count=0;
	foreach(new i : sv_playercar) {
		if(!CarData[i][carDespawn]) {
			count++;
		}
	}

	foreach(new i : sv_playercar) {
		if(!CarData[i][carDespawn]) {
			SaveSlotVehicleDamage(i);
		    Car_SaveID(i);
			Car_DespawnEx(i);
			count--;
		}
		if(count==0 || Iter_Count(sv_playercar) == 0) {
			break;
		}
	}*/
	
	foreach(new i : sv_playercar) {
	
		new
			cur = i;
			
		if(CarData[i][carDespawn] && GetVehicleDriver(CarData[i][carVehicle]) == INVALID_PLAYER_ID) {
		
			SaveSlotVehicleDamage(i);
		    Car_SaveID(i);
	
			for(new x = 0; x != MAX_CAR_WEAPONS; x++) if(IsValidDynamicObject(CarPlace[i][x][cPobj])) DestroyDynamicObject(CarPlace[i][x][cPobj]);

			for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
			{
				CarData[i][carPackageWP][x]=0;
				CarData[i][carPackageAmmo][x]=0;
			}

			DestroyVehicle(CarData[i][carVehicle]);

			CarData[i][carSID] = 0;
			CarData[i][carOwner] = 0;
			CarData[i][carVehicle]=INVALID_VEHICLE_ID;
			CarData[i][carDespawn]=false;
			
			for(new x = 0; x != MAX_CAR_WEAPONS; x++)
			{
				CarData[i][carWeapon][x] = 0;
				CarData[i][carAmmo][x] = 0;
				CarData[i][carWeaponLicense][x] = 0;
			}
			for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
				VehicleDrug[i][x][drugQTY] = 0;
			}
	
			Iter_SafeRemove(sv_playercar, cur, i);
		}
	}
}

IndustryTime() {
	foreach(new i : sv_industry) {
	    if(StorageData[i][in_id]){
			if(StorageData[i][in_trading_type]) StorageData[i][in_stock]-=StorageData[i][in_consumption];
			else StorageData[i][in_stock]+=StorageData[i][in_consumption];
			if(StorageData[i][in_stock] > StorageData[i][in_maximum]) StorageData[i][in_stock]=StorageData[i][in_maximum];
			else if(StorageData[i][in_stock] < 0) StorageData[i][in_stock]=0;
	        UpdateStorage(i);
         	saveStorage(i);
        }
	}

	foreach(new i : sv_warehouse) {

        /*WareHouseInfo[i][whStock]++;

        if(WareHouseInfo[i][whStock] > WareHouseInfo[i][whMaxstock])
            WareHouseInfo[i][whStock] = WareHouseInfo[i][whMaxstock];*/

        Warehouse_Refresh(i);
        saveWarehouse(i);
	}
}

/*forward DrugTimer(playerid);
public DrugTimer(playerid) {*/
ptask DrugTimer[900000](playerid) {
	if(!SufferDrugs{playerid} && AddictDrugs[playerid]==0 && random(5) == 0 && playerData[playerid][pDrugAddict] > 0 && playerData[playerid][pDrugAddiction][playerData[playerid][pDrugAddict]-1] >= 70) {
		AddictDrugs[playerid] = playerData[playerid][pDrugAddiction][playerData[playerid][pDrugAddict]-1]; // ลดนาทีละสี่
		SendClientMessage(playerid, COLOR_YELLOW, "คุณเริ่มมีอาการอยากยาเสพติด");
	}
	return 1;
}

/*forward ProductionTimer();
public ProductionTimer() {*/
task ProductionTimer[300000]() {
	new temp_time = gettime();
	foreach (new i : Player) {
		//if(playerData[i][pPayDay] < 6) playerData[i][pPayDay] += 1; //+ 5 min to PayDay anti-abuse
		if(playerData[i][pDonateRank] && temp_time >= playerData[i][pDonateUnix])
		{
			SendClientMessageEx(i, COLOR_YELLOW, "สถานะ %s ของคุณได้หมดอายุลงแล้ว", ReturnDonateRank(playerData[i][pDonateRank]));
			playerData[i][pDonateRank] = 0;
		}
	}
	new bool:done;
	for(new c=0;c<sizeof(CarRent);c++) {
        done = false;
		foreach (new i : Player) if(gLastCar[i] == CarRent[c] || RentCarKey[i] == CarRent[c]) done = true;
		if(!done) SetVehicleToRespawn(CarRent[c]);
	}
}

/*forward PayCheckTimer();
public PayCheckTimer() {*/
task PayCheckTimer[60000]() {
	new tmphour, tmpminute, tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;

	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		new server_time[22];
	    format(server_time, sizeof(server_time), "SERVER TIME:[ %d.00 ]",tmphour);
		SendClientMessageToAll(COLOR_WHITE, server_time);

		ghour = tmphour;
		//printf("Sync 1");
		IndustryTime();
		//printf("Sync 2");
		PayDay(); // Every hours
		//printf("Sync 3");
		SetWorldTime(tmphour);
		//printf("WorldTime 1 Bugged Test");
		
		ResetOwnerVehicle();
		//printf("Sync 4");
	}
}

/*forward BeforePayDay();
public BeforePayDay()*/
task BeforePayDay[5000]()
{
	foreach (new i : Player) 
	{
		if(playerData[i][pPayDay] < 6) 
		{
			playerData[i][pPayDay] += 1; //+ 5 min to PayDay anti-abuse
			//SendClientMessage(i, COLOR_YELLOW, "ระบบ : {FFFFFF} PayCheck +1");
		}
	}
}

forward PayDay();
public PayDay()
{
	new account,interest;
	new savaccount, savings;
    new rent = 0;

	foreach (new i : Player)
	{
		if(playerData[i][pJob] && playerData[i][pJob] != JOB_MECHANIC && playerData[i][pJob] != JOB_TAXI && playerData[i][pJob] != JOB_GUIDE) if(playerData[i][pContractTime] < 25) playerData[i][pContractTime] ++;

		/*for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) if (CarData[i][carExists]) {


		new bool:success;
		foreach (new playerid : Player)
		{
			if(CarData[i][carOwner] == playerData[playerid][pID])
			{
				success = true;
				break;
			}
		}
		if(!success) Car_DespawnEx(i);
		}*/

		if(playerData[i][pLevel] > 0 && playerData[i][pPayDay] >= 5)
		{
		    new house = playerData[i][pHouseKey];
			new nxtlevel = playerData[i][pLevel]+1;
			new expamount = nxtlevel*levelexp;

			account = playerData[i][pAccount];

            new Float:tmpintrate = 0.1;

			//Checking job ranks
			if(playerData[i][pJob] == JOB_TRUCKER)
			{
				playerData[i][pCareer]++;

				if(playerData[i][pCareer] >= 164) playerData[i][pJobRank] = 5;
				else if(playerData[i][pCareer] >= 116) playerData[i][pJobRank] = 4;
				else if(playerData[i][pCareer] >= 64) playerData[i][pJobRank] = 3;
				else if(playerData[i][pCareer] >= 36) playerData[i][pJobRank] = 2;
				else if(playerData[i][pCareer] >= 12) playerData[i][pJobRank] = 1;
				else playerData[i][pJobRank] = 0;
			}

			Tax += TaxValue;
			playerData[i][pAccount] -= TaxValue;

			if(playerData[i][pAccount] > 20000000) tmpintrate = 0.05;
			interest = floatround((playerData[i][pAccount]/float(100))*(tmpintrate), floatround_round);
			playerData[i][pExp]+=1*multiplyexp;
			PlayerPlayMusic(i);
			playerData[i][pAccount] = account+interest;

			if(playerData[i][pSavingsCollect])
			{
			    savaccount = playerData[i][pSavingsCollect];
			    savings = floatround((playerData[i][pSavingsCollect]/float(100))*(0.5), floatround_round);

			    playerData[i][pSavingsCollect] = savaccount+savings;
			    if(playerData[i][pSavingsCollect] > 20000000)
			    {
			        playerData[i][pSavingsCollect] = 20000000;
			    }
			}

            new ebill = floatround((float(account) / float(100)) / float(110)) * CountPlayerOwnHouse(i);
            //new ebill = floatround((float(account) / float(100)) / 110) * CountPlayerOwnHouse(i);

			if(house != -1 && !strcmp(ReturnPlayerName(i), HouseInfo[house][hOwner], true))
			{
				playerData[i][pAccount] -= ebill;
				new string[32];
				format(string, sizeof(string), "ค่าไฟ: $%d  (ออกจากธนาคาร)", ebill);
				SendClientMessage(i, COLOR_WHITE, string);
			}
			else if(house != -1)
			{
				rent = HouseInfo[house][hRentprice];

				if(playerData[i][pAccount] >= rent) {
					playerData[i][pAccount] -= rent;
					new string[32];
					format(string, sizeof(string), "ค่าเช่า: $%d (ออกจากธนาคาร)", rent);
					SendClientMessage(i, COLOR_WHITE, string);
					HouseInfo[house][hCash] += rent;
				}
				else {
				    playerData[i][pHouseKey] = -1;
				}
			}

			SendClientMessage(i, COLOR_WHITE, "|___ BANK STATEMENT ___|");

			SendClientMessageEx(i, COLOR_FADE1, "  ยอดเงินในบัญชี: $%d", account);
			SendClientMessageEx(i, COLOR_FADE1, "  อัตราดอกเบี้ย: %.2f",tmpintrate);
			SendClientMessageEx(i, COLOR_FADE1, "  ดอกเบี้ยทีได้รับ $%d", interest);
			SendClientMessageEx(i, COLOR_FADE1, "  ภาษีที่จ่าย $%d", TaxValue);

			if(playerData[i][pSavingsCollect])
			{
				SendClientMessageEx(i, COLOR_WHITE, "  รายได้เงินฝากออมทรัพย์: $%d อยู่ที่อัตรา: 0.5", savings);
				SendClientMessageEx(i, COLOR_WHITE, "  ยอดเงินในบัญชีออมทรัพย์ใหม่: $%d", playerData[i][pSavingsCollect]);
			}

			SendClientMessage(i, COLOR_WHITE, "|______________________|");
			SendClientMessageEx(i, COLOR_WHITE, "  ยอดเงินในบัญชีใหม่: $%d", playerData[i][pAccount]);

			if(playerData[i][pJob] == JOB_MECHANIC || playerData[i][pSideJob] == JOB_MECHANIC)
			{
			    playerData[i][pPayCheck] += 1250;
                SendClientMessage(i, COLOR_WHITE, "คุณได้รับ $1,250 สำหรับหน้าที่ช่างของคุณ");
			}

			if(account+interest)
				SendClientMessage(i, COLOR_WHITE, "คุณสามารถรับ Paycheck ของคุณได้ใน Los Santos Bank");

			if(playerData[i][pLevel] < 3)
			{
				SendClientMessageEx(i, COLOR_FADE1, "(( คุณได้รับ $2,000 ในฐานะที่อยู่เลเวล %d ))", playerData[i][pLevel]);
				playerData[i][pPayCheck] += 2000;
			}

			if(GetFactionType(i) == FACTION_TYPE_POLICE && playerData[i][pSideJob] == JOB_POLICE) // เงินเดือนตำรวจ
			{
			    playerData[i][pPayCheck] += 1500;
                SendClientMessage(i, COLOR_WHITE, "(( {8D8DFF}รายได้สำหรับเจ้าหน้าที่รัฐ : {FFFFFF}คุณได้รับ {8D8DFF}$1,500 {FFFFFF}สำหรับการเป็นเจ้าหน้าที่ตำรวจ ))");
			}

			if(GetFactionType(i) == FACTION_TYPE_SASD && playerData[i][pSideJob] == JOB_POLICE) // เงินเดือนตำรวจ
			{
			    playerData[i][pPayCheck] += 1500;
                SendClientMessage(i, COLOR_WHITE, "(( {8D8DFF}รายได้สำหรับเจ้าหน้าที่รัฐ : {FFFFFF}คุณได้รับ {8D8DFF}$1,500 {FFFFFF}สำหรับการเป็นเจ้าหน้าที่ตำรวจ ))");
			}

			if(house != -1 && playerData[i][pHouseKey] == -1) {
				SendClientMessage(i, COLOR_FADE1, "คุณไม่มีเงินในบัญชีเพื่อจ่ายค่าเช่าดังนั้นคุณจึงถูกขับไล่ออกจากบ้าน");
			}

			if(playerData[i][pChequeCash])
			{
			    playerData[i][pPayCheck] += playerData[i][pChequeCash];
			    playerData[i][pChequeCash] = 0;
			}
			new string[40];
			format(string, sizeof(string), "~y~PayDay~n~~w~Paycheck~n~~g~$%d", playerData[i][pPayCheck]);
			GameTextForPlayer(i, string, 5000, 1);

			rent = 0;
			playerData[i][pPayDay] = 0;
			playerData[i][pPlayingHours] += 1;

			if(playerData[i][pExp] >= expamount && (playerData[i][pLevel] < 5 || playerData[i][pDonateRank]))
			{
				new str_level[40];
				format(str_level, sizeof(str_level), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
				GameTextForPlayer(i, str_level, 5000, 1);
				PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
				PlayerPlayMusic(i);
				playerData[i][pLevel]++;
				playerData[i][pPUpgrade] = playerData[i][pPUpgrade]+2;
				SendClientMessageEx(i, COLOR_FADE2, "   เลเวลของคุณในปัจจุบันถูกเพิ่มขึ้นเป็นเลเวล %d",playerData[i][pLevel]);
				SendClientMessageEx(i, COLOR_FADE2, "   คุณมีค่าอัพเกรดอยู่ %d Points (พิมพ์ /upgrade เพื่ออัพเกรด)",playerData[i][pPUpgrade]);
				if(playerData[i][pDonateRank] > 0)
				{
					playerData[i][pExp] -= expamount;
					new total = playerData[i][pExp];
					if(total > 0)
					{
						playerData[i][pExp] = total;
					}
					else
					{
						playerData[i][pExp] = 0;
					}
				}
				else
				{
					playerData[i][pExp] = 0;
				}
				SetPlayerScore(i, playerData[i][pLevel]);
			}


			if(playerData[i][pHunger] < 100)
			{
			    new rd = random(2);
				if(rd) {
				    playerData[i][pHunger]+=float(rd);
				    if(playerData[i][pHunger] > 100) playerData[i][pHunger] = 100;
				}
			}
			
			for(new x=0;x!=MAX_DRUGS;x++) {
				if(playerData[i][pDrugAddiction][x]>0) {
					playerData[i][pDrugAddiction][x]--;
				}
			}
			
			if(SufferDrugs{i}) {
				SufferDrugs{i}=false;
			}

			// Donate
			if(playerData[i][pDonateRank] > 0)
			{
				playerData[i][pPayDayHad] += 1;
				if(playerData[i][pPayDayHad] >= 5)
				{
					playerData[i][pExp]++;
					playerData[i][pPayDayHad] = 0;
				}
			}

		}
		else
		{
			SendClientMessage(i, COLOR_LIGHTRED, "* คุณเล่นไม่นานพอที่จะได้รับ Paycheck");
		}
		
		if(playerData[i][pHunger] > 9)
	    {
	        new Float:decrease;
	        decrease = playerData[i][pHunger]/10.0;
	        if(playerData[i][pHealth] - decrease > 0.0) {
				if(decrease>0.0) SetPlayerHealthEx(i, playerData[i][pHealth] - decrease);
			}
	        else SetPlayerHealthEx(i, 1);
	    }
	}
    return 1;
}

forward OnQueryBuyClothing(playerid, id);
public OnQueryBuyClothing(playerid, id)
{
	new insert_id = cache_insert_id();
	if(insert_id != -1) ClothingData[playerid][id][cl_sid] = cache_insert_id();
	else ClothingData[playerid][id][cl_object] = INVALID_OBJECT_ID;
	return 1;
}

forward OnQueryBuyVehicle(playerid, i, model, price);
public OnQueryBuyVehicle(playerid, i, model, price)
{
	new insert_id = cache_insert_id(), str[128];
	if(insert_id != -1) {
		CarData[i][carSID] = cache_insert_id();

		SendClientMessage(playerid, 0xADFF2FFF, "PROCESSING: กำลังสร้าง /v list ของคุณใหม่..");

		format(str, sizeof(str), "ยินดีต้อนรับสู่ %s ของคุณ", g_arrVehicleNames[model - 400]);
		SendClientMessage(playerid, COLOR_WHITE, str);

		Log(pveh_log, INFO, "%s buy %s for %d", ReturnPlayerName(playerid), g_arrVehicleNames[model - 400], price);

		SendClientMessageEx(playerid, COLOR_WHITE, "ล็อค[%d] สัญญาณเตือนภัย[%d] อิมโมบิ[%d] ประกันภัย[%d]", CarData[i][carLock], CarData[i][carAlarm], CarData[i][carImmob], CarData[i][carInsurance]);
		SendClientMessageEx(playerid, COLOR_WHITE, "อายุการใช้งาน: อายุเครื่องยนต์[%.2f] อายุแบตเตอรี่[%.2f] ระยะไมล์ที่ขับ[%.2f]", CarData[i][carEngineL], CarData[i][carBatteryL], CarData[i][carMileage]);

		SendClientMessage(playerid, COLOR_GREEN, "เครื่องยนต์ดับอยู่ (/engine)");
		SendClientMessage(playerid, 0xADFF2FFF, "PROCESSED: รายการปรับปรุงใหม่");

		playerData[playerid][pCash] -= price;

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
		//SQL_SaveCharacter(playerid);

		if (VDealerVehicle[playerid])
			DestroyVehicle(VDealerVehicle[playerid]);
			
		VDealerSetting{playerid} = false;

		TogglePlayerControllable(playerid, 1);
		VDealerColor[playerid][0] = -1;
		VDealerColor[playerid][1] = -1;
		VDealerBiz[playerid] = -1;
		
		VDealerLock[playerid]=0;
		VDealerImmob[playerid]=0;
		VDealerAlarm[playerid]=0;
		VDealerXM{playerid}=false;
		VDealerFaction{playerid}=false;

		
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);

		new plate[8];
		format(plate, sizeof(plate), RandomVehiclePlate());
		mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
		mysql_tquery(dbCon, str, "DuplicatePlates", "iis", playerid, i, plate);

		Iter_Add(sv_playercar, i);
	}
	else
	{
	    ExitSettingVehicle(playerid);
	    SendClientMessage(playerid, COLOR_RED, "มีข้อผิดพลาดในการซื้อยานพาหนะโปรดติดต่อผู้ดูแลระบบ");
	}

	return 1;
}

forward RegisterPlates(playerid, id, plate[]);
public RegisterPlates(playerid, id, plate[])
{
    new
		rows;

    cache_get_row_count(rows);

    if(rows)
    {
		new newplate[8], str[47];
		format(newplate, sizeof(newplate), RandomVehiclePlate());

      	mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", newplate);
		mysql_tquery(dbCon, str, "RegisterPlates", "iis", playerid, id, newplate);
    }
    else {

		new Float: vPos[4];

		GetVehiclePos(CarData[id][carVehicle], vPos[0], vPos[1], vPos[2]);
		GetVehicleZAngle(CarData[id][carVehicle], vPos[3]);

		format(CarData[id][carPlate], 32, plate);
        SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);
        SaveVehicleDamage(CarData[id][carVehicle]);
		SetVehicleToRespawn(CarData[id][carVehicle]);
		SetVehicleDamage(CarData[id][carVehicle]);
		SetVehiclePos(CarData[id][carVehicle], vPos[0], vPos[1], vPos[2]);
		SetVehicleZAngle(CarData[id][carVehicle], vPos[3]);
        if(GetVehicleDriver(CarData[id][carVehicle]) != INVALID_PLAYER_ID) PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
        Car_SaveID(id);

		new str[43];
		format(str, sizeof(str), "Your new plate has been set~n~~y~%s.", CarData[id][carPlate]);
		ShowPlayerFooter(playerid, str);
		//printf(str);
	}
    return 1;
}

forward DuplicatePlates(playerid, id, plate[]);
public DuplicatePlates(playerid, id, plate[])
{
    new
		rows;

    cache_get_row_count(rows);

    if(rows)
    {
		new newplate[8], str[47];
		format(newplate, sizeof(newplate), RandomVehiclePlate());

      	mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", newplate);
		mysql_tquery(dbCon, str, "DuplicatePlates", "iis", playerid, id, newplate);
    }
    else {

		format(CarData[id][carPlate], 32, plate);

		CarData[id][carVehicle] = CreateVehicle(CarData[id][carModel], CarData[id][carPos][0],CarData[id][carPos][1],CarData[id][carPos][2],CarData[id][carPos][3], CarData[id][carColor1], CarData[id][carColor2], -1);
        SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);

		LinkVehicleToInterior(CarData[id][carVehicle], CarData[id][carInt]);
		SetVehicleVirtualWorld(CarData[id][carVehicle], CarData[id][carWorld]);
			
		playerData[playerid][pPCarkey] = id;

	  	CoreVehicles[CarData[id][carVehicle]][vehFuel] = CarData[id][carFuel];

		new
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective;

		GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, CarData[id][carLocked], bonnet, boot, objective);
		
		SetVehicleHealthEx(CarData[id][carVehicle], CarData[id][carHealth]);
		
		PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
		RandomVehiclePark(id);
        Car_SaveID(id);

		new str[43];
		format(str, sizeof(str), "Your new plate has been set~n~~y~%s.", CarData[id][carPlate]);
		ShowPlayerFooter(playerid, str);
		
	}
    return 1;
}


public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    query[128]
	;
	switch (threadid)
	{
		case THREAD_CREATE_CCTV: CCTVInfo[extraid][cctvID] = cache_insert_id();
	    case THREAD_LOG_CON: playerData[extraid][pConnectionID] = cache_insert_id();
	    case THREAD_SECRET_CONFIRM: {

    	    cache_get_row_count(rows);

    	    if (!rows)
    	    {
				SendClientMessage(extraid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"ความท้าทายที่ป้อนไม่ถูกต้อง");
                Dialog_Show(extraid, SecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การละเมิดความปลอดภัยที่เป็นไปได้\n\nเซิร์ฟเวอร์ได้ตั้งค่าสถานะให้คุณว่าอาจไม่ได้เป็นเจ้าของตัวละครนี้โปรดเขียนรหัสลับของตัวละครนี้ในช่องด้านล่างเพื่อยืนยันว่าเป็นของคุณ", "Enter", "Cancel");
			}
			else
			{
				if(SQL_IsLogged(extraid))
					return Kick(extraid);

		    	SendClientMessage(extraid, COLOR_YELLOW, "การเชื่อมต่อกับบัญชีนี้ได้รับการตรวจสอบแล้ว");
			    format(query, sizeof(query), "UPDATE `characters` SET `LastIP` = '%s' WHERE `ID` = %d", playerData[extraid][pIP], playerData[extraid][pID]), mysql_query(dbCon, query);

				SQL_ForceLogin(extraid);	
				//Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", "สวัสดี\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเข้าถึงการเลือกตัวละคร\n\nหากคุณยังไม่ได้ลงทะเบียนกับ LS-RP คุณสามารถสร้างบัญชีของคุณได้ที่ la-rp.site", "ส่งข้อมูล", "ออก");
			}
	    }
    	case THREAD_LOGIN:
   		{
    	    cache_get_row_count(rows);

    	    if (!rows)
    	    {
				if(loginValidTime[extraid]==5) {
					SendClientMessage(extraid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณกรอกรหัสผ่านไม่ถูกต้องจำนวนหลายครั้ง");
					KickEx(extraid);
				}

				/*if(SQL_IsLogged(extraid))
					return Kick(extraid);*/

				loginValidTime[extraid]++;
				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การเข้าสู่ระบบ "EMBED_YELLOW"[la-rp.site]"EMBED_WHITE"\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเลือกตัวละครของคุณ\n- เปลี่ยนสกินตัวละครได้ที่หน้าเว็บไซต์ "EMBED_YELLOW"(UCP)\n\n"EMBED_RED"คุณสามารถพยายามเข้าสู่ระบบได้อีก %d ครั้ง", "ส่งรหัสผ่าน", "ออกจากเกม", 6 - loginValidTime[extraid]);
			}
			else
			{
				mysql_format(dbCon, XLQuery, sizeof(XLQuery), "SELECT c.ID,c.Character,c.Level,c.Cash,c.Model,c.PlayingHours,c.DonateRank, b.id as isban FROM `characters` c LEFT JOIN bans b ON c.ID = b.character_id WHERE c.Username = %d", playerData[extraid][pUserid]);
				mysql_tquery(dbCon, XLQuery, "selectCharacter", "d", extraid);
			}
		}
		case THREAD_SELECT_CHARACTER: {

			//printf("SELECT CHARACTER %s: User %s", ReturnPlayerName(extraid), playerData[extraid][pUsername]);
			new active,lastlogin,lastip[16];

			cache_get_value_name_int(0, "ID", playerData[extraid][pID]);
			cache_get_value_name_int(0, "Activated", active);
			cache_get_value_name_int(0, "LastLogin", lastlogin);
			cache_get_value_name(0, "Secret", playerData[extraid][pSecretWord], 32);
			cache_get_value_name(0, "LastIP", lastip, 16);
			
			if(isnull(playerData[extraid][pSecretWord]))
			{
				Dialog_Show(extraid, AddSecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"ข้อควรระวังด้านความปลอดภัย\n\nเราได้เปิดใช้การยืนยันตัวตนด้วยรหัสลับ ซึ่งเป็นคำที่เป็นความลับที่คุณจะได้รับเมื่อมีการเปลี่ยนแปลงการเชื่อมต่อใหม่\n\nคุณยังไม่ได้กรอกข้อมูลน{FF0000}ี้ดังนั้นโ"EMBED_WHITE"ปรดใช้เวลาของคุณทำการกรอกคำที่เป็นความลับและคุณจะต้องจดจำ\n\nคำแนะนำว่านี่ไม่ใช่รหัสผ่านของคุณ", "Enter", "Cancel");
			}
			/*else if(gettime() - lastlogin >= 1209600 && active) // 14 day or 2 week 2 เดือน = 5184000
			{
				SendClientMessage(extraid, COLOR_YELLOW, "การยืนยันตนเองสองระดับ");
				SendClientMessage(extraid, COLOR_YELLOW, "บัญชีนี้ไม่ได้เข้าสู่ระบบในระยะเวลาที่นานพอสมควร");
				SendClientMessage(extraid, COLOR_YELLOW, "เพื่อให้บัญชีของคุณปลอดภัย เราต้องการให้คุณยืนยันความเป็นเจ้าของบัญชีของคุณ");
			
				format(query,sizeof(query),"ip=%s&time=%d&id=%d&username=%s", playerData[extraid][pIP], gettime(), playerData[extraid][pID], playerData[extraid][pUsername]);
				HTTP(extraid,HTTP_POST,"localhost/api/verify_email.php",query,"HttpVerifyRequest");
			}*/
			else if((isnull(lastip) || strcmp(lastip, playerData[extraid][pIP], true)) && active)
			{
				Dialog_Show(extraid, SecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การละเมิดความปลอดภัยที่เป็นไปได้\n\nเซิร์ฟเวอร์ได้ตั้งค่าสถานะให้คุณว่าอาจไม่ได้เป็นเจ้าของตัวละครนี้โปรดเขียนรหัสลับของตัวละครนี้ในช่องด้านล่างเพื่อยืนยันว่าเป็นของคุณ", "Enter", "Cancel");
			}
			else SQL_ForceLogin(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    new str[128], active;

			cache_get_row_count(rows);

			if (rows) {
			
				new character_name[MAX_PLAYER_NAME], tempbool;
				cache_get_value_name(0, "Character", character_name, MAX_PLAYER_NAME);
				if(!isnull(character_name)) {
					switch (SetPlayerName(extraid, character_name))
					{
						case -1: {
							SendClientMessage(extraid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"ไม่สามารถใช้งานตัวละครในบัญชีเดียวกันได้");
							KickEx(extraid);
						}
						default: {
							SQL_LogConnection(extraid);
							
							cache_get_value_name_int(0, "Created", playerData[extraid][pCreated]);
							cache_get_value_name_int(0, "Activated", active);
							cache_get_value_name_int(0, "Gender", playerData[extraid][pGender]);
							cache_get_value_name_int(0, "Birthdate", playerData[extraid][pBirthdate]);
							cache_get_value_name_int(0, "Model", playerData[extraid][pModel]);
							cache_get_value_name_int(0, "Char", playerData[extraid][pChar]);
							cache_get_value_name_int(0, "ContractTime", playerData[extraid][pContractTime]);
							cache_get_value_name_int(0, "PhoneNumbr", playerData[extraid][pPnumber]);
							cache_get_value_name_int(0, "PhoneModel", playerData[extraid][pPmodel]);

							new rtcall, rttext, mairplane, msilent;
							cache_get_value_name_int(0, "PhoneRingtone", rtcall);
							cache_get_value_name_int(0, "PhoneTextRingtone", rttext);
							cache_get_value_name_int(0, "PhoneAir", mairplane);
							cache_get_value_name_int(0, "PhoneSilent", msilent);
							PhoneLoad(extraid, rtcall, rttext, !!mairplane, !!msilent);
							
							cache_get_value_name_float(0, "PosX", playerData[extraid][pPos][0]);
							cache_get_value_name_float(0, "PosY", playerData[extraid][pPos][1]);
							cache_get_value_name_float(0, "PosZ", playerData[extraid][pPos][2]);
							cache_get_value_name_float(0, "PosA", playerData[extraid][pPos][3]);
							cache_get_value_name_float(0, "SpawnHealth", playerData[extraid][pSHealth]);
							cache_get_value_name_int(0, "Interior", playerData[extraid][pInterior]);
							cache_get_value_name_int(0, "World", playerData[extraid][pWorld]);
							cache_get_value_name_int(0, "playerSWAT", playerData[extraid][pSwat]);
							cache_get_value_name_int(0, "Faction", playerData[extraid][pFactionID]);
							cache_get_value_name_int(0, "FactionRank", playerData[extraid][pFactionRank]);
							cache_get_value_name_int(0, "Injured", tempbool);
							isInjuredmode{extraid} = !!tempbool;
							cache_get_value_name_int(0, "playerTimeout", playerData[extraid][pTimeout]);
							cache_get_value_name_int(0, "SpawnPoint", playerData[extraid][pSpawnPoint]);
							cache_get_value_name_int(0, "SpawnType", playerData[extraid][pSpawnType]);
							cache_get_value_name_int(0, "Admin", playerData[extraid][pAdmin]);
							cache_get_value_name_int(0, "playerTester", playerData[extraid][pTester]);
							cache_get_value_name_int(0, "PlayingHours", playerData[extraid][pPlayingHours]);
							cache_get_value_name_int(0, "Level", playerData[extraid][pLevel]);
							cache_get_value_name_int(0, "Exp", playerData[extraid][pExp]);
							cache_get_value_name_int(0, "plaUpgrade", playerData[extraid][pPUpgrade]);
							cache_get_value_name_int(0, "DonateRank", playerData[extraid][pDonateRank]);
							if(playerData[extraid][pDonateRank]) cache_get_value_name_int(0, "DonateUnix", playerData[extraid][pDonateUnix]);
							cache_get_value_name_int(0, "PayDay", playerData[extraid][pPayDay]);
							cache_get_value_name_int(0, "PayDayHad", playerData[extraid][pPayDayHad]);
							cache_get_value_name_int(0, "PayCheck", playerData[extraid][pPayCheck]);
							cache_get_value_name_int(0, "ChequeCash", playerData[extraid][pChequeCash]);
							cache_get_value_name_int(0, "BankAccount", playerData[extraid][pAccount]);
							
							cache_get_value_name_int(0, "BankNumber", playerData[extraid][pBankNumber]);
							cache_get_value_name(0, "BankPin", playerData[extraid][pBankPin], 10);
					
							cache_get_value_name_int(0, "Cash", playerData[extraid][pCash]);
							GivePlayerMoney(extraid, playerData[extraid][pCash]);

							cache_get_value_name_int(0, "Savings", playerData[extraid][pSavings]);
							cache_get_value_name_int(0, "SavingsCollect", playerData[extraid][pSavingsCollect]);
							cache_get_value_name_int(0, "AlcoholPerk", playerData[extraid][pAlcoholPerk]);
							cache_get_value_name_int(0, "DrugPerk", playerData[extraid][pDrugPerk]);
							cache_get_value_name_int(0, "MiserPerk", playerData[extraid][pMiserPerk]);
							cache_get_value_name_int(0, "PainPerk", playerData[extraid][pPainPerk]);
							cache_get_value_name_int(0, "TraderPerk", playerData[extraid][pTraderPerk]);
							cache_get_value_name_int(0, "playerJob", playerData[extraid][pJob]);
							cache_get_value_name_int(0, "playerSideJob", playerData[extraid][pSideJob]);
							cache_get_value_name_int(0, "playerJobRank", playerData[extraid][pJobRank]);
							cache_get_value_name_int(0, "playerCareer", playerData[extraid][pCareer]);
							
							new temp_house=0;
							cache_get_value_name_int(0, "SQLHouseKey", temp_house);

							if(playerData[extraid][pSpawnPoint] == 2 && playerData[extraid][pSpawnType]) {
								foreach(new houseid : sv_houses) {
									if(HouseInfo[houseid][hID] == playerData[extraid][pSpawnType]) {
										playerData[extraid][pHouseKey] = houseid;
										break;
									}
								}
							}
							else {
								if(temp_house != 0) {
									foreach(new houseid : sv_houses) {
										if(HouseInfo[houseid][hID] == temp_house) {
											playerData[extraid][pHouseKey] = houseid;
											break;
										}
									}
								}
							}
							
							cache_get_value_name_float(0, "Hunger", playerData[extraid][pHunger]);
							cache_get_value_name(0, "AdminName", playerData[extraid][pAdminName], MAX_PLAYER_NAME);
							cache_get_value_name(0, "Attribute", playerData[extraid][pAttribute], 128);

							cache_get_value_name(0, "PackageWeapons", str);
							AssignPlayerWeapons(extraid, str);
							
							cache_get_value_name(0, "DrugAddiction", str);
							AssignPlayerDrugAddictions(extraid, str);

							cache_get_value_name(0, "hudToggle", str);
							//AssignHUDSettings(extraid, str);
							
							cache_get_value_name_int(0, "DrugAddict", playerData[extraid][pDrugAddict]);
							cache_get_value_name_int(0, "DrugAddictStrength", playerData[extraid][pDrugAddictStrength]);

							cache_get_value_name_int(0, "Jailed", playerData[extraid][pJailed]);
							cache_get_value_name_int(0, "Jailtime", playerData[extraid][pJailTime]);
							cache_get_value_name_int(0, "Jailtime2", playerData[extraid][pJailTime2]);
							cache_get_value_name_int(0, "OOCMask", playerData[extraid][pOOCMask]);
							cache_get_value_name_int(0, "FightStyle", playerData[extraid][pFightStyle]);
							cache_get_value_name_int(0, "CarLic", playerData[extraid][pCarLic]);
							cache_get_value_name_int(0, "WepLic", playerData[extraid][pWepLic]);
							cache_get_value_name_int(0, "CCWLicense", playerData[extraid][pCCWLic]);
							cache_get_value_name_int(0, "ADPoint", playerData[extraid][pADPoint]);
							
							cache_get_value_name_int(0, "Arrested", playerData[extraid][pArrested]);
							cache_get_value_name_int(0, "Prisoned", playerData[extraid][pPrisoned]);

							cache_get_value_name_int(0, "PrisonDept", playerData[extraid][pPrisonDept]);
							cache_get_value_name_int(0, "PrisonTime", playerData[extraid][pPrisonTime]);
							cache_get_value_name_int(0, "IsolateTime", playerData[extraid][pIsolateTime]);
							
							cache_get_value_name_int(0, "BadgeNumber", playerData[extraid][pBadgeNumber]);

							cache_get_value_name_int(0, "Gun1", playerData[extraid][pGun1]);
							cache_get_value_name_int(0, "Gun2", playerData[extraid][pGun2]);
							cache_get_value_name_int(0, "Gun3", playerData[extraid][pGun3]);
							cache_get_value_name_int(0, "Ammo1", playerData[extraid][pAmmo1]);
							cache_get_value_name_int(0, "Ammo2", playerData[extraid][pAmmo2]);
							cache_get_value_name_int(0, "Ammo3", playerData[extraid][pAmmo3]);

							cache_get_value_name_int(0, "PrimaryLicense", playerData[extraid][pPLicense]);
							cache_get_value_name_int(0, "SecondaryLicense", playerData[extraid][pSLicense]);

							//cache_get_value_name_int(0, "PlayerCarkey", playerData[extraid][pPCarkey]);
							cache_get_value_name_int(0, "PlayerBusinessKey", playerData[extraid][pPbiskey]);

							cache_get_value_name_int(0, "playerWork", playerData[extraid][pWorkOn]);

							cache_get_value_name_int(0, "Radio", playerData[extraid][pRadio]);
							cache_get_value_name_int(0, "RadioChannel", playerData[extraid][pRChannel]);
							cache_get_value_name_int(0, "RadioSlot", playerData[extraid][pRSlot]);

							cache_get_value_name(0, "RadioAuth", playerData[extraid][pRAuth], 16);
							cache_get_value_name_int(0, "MedicBill", MedicBill[extraid]);
							cache_get_value_name_float(0, "Health", playerData[extraid][pHealth]);
							cache_get_value_name_float(0, "Armour", playerData[extraid][pArmour]);

							cache_get_value_name_int(0, "Fishes", playerData[extraid][pFishes]);

							cache_get_value_name_int(0, "Checkpoint_Type", playerData[extraid][pCP_Type]);
							cache_get_value_name_float(0, "Checkpoint_X", playerData[extraid][pCP_X]);
							cache_get_value_name_float(0, "Checkpoint_Y", playerData[extraid][pCP_Y]);
							cache_get_value_name_float(0, "Checkpoint_Z", playerData[extraid][pCP_Z]);

							cache_get_value_name_int(0, "FlyLic", playerData[extraid][pFlyLic]);
							cache_get_value_name_int(0, "MedicalLic", playerData[extraid][pMedicLic]);
							cache_get_value_name_int(0, "DriverWarning", playerData[extraid][pDW]);

							cache_get_value_name_int(0, "GasCan", playerData[extraid][pGasCan]);
							cache_get_value_name_int(0, "Adverts", playerData[extraid][pAdverts]);
							cache_get_value_name_int(0, "Cigarettes", playerData[extraid][pCigarettes]);
							cache_get_value_name_int(0, "Knockout", tempbool);
							isKNOmode{extraid} = !!tempbool;

							cache_get_value_name_int(0, "OfficialSkin", playerData[extraid][pOfficialSkin]);
							cache_get_value_name_int(0, "OffSkin", playerData[extraid][pOffSkin]);

							cache_get_value_name_int(0, "pAK47", playerData[extraid][pAK47]);
							cache_get_value_name_int(0, "pEagle", playerData[extraid][pEagle]);
							cache_get_value_name_int(0, "pShotgun", playerData[extraid][pShotgun]);
							cache_get_value_name_int(0, "pMP5", playerData[extraid][pMP5]);
							cache_get_value_name_int(0, "pUZI", playerData[extraid][pUZI]);
							cache_get_value_name_int(0, "pColt45", playerData[extraid][pColt45]);
							cache_get_value_name_int(0, "pArtMoney", playerData[extraid][pArtMoney]);

							if(gettime() - playerData[extraid][pTimeout] < 1200) {
							cache_get_value_name_int(0, "OnDuty", 	playerData[extraid][pOnDuty]);
							cache_get_value_name_int(0, "Local", playerData[extraid][pLocal]);

							cache_get_value_name_int(0, "HouseEntered", HouseEntered[extraid]);
							cache_get_value_name_int(0, "BizEntered", BizEntered[extraid]);

							for (new i = 0; i < 13; i ++) {
								format(query, sizeof(query), "WpGun%d", i + 1);
								cache_get_value_name_int(0, query, playerData[extraid][pGuns][i]);

								format(query, sizeof(query), "WpAmmo%d", i + 1);
								cache_get_value_name_int(0, query, playerData[extraid][pAmmo][i]);
							}
							}
							else playerData[extraid][pTimeout] = 0;

							/* PLAYER CONTACTS */
							format(query, sizeof(query), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d", playerData[extraid][pPnumber]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_CONTACTS);

							format(query, sizeof(query), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d", playerData[extraid][pPnumber]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_SMS);

							format(query, sizeof(query), "SELECT * FROM `clothing` WHERE `owner` = %d", playerData[extraid][pID]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_CLOTHING);

							format(query, sizeof(query), "SELECT * FROM `weapon` WHERE `owner` = %d", playerData[extraid][pID]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_HOLDWEAPON);

							format(query, sizeof(query), "SELECT `oldname`, `newname` FROM `namechanges` WHERE `charid`=%d ORDER BY time DESC", playerData[extraid][pID]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_LAST_NAMECHANGE);
								
							format(query, sizeof(query), "SELECT * FROM `drugs_char` WHERE `charID` = '%d'", playerData[extraid][pID]);
							mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_DRUG);

							new bool:foundCar = false;
							foreach(new i : sv_playercar)
							{
								if(CarData[i][carOwner] == playerData[extraid][pID]) {
									playerData[extraid][pPCarkey] = i;
									CarData[i][carDespawn]=false;
									foundCar = true;
								}
							}
							
							if(!foundCar) {
								playerData[extraid][pPCarkey] = 9999;
							}

							if(strfind(ReturnPlayerName(extraid), playerData[extraid][pUsername], true) != -1)
							{
								SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s พยายามที่จะเข้าสู่ระบบด้วยชื่อผู้ใช้ UCP", ReturnPlayerName(extraid));
								//Kick(extraid);
							} 


							/*if(playerData[extraid][pPCarkey] != 9999 && Iter_Contains(sv_playercar, playerData[extraid][pPCarkey]))
							{
								if(CarData[playerData[extraid][pPCarkey]][carOwner] != playerData[extraid][pID])
								{
									playerData[extraid][pPCarkey] = 9999;
								}
								else {
									CarData[playerData[extraid][pPCarkey]][carDespawn]=false;
								}
							}*/
							
							/*if(playerData[extraid][pPCarkey] != 9999 && Iter_Contains(sv_playercar, playerData[extraid][pPCarkey]))
							{
								if(CarData[playerData[extraid][pPCarkey]][carOwner] != playerData[extraid][pID])
								{
									playerData[extraid][pPCarkey] = 9999;
								}
								else {
									CarData[playerData[extraid][pPCarkey]][carDespawn]=false;
								}
							}*/

							if (playerData[extraid][pAdmin] > 0)
							{
								SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: คุณเข้าสู่ระบบเป็น Admin ระดับ %d",playerData[extraid][pAdmin]);

								//for(new i=0;i<17;i++) EnableAntiCheatForPlayer(extraid, i, 0);
							}
							if (playerData[extraid][pTester] > 0)
							{
								SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: คุณเข้าสู่ระบบเป็น Tester ระดับ %d",playerData[extraid][pTester]);
							}


							SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: ยินดีต้อนรับ %s", ReturnRealName(extraid));

							if (playerData[extraid][pFactionID] != -1) {
								playerData[extraid][pFaction] = GetFactionByID(playerData[extraid][pFactionID]);

								if (playerData[extraid][pFaction] == -1) {
									ResetFaction(extraid);
								}
								else {
									if(playerData[extraid][pRChannel] == 911 && GetFactionType(extraid) != FACTION_TYPE_POLICE && GetFactionType(extraid) != FACTION_TYPE_SASD) {
										playerData[extraid][pRChannel] = 0;
									}
								}
							}

							bf_on(player_bf[extraid], IS_LOGGED);

							RemoveBuilding(extraid);
							CreateTextdraws(extraid);
							
							//TextDrawHideForPlayer(extraid, LSRP_LOGO);

							format(str, sizeof(str), "~w~Welcome ~n~~y~   %s", ReturnRealName(extraid));
							GameTextForPlayer(extraid, str, 5000, 1);

							if(!active)
							{
								format(query, sizeof(query), "UPDATE `ucp_users_answers` SET `characters_activate` = 1 WHERE `character_id` = %d", playerData[extraid][pID]), mysql_query(dbCon, query);
								SendClientMessage(extraid, COLOR_LIGHTRED, "NOTE: จนกว่าใบสมัครของคุณและตัวละครของคุณจะได้รับการยืนยันคุณจะไม่สามารถเล่นได้");
								SendClientMessage(extraid, COLOR_LIGHTRED, "VISIT: la-rp.site");
								SendClientMessage(extraid, COLOR_LIGHTRED, "ตัวละครของคุณยังไม่ได้รับการยืนยัน");
								SendClientMessage(extraid, COLOR_LIGHTRED, "ด้วยความเคารพจากทีมผู้ดูแลระบบ LA-RP");
								KickEx(extraid);
							}
							else
							{

								/*if(playerData[extraid][pAdmin] < 1)
								{
									SendClientMessage(extraid, COLOR_LIGHTRED, "เซิร์ฟเวอร์ยังไม่เปิดให้บริการติดตามข่าวสารได้ที่ la-rp.site");
									KickEx(extraid);
								}*/

								SetPlayerScore(extraid, playerData[extraid][pLevel]);
								if(!playerData[extraid][pPnumber]) playerData[extraid][pPnumber] = 10000 + random(99999);

								if (!playerData[extraid][pCreated])
								{
									/*playerData[extraid][pPos][0] = 1643.0010;
									playerData[extraid][pPos][1] = -2331.7056;
									playerData[extraid][pPos][2] = -2.6797;
									playerData[extraid][pPos][3] = 359.8919;
									playerData[extraid][pCreated] = 1;
									playerData[extraid][pLevel] = 1;
									playerData[extraid][pSHealth] = 0.0;*/
									initiateTutorial(extraid);

									return 1;
								}
								SetPlayerTeam(extraid, 1);
								SetSpawnInfo(extraid, 1, playerData[extraid][pModel], 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
								TogglePlayerSpectating(extraid, 0);
								//TogglePlayerControllable(extraid, 0);
								//SetTimerEx("SpawnTimer", 2000, false, "d", extraid);
								
								format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `ID` = %d", gettime(), playerData[extraid][pID]), mysql_query(dbCon, query);
								
								format(query, sizeof(query), "SELECT `Character` FROM `characters` WHERE `Username` != %d AND `LastIP` = '%s'", playerData[extraid][pUserid], playerData[extraid][pIP]);
								mysql_tquery(dbCon, query, "CheckMultiAccount", "d", extraid);

							}
						}
					}
				}
			}
		}
		case THREAD_LAST_NAMECHANGE: {
		    cache_get_row_count(rows);

			if (rows) {
				new oldname[MAX_PLAYER_NAME+1], newname[MAX_PLAYER_NAME+1];
			  	cache_get_value_name(0, "oldname", oldname, MAX_PLAYER_NAME);
			  	cache_get_value_name(0, "newname", newname, MAX_PLAYER_NAME);
			  	

				foreach(new i : sv_houses)
				{
					if(HouseInfo[i][hOwned] == 1 && !strcmp(oldname, HouseInfo[i][hOwner], true))
					{
						format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, newname);
					}
				}
				foreach(new i : sv_business)
				{
					if(BizInfo[i][bOwned] == 1 && !strcmp(oldname, BizInfo[i][bOwner], true))
					{
						format(BizInfo[i][bOwner], MAX_PLAYER_NAME, newname);
					}
				}
			}
		}
		case THREAD_PLAYER_HOLDWEAPON: {

		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++)
			    {
			        new weaponid;
			        cache_get_value_name_int(i, "weaponid", weaponid);

			        new slot = g_aWeaponAttach[weaponid];
			        if(slot != -1) {

			            cache_get_value_name_int(i, "id", PlayerAttachWeapon[extraid][slot][awID]);
						cache_get_value_name_float(i, "x", PlayerAttachWeapon[extraid][slot][aPx]);
						cache_get_value_name_float(i, "y", PlayerAttachWeapon[extraid][slot][aPy]);
						cache_get_value_name_float(i, "z", PlayerAttachWeapon[extraid][slot][aPz]);
						cache_get_value_name_float(i, "rx", PlayerAttachWeapon[extraid][slot][aPrx]);
						cache_get_value_name_float(i, "ry", PlayerAttachWeapon[extraid][slot][aPry]);
						cache_get_value_name_float(i, "rz", PlayerAttachWeapon[extraid][slot][aPrz]);
		    			cache_get_value_name_int(i, "bone", PlayerAttachWeapon[extraid][slot][awBone]);
						cache_get_value_name_int(i, "hide", PlayerAttachWeapon[extraid][slot][awHide]);
			        }
				}
			}
		}
		case THREAD_PLAYER_CLOTHING:
		{
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_CLOTHES)
			    {
					cache_get_value_name_int(i, "id", ClothingData[extraid][i][cl_sid]);
					cache_get_value_name_int(i, "object", ClothingData[extraid][i][cl_object]);
					cache_get_value_name_float(i, "x", ClothingData[extraid][i][cl_x]);
					cache_get_value_name_float(i, "y", ClothingData[extraid][i][cl_y]);
					cache_get_value_name_float(i, "z", ClothingData[extraid][i][cl_z]);
					cache_get_value_name_float(i, "rx", ClothingData[extraid][i][cl_rx]);
					cache_get_value_name_float(i, "ry", ClothingData[extraid][i][cl_ry]);
					cache_get_value_name_float(i, "rz", ClothingData[extraid][i][cl_rz]);
					cache_get_value_name_float(i, "scalex", ClothingData[extraid][i][cl_scalex]);
					cache_get_value_name_float(i, "scaley", ClothingData[extraid][i][cl_scaley]);
					cache_get_value_name_float(i, "scalez", ClothingData[extraid][i][cl_scalez]);
	    			cache_get_value_name_int(i, "bone", ClothingData[extraid][i][cl_bone]);
					cache_get_value_name_int(i, "slot", ClothingData[extraid][i][cl_slot]);
					cache_get_value_name_int(i, "equip", ClothingData[extraid][i][cl_equip]);
					cache_get_value_name_int(i, "materialColor1", ClothingData[extraid][i][cl_mc1]);
					cache_get_value_name_int(i, "materialColor2", ClothingData[extraid][i][cl_mc2]);
					cache_get_value_name(i, "name", ClothingData[extraid][i][cl_name], 32);
				}
			}
		}
		/*case THREAD_PLAYER_SMS:
		{
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_SMS)
			    {
      				SmsData[extraid][i][smsExist] = true;
					cache_get_value_name_int(i, "id", SmsData[extraid][i][smsID]);
					cache_get_value_name_int(i, "PhoneOwner", SmsData[extraid][i][smsOwner]);
					cache_get_value_name_int(i, "PhoneReceive", SmsData[extraid][i][smsReceive]);
					cache_get_value_name_int(i, "Archive", SmsData[extraid][i][smsArchive]);
					cache_get_value_name(i, "PhoneSMS", SmsData[extraid][i][smsText], 128);
					cache_get_value_name(i, "Date", SmsData[extraid][i][smsDate], 24);
					cache_get_value_name_int(i, "ReadSMS", SmsData[extraid][i][smsRead]);
				}
			}
		}*/
		/*case THREAD_PLAYER_CONTACTS:
		{
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < 40)
			    {
					cache_get_value_name_int(i, "contactID", ContactData[extraid][i][contactID]);
					cache_get_value_name_int(i, "contactAddee", ContactData[extraid][i][contactNumber]);
					cache_get_value_name(i, "contactName", ContactData[extraid][i][contactName], 24);

				}
			}
		}*/
		case THREAD_VEHICLE_DRUG: {
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_VEHICLE_DRUG_PACKAGE)
			    {
					cache_get_value_name_int(i, "drugID", VehicleDrug[extraid][i][drugID]);
					cache_get_value_name_int(i, "drugType", VehicleDrug[extraid][i][drugType]);
					cache_get_value_name_float(i, "drugQTY", VehicleDrug[extraid][i][drugQTY]);
					cache_get_value_name_int(i, "drugStrength", VehicleDrug[extraid][i][drugStrength]);
					cache_get_value_name_int(i, "drugPackage", VehicleDrug[extraid][i][drugPackage]);
				}
			}
		}
		case THREAD_PLAYER_DRUG: {
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_DRUG_PACKAGE)
			    {
					cache_get_value_name_int(i, "drugID", PlayerDrug[extraid][i][drugID]);
					cache_get_value_name_int(i, "drugType", PlayerDrug[extraid][i][drugType]);
					cache_get_value_name_float(i, "drugQTY", PlayerDrug[extraid][i][drugQTY]);
					cache_get_value_name_int(i, "drugStrength", PlayerDrug[extraid][i][drugStrength]);
					cache_get_value_name_int(i, "drugPackage", PlayerDrug[extraid][i][drugPackage]);
				}
			}
		}
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_row_count(rows);

		    if (rows) {

				/*if(SQL_IsLogged(extraid))
					return Kick(extraid);*/

				cache_get_value_name_int(0, "ID", playerData[extraid][pUserid]);
				//strcpy(playerData[extraid][pUsername], ReturnPlayerName(extraid));
				format(playerData[extraid][pUsername], 20, ReturnPlayerName(extraid));
				GetPlayerIp(extraid, playerData[extraid][pIP], 16);

				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การเข้าสู่ระบบ "EMBED_YELLOW"[la-rp.site]"EMBED_WHITE"\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเลือกตัวละครของท่าน\n- เปลี่ยนสกินตัวละครได้ที่หน้าเว็บไซต์ "EMBED_YELLOW"(UCP)", "ส่งรหัสผ่าน", "ออกจากเกม");
				/*mysql_format(dbCon, query, sizeof(query), "SELECT `ID`,`Character`,`Level`,`Model` FROM `characters` WHERE `Username` = '%e'", ReturnPlayerName(extraid));
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_FIND_CHARACTER);*/

	/*
				GetPlayerIp(playerid, playerData[playerid][pIP], 16);
				Dialog_Show(playerid, D_AccountLogin, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Southwood Roleplay", "การเข้าสู่ระบบ [sw-rp.in.th]\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเลือกตัวละครของท่าน\n- เปลี่ยนสกินตัวละครได้ที่หน้าเว็บไซต์ (UCP)", "ส่งรหัสผ่าน", "ออกจากเกม");*/
			}
			else {
				mysql_format(dbCon, query, sizeof(query), "SELECT a.ID, a.Username FROM `characters` c LEFT JOIN `accounts` a ON c.Username = a.ID WHERE c.Character = '%e'", ReturnPlayerName(extraid));
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_WRONG);
				/*
				SendClientMessageEx(extraid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"ไม่พบบัญชีผู้ใช้ชื่อ %s", ReturnPlayerName(extraid));
				SendClientMessage(extraid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"ตรวจสอบให้แน่ใจว่าคุณใช้ชื่อบัญชี(หลัก)ของคุณ ไม่ใช่ชื่อตัวละครในการเข้าสู่ระบบ!");
				SendClientMessage(extraid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"ถ้าต้องการสร้างบัญชีผู้ใช้โปรดไปที่ http://la-rp.site/");
				KickEx(extraid);*/
			}
		}
		case THREAD_CHECK_WRONG: {
			cache_get_row_count(rows);

		    if (rows) 
			{
				/*if(SQL_IsLogged(extraid))
					return Kick(extraid);*/

				new character_name[20];
				cache_get_value_name(0, "Username", character_name, 20);
				if (!isnull(character_name) && SetPlayerName(extraid, character_name) != -1) {
					cache_get_value_name_int(0, "ID", playerData[extraid][pUserid]);
					format(playerData[extraid][pUsername], 20, character_name);
					GetPlayerIp(extraid, playerData[extraid][pIP], 16);
					return Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การเข้าสู่ระบบ "EMBED_YELLOW"[la-rp.site]"EMBED_WHITE"\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเลือกตัวละครของท่าน\n- เปลี่ยนสกินตัวละครได้ที่หน้าเว็บไซต์ "EMBED_YELLOW"(UCP)", "ส่งรหัสผ่าน", "ออกจากเกม");
				}
			}
			SendClientMessageEx(extraid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"ไม่พบบัญชีผู้ใช้ชื่อ %s", ReturnPlayerName(extraid));
			SendClientMessage(extraid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"ตรวจสอบให้แน่ใจว่าคุณใช้ชื่อบัญชี(หลัก)ของคุณ ไม่ใช่ชื่อตัวละครในการเข้าสู่ระบบ!");
			SendClientMessage(extraid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"ถ้าต้องการสร้างบัญชีผู้ใช้โปรดไปที่ http://la-rp.site/");
			KickEx(extraid);
		}					
		case THREAD_BAN_LOOKUP: {
		    cache_get_row_count(rows);

		    if (rows) {

			    new
			        reason[64],
					date[36],
					username[MAX_PLAYER_NAME],
					banner[24],
					perm
				;

          		cache_get_value_name(0, "name", username, MAX_PLAYER_NAME);
          		cache_get_value_name(0, "bannedby", banner, 24);
		        cache_get_value_name(0, "date", date, 36);
				cache_get_value_name(0, "reason", reason, 64);
				cache_get_value_name_int(0, "perm", perm);

				if (isnull(username)) {
					if (perm) Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "แจ้งเตือนตัวละครที่ถูกแบน", ""EMBED_RED"ไอพีของคุณถูกแบน"EMBED_WHITE"\n\nไอพี: "EMBED_YELLOW"%s"EMBED_WHITE"\nแบนโดย: %s\nวันที่: %s\nสาเหตุ: "EMBED_YELLOW"%s"EMBED_WHITE"\n\n"EMBED_CYAN"เพื่อยื่นคำร้องการโดนแบนครั้งนี้โปรดติดต่อผู้ดูแลระบบ", "ปิด", "", playerData[extraid][pIP], banner, date, reason);
					else {
						new datediff;
						cache_get_value_name_int(0, "datediff", datediff);
						Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "แจ้งเตือนตัวละครที่ถูกแบน", ""EMBED_RED"ไอพีของคุณถูกแบน"EMBED_WHITE"\n\nไอพี: "EMBED_YELLOW"%s"EMBED_WHITE"\nแบนโดย: %s\nวันที่: %s ("EMBED_LIGHTRED"%d"EMBED_WHITE" วัน)\nสาเหตุ: "EMBED_YELLOW"%s"EMBED_WHITE"\n\n"EMBED_CYAN"เพื่อยื่นคำร้องการโดนแบนครั้งนี้โปรดติดต่อผู้ดูแลระบบ", "ปิด", "", playerData[extraid][pIP], banner, date, datediff, reason);
					}
				}
				else {
					if (perm) Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "แจ้งเตือนตัวละครที่ถูกแบน", ""EMBED_RED"คุณถูกแบน"EMBED_WHITE"\n\nตัวละคร: "EMBED_YELLOW"%s"EMBED_WHITE"\nแบนโดย: %s\nวันที่: %s\nสาเหตุ: "EMBED_YELLOW"%s"EMBED_WHITE"\n\n"EMBED_CYAN"เพื่อยื่นคำร้องการโดนแบนครั้งนี้โปรดติดต่อผู้ดูแลระบบ", "ปิด", "", username, banner, date, reason);
					else {
						new datediff;
						cache_get_value_name_int(0, "datediff", datediff);
						Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "แจ้งเตือนตัวละครที่ถูกแบน", ""EMBED_RED"คุณถูกแบน"EMBED_WHITE"\n\nตัวละคร: "EMBED_YELLOW"%s"EMBED_WHITE"\nแบนโดย: %s\nวันที่: %s ("EMBED_LIGHTRED"%d"EMBED_WHITE" วัน)\nสาเหตุ: "EMBED_YELLOW"%s"EMBED_WHITE"\n\n"EMBED_CYAN"เพื่อยื่นคำร้องการโดนแบนครั้งนี้โปรดติดต่อผู้ดูแลระบบ", "ปิด", "", username, banner, date, datediff, reason);
					}
				}
				KickEx(extraid);
				return 1;
			}
			SQL_ForceLogin(extraid);
		}
		case THREAD_CHECK_CHARACTER: {
		    new characterid;
		    cache_get_row_count(rows);
		    for(new i=0;i!=rows;i++)
		    {
		    	cache_get_value_index_int(i, 0, characterid);

		    	foreach (new x : Player)
		    	{
		    	    if(characterid == playerData[x][pID])
		    	    {
		    	        i=rows;
		    	        Kick(extraid);
						printf("%d (%s) Multiple account login", extraid, ReturnPlayerName(extraid));
		    	        return 1;
		    	    }
		    	}
		    }
		}
		case THREAD_UNBAN: {


		    if(cache_affected_rows()) {

				new name[MAX_PLAYER_NAME+1];
				GetPVarString(extraid, "unban_name", name, sizeof(name));

				SendClientMessage(extraid, COLOR_WHITE, "SERVER: ปลดแบนสำเร็จแล้ว !");

				new unban_str[40];
				format(unban_str, sizeof(unban_str), "ปลดแบนตัวละคร %s", name);
    			SQL_LogAdmin_Action(extraid, "IG", unban_str);

			}
			else SendClientMessage(extraid, COLOR_LIGHTRED, "SERVER: ไม่พบข้อมูลที่ถูกแบนของตัวละครนี้ !");

			DeletePVar(extraid, "unban_name");
		}
		/*case THREAD_FIND_CHARACTER:
		{
   			cache_get_row_count(rows);

			if (rows)
			{
				foreach(new i : Player) {
					if(playerData[i][pUserid] == playerData[extraid][pUserid] && i != extraid) {
						SendClientMessage(extraid, COLOR_LIGHTRED, "ERROR: ตรวจพบตัวละครของคุณออนไลน์อยู่ในขณะนี้");
						KickEx(extraid);
						return true;
					}
				}
				
				for(new i=0; i!=rows; ++i)
				{
					cache_get_value_name_int(i, "ID", characterData[extraid][i][charID]);
					cache_get_value_name(i, "Character", characterData[extraid][i][charName], MAX_PLAYER_NAME);
					cache_get_value_name_int(i, "Level", characterData[extraid][i][charLevel]);
					cache_get_value_name_int(i, "Model", characterData[extraid][i][charSkin]);
				}
				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", "สวัสดี\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเข้าถึงการเลือกตัวละคร\n\nหากคุณยังไม่ได้ลงทะเบียนกับ LS-RP คุณสามารถสร้างบัญชีของคุณได้ที่ la-rp.site", "ส่งข้อมูล", "ออก");
			}
		    else {
				SendClientMessage(extraid, COLOR_LIGHTRED, "บัญชีของคุณยังไม่ได้ตั้งค่าไว้ให้ใช้ในเกม (ยังไม่ได้ยื่นใบสมัคร/ตัวละครยังไม่ถูกยืนยัน)");
				SendClientMessage(extraid, COLOR_LIGHTRED, "โปรดเข้าสู่ระบบด้วยบัญชีของคุณบน la-rp.site และลองใหม่อีกครั้ง"), KickEx(extraid);
			}
		}*/
	}
	return 1;
}

forward selectCharacter(playerid);
public selectCharacter(playerid) {
	
	new rows;
 	cache_get_row_count(rows);
	if (rows)
	{
		TextDrawShowForPlayer(playerid, LSRP_LOGO);
				
		emptytext[playerid] = CreatePlayerTextDraw(playerid, -300.0, 0.0, "_");
		PlayerTextDrawLetterSize(playerid, emptytext[playerid], 1.0, 1.0);
		PlayerTextDrawTextSize(playerid, emptytext[playerid], 597.000000, 0.119998);
		PlayerTextDrawAlignment(playerid, emptytext[playerid], 1);
		PlayerTextDrawColor(playerid, emptytext[playerid], -1);
		PlayerTextDrawUseBox(playerid, emptytext[playerid], 1);
		PlayerTextDrawBoxColor(playerid, emptytext[playerid], 0);
		PlayerTextDrawBackgroundColor(playerid, emptytext[playerid], 255);
		PlayerTextDrawFont(playerid, emptytext[playerid], 0);
		PlayerTextDrawSetProportional(playerid, emptytext[playerid], 1);

		new str[32], id, name[MAX_PLAYER_NAME], level, model, cash, donaterank, playinghours, isban;
		new Float:td_posX= 270.0 - (65.0 * float(rows - 1)) + (5.0 * float(rows - 1));
		for(new i=0; i!=rows; ++i) {

			cache_get_value_name_int(i, "ID", id);
			cache_get_value_name(i, "Character", name, MAX_PLAYER_NAME);
			cache_get_value_name_int(i, "Level", level);
			cache_get_value_name_int(i, "Model", model);
			cache_get_value_name_int(i, "DonateRank", donaterank);
			cache_get_value_name_int(i, "PlayingHours", playinghours);
			cache_get_value_name_int(i, "Cash", cash);
			cache_get_value_name_int(i, "isban", isban);

			if (isban) {
				mysql_format(dbCon, XLQuery, sizeof(XLQuery), "SELECT *, DATEDIFF(expire, date) as datediff FROM `bans` WHERE character_id = %d AND id = %d", id, isban);
				mysql_tquery(dbCon, XLQuery, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
			}

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX, 160.000000, "mdl-2003:namebox");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 4);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.600000, 2.000000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 104.500000, 16.000000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 51.0, 163.000000, name);
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.133331, 0.800001);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 115.0, 96.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX, 180.000000, "mdl-2003:contentbox");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 4);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.600000, 2.000000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 105.000000, 258.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX - 55.0, 183.000000, "Preview_Model");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 5);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.600000, 2.000000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 217.000000, 176.000000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			// Model
			PlayerTextDrawSetPreviewModel(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], model);
			PlayerTextDrawSetPreviewRot(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -10.000000, 0.000000, 0.000000, 1.000000);
			PlayerTextDrawSetPreviewVehCol(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1, 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);


			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 6.0, 354.000000, "IN GAME LEVEL");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);
			format(str, sizeof(str), "%d", level);
			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 98.0, 354.000000, str);
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 3);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1962934017);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 6.0, 367.000000, "Playing hours");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);
			format(str, sizeof(str), "%d", playinghours);
			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 98.0, 367.000000, str);
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 3);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1962934017);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 6.0, 379.000000, "Money");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);
			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 98.0, 379.000000, FormatNumber(cash));
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 3);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 9109759);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 6.0, 391.000000, "Status");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 97.5, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);
			
			switch(donaterank) {
				case 1: {
					format(str, sizeof(str), "~h~~r~Bronze");
				}
				case 2: {
					format(str, sizeof(str), "~h~~w~~y~Silver");
				}
				case 3: {
					format(str, sizeof(str), "~h~~y~Gold");
				}	
				default: {
					format(str, sizeof(str), "~w~Regular");
				}
			}
			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 98.0, 391.000000, str);
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.187500, 1.200000);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 362.500000, 17.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 3);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -294256385);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 52.0, 353.000000, "_");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.600000, -0.299995);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 33.5, 88.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 52.0, 412.000000, "_"); // padding left 52
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.600000, -0.299995);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 298.500000, 88.500000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 2);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], -1);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 0);

			charselectPlayerTextDrawID[playerid][i] = charselectPlayerTextDrawCount[playerid];
			charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]] = CreatePlayerTextDraw(playerid, td_posX + 7.0, 415.000000, "SELECT CHARACTER");
			PlayerTextDrawFont(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 3);
			PlayerTextDrawLetterSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0.291666, 1.599997);
			PlayerTextDrawTextSize(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], td_posX + 7.0 + 89.0, 16.000000);
			PlayerTextDrawSetOutline(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetShadow(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawAlignment(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1097458175);
			PlayerTextDrawBackgroundColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 255);
			PlayerTextDrawBoxColor(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 50);
			PlayerTextDrawUseBox(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 0);
			PlayerTextDrawSetProportional(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]], 1);
			PlayerTextDrawSetSelectable(playerid, charselectPlayerTextDraw[playerid][charselectPlayerTextDrawCount[playerid]++], 1);			

			format(str, sizeof(str), "characterID%d", i);
			SetPVarInt(playerid, str, id);
			
			td_posX += 120.0;
		}
		// printf("Textdraw: %d",charselectPlayerTextDrawCount[playerid]);
		for (new i; i < charselectPlayerTextDrawCount[playerid]; i++)
			PlayerTextDrawShow(playerid, charselectPlayerTextDraw[playerid][i]);

		SelectTextDraw(playerid, 0xFFFFFF95);
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "บัญชีของคุณยังไม่ได้ตั้งค่าไว้ให้ใช้ในเกม (ยังไม่ได้ยื่นใบสมัคร/ตัวละครยังไม่ถูกยืนยัน)");
		SendClientMessage(playerid, COLOR_LIGHTRED, "โปรดเข้าสู่ระบบด้วยบัญชีของคุณบน la-rp.site และลองใหม่อีกครั้ง");
		KickEx(playerid);
	}
	return 1;
}

forward checkCharacter(playerid, characterid);
public checkCharacter(playerid, characterid) {
	
	new rows;
 	cache_get_row_count(rows);
	if (rows)
	{
		new actived,lastlogin,lastip[16],secretword[16],character_name[MAX_PLAYER_NAME];
		cache_get_value_name_int(0, "Activated", actived);
		cache_get_value_name_int(0, "LastLogin", lastlogin);
		cache_get_value_name(0, "LastIP", lastip, 16);
		cache_get_value_name(0, "Secret", secretword, 16);
		cache_get_value_name(0, "Character", character_name, MAX_PLAYER_NAME);
		strcpy(playerData[playerid][pCharactername], character_name);
		playerData[playerid][pID]=characterid;

		if(isnull(secretword))
		{
			Dialog_Show(playerid, AddSecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"ข้อควรระวังด้านความปลอดภัย\n\nเราได้เปิดใช้การยืนยันตัวตนด้วยรหัสลับ ซึ่งเป็นคำที่เป็นความลับที่คุณจะได้รับเมื่อมีการเปลี่ยนแปลงการเชื่อมต่อใหม่\n\nคุณยังไม่ได้กรอกข้อมูลนี้ดังนั้นโปรดใช้เวลาของคุณทำการกรอกคำที่เป็นความลับและคุณจะ{FF0000}ต้องจดจำ"EMBED_WHITE"\n\nคำแนะนำว่านี่ไม่ใช่รหัสผ่านของคุณ", "ยืนยัน", "ออก");
		}
		/*else if(gettime() - lastlogin >= 1209600 && actived) // 14 day or 2 week 2 เดือน = 5184000
		{
			SendClientMessage(playerid, COLOR_YELLOW, "การยืนยันตนเองสองระดับ");
			SendClientMessage(playerid, COLOR_YELLOW, "บัญชีนี้ไม่ได้เข้าสู่ระบบในระยะเวลาที่นานพอสมควร");
			SendClientMessage(playerid, COLOR_YELLOW, "เพื่อให้บัญชีของคุณปลอดภัย เราต้องการให้คุณยืนยันความเป็นเจ้าของบัญชีของคุณ");
			new query[64];
			format(query,sizeof(query),"ip=%s&time=%d&id=%d&username=%s", playerData[playerid][pIP], gettime(), playerData[playerid][pID], playerData[playerid][pUsername]);
			HTTP(playerid,HTTP_POST,"la-rp.site/php/user/verify_email.php",query,"HttpVerifyRequest");
		}*/
		else if((isnull(lastip) || strcmp(lastip, playerData[playerid][pIP], true)) && actived)
		{
			Dialog_Show(playerid, SecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การละเมิดความปลอดภัยที่เป็นไปได้\n\nเซิร์ฟเวอร์ได้ตั้งค่าสถานะให้คุณว่าอาจไม่ได้เป็นเจ้าของตัวละครนี้โปรดเขียนรหัสลับของตัวละครนี้ในช่องด้านล่างเพื่อยืนยันว่าเป็นของคุณ", "ยืนยัน", "ออก");
		}
		else {
			//Check Ban First

			mysql_format(dbCon, XLQuery, sizeof(XLQuery), "SELECT *, DATEDIFF(expire, date) as datediff FROM `bans` WHERE (character_id = %d AND perm = 1) OR (character_id = %d AND expire > NOW() AND perm = 0) OR (playerIP = '%e' AND perm = 1) OR (playerIP = '%e' AND expire > NOW() AND perm = 0)", characterid, characterid, playerData[playerid][pIP], playerData[playerid][pIP]);
			mysql_tquery(dbCon, XLQuery, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);

			//SQL_ForceLogin(playerid);
		}
	}
	return 1;
}
/*
forward Signal_Load();
public Signal_Load()
{
    new
	    rows,
		string[64];

    cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_SIGNALTOWER)
	{
		cache_get_value_name_int(i, "id", SignalData[i][signalID]);
	    SignalData[i][signalExists] = true;
		cache_get_value_name_float(i, "t_posX", SignalData[i][signalX]);
		cache_get_value_name_float(i, "t_posY", SignalData[i][signalY]);
		cache_get_value_name_float(i, "t_posZ", SignalData[i][signalZ]);
		cache_get_value_name_float(i, "t_range", SignalData[i][signalRange]);

	    cache_get_value_name(i, "t_name", string);
		printf("<zone name=\"%s\" type=\"1\" x=\"%.0f\" y=\"%.0f\" r=\"%.0f\" />", string, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalRange]);
		//printf("{\"%s\"}, %f, %f, %f, %f},", string, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ], SignalData[i][signalRange]);
	    //format(SignalData[i][signalName], 64, string);
	    strpack(SignalData[i][signalName], string, 64 char);
	    //SignalData[i][signalObject] = CreateDynamicObject(13758, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ], 0.00, 0.00, 0.00);
		

	}
}*/
/*
Signal_Create(playerid, name[])
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_SIGNALTOWER; i ++)
		{
	    	if (!SignalData[i][signalExists])
		    {
    	        SignalData[i][signalExists] = true;

    	        SignalData[i][signalX] = x;
    	        SignalData[i][signalY] = y;
    	        SignalData[i][signalZ] = z;
    	        SignalData[i][signalRange] = 500.00;
    	        //format(SignalData[i][signalName], 64, name);
    	        strpack(SignalData[i][signalName], name, 64 char);
                //SignalData[i][signalObject] = CreateDynamicObject(13758, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ], 0.00, 0.00, 0.00);

				mysql_tquery(dbCon, "INSERT INTO `signal_tower` (`t_range`) VALUES(500)", "OnSignalCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Signal_Delete(signalid)
{
	if (signalid != -1 && SignalData[signalid][signalExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `signal_tower` WHERE `id` = '%d'", SignalData[signalid][signalID]);
		mysql_tquery(dbCon, string);

	    SignalData[signalid][signalExists] = false;
	    SignalData[signalid][signalID] = 0;
	}
	return 1;
}

Signal_Save(signalid)
{
	new
	    query[256];

	format(query, sizeof(query), "UPDATE `signal_tower` SET `t_posX` = '%.4f', `t_posY` = '%.4f', `t_posZ` = '%.4f', `t_range` = '%.4f' , `t_name` = '%s' WHERE `id` = '%d'",
	    SignalData[signalid][signalX],
	    SignalData[signalid][signalY],
	    SignalData[signalid][signalZ],
	    SignalData[signalid][signalRange],
	    SignalData[signalid][signalName],
	    SignalData[signalid][signalID]
	);
	return mysql_tquery(dbCon, query);
}
*/
Entrance_Nearest(playerid, Float:dist = 5.0)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach(new i : sv_entrance) if (GetPlayerInterior(playerid) == EntranceData[i][eEnInt] && GetPlayerVirtualWorld(playerid) == EntranceData[i][eEnWorld])
	{
		new
      		Float:temp = FLOAT_NAN;
      		
		temp = GetPlayerDistanceFromPoint(playerid, EntranceData[i][ePosEnX], EntranceData[i][ePosEnY], EntranceData[i][ePosEnZ]);

		if (temp < fDistance && temp <= dist)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Entrance_Inside(playerid, Float:dist = 5.0)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach(new i : sv_entrance) if (GetPlayerInterior(playerid) == EntranceData[i][eExInt] && GetPlayerVirtualWorld(playerid) == EntranceData[i][eExWorld])
	{
		new
      		Float:temp = FLOAT_NAN;

		temp = GetPlayerDistanceFromPoint(playerid, EntranceData[i][ePosExX], EntranceData[i][ePosExY], EntranceData[i][ePosExZ]);

		if (temp < fDistance && temp <= dist)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Garage_Nearest(playerid, Float:dist = 4.0)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach(new i : sv_garage) if (GetPlayerInterior(playerid) == GarageData[i][gEnInt] && GetPlayerVirtualWorld(playerid) == GarageData[i][gEnWorld])
	{
		new
      		Float:temp = FLOAT_NAN;
      		
		temp = GetPlayerDistanceFromPoint(playerid, GarageData[i][gPosEnX], GarageData[i][gPosEnY], GarageData[i][gPosEnZ]);

		if (temp < fDistance && temp <= dist)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Garage_Inside(playerid, Float:dist = 5.0)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach(new i : sv_garage) if (GetPlayerInterior(playerid) == GarageData[i][gExInt] && GetPlayerVirtualWorld(playerid) == GarageData[i][gExWorld])
	{
		new
      		Float:temp = FLOAT_NAN;

		temp = GetPlayerDistanceFromPoint(playerid, GarageData[i][gPosExX], GarageData[i][gPosExY], GarageData[i][gPosExZ]);

		if (temp < fDistance && temp <= dist)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

Float:GetPointDistanceToPoint(Float:x1,Float:y1,Float:x2,Float:y2)
{
  new Float:x, Float:y;
  x = x1-x2;
  y = y1-y2;
  return floatsqroot(x*x+y*y);
}

GetPlayerClosestRadioTower(playerid, &Float:fDistance = FLOAT_INFINITY)
{
	new
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(RadioTower); i ++)
	{
		new
      		Float:temp = FLOAT_NAN, Float:playerPosX, Float:playerPosY, Float:playerPosZ;
      	
		GetDynamicPlayerPos(playerid, playerPosX, playerPosY, playerPosZ);
		
	    temp = GetPointDistanceToPoint(playerPosX, playerPosY, RadioTower[i][RadioX], RadioTower[i][RadioY]);

		if (temp < fDistance && RadioTower[i][RadioRange] >= temp)
		{
		    fDistance = temp;
		    iIndex = i;
		}
	}
	return iIndex;
}

GetDynamicPlayerPos(playerid, &Float:x, &Float:y, &Float:z)
{
	if(playerData[playerid][pLocal] == 255)
	{
	    GetPlayerPos(playerid, x, y, z);
	}
	else
	{
		/* House & Business, HQ Faction... */
		if(playerData[playerid][pLocal] == 101) {
			x = 1554.4711;
			y = -1675.6097;
			z = 16.1953;
		}
		else if(playerData[playerid][pLocal] == 102) {
			x = 1481.0662;
			y = -1771.3069;
			z = 18.7958;
		}
		else if(playerData[playerid][pLocal] == 103) {
			x = 1173.1841;
			y = -1323.3143;
			z = 15.3952;
		}
		else if(playerData[playerid][pLocal] == 104) {
			x = 533.4344;
			y = -1812.9364;
			z = 6.5781;
		}
		else if(playerData[playerid][pLocal] == 105) {
			x = 628.5346;
			y = -571.8113;
			z = 17.1738;
		}
		else if(playerData[playerid][pLocal] == 106) {
			x = 2317.3894;
			y = -1366.0944;
			z = 24.1246;
		}
		else if(playerData[playerid][pLocal] == 107) {
			x = 123.3456;
			y = 1918.5425;
			z = 19.9584;
		}
		else if(playerData[playerid][pLocal] == 110) {
			x = 1570.4418;
			y = -1337.4415;
			z = 16.4844;
		}
		else
		{
			if(BizEntered[playerid] != -1)
			{
				x = BizInfo[BizEntered[playerid]][bEntranceX];
				y = BizInfo[BizEntered[playerid]][bEntranceY];
				z = BizInfo[BizEntered[playerid]][bEntranceZ];
			}
			else if(HouseEntered[playerid] != -1)
			{
				x = HouseInfo[HouseEntered[playerid]][hEntranceX];
				y = HouseInfo[HouseEntered[playerid]][hEntranceY];
				z = HouseInfo[HouseEntered[playerid]][hEntranceZ];
			}
		}
	}
	return 1;
}


GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

forward Movedoor_Load();
public Movedoor_Load()
{
	new
	    rows,
		str[64],
		total;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_MOVEDOORS)
	{
        cache_get_value_index_int(i, 0, Doors[i][doorID]);
        cache_get_value_index_int(i, 1, Doors[i][doorModel]);
        cache_get_value_index_int(i, 2, Doors[i][doorFaction]);

        cache_get_value_index_float(i, 3, Doors[i][doorPosX]);
        cache_get_value_index_float(i, 4, Doors[i][doorPosY]);
        cache_get_value_index_float(i, 5, Doors[i][doorPosZ]);
        cache_get_value_index_float(i, 6, Doors[i][doorPosRX]);
        cache_get_value_index_float(i, 7, Doors[i][doorPosRY]);
        cache_get_value_index_float(i, 8, Doors[i][doorPosRZ]);

        cache_get_value_index_int(i, 9, Doors[i][doorInterior]);
        cache_get_value_index_int(i, 10, Doors[i][doorVirtualWorld]);

        cache_get_value_index(i, 11, str);
        format(Doors[i][doorName], 64, "%s", str);

        cache_get_value_index_float(i, 12, Doors[i][doorOpenSpeed]);
        cache_get_value_index_float(i, 13, Doors[i][doorMoveX]);
        cache_get_value_index_float(i, 14, Doors[i][doorMoveY]);
        cache_get_value_index_float(i, 15, Doors[i][doorMoveZ]);

        cache_get_value_index_float(i, 16, Doors[i][doorMoveRX]);
        cache_get_value_index_float(i, 17, Doors[i][doorMoveRY]);
        cache_get_value_index_float(i, 18, Doors[i][doorMoveRZ]);
		
		cache_get_value_index_int(i, 19, Doors[i][doorLink]);

		Doors[i][doorObject] = CreateDynamicObject(Doors[i][doorModel], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ], Doors[i][doorVirtualWorld], Doors[i][doorInterior], -1, 200.0);

		Iter_Add(sv_movedoors, i);
		/*printf("// %s", str);
		printf("PrisonCellA[%d] = CreateDynamicObject(%d, %f, %f, %f, %f, %f, %f, %d, %d, -1, 200.0);", total, Doors[i][doorModel], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ], Doors[i][doorVirtualWorld], Doors[i][doorInterior]);
		printf("MoveDynamicObject(PrisonCellA[%d], %f, %f, %f, 2.5, %f, %f, %f);", total, Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
*/
		total++;
		
	}
	printf("Loaded %d dynamic movable doors from MySQL.", total);
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	new
	    rows,
	    rank[16];
		//str[32];

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
		cache_get_value_name_int(i, "factionID", FactionData[i][factionID]);

	    cache_get_value_name(i, "factionName", FactionData[i][factionName], 64);
		cache_get_value_name_int(i, "factionColor", FactionData[i][factionColor]);
		cache_get_value_name_int(i, "factionType", FactionData[i][factionType]);
		cache_get_value_name_int(i, "factionRanks", FactionData[i][factionRanks]);
		cache_get_value_name_int(i, "factionSkins", FactionData[i][factionSkins]);
		cache_get_value_name_int(i, "factionVehicle", FactionData[i][factionVehicle]);
			
		for (new j = 0; j != 20; j ++) {
		    format(rank, sizeof(rank), "factionRank%d", j + 1);
		    cache_get_value_name(i, rank, FactionRanks[i][j], 32);
		}
		for (new j = 0; j != MAX_FACTION_TYPE_SKINS; j ++) {
		    format(rank, sizeof(rank), "factionSkin%d", j + 1);
		    cache_get_value_name_int(i, rank, FactionSkins[i][j]);
		}

		cache_get_value_name(i, "factionPlate", FactionData[i][factionPlate], 32);
		format(CarData[i][carPlate], 32, FactionData[i][factionPlate]);

		//cache_get_value_name(i, "factionPlate", FactionData[i][factionPlate], 32);
	}
	return 1;
}

forward Warehouse_Load();
public Warehouse_Load()
{
	new
	    str[256],
	    rows;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_WAREHOUSE)
	{

		cache_get_value_name_int(i, "fw_id",WareHouseInfo[i][whID]);
		cache_get_value_name_float(i, "fw_x", WareHouseInfo[i][whX]);
		cache_get_value_name_float(i, "fw_y", WareHouseInfo[i][whY]);
		cache_get_value_name_float(i, "fw_z", WareHouseInfo[i][whZ]);

		cache_get_value_name(i, "fw_player1", str);
		strpack(WareHouseInfo[i][whPlayer1], str, MAX_PLAYER_NAME char);
		
		cache_get_value_name(i, "fw_player2", str);
		strpack(WareHouseInfo[i][whPlayer2], str, MAX_PLAYER_NAME char);

		cache_get_value_name_int(i, "fw_type",WareHouseInfo[i][whType]);
		cache_get_value_name_int(i, "fw_stock",WareHouseInfo[i][whStock]);
		cache_get_value_name_int(i, "fw_maxstock",WareHouseInfo[i][whMaxstock]);

		cache_get_value_name_int(i, "fw_world",WareHouseInfo[i][whWorld]);
		cache_get_value_name_int(i, "fw_int",WareHouseInfo[i][whInt]);

		Warehouse_Refresh(i);

		Iter_Add(sv_warehouse, i);
	}
	printf("Loaded %d warehouse from MYSQL.", rows);
	return 1;
}


forward Biz_Load();
public Biz_Load()
{
	new
	    str[256],
	    rows;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_BIZ)
	{
		cache_get_value_name_int(i, "biz_id", BizInfo[i][bID]);
		cache_get_value_name_int(i, "biz_owned", BizInfo[i][bOwned]);

		cache_get_value_name(i, "biz_owner", BizInfo[i][bOwner], 24);
		cache_get_value_name(i, "biz_info", BizInfo[i][bInfo], 256);
		//cache_get_value_name_int(i, "biz_open", BizInfo[i][bActive]);
		cache_get_value_name(i, "biz_items", str);
		AssignBusinessProducts(i, str);

		cache_get_value_name(i, "biz_upgradeitems", str);
		AssignBusinessItems(i, str);

		cache_get_value_name_int(i, "biz_type", BizInfo[i][bType]);
		cache_get_value_name_int(i, "biz_subtype", BizInfo[i][bsubType]);
		cache_get_value_name_float(i, "biz_enX", BizInfo[i][bEntranceX]);
		cache_get_value_name_float(i, "biz_enY", BizInfo[i][bEntranceY]);
		cache_get_value_name_float(i, "biz_enZ", BizInfo[i][bEntranceZ]);
		cache_get_value_name_float(i, "biz_etX", BizInfo[i][bExitX]);
		cache_get_value_name_float(i, "biz_etY", BizInfo[i][bExitY]);
		cache_get_value_name_float(i, "biz_etZ", BizInfo[i][bExitZ]);
		cache_get_value_name_int(i, "biz_level", BizInfo[i][bLevelNeeded]);
		cache_get_value_name_int(i, "biz_price", BizInfo[i][bBuyPrice]);
		cache_get_value_name_int(i, "biz_encost", BizInfo[i][bEntranceCost]);
		cache_get_value_name_int(i, "biz_till", BizInfo[i][bTill]);
		cache_get_value_name_int(i, "biz_locked", BizInfo[i][bLocked]);
		cache_get_value_name_int(i, "biz_interior", BizInfo[i][bInterior]);
		cache_get_value_name_int(i, "biz_world", BizInfo[i][bWorld]);
		cache_get_value_name_int(i, "biz_prod", BizInfo[i][bProducts]);
		cache_get_value_name_int(i, "biz_maxprod", BizInfo[i][bMaxProducts]);
		cache_get_value_name_int(i, "biz_priceprod", BizInfo[i][bPriceProd]);
		cache_get_value_name_float(i, "biz_carX", BizInfo[i][bBuyingCarX]);
		cache_get_value_name_float(i, "biz_carY", BizInfo[i][bBuyingCarY]);
		cache_get_value_name_float(i, "biz_carZ", BizInfo[i][bBuyingCarZ]);
		cache_get_value_name_float(i, "biz_carA", BizInfo[i][bBuyingCarA]);
		cache_get_value_name_float(i, "biz_boatX", BizInfo[i][bBuyingBoatX]);
		cache_get_value_name_float(i, "biz_boatY", BizInfo[i][bBuyingBoatY]);
		cache_get_value_name_float(i, "biz_boatZ", BizInfo[i][bBuyingBoatZ]);
		cache_get_value_name_float(i, "biz_boatA", BizInfo[i][bBuyingBoatA]);
		cache_get_value_name_float(i, "biz_airX", BizInfo[i][bBuyingAirX]);
		cache_get_value_name_float(i, "biz_airY", BizInfo[i][bBuyingAirY]);
		cache_get_value_name_float(i, "biz_airZ", BizInfo[i][bBuyingAirZ]);
		cache_get_value_name_float(i, "biz_airA", BizInfo[i][bBuyingAirA]);
		cache_get_value_name_int(i, "biz_entime", BizInfo[i][bEntime]);

		Biz_Refresh(i);

		Iter_Add(sv_business, i);

		BizInfo[i][bAreaID][0] = CreateDynamicSphere(BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ], 3.0, 0, 0);
		BizInfo[i][bAreaID][1] = CreateDynamicSphere(BizInfo[i][bExitX], BizInfo[i][bExitY], BizInfo[i][bExitZ], 3.0, BizInfo[i][bWorld], BizInfo[i][bInterior]);
			
		Streamer_SetIntData(STREAMER_TYPE_AREA, BizInfo[i][bAreaID][0], E_STREAMER_EXTRA_ID, i);
		Streamer_SetIntData(STREAMER_TYPE_AREA, BizInfo[i][bAreaID][1], E_STREAMER_EXTRA_ID, i);
			
		LoadBizFurnitures(i);
	}
	printf("Loaded %d business from MYSQL.", rows);
	return 1;
}

UpdateBizInfo(bizid)
{
	new
	    query[1024];

	mysql_format(dbCon, query, sizeof(query), "UPDATE `business` SET `biz_owned` = '%d',`biz_owner` = '%s', `biz_info` = '%e', `biz_items` = '%s', `biz_type` = '%d', `biz_subtype` = '%d', `biz_enX` = '%.4f', `biz_enY` = '%.4f', `biz_enZ` = '%.4f', `biz_etX` = '%.4f', `biz_etY` = '%.4f', `biz_etZ` = '%.4f', `biz_level` = '%d', `biz_price` = '%d', `biz_encost` = '%d', `biz_till` = '%d', `biz_locked` = '%d', `biz_interior` = '%d', `biz_world` = '%d', `biz_prod` = '%d', `biz_maxprod` = '%d', `biz_priceprod` = '%d'",
        BizInfo[bizid][bOwned],
        BizInfo[bizid][bOwner],
        BizInfo[bizid][bInfo],
		//BizInfo[bizid][bActive],
        FormatBusinessProducts(bizid),
        BizInfo[bizid][bType],
        BizInfo[bizid][bsubType],
		BizInfo[bizid][bEntranceX],
		BizInfo[bizid][bEntranceY],
		BizInfo[bizid][bEntranceZ],
		BizInfo[bizid][bExitX],
		BizInfo[bizid][bExitY],
		BizInfo[bizid][bExitZ],
		BizInfo[bizid][bLevelNeeded],
		BizInfo[bizid][bBuyPrice],
		BizInfo[bizid][bEntranceCost],
		BizInfo[bizid][bTill],
		BizInfo[bizid][bLocked],
		BizInfo[bizid][bInterior],
		BizInfo[bizid][bWorld],
		BizInfo[bizid][bProducts],
		BizInfo[bizid][bMaxProducts],
		BizInfo[bizid][bPriceProd]
	);

	format(query, sizeof(query), "%s, `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f', `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f', `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f', `biz_entime` = '%d', `biz_upgradeitems` = '%s'",
        query,
		BizInfo[bizid][bBuyingCarX],
		BizInfo[bizid][bBuyingCarY],
		BizInfo[bizid][bBuyingCarZ],
		BizInfo[bizid][bBuyingCarA],
		BizInfo[bizid][bBuyingBoatX],
		BizInfo[bizid][bBuyingBoatY],
		BizInfo[bizid][bBuyingBoatZ],
		BizInfo[bizid][bBuyingBoatA],
		BizInfo[bizid][bBuyingAirX],
		BizInfo[bizid][bBuyingAirY],
		BizInfo[bizid][bBuyingAirZ],
		BizInfo[bizid][bBuyingAirA],
		BizInfo[bizid][bEntime],
		//BizInfo[bizid][bRadio],
		FormatBusinessItems(bizid)
	);

	format(query, sizeof(query), "%s WHERE `biz_id` = '%d'",
		query,
		BizInfo[bizid][bID]
	);
	return mysql_tquery(dbCon, query);
}
/*
forward OnSignalCreated(signalid);
public OnSignalCreated(signalid)
{
	if (signalid == -1 || !SignalData[signalid][signalExists])
	    return 0;

	SignalData[signalid][signalID] = cache_insert_id();

	Signal_Save(signalid);

	return 1;
}
*/
forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id();

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

forward ConnectRadio(playerid, slot, channel);
public ConnectRadio(playerid, slot, channel)
{
    if (playerData[playerid][pRadio])
	{
		new done = 0, query[128], pass[16];

		format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", channel);
		mysql_query(dbCon, query);

		if(cache_num_rows()) {

			cache_get_value_name(0, "password", pass, 16);

            if(strcmp(pass, "None", false))
            {
                // รหัสตรง, เป็นเจ้าของ,
                new owning_id;
                cache_get_value_name_int(0, "owning_character", owning_id);
				if(!strcmp(playerData[playerid][pRAuth], pass, false) || playerData[playerid][pID] == owning_id)
				{
				 	playerData[playerid][pRChannel] = channel;
					playerData[playerid][pRSlot] = slot;
					done = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_YELLOW2, "* Connection Error: รหัสผ่านไม่ถูกต้อง (/auth)");
					playerData[playerid][pRChannel] = 0;
					playerData[playerid][pRSlot] = slot;
					done = 1;
				}
			}
		}

		if(!done)
		{
			playerData[playerid][pRChannel] = channel;
			playerData[playerid][pRSlot] = slot;
		}
	}
	else
	{
 	    playerData[playerid][pRSlot] = 1;
	    playerData[playerid][pRChannel] = 0;
	    format(playerData[playerid][pRAuth], 16,"None");

	}

}

GetBusinessCargoBuy(bizid)
{
    new cargo = GetProductPerCargo(BizInfo[bizid][bType]);
    return BizInfo[bizid][bMaxProducts]/cargo - floatround((float(BizInfo[bizid][bProducts])/float(cargo)), floatround_ceil);
}

GetBusinessID(bizid)
{
	new id = -1;
    foreach(new i : sv_business) {
		if(BizInfo[i][bID] == bizid) {
			id = i;
		}
	}
	return id;
}

GetBusinessCargoNeeded(bizid)
{
    return floatround(BizInfo[bizid][bTill]/BizInfo[bizid][bPriceProd], floatround_floor);
}

GetBusinessCargoCanBuy(bizid) {
	new buy = GetBusinessCargoBuy(bizid), need = GetBusinessCargoNeeded(bizid),canbuy;
	if(buy && need) if(need >= buy) { canbuy = buy; } else { canbuy = need; }
	return canbuy;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new str[256];

	if(pickupid == NewsPickup) {
		GameTextForPlayer(playerid, "~w~/newspaper to read newspaper about possible jobs in the city~n~", 8000, 4);
		return 1;
	}
	else if(pickupid == FarmerPickup) {
		GameTextForPlayer(playerid, "~w~Type /farmerjob to be ~n~a farmer", 5000, 3);
		return 1;
	}
	else if(pickupid == MechanicPickup) {
		GameTextForPlayer(playerid, "~w~Type /mechanicjob to be ~n~a car mechanic", 5000, 3);
		return 1;
	}
	else if(pickupid == ArrestPickup || pickupid == ArrestPickup2 || pickupid == ArrestPickup3) {
		GameTextForPlayer(playerid, "~w~Type /arrest to arrest", 5000, 3);
		return 1;
	}
	else if(pickupid == Spray_Pickup[0] || pickupid == Spray_Pickup[1] || pickupid == Spray_Pickup[2] || pickupid == Spray_Pickup[3])
	{
		GameTextForPlayer(playerid, "~w~Type /enter to use service", 5000, 3);
		return 1;
	}
	else if(pickupid == PrisonHeal) {
		SetPlayerHealthEx(playerid, 100);
	    return 1;
	}

	new bizid = Streamer_GetIntData(STREAMER_TYPE_PICKUP, pickupid, E_STREAMER_EXTRA_ID);

	if(0 <= bizid < MAX_BIZ) {
		if(Iter_Contains(sv_business, bizid)) {
		
			if(BizInfo[bizid][bPickup] == pickupid) {
			
				if(playerData[playerid][pJob] == JOB_TRUCKER && GetProductCargo(BizInfo[bizid][bType]) != -1)
				{
					if(BizInfo[bizid][bPriceProd] && GetBusinessCargoCanBuy(bizid))
					{
						SendClientMessage(playerid, COLOR_WHITE, "ธุรกิจนี้{A4D247}กำลังมองหา"EMBED_WHITE"สินค้าเพื่อซื้อในขณะนี้");
						SendClientMessageEx(playerid, COLOR_GRAD1, "(ต้องการ: "EMBED_WHITE"%d{B4B5B7} ลังสำหรับ%s จ่าย "EMBED_WHITE"%s{B4B5B7} ต่อครั้ง)", GetBusinessCargoCanBuy(bizid), g_arrIndItemNames[GetProductCargo(BizInfo[bizid][bType])], FormatNumber(BizInfo[bizid][bPriceProd]));
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "ธุรกิจนี้{DB5A2B}ไม่รับ"EMBED_WHITE"ซื้อสินค้าในขณะนี้");
						SendClientMessage(playerid, COLOR_GRAD1, "(มันเต็มหรือเจ้าของธุรกิจไม่ต้องการซื้อสินค้า)");
					}
				}

				if(BizInfo[bizid][bOwned] == 1) {
					format(str, sizeof(str), "%s~w~~n~Entrance Fee : ~g~$%d ~n~~p~to enter type /enter",BizInfo[bizid][bInfo],BizInfo[bizid][bEntranceCost]);
				}
				else format(str, sizeof(str), "%s~w~~n~This Business is for sale~n~Cost: ~g~$%d ~w~Level : %d ~n~~p~ To Buy This, /buybiz",BizInfo[bizid][bInfo],BizInfo[bizid][bBuyPrice],BizInfo[bizid][bLevelNeeded]);

				GameTextForPlayer(playerid, str, 5000, 3);
				
				return 1;
			}
		}
	}
    /*foreach(new i : sv_business) if (BizInfo[i][bPickup] == pickupid)
	{

		if(playerData[playerid][pJob] == JOB_TRUCKER && GetProductCargo(BizInfo[i][bType]) != -1)
		{
			if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i))
			{
		  		SendClientMessage(playerid, COLOR_WHITE, "ธุรกิ{A4D247}จนี้กำลังมองหาสิน"EMBED_WHITE"ค้าเพื่อซื้อในขณะนี้");
				SendClientMessageEx(playerid, COLOR_GRAD1, "(ต้องการ: %d ลังสำหรับ%s จ่าย %s ต่อครั้ง)", GetBusinessCargoCanBuy(i), g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]));
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "ธุรกิ{DB5A2B}จนี้ไม่รับ"EMBED_WHITE"ซื้อสินค้าในขณะนี้");
				SendClientMessage(playerid, COLOR_GRAD1, "(มันเต็มหรือเจ้าของธุรกิจไม่ต้องการซื้อสินค้า)");
			}
		}

		if(BizInfo[i][bOwned] == 1) {
			format(str, sizeof(str), "%s~w~~n~Entrance Fee : ~g~$%d ~n~~p~to enter type /enter",BizInfo[i][bInfo],BizInfo[i][bEntranceCost]);
		}
		else format(str, sizeof(str), "%s~w~~n~This Business is for sale~n~Cost: ~g~$%d ~w~Level : %d ~n~~p~ To Buy This, /buybiz",BizInfo[i][bInfo],BizInfo[i][bBuyPrice],BizInfo[i][bLevelNeeded]);

		GameTextForPlayer(playerid, str, 5000, 3);
		break;
	}*/

	for (new i = 0; i != 2; i ++) if (DollaPickup[i] == pickupid)
	{
		if(playerData[playerid][pPayCheck] > 0)
		{
          	new tmp2[128];
        	format(tmp2, sizeof(tmp2), "~w~You have just received~n~Your Paycheck: ~g~$%d%d", playerData[playerid][pPayCheck]);
          	GameTextForPlayer(playerid, tmp2, 5000, 4);
          	Log_Write("logs/cheque.txt", "[%s] %s(%d): get paycheck %d", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pID], playerData[playerid][pPayCheck]);
			playerData[playerid][pCash] += playerData[playerid][pPayCheck];
			playerData[playerid][pPayCheck] = 0;
          	PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
		}
	}

    if(pickupid == L_a_Pickup[0] || pickupid == L_a_Pickup[1] || pickupid == L_a_Pickup[2] || pickupid == L_a_Pickup[3] || pickupid == L_a_Pickup[4] || pickupid == L_a_Pickup[5] || pickupid == L_a_Pickup[6] || pickupid == L_a_Pickup[7] || pickupid == L_a_Pickup[8] || pickupid == L_a_Pickup[9])
	{
		if(!playerData[playerid][pOnDuty])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Toll guard พูดว่า: สวัสดีเจ้าหน้าที่ คุณต้องการจะผ่านใช่ไหม?");
			SendClientMessage(playerid, COLOR_DARKGOLDENROD, "ใช้ \"/opentoll\" เพื่อเปิดด่านกั้น");
			return 1;
		}
		new szCostString[56];
		format(szCostString, sizeof(szCostString), "Toll guard พูดว่า: สวัสดี กรุณาจ่าย %d ดอลล่าสำหรับค่าผ่านทาง", TollCost);
		SendClientMessage(playerid, COLOR_WHITE, szCostString);
		SendClientMessage(playerid, COLOR_DARKGOLDENROD, "ใช้ \"/opentoll\" เพื่อจ่ายค่าผ่านทาง");
	}
	return 1;
}

forward AfterSpray(playerid);
public AfterSpray(playerid) {
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new tmpcar = GetPlayerVehicleID(playerid);

		SetVehicleHealthEx(tmpcar, GetVehicleDataHealth(GetVehicleModel(tmpcar)));
		SetVehicleDamageStatus(tmpcar, 0, 0, 0, 0);
		
		switch(GetPVarInt(playerid,"SprayID"))
		{
		    case 1: SetVehiclePos(tmpcar, 2076.5461,-1832.5647,13.5545);
		    case 2: SetVehiclePos(tmpcar, 1025.4225,-1033.1587,31.8380);
		    case 3: SetVehiclePos(tmpcar, 488.3767,-1731.1235,11.2469);
		    case 4: SetVehiclePos(tmpcar, 720.2908,-467.6113,16.3437);
		}
		TogglePlayerControllable(playerid, 1);
		DeletePVar(playerid,"SprayID");
	}
	return 1;
}
// Dialog

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:WithdrawSavings(playerid, response, listitem, inputtext[])
{
	if(response) {
		SendClientMessage(playerid, COLOR_WHITE, "คุณปิดบัญชีออมทรัพย์เรียบร้อยแล้ว");
		playerData[playerid][pCash] += playerData[playerid][pSavingsCollect];
		playerData[playerid][pSavings] = 0;
		playerData[playerid][pSavingsCollect] = 0;
	}
	return 1;
}

Dialog:ReportConfirm(playerid, response, listitem, inputtext[])
{
	if(response) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: รายงานของคุณได้ถูกส่งไปยังผู้ดูแลทุกคนที่ออนไลน์");
		playerData[playerid][pReport] = 1;
		SendAdminAlert(COLOR_REPORT, "มีรายงานใหม่เข้ามาพิมพ์ '/reports list' เพื่อตรวจสอบ");
	}
	else {
	    format(playerData[playerid][pReportMessage], 64, "(null)");
	}
	return 1;
}

Dialog:EditSkin(playerid, response, listitem, inputtext[])
{
	if(response) 
	{
		new targetid = AEditSkin[playerid];

	    if (isnull(inputtext))
			return 0;

		playerData[targetid][pOffSkin] = strval(inputtext);

		SendClientMessageEx(playerid, COLOR_YELLOW2, "คุณได้ทำการแก้ไขสกินของ %s เป็นสกินเลขที่ %s", ReturnRealName(targetid), inputtext);
		AEditSkin[playerid] = -1;

		SQL_SaveCharacter(targetid);
	}
	else {
	    return 0;
	}
	return 1;
}

Dialog:EditMoney(playerid, response, listitem, inputtext[])
{
	if(response) 
	{
		//new targetid = MoneyEdit[playerid];

	    if (isnull(inputtext))
			return 0;

		playerData[playerid][pCash] += strval(inputtext);
		//playerData[playerid][pCash] += MoneyEdit[playerid];
		playerData[playerid][pArtMoney] -= strval(inputtext);
		MoneyEdit[playerid] = -1;

		SendClientMessageEx(playerid, COLOR_YELLOW2, "คุณได้ทำการเบิกเงินจำนวน $%d, ยอดเงินคงเหลือ $%d", strval(inputtext), playerData[playerid][pArtMoney]);
	}
	else {
	    return 0;
	}
	return 1;
}

/*
Dialog:BusinessBuy_Radio(playerid, response, listitem, inputtext[])
{
	new
	    bizid = -1;

    if ((bizid = BizEntered[playerid]) != -1 && response)
    {
		if (BizInfo[bizid][bType] == 3)
		{
			listitem = listitem + 9;

			if (playerData[playerid][pCash] < BizInfo[bizid][bPriceProducts][listitem])
				return GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);

            if(BizInfo[bizid][bPriceProducts][listitem] <= 0)
				return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);

			new buy_str[12];
			
			switch (listitem)
		    {
		        case 9: // Radio 2
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pRadio] = 3;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(buy_str, sizeof(buy_str), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, buy_str, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy radio 3 %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Standard");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			    case 10: // Radio 5
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pRadio] = 5;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(buy_str, sizeof(buy_str), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, buy_str, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy radio 5 %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Advanced");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			    case 11: // Radio 8
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pRadio] = 8;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(buy_str, sizeof(buy_str), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, buy_str, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy radio 8 %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Super");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			}
		}
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	new
	    bizid = -1, string[128];

    if ((bizid = BizEntered[playerid]) != -1 && response)
    {
		if (BizInfo[bizid][bType] == 3)
		{
			if (playerData[playerid][pCash] < BizInfo[bizid][bPriceProducts][listitem] && listitem != 9)
				return GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);

            if(BizInfo[bizid][bPriceProducts][listitem] <= 0)
				return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);

			switch (listitem)
		    {
		        case 0: // Gas Can
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pGasCan]++;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy gascan %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อถังน้ำมัน 3 แกลลอน");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /gascan เพื่อเติมน้ำมัน");

				}
			    case 1: // Boombox
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pBoombox]=1;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy boombox %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Available boombox commands:");
					SendClientMessage(playerid, COLOR_WHITE, " /boombox [place/take/grant/adjust], setstation");

				}
			    case 2: // Baseball Bat
		        {
				    if(playerData[playerid][pLevel] < 2)
					    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					GivePlayerValidWeapon(playerid, 5, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Baseball Bat %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 3: // Flowers
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					GivePlayerValidWeapon(playerid, 14, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Flowers %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				}
			    case 4: // Cane
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					GivePlayerValidWeapon(playerid, 15, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Cane %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 5: // Camera
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					GivePlayerValidWeapon(playerid, 43, 500);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Camera %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 6: // OOC Mask
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					playerData[playerid][pOOCMask]=1;

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy OOC Mask %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อ OOC Mask");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /mask");
				}
			    case 7: // Drink
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pDrink]++;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Drink %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				    SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อเครื่องดื่ม");
				    SendClientMessage(playerid, COLOR_WHITE, "ใช้ /bdrink");
				}
			    case 8: // Cigarettes
		        {
					BizInfo[bizid][bProducts]--;
					playerData[playerid][pCash] -= BizInfo[bizid][bPriceProducts][listitem];
					playerData[playerid][pCigarettes]+=20;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bPriceProducts][listitem]*0.7);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-$%d", BizInfo[bizid][bPriceProducts][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Cigarettes %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[BizEntered[playerid]][bPriceProducts][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				    SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อบุหรี่ 1 ซอง");
				    SendClientMessage(playerid, COLOR_WHITE, "ใช้ /pitem เพื่อสูบบุหรี่ !");
				}
			    case 9: // Radio
		        {
					format(string, sizeof(string), "Type\tSlots\tPrice\nStandard\t2\t%s\nAdvanced\t5\t%s\nSuper\t8\t%s",
						FormatNumber(BizInfo[bizid][bPriceProducts][9]),
						FormatNumber(BizInfo[bizid][bPriceProducts][10]),
						FormatNumber(BizInfo[bizid][bPriceProducts][11])
					);
					Dialog_Show(playerid, BusinessBuy_Radio, DIALOG_STYLE_TABLIST_HEADERS, "Select Radio", string, "Purchase", "Cancel");
			    }
			}
		}
	}
	return 1;
}
*/
Dialog:ReportDialog(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
				new
					Float: playerPosC[3];

				GetPlayerPos(GetPVarInt(playerid, "aRf"), playerPosC[0],  playerPosC[1],  playerPosC[2]);
				SetPlayerPos(playerid, playerPosC[0], playerPosC[1], playerPosC[2]);

				DeletePVar(playerid, "aR");
				DeletePVar(playerid, "aRf");
			}
			case 1: {
				if(playerData[playerid][pSpectating] == INVALID_PLAYER_ID) {
					GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
					playerData[playerid][pInterior] = GetPlayerInterior(playerid);
					playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
				}

				playerData[playerid][pSpectating] = GetPVarInt(playerid, "aRf");
				TogglePlayerSpectating(playerid, true);

				if(IsPlayerInAnyVehicle(GetPVarInt(playerid, "aRf"))) {
					PlayerSpectateVehicle(playerid, GetPlayerVehicleID(GetPVarInt(playerid, "aRf")));
				}
				else {
					PlayerSpectatePlayer(playerid, GetPVarInt(playerid, "aRf"));
				}

				DeletePVar(playerid, "aR");
				DeletePVar(playerid, "aRf");
			}
		}
	}
	return 1;
}

Dialog:EditSkins(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[playerData[playerid][pFactionEdit]][factionExists])
			return 0;

		playerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetSkinModel, DIALOG_STYLE_INPUT, "Set Skin", "Skin: ช่องที่ %d\n\nป้อนหมายเลขสกินที่นี่:", "Submit", "Back", playerData[playerid][pSelectedSlot] + 1);
	}
	else
	{
		if(GetPVarInt(playerid, "EditFromView"))
		{
			ShowPlayerEditFaction(playerid);
			DeletePVar(playerid, "EditFromView");
		}
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[playerData[playerid][pFactionEdit]][factionExists])
			return 0;

		playerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nกรุณาป้อนชื่อยศใหม่ด้านล่างนี้:", "Submit", "Back", FactionRanks[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]], playerData[playerid][pSelectedSlot] + 1);
	}
	else
	{
		if(GetPVarInt(playerid, "EditFromView"))
		{
			ShowPlayerEditFaction(playerid);
			DeletePVar(playerid, "EditFromView");
		}
	}
	return 1;
}

Dialog:SetSkinModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetSkinModel, DIALOG_STYLE_INPUT, "Set Skin", "Skin: ช่องที่ %d\n\nป้อนหมายเลขสกินที่นี่:", "Submit", "Back", playerData[playerid][pSelectedSlot] + 1);

		FactionSkins[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]] = strval(inputtext);

		new
		    query[128],
			set_rank[32];

        format(set_rank, 32, "factionSkin%d", playerData[playerid][pSelectedSlot] + 1);
		format(query, sizeof(query), "UPDATE `factions` SET `%s` = '%d' WHERE `factionID` = '%d'",
		    set_rank,
		    FactionSkins[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]],
		    FactionData[playerData[playerid][pFactionEdit]][factionID]
		);
		mysql_tquery(dbCon, query);

		Faction_ShowSkins(playerid, playerData[playerid][pFactionEdit]);
		SendClientMessageEx(playerid, COLOR_GRAD1, "คุณได้ปรับสกินช่องที่ %d เป็น \"%d\"", playerData[playerid][pSelectedSlot] + 1, FactionSkins[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]]);
	}
	else Faction_ShowSkins(playerid, playerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "Rank: %s (%d)\n\nกรุณาป้อนชื่อยศใหม่ด้านล่างนี้:", "Submit", "Back", FactionRanks[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]], playerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Set Rank", "ข้อผิดพลาด: ยศต้องไม่มากกว่า 32 ตัวอักษร\n\nRank: %s (%d)\n\nกรุณาป้อนชื่อยศใหม่ด้านล่างนี้:", "Submit", "Back", FactionRanks[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]], playerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[playerData[playerid][pFactionEdit]][playerData[playerid][pSelectedSlot]], 32, inputtext);

		new
		    query[128],
			set_rank[32];
	
        format(set_rank, 32, "factionRank%d", playerData[playerid][pSelectedSlot] + 1);
		mysql_format(dbCon, query, sizeof(query), "UPDATE `factions` SET `%s` = '%e' WHERE `factionID` = '%d'",
		    set_rank,
		    inputtext,
		    FactionData[playerData[playerid][pFactionEdit]][factionID]
		);
		mysql_tquery(dbCon, query);

		Faction_ShowRanks(playerid, playerData[playerid][pFactionEdit]);
		SendClientMessageEx(playerid, COLOR_GRAD1, "คุณได้ปรับชื่อยศ %d เป็น \"%s\"", playerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, playerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", "สวัสดี\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเข้าถึงการเลือกตัวละคร\n\nหากคุณยังไม่ได้ลงทะเบียนกับ LA-RP คุณสามารถสร้างบัญชีของคุณได้ที่ la-rp.site", "ส่งข้อมูล", "ออก");

	else
	{
		/*if(SQL_IsLogged(playerid))
			return Kick(playerid);*/
		
		//SQL_AttemptLogin(playerid, inputtext);
		
		new
			query[200],
			buffer[129];

		WP_Hash(buffer, sizeof(buffer), inputtext);

		mysql_format(dbCon, query, sizeof(query), "SELECT * FROM `accounts` WHERE `ID` = '%d' AND `Password` = '%s'", playerData[playerid][pUserid], buffer);
		mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
	}
	
	return 1;
}

Dialog:AddSecretWord(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext) || strlen(inputtext) >= 32)
	    return Dialog_Show(playerid, AddSecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"ข้อควรระวังด้านความปลอดภัย\n\nเราได้เปิดใช้การยืนยันตัวตนด้วยรหัสลับ ซึ่งเป็นคำที่เป็นความลับที่คุณจะได้รับเมื่อมีการเปลี่ยนแปลงการเชื่อมต่อใหม่\n\nคุณยังไม่ได้กรอกข้อมูลน{FF0000}ี้ดังนั้นโ"EMBED_WHITE"ปรดใช้เวลาของคุณทำการกรอกคำที่เป็นความลับและคุณจะต้องจดจำ\n\nคำแนะนำว่านี่ไม่ใช่รหัสผ่านของคุณ", "Enter", "Cancel");

	else
	{
	    new clean_secret[32];
		strtrim(inputtext);
	    format(playerData[playerid][pSecretWord], 32, inputtext);
		mysql_escape_string(playerData[playerid][pSecretWord],clean_secret);
		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Secret` = '%s' WHERE `ID` = %d", clean_secret, playerData[playerid][pID]);
		mysql_query(dbCon, szQuery);

		SQL_ForceLogin(playerid);
	}
	return 1;
}

Dialog:SecretWord(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, SecretWord, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การละเมิดความปลอดภัยที่เป็นไปได้\n\nเซิร์ฟเวอร์ได้ตั้งค่าสถานะให้คุณว่าอาจไม่ได้เป็นเจ้าของตัวละครนี้โปรดเขียนรหัสลับของตัวละครนี้ในช่องด้านล่างเพื่อยืนยันว่าเป็นของคุณ", "Enter", "Cancel");

	else
	{
		new
			query[256];

		new clean_password[32];
		mysql_escape_string(inputtext,clean_password);

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `ID` = %d AND `Secret` = '%s'", playerData[playerid][pID], clean_password);
		mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_SECRET_CONFIRM);
	}
	return 1;
}

showPlayerClothingMenu(playerid) {
	new id = cl_dataslot[playerid][cl_selected[playerid]];
	return Dialog_Show(playerid, ClothingMenu, DIALOG_STYLE_LIST, ClothingData[playerid][id][cl_name], "เปลี่ยนชื่อไอเท็ม:\t"EMBED_WHITE"["EMBED_YELLOW"%s"EMBED_YELLOW""EMBED_WHITE"]\nเปลี่ยนสล็อตกระดูก:\t"EMBED_WHITE"["EMBED_YELLOW"%s"EMBED_YELLOW""EMBED_WHITE"]\nเปลี่ยนสล็อตอินเด็กซ์:\t"EMBED_WHITE"["EMBED_YELLOW"%d"EMBED_YELLOW""EMBED_WHITE"]\nเปลี่ยนสีไอเท็ม\nเปลี่ยนสีที่สองไอเท็ม\nปรับตำแหน่งไอเท็ม\n%s", "เลือก", "<< กลับ", ClothingData[playerid][id][cl_name], BoneName[ClothingData[playerid][id][cl_bone]-1], ClothingData[playerid][id][cl_slot], (ClothingData[playerid][id][cl_equip]) ? ("ถอด "EMBED_RED"ออก") : ("สวม "EMBED_GREENMONEY"ใส่"));
}

Dialog:ClothingList(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return 1;

	cl_selected[playerid] = listitem;
	return showPlayerClothingMenu(playerid);
}

Dialog:ClothingColorSelect(playerid, response, listitem, inputtext[])
{
	if (response) {
		new slot = GetPVarInt(playerid, "materialColorSlot");
		if (isequal(inputtext, "0")) {
			new id = cl_dataslot[playerid][cl_selected[playerid]];
			if (slot == 1) ClothingData[playerid][id][cl_mc1] = 0;
			else  ClothingData[playerid][id][cl_mc2] = 0;

			SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยนสีพื้นผิวไอเท็มช่องที่ "EMBED_YELLOW"%d"EMBED_WHITE" ของ ("EMBED_YELLOW"%s"EMBED_WHITE") เป็น "EMBED_YELLOW"สีปกติ", slot, ClothingData[playerid][id][cl_name]);
			
			DeletePVar(playerid, "materialColorSlot");
			cl_DressPlayer(playerid);
			return 1;
		}
		new color;
		if(sscanf(inputtext,"h", color)) return Dialog_Show(playerid, ClothingColorSelect, DIALOG_STYLE_INPUT, "เปลี่ยนสีไอเท็ม", ""EMBED_WHITE"วางโค้ดสีที่คุณต้องการ\nหรือให้เว็บไซต์ช่วย \""EMBED_YELLOW"http://www.color-hex.com"EMBED_WHITE"/\"\n-รูปแบบต้องเป็นแบบนี้ \""EMBED_YELLOW"FFFF00"EMBED_WHITE"\" (ไม่รวมเครื่องหมายคำพูด)\n-คุณสามารถใส่ (0) เพื่อรีเซตสีได้\n\n"EMBED_LIGHTRED"[!] คุณมีความสามารถในการเปลี่ยนสีเครื่องแต่งกายของคุณ", "ใส่", "<< กลับ");
		new id = cl_dataslot[playerid][cl_selected[playerid]];
		if (slot == 1) ClothingData[playerid][id][cl_mc1] = RGBToARGB(color);
		else  ClothingData[playerid][id][cl_mc2] = RGBToARGB(color);

		SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยนสีพื้นผิวไอเท็มช่องที่ "EMBED_YELLOW"%d"EMBED_WHITE" ของ ("EMBED_YELLOW"%s"EMBED_WHITE") เป็น "EMBED_YELLOW"%06x", slot, ClothingData[playerid][id][cl_name], color);

		DeletePVar(playerid, "materialColorSlot");
		cl_DressPlayer(playerid);
	}
	return showPlayerClothingMenu(playerid);
}

Dialog:ClothingMenu(playerid, response, listitem, inputtext[])
{
	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
		switch(listitem)
		{
		    case 0: // เปลี่ยนชื่อไอเท็ม
		    {
		        Dialog_Show(playerid, ClothingName, DIALOG_STYLE_INPUT, "เปลี่ยนชื่อไอเท็ม", ""EMBED_YELLOW"คุณสามารถที่จะเพิ่ม ตัวระบุที่ไม่ซ้ำ ให้กับไอเท็มเครื่องแต่งกายของคุณ\nสิ่งนี้จะช่วยชี้ทางให้กับคุณเมื่อมีเครื่องแต่งกายมีจำนวนมาก\n\nกรอกชื่อที่คุณต้องการแสดงให้กับไอเท็มเครื่องแต่งกายของคุณ มันจำกัดไว้ที่ 20 ตัวอักษร\nหากคุณต้องการให้มันกลับไปเป็นชื่อเดิม ให้กดปุ่ม ENTER ในขณะที่ช่องยังว่างอยู่\n\n"EMBED_LIGHTRED"[!] คำเตือน: การใช้ฟีเจอร์นี้ในการโกงหรือเอาเปรียบจะถูกลงโทษ อย่าใช้มันผิดวัตถุประสงค์\n[!] หมายเหตุ: นี่เป็นการสร้างตัวระบุที่ไม่ซ้ำมันจะแสดงให้เห็นเพียงแค่คุณเท่านั้น", "เปลี่ยน", "<< กลับ");
		    }
		    case 1: // เปลี่ยนสล็อตกระดูก
		    {
				new str[256];
				new id = cl_dataslot[playerid][cl_selected[playerid]];
				for(new i=0; i != sizeof(BoneName); i++) {
					if (ClothingData[playerid][id][cl_bone]-1 == i) {
						strcat(str, sprintf("%s ["EMBED_YELLOW"ปัจจุบัน"EMBED_WHITE"]\n", BoneName[i]));
					}
					else strcat(str, sprintf("%s\n", BoneName[i]));
				}
                Dialog_Show(playerid, ClothingBone, DIALOG_STYLE_LIST, "เปลี่ยนสล็อตกระดูก", str, "เลือก", "<< กลับ");
		    }
 		    case 2: // เปลี่ยนสล็อตอินเด็กซ์
		    {

				new str[128];
				new id = cl_dataslot[playerid][cl_selected[playerid]];
				for(new i=0; i != 5; i++) {
					if (ClothingData[playerid][id][cl_slot] == i) {
						strcat(str, sprintf("อินเด็กซ์ %d ["EMBED_YELLOW"ปัจจุบัน"EMBED_WHITE"]\n", i));
					}
					else strcat(str, sprintf("อินเด็กซ์ %d\n", i));
				}
				Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "เปลี่ยนสล็อตอินเด็กซ์", str, "เลือก", "<< กลับ");
		    }
			case 3: // เปลี่ยนสีไอเท็ม 
			{
				SetPVarInt(playerid, "materialColorSlot", 1);
				Dialog_Show(playerid, ClothingColorSelect, DIALOG_STYLE_INPUT, "เปลี่ยนสีไอเท็ม", ""EMBED_WHITE"วางโค้ดสีที่คุณต้องการ\nหรือให้เว็บไซต์ช่วย \""EMBED_YELLOW"http://www.color-hex.com"EMBED_WHITE"/\"\n-รูปแบบต้องเป็นแบบนี้ \""EMBED_YELLOW"FFFF00"EMBED_WHITE"\" (ไม่รวมเครื่องหมายคำพูด)\n-คุณสามารถใส่ (0) เพื่อรีเซตสีได้\n\n"EMBED_LIGHTRED"[!] คุณมีความสามารถในการเปลี่ยนสีเครื่องแต่งกายของคุณ", "ใส่", "<< กลับ");
		    }
			case 4: // เปลี่ยนสีไอเท็ม 2
			{
				SetPVarInt(playerid, "materialColorSlot", 2);
				Dialog_Show(playerid, ClothingColorSelect, DIALOG_STYLE_INPUT, "เปลี่ยนสีไอเท็ม 2", ""EMBED_WHITE"วางโค้ดสีที่คุณต้องการ\nหรือให้เว็บไซต์ช่วย \""EMBED_YELLOW"http://www.color-hex.com"EMBED_WHITE"/\"\n-รูปแบบต้องเป็นแบบนี้ \""EMBED_YELLOW"FFFF00"EMBED_WHITE"\" (ไม่รวมเครื่องหมายคำพูด)\n-คุณสามารถใส่ (0) เพื่อรีเซตสีได้\n\n"EMBED_LIGHTRED"[!] คุณมีความสามารถในการเปลี่ยนสีเครื่องแต่งกายของคุณ", "ใส่", "<< กลับ");
			}
		    case 5: // ปรับตำแหน่งไอเท็ม
		    {
		        new id = cl_dataslot[playerid][cl_selected[playerid]];

			    SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
				ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez], ClothingData[playerid][id][cl_mc1], ClothingData[playerid][id][cl_mc2]);

				ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 1,1, 1, 0, 1);
				EditAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
				bf_on(player_bf[playerid], IS_PLAYER_EDITCLOTHING);

				// SendClientMessage(playerid, COLOR_WHITE, "ข้อแนะ: ใช้ "EMBED_YELLOW"SPACE"EMBED_WHITE" เพื่อดูรอบ ๆ กด "EMBED_YELLOW"ESC"EMBED_WHITE" เพื่อยกเลิก");
		    }
 		    case 6: // On-Off
		    {
		        new id = cl_dataslot[playerid][cl_selected[playerid]];

				if(ClothingData[playerid][id][cl_equip]) {

					RemovePlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
					ClothingData[playerid][id][cl_equip] = 0;
				}
				else
				{
				    SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
					ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez], ClothingData[playerid][id][cl_mc1], ClothingData[playerid][id][cl_mc2]);
					SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สวมใส่ "EMBED_YELLOW"%s"EMBED_WHITE" ของคุณ", ClothingData[playerid][id][cl_name]);

					for (new i = 0; i < MAX_CLOTHES; i ++)
					{
					    if(ClothingData[playerid][i][cl_object] != INVALID_OBJECT_ID && ClothingData[playerid][i][cl_equip] && ClothingData[playerid][i][cl_slot] == ClothingData[playerid][id][cl_slot])
					    {
					        ClothingData[playerid][i][cl_equip] = 0;
						}
					}
					ClothingData[playerid][id][cl_equip] = 1;
				}

		    }
		}
	}
	return 1;
}

Dialog:ClothingName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = cl_dataslot[playerid][cl_selected[playerid]];
		if (isnull(inputtext)) {
			new oldName[32];
			format(oldName, 32, GetClotingItemName(ClothingData[playerid][id][cl_object]));
			SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยนชื่อไอเท็ม "EMBED_YELLOW"%s "EMBED_WHITE"เป็น "EMBED_YELLOW"%s", ClothingData[playerid][id][cl_name], oldName);
			format(ClothingData[playerid][id][cl_name], 32, oldName);
		}
		else if (strlen(inputtext) > 20) {
			return Dialog_Show(playerid, ClothingName, DIALOG_STYLE_INPUT, "เปลี่ยนชื่อไอเท็ม", "ชื่อไอเท็มต้องไม่เป็นค่าว่างหรือมากกว่า 20 ตัวอักษร\nกรอกชื่อไอเท็มที่ต้องการลงบนกล่องด้านล่างนี้:", "เปลี่ยน", "<< กลับ");
		}
		else {
			SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยนชื่อไอเท็ม "EMBED_YELLOW"%s "EMBED_WHITE"เป็น "EMBED_YELLOW"%s", ClothingData[playerid][id][cl_name], inputtext);
			format(ClothingData[playerid][id][cl_name], 32, inputtext);
		}
	}
    return showPlayerClothingMenu(playerid);
}

Dialog:ClothingBone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = cl_dataslot[playerid][cl_selected[playerid]];
        ClothingData[playerid][id][cl_bone] = listitem + 1;
		SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone]);
       	ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 1, 1, 1, 0, 1);
		EditAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
		bf_on(player_bf[playerid], IS_PLAYER_EDITCLOTHING);

		SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยน ("EMBED_YELLOW"%s"EMBED_WHITE") เป็นส่วน "EMBED_YELLOW"%s"EMBED_WHITE"", ClothingData[playerid][id][cl_name], BoneName[listitem]);
	}
    return showPlayerClothingMenu(playerid);
}

Dialog:ClothingIndex(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = cl_dataslot[playerid][cl_selected[playerid]];
	    ClothingData[playerid][id][cl_slot] = listitem;

        RemovePlayerClothing(playerid);
        cl_DressPlayer(playerid);

		SendClientMessageEx(playerid, COLOR_WHITE, "คุณเปลี่ยน ("EMBED_YELLOW"%s"EMBED_WHITE") เป็นอินเด็กซ์ช่องที่ "EMBED_YELLOW"%d", ClothingData[playerid][id][cl_name], listitem + 1);
	}
    return showPlayerClothingMenu(playerid);
}

Dialog:buyClothing(playerid, response, listitem, inputtext[])
{
	if (response) {

		if(!strcmp(inputtext, "หน้าถัดไป!", true)) {
			new str[1728];
			switch(cl_buying[playerid])
			{
			    case BUYZIP:
			    {
					for(new i= 91;i!=sizeof(cl_ZipData);++i)
					{
					    format(str, sizeof(str), "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
					}
				}
			}
	        return Dialog_Show(playerid, buyClothing2, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		}
		/*new index[16], num;

		if(listitem > 99) num = 4;
		else if(listitem > 9) num = 3;
		else num = 2;

		strmid(index, inputtext, 1, num); //string contains "HELLO"*/

		if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1)
		{
			switch(PurchaseClothing(playerid, listitem)) {
				case -2: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อได้มากกว่านี้แล้ว");
				}
				case -1: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัยคุณมีเงินไม่พอที่จะซื้อ !!");
				}
				case 0: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถซื้อไอเท็มเครื่องแต่งกายไอดีนี้ได้");
				}
			}
		}
	}
	return 1;
}

Dialog:buyClothing2(playerid, response, listitem, inputtext[])
{
	if (response) {

		/*if(!strcmp(inputtext, "หน้าถัดไป!", true)) {
			new str[1728];
			switch(cl_buying[playerid])
			{
			    case BUYZIP:
			    {
					for(new i= 91;i<sizeof(cl_ZipData);i++)
					{
					    format(str, sizeof(str), "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
					}
				}
			}
	        return Dialog_Show(playerid, buyClothing2, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		}*/
		/*new index[16], num;

		if(listitem > 99) num = 4;
		else if(listitem > 9) num = 3;
		else num = 2;

		strmid(index, inputtext, 1, num); //string contains "HELLO"*/

		if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1)
		{
			switch(PurchaseClothing(playerid, listitem + 91)) {
				case -2: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อได้มากกว่านี้แล้ว");
				}
				case -1: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัยคุณมีเงินไม่พอที่จะซื้อ !!");
				}
				case 0: {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถซื้อไอเท็มเครื่องแต่งกายไอดีนี้ได้");
				}
			}
		}
	}
	return 1;
}

PurchaseClothing(playerid, slot)
{
	new num = CountPlayerClothing(playerid);
	switch(playerData[playerid][pDonateRank])
	{
		case 0: if(num >= 6) return -2;
		case 1: if(num >= 8) return -2;
		case 2: if(num >= 10) return -2;
		case 3: if(num >= 15) return -2;
	}
	
	new model, bone, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz;
	switch(cl_buying[playerid])
	{
	    case BUYSPORTS:
	    {
			if(slot < 0 || slot >= sizeof(cl_SportsData)) return 0;
			if(playerData[playerid][pCash] < cl_SportsData[slot][e_price]) return -1;

	        model = cl_SportsData[slot][e_model];
	        bone = cl_SportsData[slot][e_bone];
	        x = cl_SportsData[slot][e_x];
	        y = cl_SportsData[slot][e_y];
	        z = cl_SportsData[slot][e_z];
	        rx = cl_SportsData[slot][e_rx];
	        ry = cl_SportsData[slot][e_ry];
	        rz = cl_SportsData[slot][e_rz];
	        sx = cl_SportsData[slot][e_sx];
	        sy = cl_SportsData[slot][e_sy];
	        sz = cl_SportsData[slot][e_sz];
	    }
	    case BUYHARDWARE:
	    {
	        if(slot < 0 || slot >= sizeof(cl_HardwareData)) return 0;
			if(playerData[playerid][pCash] < cl_HardwareData[slot][e_price]) return -1;

	        model = cl_HardwareData[slot][e_model];
	        bone = cl_HardwareData[slot][e_bone];
	        x = cl_HardwareData[slot][e_x];
	        y = cl_HardwareData[slot][e_y];
	        z = cl_HardwareData[slot][e_z];
	        rx = cl_HardwareData[slot][e_rx];
	        ry = cl_HardwareData[slot][e_ry];
	        rz = cl_HardwareData[slot][e_rz];
	        sx = cl_HardwareData[slot][e_sx];
	        sy = cl_HardwareData[slot][e_sy];
	        sz = cl_HardwareData[slot][e_sz];
	    }
	    case BUYMUSIC:
	    {
			if(slot < 0 || slot >= sizeof(cl_MusicalData)) return 0;
			if(playerData[playerid][pCash] < cl_MusicalData[slot][e_price]) return -1;

	        model = cl_MusicalData[slot][e_model];
	        bone = cl_MusicalData[slot][e_bone];
	        x = cl_MusicalData[slot][e_x];
	        y = cl_MusicalData[slot][e_y];
	        z = cl_MusicalData[slot][e_z];
	        rx = cl_MusicalData[slot][e_rx];
	        ry = cl_MusicalData[slot][e_ry];
	        rz = cl_MusicalData[slot][e_rz];
	        sx = cl_MusicalData[slot][e_sx];
	        sy = cl_MusicalData[slot][e_sy];
	        sz = cl_MusicalData[slot][e_sz];
	    }
	    case BUYWATCH:
	    {
	        if(slot < 0 || slot >= sizeof(cl_DsShopData)) return 0;
			if(playerData[playerid][pCash] < cl_DsShopData[slot][e_price]) return -1;

	        model = cl_DsShopData[slot][e_model];
	        bone = cl_DsShopData[slot][e_bone];
	        x = cl_DsShopData[slot][e_x];
	        y = cl_DsShopData[slot][e_y];
	        z = cl_DsShopData[slot][e_z];
	        rx = cl_DsShopData[slot][e_rx];
	        ry = cl_DsShopData[slot][e_ry];
	        rz = cl_DsShopData[slot][e_rz];
	        sx = cl_DsShopData[slot][e_sx];
	        sy = cl_DsShopData[slot][e_sy];
	        sz = cl_DsShopData[slot][e_sz];
	    }
	    case BUYPOLICE:
	    {
	        if(slot < 0 || slot >= sizeof(cl_PoliceData)) return 0;
			if(playerData[playerid][pCash] < cl_PoliceData[slot][e_price]) return -1;

	        model = cl_PoliceData[slot][e_model];
	        bone = cl_PoliceData[slot][e_bone];
	        x = cl_PoliceData[slot][e_x];
	        y = cl_PoliceData[slot][e_y];
	        z = cl_PoliceData[slot][e_z];
	        rx = cl_PoliceData[slot][e_rx];
	        ry = cl_PoliceData[slot][e_ry];
	        rz = cl_PoliceData[slot][e_rz];
	        sx = cl_PoliceData[slot][e_sx];
	        sy = cl_PoliceData[slot][e_sy];
	        sz = cl_PoliceData[slot][e_sz];
	    }
	    case BUYMEDIC:
	    {
	        if(slot < 0 || slot >= sizeof(cl_MedicData)) return 0;
			if(playerData[playerid][pCash] < cl_MedicData[slot][e_price]) return -1;

	        model = cl_MedicData[slot][e_model];
	        bone = cl_MedicData[slot][e_bone];
	        x = cl_MedicData[slot][e_x];
	        y = cl_MedicData[slot][e_y];
	        z = cl_MedicData[slot][e_z];
	        rx = cl_MedicData[slot][e_rx];
	        ry = cl_MedicData[slot][e_ry];
	        rz = cl_MedicData[slot][e_rz];
	        sx = cl_MedicData[slot][e_sx];
	        sy = cl_MedicData[slot][e_sy];
	        sz = cl_MedicData[slot][e_sz];
	    }
	    case BUYZIP:
	    {
	        if(slot < 0 || slot >= sizeof(cl_ZipData)) return 0;
			if(playerData[playerid][pCash] < cl_ZipData[slot][e_price]) return -1;

	        model = cl_ZipData[slot][e_model];
	        bone = cl_ZipData[slot][e_bone];
	        x = cl_ZipData[slot][e_x];
	        y = cl_ZipData[slot][e_y];
	        z = cl_ZipData[slot][e_z];
	        rx = cl_ZipData[slot][e_rx];
	        ry = cl_ZipData[slot][e_ry];
	        rz = cl_ZipData[slot][e_rz];
	        sx = cl_ZipData[slot][e_sx];
	        sy = cl_ZipData[slot][e_sy];
	        sz = cl_ZipData[slot][e_sz];
	    }
	}
	SetPlayerAttachedObject(playerid, cl_buyingpslot[playerid], model, bone, x, y, z, rx, ry, rz, sx, sy, sz);
	EditAttachedObject(playerid, cl_buyingpslot[playerid]);
	bf_on(player_bf[playerid], IS_PLAYER_BUYCLOTHING);

	SendClientMessage(playerid, COLOR_WHITE, "ข้อแนะ: ใช้ "EMBED_YELLOW"SPACE"EMBED_WHITE" เพื่อดูรอบ ๆ กด "EMBED_YELLOW"ESC"EMBED_WHITE" เพื่อยกเลิก");
	SendClientMessage(playerid, COLOR_LIGHTRED, "ใส่เครื่องแต่งกายตำแหน่งที่ไม่เหมาะสมมีโทษ");

	ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 1,1, 1, 0, 1);
	return 1;
}

ClothingExistSlot(playerid)
{
	new query[128], slot = -1;
	for(new i = 0; i!=MAX_CLOTHES;++i)
	{
		format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' AND slot = %d",playerData[playerid][pID], i);
		mysql_query(dbCon, query);

		if(!cache_num_rows())
		{
		    slot = i;
		    break;
		}
	}
	if(slot > 7) slot = 7;
	return slot;
}
// ZCMD

// Basic Commands

CMD:coin(playerid, params[])
{
	new str[128];
	format(str, sizeof(str), "* %s พลิกเหรียญลงพื้นและมันออก%s", ReturnRealName(playerid), (random(2)) ? ("หัว") : ("ก้อย"));
    SendNearbyMessage(playerid, 15.0, COLOR_WHITE, str);
	return 1;
}

/*CMD:logout(playerid, params[])
{
	if (SQL_IsLogged(playerid))
	{
		new query[512];

		mysql_format(dbCon, query, sizeof(query), "SELECT * FROM `accounts` WHERE `ID` = '%d' AND `Password` = '%s'", playerData[playerid][pUserid], buffer);
		mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);*/

		/*mysql_format(dbCon, XLQuery, sizeof(XLQuery), "SELECT c.ID,c.Character,c.Level,c.Cash,c.Model,c.PlayingHours,c.DonateRank, b.id as isban FROM `characters` c LEFT JOIN bans b ON c.ID = b.character_id WHERE c.Username = %d", playerData[playerid][pUserid]);
		mysql_tquery(dbCon, XLQuery, "selectCharacter", "d", playerid);

		cache_get_value_name_int(0, "ID", playerData[playerid][pUserid]);

		format(playerData[playerid][pUsername], 20, ReturnPlayerName(playerid));

		Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "ยินดีต้อนรับเข้าสู่ Los Angeles Role Play", ""EMBED_WHITE"การเข้าสู่ระบบ "EMBED_YELLOW"[la-rp.site]"EMBED_WHITE"\n\nโปรดกรอกรหัสผ่านด้านล่างเพื่อเลือกตัวละครของท่าน\n- เปลี่ยนสกินตัวละครได้ที่หน้าเว็บไซต์ "EMBED_YELLOW"(UCP)", "ส่งรหัสผ่าน", "ออกจากเกม");


		TogglePlayerSpectating(playerid, 1);
		bf_off(player_bf[playerid], IS_LOGGED);

		SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ Logout ออกจากตัวละครของคุณ");
		SetPlayerName(playerid, playerData[playerid][pUserid]);
		SetPlayerScore(playerid, 0);

		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "คุณยังไม่เข้าสู่ระบบ Login");
}*/

CMD:dice(playerid, params[])
{
	new str[128];
	format(str, sizeof(str), "* %s ทอยลูกเต๋าและมันออก %d", ReturnRealName(playerid), random(6)+1);
    SendNearbyMessage(playerid, 15.0, COLOR_WHITE, str);
	return 1;
}

CMD:rnumber(playerid, params[])
{
	new
	    rmin,
	    rmax,
		emote[128],
		str[128];

	if (sscanf(params, "dds[128]", rmin, rmax, emote))
	    return SendSyntaxMessage(playerid, "/rnumber [min] [max] [อารมณ์]");

	if(rmin >= rmax) {
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวเลขต่ำสุดต้องน้อยกว่าตัวเลขสูงสุด");
	}

	format(str, sizeof(str), "* %s %s %d (( %d ถึง %d ))", ReturnRealName(playerid), emote, randomEx(rmin, rmax), rmin, rmax);
    SendNearbyMessage(playerid, 30.0, COLOR_WHITE, str);
	return 1;
}


CMD:fixbug(playerid, params[])
{
	HouseEntered[playerid] = -1;
	BizEntered[playerid]=-1;
	GarageEntered[playerid] = -1;

	playerData[playerid][pInterior] = 0;
	playerData[playerid][pWorld] = 0;
	playerData[playerid][pLocal] = 255;

	SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ทำการแก้ไขข้อผิดพลาดของตัวละครแล้ว");
	return 1;
}

CMD:me(playerid, params[])
{
    if(isDeathmode{playerid})
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มี /me ใน isDeathmode");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [action]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s %.80s", ReturnRealName(playerid), params);
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "... %s", params[80]);
	}
	else {
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s %s", ReturnRealName(playerid), params);
	}
	
	//SQL_LogChat(playerid, "/me", params);
	
	return 1;
}

CMD:melow(playerid, params[])
{
    if(isDeathmode{playerid})
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มี /me ใน isDeathmode");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/melow [action]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s %.80s", ReturnRealName(playerid), params);
	    SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "... %s", params[80]);
	}
	else SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s %s", ReturnRealName(playerid), params);

	//SQL_LogChat(playerid, "/melow", params);	
	return 1;
}

CMD:ame(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มี /me ใน isDeathmode และ bwmode");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [action]");

	new string[128];
	format(string, sizeof(string), "* %s %s", ReturnRealName(playerid), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 6000);

 	SendClientMessage(playerid, COLOR_PURPLE, string);

 	//SQL_LogChat(playerid, "/ame", params);

	return 1;
}

CMD:do(playerid, params[])
{
    /*if(isDeathmode{playerid})
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มี /do ใน isDeathmode");*/

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [action]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %.80s", params);
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "... %s (( %s ))", params[80], ReturnRealName(playerid));
	}
	else SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnRealName(playerid));

    //SQL_LogChat(playerid, "/do", params);
	return 1;
}

CMD:dolow(playerid, params[])
{
    /*if(isDeathmode{playerid})
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มี /do ใน isDeathmode");*/

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/dolow [action]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %.80s", params);
	    SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "... %s (( %s ))", params[80], ReturnRealName(playerid));
	}
	else SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnRealName(playerid));

	//SQL_LogChat(playerid, "/dolow", params);
	return 1;
}

alias:local("lo");
CMD:local(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

	new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(l)ocal [ข้อความ]");

	if (strlen(params) > 80) {

	    format(str, sizeof(str), "%s พูดว่า: %.80s", ReturnRealName(playerid), params);
	    ProxDetector(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 20.0, str);
	}
	else format(str, sizeof(str), "%s พูดว่า: %s", ReturnRealName(playerid), params), ProxDetector(playerid, 20.0, str);

    ChatAnimation(playerid, strlen(params));
    /*ApplyAnimationEx(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
    SetTimerEx("StopChatting", strlen(params) * 100, false, "d", playerid);*/

    //SQL_LogChat(playerid, "/local", params);
	return 1;
}

CMD:t(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/t [ข้อความ]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s พูดว่า: %.80s", ReturnRealName(playerid), params);
	    ProxDetector(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 20.0, str);
	}
	else format(str, sizeof(str), "%s พูดว่า: %s", ReturnRealName(playerid), params), ProxDetector(playerid, 20.0, str);

	//SQL_LogChat(playerid, "/t", params);

	return 1;
}

alias:low("l");
CMD:low(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

	new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/low [low text]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s พูดว่า [เบา]: %.80s", ReturnRealName(playerid), params);
	    ProxDetector(playerid, 5.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 5.0, str);
	}
	else format(str, sizeof(str), "%s พูดว่า [เบา]: %s", ReturnRealName(playerid), params), ProxDetector(playerid, 5.0, str);

    ChatAnimation(playerid, strlen(params));

    /*ApplyAnimationEx(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
    SetTimerEx("StopChatting", strlen(params) * 100, false, "d", playerid);*/

    //SQL_LogChat(playerid, "/low", params);
	return 1;
}

alias:shout("s");
CMD:shout(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(s)hout [ข้อความ]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s ตะโกน: %.80s", ReturnRealName(playerid), params);
	    ProxDetector(playerid, 30.0, str);

	    format(str, sizeof(str), "... %s!", params[80]);
	    ProxDetector(playerid, 30.0, str);
	}
	else format(str, sizeof(str), "%s ตะโกน: %s!", ReturnRealName(playerid), params),ProxDetector(playerid, 30.0, str);

	//SQL_LogChat(playerid, "/shout", params);
	return 1;
}

alias:dshout("ds");
CMD:dshout(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(ds)hout [ข้อความ]");


	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "%s ตะโกน: %.80s", ReturnRealName(playerid), params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s!", params[80]);
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "%s ตะโกน: %s!", ReturnRealName(playerid), params), ProxDetector(playerid, 30.0, str);


			/*format(szQuery, sizeof(szQuery), "นอกบ้าน %d: %s", i, params);
            SQL_LogChat(playerid, "/ds", szQuery);*/

			foreach(new p : Player)
			{
                if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "%s ตะโกน: %.80s", ReturnRealName(playerid), params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s!", params[80]);
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "%s ตะโกน: %s!", ReturnRealName(playerid), params), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(playerid))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "%s ตะโกน: %.80s", ReturnRealName(playerid), params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s!", params[80]);
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "%s ตะโกน: %s!", ReturnRealName(playerid), params), ProxDetector(playerid, 30.0, str);

			/*format(szQuery, sizeof(szQuery), "ในบ้าน %d: %s", i, params);
            SQL_LogChat(playerid, "/ds", szQuery);*/

			foreach(new p : Player)
			{
				if (IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "%s ตะโกน: %.80s", ReturnRealName(playerid), params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s!", params[80]);
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "%s ตะโกน: %s!", ReturnRealName(playerid), params), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:ddo(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, "   คุณสลบและไม่สามารถพูดได้");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ddo [ข้อความ]");


	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "* %.80s", params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnRealName(playerid));
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "* %s (( %s ))", params, ReturnRealName(playerid)), ProxDetector(playerid, 30.0, str);

			/*format(szQuery, sizeof(szQuery), "นอกบ้าน %d: %s", i, params);
            SQL_LogChat(playerid, "/ddo", szQuery);*/

			foreach(new p : Player)
			{
                if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "* %.80s", params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnRealName(playerid));
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "* %s (( %s ))", params, ReturnRealName(playerid)), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(playerid))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "* %.80s", params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnRealName(playerid));
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "* %s (( %s ))", params, ReturnRealName(playerid)), ProxDetector(playerid, 30.0, str);

			/*format(szQuery, sizeof(szQuery), "ในบ้าน %d: %s", i, params);
            SQL_LogChat(playerid, "/ddo", szQuery);*/

			foreach(new p : Player)
			{
				if (IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "* %.80s", params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnRealName(playerid));
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "* %s (( %s ))", params, ReturnRealName(playerid)), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:knock(playerid, params[])
{
	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
		 	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "> %s เคาะประตูบ้าน", ReturnPlayerName(playerid));
			
			new str[51];
			format(str, sizeof(str), "> ก๊อก! ก๊อก! ก๊อก! (( %s ))", ReturnPlayerName(playerid));
			foreach(new p : Player) if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p)) SendClientMessage(p, COLOR_PURPLE, str);
			return 1;
		}
	}
	return 1;
}

alias:whisper("w");
CMD:whisper(playerid, params[])
{
    if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid})
        return SendClientMessage(playerid, COLOR_GRAD1, " คุณสลบและไม่สามารถพูดได้");

	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(w)hisper [ไอดีผู้เล่น/ชื่อบางส่วน] [ข้อความ]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถกระซิบกับตัวเองได้");

    if (strlen(text) > 80) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s กระซิบ: %.80s", ReturnRealName(playerid), text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "... %s **", text[80]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "กระซิบถึง %s", ReturnRealName(userid));
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s กระซิบ: %s", ReturnRealName(playerid), text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "กระซิบถึง %s", ReturnRealName(userid));
	}
	//format(text, sizeof(text), "กระซิบ %s: %s", ReturnPlayerName(userid), text);
	//SQL_LogChat(playerid, "/w", text);
	
	format(text, sizeof(text), "%s พึมพำบางอย่าง", ReturnRealName(playerid));
	SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 30.0, 6000);

	return 1;
}

CMD:cw(playerid, params[])
{
	new text[128], vehicle = GetPlayerVehicleID(playerid);

    if (sscanf(params, "s[128]", text))
	    return SendSyntaxMessage(playerid, "/(cw)hisper [ข้อความ]");

	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้อยู่บนรถ!");

	foreach (new i : Player)
	{
	    if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle) {
		    if (strlen(text) > 80) {
			    SendClientMessageEx(i, 0xD7DFF3AA, "%s %s พูดว่า: %.80s", (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ? ("คนขับ"): ("ผู้โดยสาร"), ReturnRealName(playerid), text);
			    SendClientMessageEx(i, 0xD7DFF3AA, "... %s", text[80]);
			}
			else {
			    SendClientMessageEx(i, 0xD7DFF3AA, "%s %s พูดว่า: %s", (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ? ("คนขับ"): ("ผู้โดยสาร"), ReturnRealName(playerid), text);
			}
		}
	}

	//SQL_LogChat(playerid, "/cw", text);
	return 1;
}

CMD:b(playerid, params[])
{
	new str[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [ข้อความ]");

	if (strlen(params) > 80) {

	    if(playerData[playerid][pAdmin] && isAdminDuty(playerid))
		{
			format(str, sizeof(str), "(( [%d] {FF8300}%s{B4B5B7}: %.80s ))", playerid, ReturnRealName(playerid), params);
		}
		else {
			format(str, sizeof(str), "(( [%d] %s: %.80s ))", playerid, ReturnRealName(playerid), params);
		}
        ProxDetectorOOC(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
        ProxDetectorOOC(playerid, 20.0, str);
	}
	else {
	    if(playerData[playerid][pAdmin] && isAdminDuty(playerid)) {
			format(str, sizeof(str), "(( [%d] {FF8300}%s{B4B5B7}: %s ))", playerid, ReturnRealName(playerid), params);
		}
		else {
			format(str, sizeof(str), "(( [%d] %s: %s ))", playerid, ReturnRealName(playerid), params);
		}
		ProxDetectorOOC(playerid, 20.0, str);
	}

	//SQL_LogChat(playerid, "/b", params);
	return 1;
}

CMD:ooc(playerid, params[])
{
    if(systemVariables[OOCStatus] == 1 && !playerData[playerid][pAdmin])
		return SendClientMessage(playerid, COLOR_GREY, "ช่องทางแชท OOC ถูกปิดในปัจจุบัน");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(o)oc [ข้อความ]");

	if (strlen(params) > 80) {

	    if(playerData[playerid][pAdmin] && isAdminDuty(playerid)) {
			SendOOCMessage(COLOR_GRAD1, "(( [OOC] {FF8300}%s{B4B5B7}: %.80s ))", ReturnRealName(playerid), params);
		}
		else SendOOCMessage(COLOR_GRAD1, "(( [OOC] %s: %.80s ))", ReturnRealName(playerid), params);

        SendOOCMessage(COLOR_GRAD1, "... %s", params[80]);
	}
	else {
	    if(playerData[playerid][pAdmin] && isAdminDuty(playerid)) SendOOCMessage(COLOR_GRAD1, "(( [OOC] {FF8300}%s{B4B5B7}: %s ))", ReturnRealName(playerid), params);
		else SendOOCMessage(COLOR_GRAD1, "(( [OOC] %s: %s ))", ReturnRealName(playerid), params);
	}

	//SQL_LogChat(playerid, "/ooc", params);

	return 1;
}
alias:ooc("n", "newbie", "o");
/*
	format(szQuery, sizeof(szQuery), "ส่งถึง %s: %s", ReturnPlayerName(userid), text);
	SQL_LogChat(playerid, "/pm", szQuery);
*/
CMD:pm(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [ไอดีผู้เล่น/ชื่อบางส่วน] [ข้อความ]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถส่งข้อความส่วนตัวให้กับตัวเองได้");

	if (bf_get(player_bf[userid], TOGGLE_PMS) && !playerData[playerid][pAdmin] && !playerData[playerid][pTester])
		return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นปิดกั้น PMs");

    if (strlen(text) > 80) {
	    SendClientMessageEx(userid, COLOR_PMF, "(( PM จาก %s (%d): %.80s", ReturnRealName(playerid), playerid, text);
	    SendClientMessageEx(userid, COLOR_PMF, "... %s ))", text[80]);

	    SendClientMessageEx(playerid, COLOR_PMS, "(( PM ส่งถึง %s (%d): %.80s", ReturnRealName(userid), userid, text);
	    SendClientMessageEx(playerid, COLOR_PMS, "... %s ))", text[80]);
	}
	else {
  		SendClientMessageEx(userid, COLOR_PMF, "(( PM จาก %s (%d): %s ))", ReturnRealName(playerid), playerid, text);
	    SendClientMessageEx(playerid, COLOR_PMS, "(( PM ส่งถึง %s (%d): %s ))", ReturnRealName(userid), userid, text);
	}

	/*format(szQuery, sizeof(szQuery), "ส่งถึง %s: %s", ReturnPlayerName(userid), text);
	SQL_LogChat(playerid, "/pm", szQuery);*/

	return 1;
}

CMD:blockpm(playerid,params[])
{
    if(playerData[playerid][pAdmin] || playerData[playerid][pDonateRank])
    {
        if(!bf_get(player_bf[playerid], TOGGLE_PMS))
        {
	        //block_pm[playerid] = 1;
			bf_on(player_bf[playerid], TOGGLE_PMS);
	        SendClientMessage(playerid,COLOR_GREEN,"ปิดกั้นระบบ PMs");
	        return 1;
		}
		else
		{
		    //block_pm[playerid] = 0;
			bf_off(player_bf[playerid], TOGGLE_PMS);
		    SendClientMessage(playerid,COLOR_GREEN,"ยกเลิกการบล็อกระบบ PMs แล้ว");
		    return 1;
		}
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    }
	return 1;
}

CMD:toggleooc(playerid,params[])
{
    if(playerData[playerid][pAdmin] >= 4)
    {
        if(systemVariables[OOCStatus] == 1)
        {
	        //block_pm[playerid] = 1;
			systemVariables[OOCStatus] = 0;
	        SendClientMessageToAllEx(COLOR_GREEN, "%s ได้เปิดการใช้งานแชท Global OOC", ReturnPlayerName(playerid));
	        return 1;
		}
		else
		{
		    //block_pm[playerid] = 0;
			systemVariables[OOCStatus] = 1;
            SendClientMessageToAllEx(COLOR_GREEN, "%s ได้ปิดให้ใช้งานแชท Global OOC", ReturnPlayerName(playerid));
		    return 1;
		}
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    }
	return 1;
}

CMD:toghud(playerid, params[])
{
	if(!bf_get(player_bf[playerid], TOGGLE_HUD))
	{
		bf_on(player_bf[playerid], TOGGLE_HUD);
		//hidePlayerHUD(playerid);
		PlayerTextDrawHide(playerid, pPT_Radio[playerid]);
 		GameTextForPlayer(playerid, "~r~HUD OFF", 2000, 4);
	}
	else
	{
		bf_off(player_bf[playerid], TOGGLE_HUD);
		PlayerTextDrawShow(playerid, pPT_Radio[playerid]);
		//showPlayerHUD(playerid);
		GameTextForPlayer(playerid, "~g~HUD ON", 2000, 4);
	}
	return 1;
}

/*CMD:toghud(playerid, params[])
{
	if (HUDtoggle[playerid] == 1)
	{
		HUDtoggle[playerid] = 0;

		PlayerTextDrawHide(playerid, SpeedoText[playerid]);	
		SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ปิดการใช้งาน HUD");
	}

	else
	{
		HUDtoggle[playerid] = 1;

		PlayerTextDrawShow(playerid, SpeedoText[playerid]);	
		SendClientMessage(playerid, COLOR_YELLOW, "คุณได้เปิดการใช้งาน HUD");
	}
	return 1;
}*/

CMD:blockb(playerid,params[])
{
	if(!bf_get(player_bf[playerid], TOGGLE_LOCALOOC))
	{
		bf_on(player_bf[playerid], TOGGLE_LOCALOOC);
 		SendClientMessage(playerid,COLOR_GREEN,"ปิดกั้นระบบ Local OOC chat");
	}
	else
	{
		bf_off(player_bf[playerid], TOGGLE_LOCALOOC);
		SendClientMessage(playerid,COLOR_GREEN,"ยกเลิกการบล็อกระบบ Local OOC chat แล้ว");
	}
	return 1;
}

CMD:togadminalert(playerid,params[])
{
    if(playerData[playerid][pAdmin] >= 1)
    {
		if(!bf_get(player_bf[playerid], TOGGLE_CHEAT))
		{
			bf_on(player_bf[playerid], TOGGLE_CHEAT);
			SendClientMessage(playerid,COLOR_GREEN,"ปิดกั้นระบบการแจ้งเตือนผู้ดูแล");
		}
		else
		{
			bf_off(player_bf[playerid], TOGGLE_CHEAT);
			SendClientMessage(playerid,COLOR_GREEN,"ยกเลิกการบล็อกระบบการแจ้งเตือนผู้ดูแล");
		}
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    }
	return 1;
}


CMD:togspecdata(playerid,params[])
{
    if(playerData[playerid][pAdmin] >= 1)
    {
		if(!bf_get(player_bf[playerid], TOGGLE_SPECDATA))
		{
			bf_on(player_bf[playerid], TOGGLE_SPECDATA);
			SendClientMessage(playerid,COLOR_GREEN,"ปิดข้อมูลเมื่อส่องผู้เล่น");
		}
		else
		{
			bf_off(player_bf[playerid], TOGGLE_SPECDATA);
			SendClientMessage(playerid,COLOR_GREEN,"เปิดข้อมูลเมื่อส่องผู้เล่น");
		}
    }
    else
    {
		SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    }
	return 1;
}


CMD:togfam(playerid,params[])
{
	if(!bf_get(player_bf[playerid], TOGGLE_FACTION))
	{
		bf_on(player_bf[playerid], TOGGLE_FACTION);
 		SendClientMessage(playerid,COLOR_GREEN,"ปิดกั้นระบบแชทกลุ่ม");
	}
	else
	{
		bf_off(player_bf[playerid], TOGGLE_FACTION);
		SendClientMessage(playerid,COLOR_GREEN,"ยกเลิกการบล็อกระบบแชทกลุ่มแล้ว");
	}
	return 1;
}

CMD:togooc(playerid,params[])
{
	if(!bf_get(player_bf[playerid], TOGGLE_OOC))
	{
		bf_on(player_bf[playerid], TOGGLE_OOC);
 		SendClientMessage(playerid,COLOR_GREEN,"ปิดกั้นระบบแชท Global OOC");
	}
	else
	{
		bf_off(player_bf[playerid], TOGGLE_OOC);
		SendClientMessage(playerid,COLOR_GREEN,"ยกเลิกการบล็อกระบบแชท Global OOC แล้ว");
	}
	return 1;
}


CMD:convo(playerid, params[])
{
    if(bf_get(player_bf[playerid], IS_LOGGED)) return SendClientMessage(playerid, COLOR_GRAD1, "   ข้อความส่วนตัวอัตโนมัติได้ถูกเปิดใช้งานแล้ว");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/convo [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถส่งข้อความส่วนตัวให้กับตัวเองได้");

	bf_on(player_bf[playerid], PLAYER_CONVO),ConvoID[playerid]=userid;
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้เปิดใช้งานการส่งข้อความส่วนตัวอัตโนมัติ");
	return 1;
}

CMD:endconvo(playerid, params[])
{
    if(!bf_get(player_bf[playerid], IS_LOGGED)) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณยังไม่ได้เปิดการใช้งานข้อความส่วนตัวอัตโนมัติ");
    bf_off(player_bf[playerid], PLAYER_CONVO), ConvoID[playerid]=INVALID_PLAYER_ID;
    SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ยกเลิกการใช้งานข้อความส่วนตัวอัตโนมัติ");
	return 1;
}


// General Commands

CMD:id(playerid, params[])
{
	new ids[MAX_PLAYERS], i;

	if (sscanf(params, "?<MATCH_NAME_PARTIAL=1>u[100]", ids))
	    return SendSyntaxMessage(playerid, "/id [ไอดีผู้เล่น/ชื่อบางส่วน]");

	for (i = 0; ids[i] != INVALID_PLAYER_ID; ++ i)
	{
	    if (ids[i] == -1) break;

	    SendClientMessageEx(playerid, COLOR_GRAD1, "[ID %d] %s | Level: %d", ids[i], ReturnPlayerName(ids[i]), playerData[ids[i]][pLevel]);
	}
	if (i == 0) SendClientMessage(playerid, COLOR_GRAD1, "   ไม่พบชื่อหรือไอดีผู้เล่นที่ระบุ");

	return 1;
}

CMD:time(playerid, params[])
{
 	new
	    string[256],
		date[3];

	gettime(date[0], date[1], date[2]);
	FixHour(date[0]);
	date[0] = shifthour;

	format(string, sizeof(string), "~g~|~w~%02d:%02d~g~|", date[0], date[1]);
	
	if(playerData[playerid][pJailTime] > 1 && playerData[playerid][pJailed] == 1)
	{
		new temp_sec = playerData[playerid][pJailTime], temp_mins, temp_hours;
		ConvertTime(temp_sec, temp_mins, temp_hours);
		format(string, sizeof(string), "%s~n~~w~jail time left: %02d:%02d:%02d", string, temp_hours, temp_mins, temp_sec);
	}
	else if(playerData[playerid][pJailTime2] > 1 && playerData[playerid][pJailed] == 2)
	{
		new temp_sec = playerData[playerid][pJailTime2], temp_mins, temp_hours;
		ConvertTime(temp_sec, temp_mins, temp_hours);
		format(string, sizeof(string), "%s~n~~w~jail time left: %02d:%02d:%02d", string, temp_hours, temp_mins, temp_sec);
	}
	else if(playerData[playerid][pIsolateTime] > 1 && playerData[playerid][pPrisonDept] > 2)
	{
		new temp_sec = playerData[playerid][pIsolateTime], temp_mins, temp_hours;
		ConvertTime(temp_sec, temp_mins, temp_hours);
		format(string, sizeof(string), "%s~n~~w~isolate time left: %02d:%02d:%02d", string, temp_hours, temp_mins, temp_sec);
	}
	else if(playerData[playerid][pPrisonTime] > 1 && playerData[playerid][pPrisonDept] < 3)
	{
		new temp_sec = playerData[playerid][pPrisonTime], temp_mins, temp_hours;
		ConvertTime(temp_sec, temp_mins, temp_hours);
		format(string, sizeof(string), "%s~n~~w~prison time left: %02d:%02d:%02d", string, temp_hours, temp_mins, temp_sec);
	}
	//jail time left: %02d:%02d:%02d
	GameTextForPlayer(playerid, string, 6000, 1);
    ApplyAnimationEx(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s ตรวจสอบเวลา", ReturnRealName(playerid));
	return 1;
}

CMD:servertime(playerid, params[])
{
 	new
	    string[64],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(string, sizeof(string), "~g~|~w~%02d:%02d~g~|", date[3], date[4]);
	GameTextForPlayer(playerid, string, 6000, 1);

	SendClientMessageEx(playerid, COLOR_GRAD1, "วันที่: %d/%d/%d - เวลา: %02d:%02d:%02d",date[0],date[1],date[2],date[3],date[4],date[5]);
	return 1;
}

// Help


CMD:help(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"___________www.la-rp.site___________");

	SendClientMessage(playerid, COLOR_STAT1,"[ACCOUNT] /rules /stats /levelup /upgrade /mypackage /mydrugs /passgun, /cigarettes");
    SendClientMessage(playerid, COLOR_STAT2,"[GENERAL] /pay /charity /time /buy /id /call /knock /blindfold /coin /note, /fixbug, /vehiclename, /remove_vehiclename");
    SendClientMessage(playerid, COLOR_STAT1,"[GENERAL] (/ad)vertise /licenses /report /re /drug /exitcar /attributes /examine /setstyle");
	SendClientMessage(playerid, COLOR_STAT2,"[CHAT] (/w)hisper (/o)(OOC) (/s)hout (/ds)hout (/l)ocal /me /b(OOC) /do /cw /low /pm(OOC) /convo(ooc) /r /auto_low");
    SendClientMessage(playerid, COLOR_STAT1,"[BANK] /balance /withdraw /bank /savings /transfer /pincode /officialskin");
	if (playerData[playerid][pFaction] != -1)
	{
 		SendClientMessage(playerid, COLOR_STAT2, "[FACTION] /factions, /(f)ac, /nofam, /invite, /uninvite, /giverank, /editrankname, /customskin, /towcars, /park");

 		if (GetFactionType(playerid) == FACTION_TYPE_POLICE) {
 		    SendClientMessage(playerid,COLOR_GREEN,"____________________ Police Commands ____________________");
 		    SendClientMessage(playerid, COLOR_STAT1, "[LSPD] /(gov)ernment (/r)adio (/d)epartments (/meg)aphone /duty /heal /uniform /door /tolls /cuff /uncuff /carsign /checkplate /frisk /revoke");
			SendClientMessage(playerid, COLOR_STAT1, "[LSPD] /rb(1-10) /rrb(1-10) /cone /disband /siren /siren2 /arrest /mdc /tazer /rubberbullets /vehiclefine /vehiclefines /fine /fines");
            SendClientMessage(playerid, COLOR_STAT1, "[LSPD] /authorizeswat /deauthorizeswat /showbadge /siren3 /cctv /cctvoff /spike_add /spike_del /spikes /elm");
		}
		else if (GetFactionType(playerid) == FACTION_TYPE_NEWS) {
		    SendClientMessage(playerid, COLOR_STAT1, "[FACTION]");
		}
  		else if (GetFactionType(playerid) == FACTION_TYPE_MEDIC) {
 		    SendClientMessage(playerid, COLOR_STAT1, "[LSFMD] (/meg)aphone /duty /heal /uniform /operation /putinambu /hpc /siren /carsign /showbadge /elm");
			SendClientMessage(playerid, COLOR_STAT1, "[LSFMD] /trolley_create /trolley_del /ladders_create /ladders_del");
		}
		else if (GetFactionType(playerid) == FACTION_TYPE_GOV) {
 		    SendClientMessage(playerid, COLOR_STAT1, "[FACTION] /siren /showbadge");
		}
		else if (GetFactionType(playerid) == FACTION_TYPE_SASD) {
 		    SendClientMessage(playerid,COLOR_GREEN,"____________________ Sheriff Commands ____________________");
 		    SendClientMessage(playerid, COLOR_STAT1, "[SASD] /(gov)ernment (/r)adio (/d)epartments (/meg)aphone /duty /heal /uniform /door /tolls /cuff /uncuff /carsign /checkplate /frisk /revoke");
			SendClientMessage(playerid, COLOR_STAT1, "[SASD] /rb(1-10) /rrb(1-10) /cone /disband /siren /siren2 /arrest /mdc /tazer /rubberbullets /vehiclefine /vehiclefines /fine /fines");
            SendClientMessage(playerid, COLOR_STAT1, "[SASD] /authorizeswat /deauthorizeswat /showbadge /siren3 /cctv /cctvoff /spike_add /spike_del /spikes /elm");
		}
		else if (GetFactionType(playerid) == FACTION_TYPE_SADOC) {
 		    SendClientMessage(playerid,COLOR_GREEN,"___ San Andreas Department of Corrections and Rehabilitation Commands ___");
 		    SendClientMessage(playerid, COLOR_STAT1, "[SADOC] /(gov)ernment (/r)adio (/d)epartments (/m)egaphone /duty /heal /uniform /cuff /uncuff /tazer");
			SendClientMessage(playerid, COLOR_STAT1, "[SADOC] /arrest /gate /cell");
		}
		else if (GetFactionType(playerid) == FACTION_TYPE_GANG) {
 		    SendClientMessage(playerid, COLOR_STAT1, "[FACTION] /givespray /takespray");
		}
	}
    if (playerData[playerid][pAdmin]) SendClientMessage(playerid, COLOR_STAT2, "[ADMIN] /acmds (/a)dminchat");
    if (playerData[playerid][pTester]) SendClientMessage(playerid, COLOR_STAT2, "[TESTER] /tcmds (/t)ester(c)hat");
    SendClientMessage(playerid, COLOR_STAT1,"[HELP] /cellphonehelp /househelp (/v)ehicle /businesshelp /jobhelp /familyhelp /newspaper");
    SendClientMessage(playerid, COLOR_STAT2,"[HELP] /fishhelp /radiohelp /dealinghelp /drughelp");
    SendClientMessage(playerid, COLOR_STAT1,"[TOG/FIND/BLOCK] /tog /newspaper /tog(fam)(join)(news)(rnews)(ooc) /togall /blockb /blockpm /toghud");
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_STAT1,"โปรดศึกษาคำสั่งในเซิร์ฟเวอร์เพิ่มเติมในฟอรั่มหรือ /helpme เพื่อขอความช่วยเหลือ");
	return 1;
}

CMD:drughelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_LIGHTRED,"Drug Commands:");
	SendClientMessage(playerid, COLOR_WHITE,"/mydrugs - /givedrug - /dropdrug - /usedrug");
	SendClientMessage(playerid, COLOR_WHITE,"/placedrug (/pd) - /placealldrugs (pad) - /takedrug (/td) - /takealldrugs (/tad)");
	SendClientMessage(playerid, COLOR_WHITE,"/checkdrugs - /transferdrug - /buildpackage - /adjustpackage");
	return 1;
}
CMD:radiohelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________Radio_help______________________|");
	SendClientMessage(playerid, COLOR_YELLOW,"ข้อแนะ: คุณสามารถซื้อมันได้ที่ร้านค้า 24-7");
	SendClientMessage(playerid, COLOR_WHITE,"/setchannel - ตั้งค่าคลื่นสัญญานของวิทยุที่ต้องการ");
	SendClientMessage(playerid, COLOR_WHITE,"/setslot - ตั้งค่าช่องทางการติดต่อที่ต้องการ");
	SendClientMessage(playerid, COLOR_WHITE,"/r - สนทนาวิทยุสื่อสาร, ในสัญญานที่คุณตั้งค่า");
	SendClientMessage(playerid, COLOR_WHITE,"/cal - เพื่อเช่าวิทยุสื่อสาร!");
	SendClientMessage(playerid, COLOR_WHITE,"/part - เพื่อยกเลิกคลื่นสัญญานวิทยุสื่อสาร");
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________________________________________|");
	return 1;
}

CMD:note(playerid, params[])
{
    SendClientMessage(playerid, COLOR_YELLOW2,"____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW2,"การใช้: /note [action]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Show] /note show [noteID] [PlayerID / PartOfName]  (* หรือไม่ต้องพิมพ์ noteID หรือ PlayerID ก็ได้)");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Create] /note create [ข้อความ]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Delete] /note delete [number 1-5]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Give] /note give [number 1-5] [PlayerID / PartOfName]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Leave]: /note leave [number 1-5]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Add]: /note add [number 1-5] [ข้อความ]");
	SendClientMessage(playerid, COLOR_YELLOW2,"____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW2,"คุณไม่มีบันทึกใดๆเลย ( /note )");
	return 1;
}

CMD:dealinghelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_RED,"Weapon Commands:");
	SendClientMessage(playerid, COLOR_GREEN,"/sellweapon (/sw) - /sellpackage (/sp) - /putweapon (/pw) - /putallweapons (/paw)");
	SendClientMessage(playerid, COLOR_GREEN,"/takeweapon (/tw) - /takeallweapons (/taw) - /mypackage - /vehpackage");
	return 1;
}

CMD:fishhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD3,"/myfish /gofishing /fish /stopfishing /unloadfish");
	return 1;
}

CMD:jobhelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD3,"Your current job is:");
	SendClientMessageEx(playerid,COLOR_GRAD3,"%s", ReturnJobName(playerid, playerData[playerid][pJob]));

	if(playerData[playerid][pSideJob]) {
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD3,"Your side job is:");
		SendClientMessageEx(playerid,COLOR_GRAD3,"%s", ReturnJobName(playerid, playerData[playerid][pSideJob]));
	}

	if(playerData[playerid][pJob] == JOB_MECHANIC || playerData[playerid][pSideJob] == JOB_MECHANIC) {
		if(playerData[playerid][pSideJob] == JOB_MECHANIC) SendClientMessage(playerid,COLOR_LIGHTRED,"Car Mechanic Commands [SIDE JOB]");
		else SendClientMessage(playerid,COLOR_LIGHTRED,"Car Mechanic Commands:");
		SendClientMessage(playerid,COLOR_WHITE,"/buycomp - /checkcomponents - /service - /paintcar");
		SendClientMessage(playerid,COLOR_WHITE,"/colorlist - /attach - /detach");
	}

	if(playerData[playerid][pJob] == JOB_TAXI || playerData[playerid][pSideJob] == JOB_TAXI) {
	    if(playerData[playerid][pSideJob] == JOB_TAXI) SendClientMessage(playerid,COLOR_LIGHTRED,"Taxi Driver Commands [SIDE JOB]");
		else SendClientMessage(playerid,COLOR_LIGHTRED,"Taxi Driver Commands:");
		SendClientMessage(playerid,COLOR_WHITE,"/taxi [accept / duty / fare / start / stop]");
	}

	if(playerData[playerid][pJob] == JOB_WPDEALER) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Commands:");
		SendClientMessage(playerid,COLOR_GRAD1,"/sellweapon (/sw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/putweapon (/pw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/takeweapon (/tw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/putallweapons (/paw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/takeallweapons (/taw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/dealinghelp");
		SendClientMessage(playerid,COLOR_GRAD1,"/mypackage");
		SendClientMessage(playerid,COLOR_GRAD1,"/vehpackage");

	}

	if(playerData[playerid][pJob] == JOB_SUPPLIER) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Commands:");
		SendClientMessage(playerid,COLOR_GRAD1,"/sellpackage  (/sp)");
		SendClientMessage(playerid,COLOR_GRAD1,"/mypackage");
		SendClientMessage(playerid,COLOR_GRAD1,"/buyweapon");
	}


	if(playerData[playerid][pJob] == JOB_FARMER) {
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Farmer Commands:");
		SendClientMessage(playerid,COLOR_WHITE,"/harvest");
		SendClientMessage(playerid,COLOR_WHITE,"/stopharvest");
	}

	if(playerData[playerid][pJob] == JOB_TRUCKER) {
		SendClientMessage(playerid,COLOR_GRAD1,"อ่านเอกสารบนฟอรั่ม:");
		SendClientMessage(playerid,COLOR_GRAD1,"Server Information -> Feature Documentation -> Trucker Career");
		SendClientMessage(playerid,COLOR_GRAD1,"(http://forum.la-rp.com)");
		SendClientMessage(playerid,COLOR_GRAD2,"คุณจำเป็นต้องมีรถกระบะ รถตู้ หรือรถบรรทุกในการทำงานนี้");
		SendClientMessage(playerid, -1, ""EMBED_YELLOW"Commands:"EMBED_WHITE"ใช"EMBED_YELLOW"้ /carg"EMBED_WHITE"o เพื่อดูรายการที่สามารถทำได้");
		SendClientMessage(playerid, -1, ""EMBED_YELLOW"Commands:"EMBED_WHITE"ใช"EMBED_YELLOW"้ /tpd"EMBED_WHITE"a เพื่อเปิด PDA ของรถบรรทุกพร้อมแสดงข้อมูล");
		SendClientMessage(playerid, -1, ""EMBED_YELLOW"Commands:"EMBED_WHITE"ใช"EMBED_YELLOW"้ /industr"EMBED_WHITE"y เพื่อเปิด PDA ของรถบรรทุกพร้อมแสดงข้อมูล");
		if(playerData[playerid][pCareer]) SendClientMessageEx(playerid, -1,"คุณมี %d ชั่วโมงในการประกอบอาชีพ", playerData[playerid][pCareer]);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}

	if(playerData[playerid][pSideJob] == JOB_BARTENDER) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Commands:");
		SendClientMessage(playerid,COLOR_GRAD1,"/bar");
		SendClientMessage(playerid,COLOR_GRAD1,"/showmenu");
		SendClientMessage(playerid,COLOR_GRAD1,"/selldrink");
		SendClientMessage(playerid,COLOR_GRAD1,"/leavebar");
	}

	if(playerData[playerid][pSideJob] == JOB_POLICE) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Commands:");
		SendClientMessage(playerid,COLOR_GRAD1,"คุณสามารถดูคำสั่งของเจ้าหน้าที่ตำรวจด้วยการพิมพ์ : /help");
	}

	return 1;
}


CMD:businesshelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** BUSINESS HELP *** พิมพ์คำสั่งสำหรับความช่วยเหลือเพิ่มเติม");
	SendClientMessage(playerid, COLOR_GRAD3,"*** BUSINESS *** /bizinfo /compprice /bizfee /hire /fire /lock /openbiz");
	SendClientMessage(playerid, COLOR_GRAD3,"*** BUSINESS *** /sellbiz /bizwithdraw /bizupgrade /bizbank /bizupgrade");
	SendClientMessage(playerid, COLOR_GRAD3,"*** OTHER *** /cellphonehelp /businesshelp /clothinghelp /help");
	return 1;
}

CMD:househelp(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** HOUSE HELP *** พิมพ์คำสั่งสำหรับความช่วยเหลือเพิ่มเติม");
	SendClientMessage(playerid, COLOR_GRAD3,"*** House *** /myhouse /setrentable /setrent /rentroom /unrent /tenants /bareswitch");
	SendClientMessage(playerid, COLOR_GRAD3,"*** House *** /evict /evictall /lock /furniture /grantbuild /houseupgrade /cmdspot");
	SendClientMessage(playerid, COLOR_GRAD3,"*** OTHER *** /cellphonehelp /businesshelp /clothinghelp /help");
	return 1;
}

CMD:clothinghelp(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");

	SendClientMessage(playerid, COLOR_WHITE,"*** HELP *** พิมพ์คำสั่งสำหรับความช่วยเหลือเพิ่มเติม");
	SendClientMessage(playerid, COLOR_GRAD3,"*** CLOTHING *** /clothing [ชื่อ]");
	SendClientMessage(playerid, COLOR_GRAD4, "ชื่อที่ใช้ได้: (p)lace, (d)rop, (a)djust, (g)ive");
	return 1;
}

CMD:acmds(playerid, params[])
{
	if(!playerData[playerid][pAdmin])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	if (playerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________ASISSTANT COMMANDS___________________________");

		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /aduty /checkplayer /a(dminchat) /t(ester)c(hat) /kick /idlekick /banip /unbanip /freeze /unfreeze /goto /gethere");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /slap /telemenu /checkhacker /checkafk /checkmask /checkcar /clearchat /getip /ban /unban");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /fixveh /fuelveh /flipveh /spec /setint /setvw /announce /togadminalert /togspecdata");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /ajail /aunjail /gotocar /getcar /respawncar /setplayerspawn, /respawncars");
		/*SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: {C3C3C3}/aduty /aooc /announce /noooc /skinmenu /setinterior /setworld /adminchat /kick /banip /unbanip /backup /masked /sethp");
		SendClientMessage(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/gotols /setskin /ajail /telemenu /clearchat /gethere /goto /freeze /unfreeze /slap /getip /mute /getstats /ban /unban");
		SendClientMessage(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/unmute /reportlist /checkreport /whatcar /destroycar /gotocar /getcar /spec /specoff /adminwarn /admindewarn /checkhackers /showplants");
		SendClientMessage(playerid, COLOR_WHITE, "[Level 1]: {C3C3C3}/plantinfo /aremoveplant /togtchat /fixveh /healplayer");*/
	}
	if (playerData[playerid][pAdmin] >= 2)
	{
		SendClientMessage(playerid, COLOR_GREEN, "___________________________MODERATOR COMMANDS___________________________");

		SendClientMessage(playerid, COLOR_GRAD2,"[Level 2]: /sethp /setarmor /vehname /forcerespawn /a_helpup /giveofficial /delofficial /editskin");
	}
	if (playerData[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________ADMINISTRATOR COMMANDS___________________________");

		SendClientMessage(playerid, COLOR_GRAD3,"[Level 3]: /near /veh /desvehicle /desvehicles /setstat /setdonaterank /fuelall /[remove/check]playerweapon(Package) /[remove/check]carweapon(Package)");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 3]: /telecmds /near /spawndrug /removedrug /forceunmask /despawncar(player vehicle) /givegun /veh");
	}
	if (playerData[playerid][pAdmin] >= 4)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________LEAD ADMIN COMMANDS___________________________");

		SendClientMessage(playerid, COLOR_GRAD4,"[Level 4]: /gopos /makeleader /asetrank /toggleooc /spawngun(saving weapon)");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 4]: /factioncmds /vehcmds /adminname /aopenbiz");
	}
	if (playerData[playerid][pAdmin] >= 5)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________MANAGEMENT COMMANDS___________________________");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 5]: /tvcmds /saveall");
	}
	if (playerData[playerid][pAdmin] >= 1337)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________DEVELOPER COMMANDS___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[Level 1337]: /housecmds /businesscmds /warehousecmds /movedoorcmds /atmcmds");
		SendClientMessage(playerid, COLOR_GRAD5,"[Level 1337]: /entrancecmds");
	}
	if (playerData[playerid][pAdmin] >= 1338)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________PROJECT MANAGER COMMANDS___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[Level 1338]: /makeadmin /maketester");
		SendClientMessage(playerid, COLOR_GRAD6,"***1338 นี้ทำให้คุณถูกซ่อนในรายชื่อผู้ดูแลระบบ");
	}
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:atmcmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makeatm /removeatm /editatm");
	return 1;
}

CMD:tcmds(playerid, params[])
{
	if(!playerData[playerid][pTester])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ Tester");

	//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	if (playerData[playerid][pTester] >= 1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________Tester COMMANDS___________________________");

		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /tduty (/t)ester(c)hat /helpmes /checkafk");
	}
	if (playerData[playerid][pTester] >= 2)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 2]: /kick");
	}
	if (playerData[playerid][pTester] >= 3)
	{
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 3]: /ajail, /aunjail");
	}
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:rules(playerid, params[])
{
    SendClientMessage(playerid, COLOR_RED,"_______________________________________");
	SendClientMessage(playerid, COLOR_RED,"Los Angeles Roleplay Server Rules");
	SendClientMessage(playerid, COLOR_WHITE,"สามารถอ่านกฎระเบียบของเซิร์ฟเวอร์ที่บรรทัดด้านล่าง คุณคงจะรู้กฎระเบียบเป็นอย่างดีอยู่แล้ว...");
	SendClientMessage(playerid, COLOR_WHITE,"http://forum.la-rp.site");
	return 1;
}

/*
CMD:signalcmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 5]: /createsignal, /editsignal, /destroysignal");
	return 1;
}*/

CMD:tvcmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 5]: /tvcreate, /tvedit, /tvdelete, gototv");
	return 1;
}

CMD:factioncmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 4]: /viewfactions /createfaction, /editfaction, /destroyfaction");
	return 1;
}

CMD:vehcmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 4]: /saveveh /deleteveh /editveh");
	return 1;
}

CMD:warehousecmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makewarehouse /removewarehouse /editwarehouse /gotowarehouse");
	return 1;
}

CMD:movedoorcmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: {C3C3C3}/makemovedoor /dupmovedoor /removemovedoor /editmovedoor /whatmovedoor /showmovedoors");
	return 1;
}

CMD:housecmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makehouse /removehouse /edithouse /houseenter /houseexit /asellhouse /gotohouse /serverhouses");
	return 1;
}

CMD:entrancecmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makeentrance /removeentrance /editentrance /entranceenter /entranceexit /gotoentrance");
	return 1;
}

CMD:garagecmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makegarage /removegarage /editgarage /garageenter /garageexit /gotogarage");
	return 1;
}

CMD:businesscmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /makebusiness /removebusiness /editbusiness /businessenter /gotobusiness /serverbusinesses /asellbusiness");
	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /businessint /businessexit /biztypes /whatbusiness /showbusinesses /businessex1 /businessex2 /businessex3");
	return 1;
}

CMD:telecmds(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 3]: /teles /maketele /removetele /serverteles");
	return 1;
}

CMD:telemenu(playerid, params[])
{
	if(!playerData[playerid][pAdmin])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	new telestring[1550], part[40], teleportName[32];
	
	//format(telestring, sizeof(telestring), ""EMBED_WHITE"%s", OrTeleports[0]);
	for(new OrT = 0; OrT != sizeof(OrTeleports); ++OrT)
	{
		strunpack(teleportName, OrTeleports[OrT]);
		format(part, sizeof(part), "%s\n", teleportName);
		strcpi(telestring, part, sizeof(telestring));
	}
	Dialog_Show(playerid, Teles, DIALOG_STYLE_LIST, "Select a teleport location", telestring, "Teleport", "Cancel");
	return 1;
}

// Stats
CMD:stats(playerid, params[])
{
	if (SQL_IsLogged(playerid))
	{
		ShowStats(playerid,playerid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณยังไม่ได้เข้าสู่ระบบ !");
	return 1;
}

//-------------------------------[Check]--------------------------------------------------------------------------
CMD:checkplayer(playerid, params[])
{
	if (playerData[playerid][pAdmin] >= 1)
	{

		new
			userid;

		if (sscanf(params, "u", userid))
			return SendSyntaxMessage(playerid, "/checkplayer [ไอดีผู้เล่น/ชื่อบางส่วน]");

		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			}
		}


		ShowStats(playerid,userid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	return 1;
}


//CMD:a(playerid, params[]) return cmd_adminchat(playerid, params);
CMD:adminchat(playerid, params[])
{
	new str1[128], str2[128], bool:splitted = false;
	if (!playerData[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	if(isnull(params)) return SendSyntaxMessage(playerid, "/adminchat [ข้อความ]");

	if(strlen(params) > 80)
	{
		format(str1, sizeof(str1), "*Admin[%d] %s: %.80s ...", playerData[playerid][pAdmin], ReturnPlayerName(playerid), params);
		format(str2, sizeof(str2), "*Admin[%d] %s: ... %s", playerData[playerid][pAdmin], ReturnPlayerName(playerid), params[80]);
		splitted = true;
	}
	else
	{
		format(str1, sizeof(str1), "*Admin[%d] %s: %s", playerData[playerid][pAdmin], ReturnPlayerName(playerid), params);
	}

 	foreach (new i : Player)
	{
		if (playerData[i][pAdmin])
		{
			if(splitted)
			{
				SendClientMessage(i, COLOR_YELLOW, str1);
				SendClientMessage(i, COLOR_YELLOW, str2);
			}
			else
			{
				SendClientMessage(i, COLOR_YELLOW, str1);
			}
		}
	}
	return 1;
}
alias:adminchat("a");

CMD:testerchat(playerid, params[])
{
	new str1[128], str2[128], bool:splitted = false;
	if (!playerData[playerid][pAdmin] && !playerData[playerid][pTester]) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุณาตให้ใช้คำสั่งนี้");
	if(isnull(params)) return SendSyntaxMessage(playerid, "/testerchat [ข้อความ]");

	if(strlen(params) > 80)
	{
		format(str1, sizeof(str1), "*%s[%d] %s: %.80s ...", playerData[playerid][pTester] == 0 ? ("Admin") : ("Tester"), playerData[playerid][pTester] == 0 ? playerData[playerid][pAdmin] : playerData[playerid][pTester], ReturnPlayerName(playerid), params);
		format(str2, sizeof(str2), "*%s[%d] %s: ... %s", playerData[playerid][pTester] == 0 ? ("Admin") : ("Tester"), playerData[playerid][pTester] == 0 ? playerData[playerid][pAdmin] : playerData[playerid][pTester], ReturnPlayerName(playerid), params[80]);
		splitted = true;
	}
	else
	{
		format(str1, sizeof(str1), "*%s[%d] %s: %s", playerData[playerid][pTester] == 0 ? ("Admin") : ("Tester"), playerData[playerid][pTester] == 0 ? playerData[playerid][pAdmin] : playerData[playerid][pTester], ReturnPlayerName(playerid), params);
	}

 	foreach (new i : Player)
	{
		if (playerData[i][pAdmin] || playerData[i][pTester])
		{
			if(splitted)
			{
				SendClientMessage(i, COLOR_YELLOW2, str1);
				SendClientMessage(i, COLOR_YELLOW2, str2);
			}
			else
			{
				SendClientMessage(i, COLOR_YELLOW2, str1);
			}
		}
	}
	return 1;
}
alias:testerchat("tc");


//-------------------------------[BuyLevel]--------------------------------------------------------------------------
CMD:buylevel(playerid, params[])
{
	if(playerData[playerid][pLevel])
	{
		new nxtlevel = playerData[playerid][pLevel]+1;
		new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new expamount = nxtlevel*levelexp;
		new str[128];
		if(playerData[playerid][pCash] < costlevel)
		{
			format(str, 128, "   คุณมีเงินไม่พอ ($%d) !",costlevel);
			SendClientMessage(playerid, COLOR_GRAD1, str);
			return 1;
		}
	 	else	if (playerData[playerid][pExp] < expamount)
		{
			format(str, 128, "   คุณต้องมีค่าอัพเกรด %d Point แต่ในปัจจุบันคุณมีเพียง [%d] !",expamount,playerData[playerid][pExp]);
			SendClientMessage(playerid, COLOR_GRAD1, str);
			return 1;
		}
		else
		{
			format(str, sizeof(str), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic(playerid);
			playerData[playerid][pCash] -= costlevel;
			playerData[playerid][pLevel]++;
			SetPlayerScore(playerid, playerData[playerid][pLevel]);
			if(playerData[playerid][pDonateRank] > 0)
			{
				playerData[playerid][pExp] -= expamount;
				new total = playerData[playerid][pExp];
				if(total > 0)
				{
					playerData[playerid][pExp] = total;
				}
				else
				{
					playerData[playerid][pExp] = 0;
				}
			}
			else
			{
				playerData[playerid][pExp] = 0;
			}
			playerData[playerid][pPUpgrade] = playerData[playerid][pPUpgrade]+2;
			GameTextForPlayer(playerid, str, 5000, 1);
			format(str, 128, "   คุณซื้อเลเวล %d ในราคา ($%d) ใช้ /upgrade", nxtlevel, costlevel);
			SendClientMessage(playerid, COLOR_GRAD1, str);
			format(str, 128, "   คุณมีค่าอัพเกรดอยู่ %d Points (พิมพ์ /upgrade เพื่ออัพเกรด)",playerData[playerid][pPUpgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, str);
		}
	}
	return 1;
}

CMD:upgrade(playerid, params[])
{
	new chooseid[16];
	new infostring[128];

	if (sscanf(params, "s[16]", chooseid)) {
	    SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
		SendSyntaxMessage(playerid, "/upgrade [ชื่ออัพเกรด] (คุณมีค่าอัพเกรดอยู่ %d Points)",playerData[playerid][pPUpgrade]);
		/*if(playerData[playerid][pLevel] == 2) SendClientMessage(playerid, COLOR_GRAD3, "Level 2 Perks: Alcoholic, DrugAddict");
		else if(playerData[playerid][pLevel] == 3) SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Perks: Alcoholic, DrugAddict, Miser");
		else if(playerData[playerid][pLevel] == 3) SendClientMessage(playerid, COLOR_GRAD3, "Level 4 Perks: Alcoholic, DrugAddict, Miser, Trader");
		else if(playerData[playerid][pLevel] >= 5) SendClientMessage(playerid, COLOR_GRAD3, "Level 5 Perks: Alcoholic, DrugAddict, Miser, Trader, PainKillers");*/
		SendClientMessage(playerid, COLOR_GRAD5, "เลือดที่มากขึ้น: health");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if (playerData[playerid][pPUpgrade] > 1)
	{
		if (playerData[playerid][pLevel] >= 1 && (!strcmp(chooseid, "health", true)))
		{
			if (playerData[playerid][pSHealth] < 50)
			{
				playerData[playerid][pSHealth] = playerData[playerid][pSHealth]+5.0;
				format(infostring, 128, "New Upgrade: คุณจะ Spawn ด้วย %.2f Health (+5)",playerData[playerid][pSHealth]+50);
				/*SetPlayerMaxHealth(playerid, 100.0 + playerData[playerid][pSHealth]);
				SetPlayerHealthEx(playerid, playerData[playerid][pHealth] + playerData[playerid][pSHealth]);*/
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Spawn Health มากที่สุดแล้ว");
				return 1;
			}
		}
		/*else if (playerData[playerid][pLevel] >= 2 && (!strcmp(chooseid, "alcoholic", true)))
		{
			if (playerData[playerid][pAlcoholPerk] < 3)
			{
				playerData[playerid][pAlcoholPerk] += 1;
				format(infostring, 128, "New Perk Upgrade: Alcoholic Perk ของคุณเลเวล %d แล้ว",playerData[playerid][pAlcoholPerk]);
				playerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Alcoholic Perk เต็มแล้ว !");
				return 1;
			}
		}
		else if (playerData[playerid][pLevel] >= 2 && (!strcmp(chooseid, "drugaddict", true)))
		{
			if (playerData[playerid][pDrugPerk] < 3)
			{
				playerData[playerid][pDrugPerk] += 1;
				format(infostring, 128, "New Perk Upgrade: Drug Addict Perk ของคุณเลเวล %d แล้ว",playerData[playerid][pDrugPerk]);
				playerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Drug Addict Perk เต็มแล้ว !");
				return 1;
			}
		}
		else if (playerData[playerid][pLevel] >= 3 && (!strcmp(chooseid, "miser", true)))
		{
			if (playerData[playerid][pMiserPerk] < 3)
			{
				playerData[playerid][pMiserPerk] += 1;
				format(infostring, 128, "New Perk Upgrade: Miser Perk  ของคุณเลเวล %d แล้ว",playerData[playerid][pMiserPerk]);
				playerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Miser Perk เต็มแล้ว !");
				return 1;
			}
		}
		else if (playerData[playerid][pLevel] >= 4 && (!strcmp(chooseid, "trader", true)))
		{
			if (playerData[playerid][pTraderPerk] < 3)
			{
				playerData[playerid][pTraderPerk] += 1;
				format(infostring, 128, "New Perk Upgrade: Trader Perk ของคุณเลเวล %d แล้ว",playerData[playerid][pTraderPerk]);
				playerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Trader Perk เต็มแล้ว !");
				return 1;
			}
		}
		else if (playerData[playerid][pLevel] >= 5 && (!strcmp(chooseid, "painkillers", true)))
		{
			if (playerData[playerid][pPainPerk] < 3)
			{
				playerData[playerid][pPainPerk] += 1;
				format(infostring, 128, "New Perk Upgrade: Pain Killers Perk  ของคุณเลเวล %d แล้ว",playerData[playerid][pPainPerk]);
				playerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   คุณมี Pain Killers Perk เต็มแล้ว !");
				return 1;
			}
		}*/
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "   การอัพเกรดที่ไม่รู้จัก");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD6, "   คุณมีค่าอัพเกรด 0 Points");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD6, infostring);
	playerData[playerid][pPUpgrade]--;
	return 1;
}

CMD:resetupgrades(playerid, params[])
{
	if (playerData[playerid][pCash] < 100000) return SendClientMessage(playerid, COLOR_GRAD1, "   ราคาคือ $100000 !");
	if (playerData[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวลอย่างน้อย 2 !");

	playerData[playerid][pPUpgrade] = (playerData[playerid][pLevel]-1)*2;
	playerData[playerid][pSHealth] = 0.0;
	playerData[playerid][pAlcoholPerk] = 0;
	playerData[playerid][pDrugPerk] = 0;
	playerData[playerid][pMiserPerk] = 0;
	playerData[playerid][pPainPerk] = 0;
	playerData[playerid][pTraderPerk] = 0;
	playerData[playerid][pCash] -= 100000;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_GRAD2, "   คุณมีค่าอัพเกรดอยู่ %d Points !",playerData[playerid][pPUpgrade]);

	return 1;
}

CMD:attributes(playerid, params[])
{
	new
		attr[128];

	if (sscanf(params, "s[128]", attr)) {
	    SendSyntaxMessage(playerid, "/attributes [คุณสมบัติของตัวละคร(ส่วนสูง น้ำหนัก สีผม หรือลักษณะภายนอกตัวละครของคุณ)]");
	    if(strlen(playerData[playerid][pAttribute])) {
	    	SendClientMessageEx(playerid, COLOR_GRAD1, "คุณสมบัติของคุณ: %s", playerData[playerid][pAttribute]);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "คุณสมบัติของคุณยังไม่ได้ตั้งค่า");
	    }
		return 1;
	}
    format(playerData[playerid][pAttribute], 128, attr);
    SendClientMessageEx(playerid, COLOR_GRAD1, "คุณสมบัติของคุณ: %s", attr);
	mysql_format(dbCon, szQuery, sizeof(szQuery), "UPDATE `characters` SET `Attribute` = '%e' WHERE `ID` = %d", attr, playerData[playerid][pID]);
	mysql_query(dbCon, szQuery);

	return 1;
}

CMD:examine(playerid, params[])
{
	new
		userid;

	if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/examine [ID]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	/*if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถใช้กับตัวเองได้");*/

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");
		
	new playerAttr[154];
 	format(playerAttr, sizeof(playerAttr), "%s%s%s", ReturnRealName(userid), strlen(playerData[userid][pAttribute]) ? (" | ") : (""), playerData[userid][pAttribute]);
	SetPlayerChatBubble(userid, playerAttr, COLOR_PURPLE, 30.0, 6000);
	return 1;
}

CMD:pay(playerid, params[])
{
	new
	    userid,
	    amount,
		emote[128],
		string[128];

	if (sscanf(params, "udS()[128]", userid, amount, emote))
	    return SendSyntaxMessage(playerid, "/pay [ไอดีผู้เล่น/ชื่อบางส่วน] [จำนวน] [อารมณ์]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{dS()[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถให้เงินตัวเองได้");

	if (amount < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   โปรดระบุจำนวนที่มากกว่า 1 ดอลล่า");

	if (amount > 5 && playerData[playerid][pPlayingHours] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถจ่ายมากกว่า $5 ในขณะที่ชั่วโมงที่เล่นต่ำกว่า 2 ชั่วโมง");

	if (amount > playerData[playerid][pCash])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้มีเงินมากขนาดนั้น");

	playerData[playerid][pCash]-=amount;
	playerData[userid][pCash]+=amount;

	format(string, sizeof(string), "   คุณได้ให้เงิน %d กับ %s", amount, ReturnRealName(userid));
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_GRAD1, string);

	format(string, sizeof(string), "   คุณได้รับเงิน %d จาก %s", amount, ReturnRealName(playerid));
	SendClientMessage(userid, COLOR_GRAD1, string);

	if(!strlen(emote)) {
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s ควักเงินออกมาบางส่วนและใส่ไว้ในมือของ %s", ReturnRealName(playerid), ReturnRealName(userid));
	}
	else
	{
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s %s %s", ReturnRealName(playerid), emote, ReturnRealName(userid));
	}

	Log_Write("logs/pay_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pIP], FormatNumber(amount), ReturnRealName(userid), playerData[userid][pIP]);

	format(string, sizeof(string), "จ่าย %d ให้ %s", amount, ReturnPlayerName(userid));
	SQL_LogPay(playerid, "/pay", string);

	return 1;
}

CMD:givemoney(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 1339)
	    return 0;

	new
	    userid,
	    amount;

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/givemoney [ไอดีผู้เล่น/ชื่อบางส่วน] [จำนวน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	playerData[userid][pCash]+=amount;

	Log_Write("logs/pay_log.txt", "[%s] %s (%s) has give money %s to %s (%s).", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pIP], FormatNumber(amount), ReturnRealName(userid), playerData[userid][pIP]);

	new str[45];
	format(str, sizeof(str), "จ่าย %d ให้ %s", amount, ReturnPlayerName(userid));
	SQL_LogPay(playerid, "/givemoney", str);

	return 1;
}

/*CMD:cover(playerid, params[])
{
	new a, b, c;
    if (!sscanf(params, "hhh", a,b,c)) {

		PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], a);
		PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], b);
	   	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], b);
	   	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], c);

	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][0]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][1]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][2]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][12]);
   	}
	return 1;
}*/

Dialog:BuyGun(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[128], type[24];
		GetPVarString(playerid, "buygun_name", type, sizeof(type));
		format(str, 128, "/buygun %s %d %d confirm", type, GetPVarInt(playerid, "buygun_ammo"), GetPVarInt(playerid, "buygun_add"));
		PC_EmulateCommand(playerid, str);
	}
	DeletePVar(playerid, "buygun_name");
	DeletePVar(playerid, "buygun_ammo");
	DeletePVar(playerid, "buygun_add");
	return 1;
}

Dialog:BuyWeapon(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[128], type[24];
		GetPVarString(playerid, "buygun_name", type, sizeof(type));
		format(str, 128, "/buyweapon %s %d confirm", type, GetPVarInt(playerid, "buygun_ammo"));
		PC_EmulateCommand(playerid, str);
	}
	DeletePVar(playerid, "buygun_name");
	DeletePVar(playerid, "buygun_ammo");
	return 1;
}


CMD:buyweapon(playerid, params[])
{
    if(playerData[playerid][pJob] != JOB_SUPPLIER) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Weapon Supplier");
	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) == FACTION_TYPE_GANG) {

		new id;
		if((id = Warehouse_Nearest(playerid)) != -1 && WareHouseInfo[id][whType] == 1)
	    {
	        new warehousetemp1[MAX_PLAYER_NAME+1];
	        new warehousetemp2[MAX_PLAYER_NAME+1];
	        
	        strunpack(warehousetemp1, WareHouseInfo[id][whPlayer1]);
	        strunpack(warehousetemp2, WareHouseInfo[id][whPlayer2]);
	        
            if((strlen(warehousetemp1) && !strcmp(ReturnPlayerName(playerid), warehousetemp1, true)) || (strlen(warehousetemp2) && !strcmp(ReturnPlayerName(playerid), warehousetemp2, true))) {

				if(WareHouseInfo[id][whStock] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				new type[24], ammo, price, confirm[16];
				if(sscanf(params,"s[24]D(0)S()[16]", type, ammo, confirm)) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE"/buyweapon [อาวุธ] [กระสุน]");
					SendClientMessage(playerid, -1, "[ knife: $800; ammo: $800 ] [ katana: $1500; ammo: $1500 ]");
					SendClientMessage(playerid, -1, "[ colt: $12500; ammo: $25 ] [ deagle: $17500; ammo: $38 ] [ s-pistol: $22500; ammo: $25 ] [ shotgun: $17500; ammo: $38 ]");
					SendClientMessage(playerid, -1, "[ tec9: $25000; ammo: $20 ] [ uzi: $27500; ammo: $20 ]  [ mp5: $30000; ammo: $20 ]");
					SendClientMessage(playerid, -1, "[ ak47: $45000; ammo: $43 ] [ m4: $50000; ammo: $46 ] [ armour: $2000; ammo: $2000 ]");
					return 1;
				}

				if(!strcmp(type, "colt", true) && ammo > 0)
				{
				    new gunid = 22;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 12500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "deagle", true) && ammo > 0)
				{
				    new gunid = 24;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);
									
						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "shotgun", true) && ammo > 0)
				{
				    new gunid = 25;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "s-pistol", true) && ammo > 0)
				{
				    new gunid = 23;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 22500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "tec9", true) && ammo > 0)
				{
				    new gunid = 32;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 25000 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "uzi", true) && ammo > 0)
				{
				    new gunid = 28;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 27500 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "mp5", true) && ammo > 0)
				{
				    new gunid = 29;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 30000 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "ak47", true) && ammo > 0)
				{
				    new gunid = 30;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 45000 + (ammo * 43);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "m4", true) && ammo > 0)
				{
				    new gunid = 31;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 50000 + (ammo * 46);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(playerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									playerData[playerid][pPackageWP][x] = gunid;
									playerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            playerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "katana", true))
				{
	                new gunid = 8;
					price = 1500, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(playerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(playerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								playerData[playerid][pPackageWP][x] = gunid;
								playerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และจ่าย $%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            playerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;
                                Warehouse_Refresh(id);
								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s ในราคา %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
					}
					return 1;
				}
				else if(!strcmp(type, "knife", true))
				{
	                new gunid = 4;
					price = 800, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(playerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(playerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								playerData[playerid][pPackageWP][x] = gunid;
								playerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และจ่าย $%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            playerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;
                                Warehouse_Refresh(id);
								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s ในราคา %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
					}
					return 1;
				}
				else if(!strcmp(type, "armour", true))
				{
	                new gunid = 47;
					price = 2000, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(playerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(playerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								playerData[playerid][pPackageWP][x] = gunid;
								playerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณซื้อ %s และจ่าย $%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            playerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;

					            Warehouse_Refresh(id);

								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่เหลือช่องว่างสำหรับอาวุธ");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s ในราคา %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
					}
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /buyweapon [อาวุธ] [กระสุน]");
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้ใช้คำสั่งนี้");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ Weapon Warehouse");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่สมาชิกแก๊งค์หรือองค์กร");

	return 1;
}

CMD:buygun(playerid, params[])
{

	new id;

	if((id = BizEntered[playerid]) != -1)
    {
 	    if(BizInfo[id][bType] == 2) // Ammunations
	    {
	        if(!playerData[playerid][pWepLic]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีใบอนุณาตอาวุธ");

			if(BizInfo[id][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}

			new type[24], ammo, add, price, confirm[16];
			if(sscanf(params,"s[24]D(0)D(0)S()[16]", type, ammo, add, confirm)) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE"/buygun [อาวุธ] [กระสุน]");
				SendClientMessage(playerid, -1, "[ colt: $12500; ammo: $25 ] [ deagle: $17500; ammo: $38 ] [ shotgun: $17500; ammo: $38 ]");
				SendClientMessage(playerid, -1, "[ rifle: $25000; ammo: $100 ] [ parachute: $1250; ammo: $1250 ] [ armour: $2000; ammo: $2000 ]");
				SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"คุณสามารถซื้อซองหนังใส่ปืนพกได้ที่ร้าน Hardware ใน The Mall");
				return 1;
			}

			if(!strcmp(type, "colt", true) && ammo > 0)
			{
			    new gunid = 22;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 12500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
				            }
				            playerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

						    BizInfo[id][bTill] += floatround(price*0.7);
						    BizInfo[id][bProducts]--;

						    Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);

						    Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && playerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 25;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(playerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
									return 1;
					            }
					            playerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, playerData[playerid][pSLicense]);

							    BizInfo[id][bTill] += floatround(price*0.7);
							    BizInfo[id][bProducts]--;
							    Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อกระสุน %d นัด สำหรับ %s และจ่าย $%d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อกระสุน %d นัด สำหรับ %s ในราคา %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธสำหรับซื้อกระสุนเพิ่ม");
				}
				return 1;
			}
			else if(!strcmp(type, "deagle", true) && ammo > 0)
			{
			    new gunid = 24;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
				            }
				            playerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

						    BizInfo[id][bTill] += floatround(price*0.7);
						    BizInfo[id][bProducts]--;
						    Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);

						    Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && playerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 38;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(playerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
									return 1;
					            }
					            playerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, playerData[playerid][pSLicense]);

								BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                                Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อกระสุน %d นัด สำหรับ %s และจ่าย $%d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อกระสุน %d นัด สำหรับ %s ในราคา %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธสำหรับซื้อกระสุนเพิ่ม");
				}
				return 1;
			}
			else if(!strcmp(type, "shotgun", true) && ammo > 0)
			{
			    new gunid = 25;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
				            }
				            playerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

                            BizInfo[id][bTill] += floatround(price*0.7);
                            BizInfo[id][bProducts]--;

                            Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);


							Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && playerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 38;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(playerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
									return 1;
					            }
					            playerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, playerData[playerid][pSLicense]);

                                BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                              	Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อกระสุน %d นัด สำหรับ %s และจ่าย $%d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อกระสุน %d นัด สำหรับ %s ในราคา %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธสำหรับซื้อกระสุนเพิ่ม");
				}
				return 1;
			}
			else if(!strcmp(type, "rifle", true) && ammo > 0)
			{
			    new gunid = 33;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 25000 + (ammo * 100);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(playerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
								return 1;
				            }
				            playerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

                            BizInfo[id][bTill] += floatround(price*0.7);
                            BizInfo[id][bProducts]--;

                            Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);


							Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และกระสุน %d นัด และจ่าย $%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s พร้อมกระสุน %d นัดในราคา %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && playerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 100;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(playerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
									return 1;
					            }
					            playerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, playerData[playerid][pSLicense]);

                                BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                              	Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อกระสุน %d นัด สำหรับ %s และจ่าย $%d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "(( คำเตือน: การขาย/ให้/เก็บสำรองอาวุธจะทำให้ถูกแบน โปรดอ่านกฏเกี่ยวกับใบอนุณาต ))");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อกระสุน %d นัด สำหรับ %s ในราคา %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธสำหรับซื้อกระสุนเพิ่ม");
				}
				return 1;
			}
			else if(!strcmp(type, "parachute", true))
			{
                new gunid = 46;
				price = 1250, ammo = 1;

				if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					if(playerData[playerid][pCash] < price) {
						GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
						return 1;
					}
					playerData[playerid][pCash] -= price;
					GivePlayerValidWeapon(playerid, gunid, ammo);

					BizInfo[id][bTill] += floatround(price*0.7);
					BizInfo[id][bProducts]--;

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, GetWeaponPackageName(gunid), id, BizInfo[id][bID]);

					SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และจ่าย $%d", GetWeaponPackageName(gunid), price);
				}
				else {
					SetPVarString(playerid,"buygun_name", type);
					SetPVarInt(playerid, "buygun_ammo", ammo);
					SetPVarInt(playerid, "buygun_add", add);

					format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s ในราคา %s", GetWeaponPackageName(gunid), FormatNumber(price));
					Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
				}
				return 1;
			}
			else if(!strcmp(type, "armour", true))
			{
                new gunid = 47;
				price = 2000, ammo = 1;
				if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					if(playerData[playerid][pCash] < price) {
						GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);
						return 1;
					}
					playerData[playerid][pCash] -= price;
					SetPlayerArmour(playerid, 50.0);
					//GivePlayerValidWeapon(playerid, gunid, ammo);

					BizInfo[id][bTill] += floatround(price*0.7);
					BizInfo[id][bProducts]--;

					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s from biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, GetWeaponPackageName(gunid), id, BizInfo[id][bID]);

					SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณซื้อ %s และจ่าย $%d", GetWeaponPackageName(gunid), price);
				}
				else {
					SetPVarString(playerid,"buygun_name", type);
					SetPVarInt(playerid, "buygun_ammo", ammo);
					SetPVarInt(playerid, "buygun_add", add);

					format(szString, sizeof(szString), "คุณแน่ใจหรือที่จะซื้อ %s ในราคา %s", GetWeaponPackageName(gunid), FormatNumber(price));
					Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmation", szString, "Yes", "No");
				}
				return 1;
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /buygun [อาวุธ] [กระสุน] [เพิ่ม(0/1)]");
			}
	        return 1;
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ใน GunShop");
		}
	}
	return 1;
}

CMD:buy(playerid, params[])
{

	new id = BizEntered[playerid];

	new
	    itemid;

    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1112.4480,-1527.4012,15.7981)) cl_buying[playerid]=BUYSPORTS;
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.2791,-1439.8060,15.7981)) cl_buying[playerid]=BUYZIP;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1089.4680,-1527.4622,22.7393)) cl_buying[playerid]=BUYHARDWARE;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1144.9119,-1527.0886,15.7963)) cl_buying[playerid]=BUYWATCH;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1091.9843,-1506.8433,15.7981)) cl_buying[playerid]=BUYMUSIC;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1530.8496,-1670.5629,6.2188)) cl_buying[playerid]=BUYPOLICE;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 544.0657,219.0260,1019.9844)) cl_buying[playerid]=BUYMEDIC;
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1162.8340, -1470.7634, 15.7943))
    {
 		if(playerData[playerid][pCash] < 1000)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: {FFFFFF}คุณต้องมีเงินมากกว่า $1,000"); 

		SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อป้ายโฆษณาจำนวน 1 {FFFFFF}(/carsign)");
		playerData[playerid][pCash] -= 1000;
		playerData[playerid][pAdverts] += 1;

		return 1;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1086.8405,-1449.5437,22.7434))
    {
        SendClientMessage(playerid, COLOR_LIGHTRED, "ข้อแนะ: กด ESC เพื่อออกจากร้านโทรศัพท์");
        PCoverColor[playerid]=0;

	    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
			TextDrawShowForPlayer(playerid, TD_PhoneCover[i]);

	    PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	    PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);

	    SelectTextDraw(playerid, 0x00000080);
	    PCoverOpening{ playerid } = true;
        return 1;
    }
    else if(id != -1)
    {
 	    if(BizInfo[id][bType] == 3) // 24-7
	    {
			if(BizInfo[id][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
				return 1;
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}

	        Business_PurchaseMenu(playerid, id);
	        return 1;
		}
    }
    else return SendClientMessage(playerid, COLOR_GRAD1, "  คุณไม่ได้อยู่ในร้านค้าใด ๆ");

	if (sscanf(params, "d", itemid))
 	{
		new str[4096];
		switch(cl_buying[playerid])
		{
		    case BUYSPORTS:
		    {
				for(new i=0;i!=sizeof(cl_SportsData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_SportsData[i][e_name], cl_SportsData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYHARDWARE:
		    {
				for(new i=0;i!=sizeof(cl_HardwareData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_HardwareData[i][e_name], cl_HardwareData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYMUSIC:
		    {
				for(new i=0;i!=sizeof(cl_MusicalData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_MusicalData[i][e_name], cl_MusicalData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYWATCH:
		    {
				for(new i=0;i!=sizeof(cl_DsShopData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_DsShopData[i][e_name], cl_DsShopData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYPOLICE:
		    {
				for(new i=0;i!=sizeof(cl_PoliceData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_PoliceData[i][e_name], cl_PoliceData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYMEDIC:
		    {
				for(new i=0;i!=sizeof(cl_MedicData);++i) format(str, 3600, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_MedicData[i][e_name], cl_MedicData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		    case BUYZIP:
		    {
				// 3597

				for(new i=0;i!=sizeof(cl_ZipData);++i)
				{
				    if(i == 91)
				    {
				        format(str, 4096, "%s"EMBED_YELLOW"หน้าถัดไป!"EMBED_WHITE"", str);
						break;
				    }
				    format(str, 4096, "%s %d.%s\t{48E348}$%d"EMBED_WHITE"\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
				}
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancel");
		    }
		}
		return 1;
	}

	if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1) {
		switch(PurchaseClothing(playerid, itemid)) {
			case -2: {
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อได้มากกว่านี้แล้ว");
			}
			case -1: {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัยคุณมีเงินไม่พอที่จะซื้อ !!");
			}
			case 0: {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถซื้อไอเท็มเครื่องแต่งกายไอดีนี้ได้");
			}
		}
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถซื้อได้มากกว่านี้แล้ว");
	}

	return 1;
}

CMD:clothing(playerid,params[])
{
	new
	    name[16],
	    userid,
	    clothingid;

	if (sscanf(params, "s[16]D(-1)U(65535)", name, clothingid, userid))
 	{
		SendSyntaxMessage(playerid, "/clothing place | adjust | drop | give");
		cl_ShowClothingMenu(playerid);
		return 1;
	}
	if(!HasCooldown(playerid,COOLDOWN_CLOTHES))
	{
        clothingid = clothingid-1;

		if (!strcmp(name, "place", true) || !strcmp(name, "p", true))
		{
		    if (clothingid < 0)
			{
				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID) {
				        SendClientMessageEx(playerid, COLOR_GRAD1, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }
				SendSyntaxMessage(playerid, "/clothing place [ไอดีเครื่องแต่งกาย]");
			    return 1;
			}

			if(clothingid < MAX_CLOTHES && ClothingData[playerid][clothingid][cl_object] != INVALID_OBJECT_ID) {
			if(ClothingData[playerid][clothingid][cl_equip]) {

				RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
				ClothingData[playerid][clothingid][cl_equip] = 0;
			}
			else
			{
	   			SetPlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot], ClothingData[playerid][clothingid][cl_object], ClothingData[playerid][clothingid][cl_bone], ClothingData[playerid][clothingid][cl_x], ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z], ClothingData[playerid][clothingid][cl_rx], ClothingData[playerid][clothingid][cl_ry], ClothingData[playerid][clothingid][cl_rz], ClothingData[playerid][clothingid][cl_scalex], ClothingData[playerid][clothingid][cl_scaley], 
				ClothingData[playerid][clothingid][cl_scalez], ClothingData[playerid][clothingid][cl_mc1], ClothingData[playerid][clothingid][cl_mc2]);
				SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้สวมใส่ "EMBED_YELLOW"%s", ClothingData[playerid][clothingid][cl_name]);

				for (new i = 0; i < MAX_CLOTHES; i ++)
				{
					if(ClothingData[playerid][i][cl_object] != INVALID_OBJECT_ID && ClothingData[playerid][i][cl_equip] && ClothingData[playerid][i][cl_slot] == ClothingData[playerid][clothingid][cl_slot])
					{
						ClothingData[playerid][i][cl_equip] = 0;
					}
				}
				ClothingData[playerid][clothingid][cl_equip] = 1;
			}
			}
            else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else if (!strcmp(name, "drop", true) || !strcmp(name, "d", true))
		{
      		if (clothingid < 0)
			{
				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID) {
				        SendClientMessageEx(playerid, COLOR_GRAD1, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }
				SendSyntaxMessage(playerid, "/clothing drop [ไอดีเครื่องแต่งกาย]");
			    return 1;
			}

			if(clothingid < MAX_CLOTHES && ClothingData[playerid][clothingid][cl_object] != INVALID_OBJECT_ID) {

				if(IsPlayerAttachedObjectSlotUsed(playerid, ClothingData[playerid][clothingid][cl_slot])) RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
                ClothingData[playerid][clothingid][cl_object] = INVALID_OBJECT_ID;

				new
		    		query[128];

				format(query,sizeof(query),"DELETE FROM `clothing` WHERE owner = '%d' and id = '%d'",playerData[playerid][pID], ClothingData[playerid][clothingid][cl_sid]);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ทิ้ง %s#%d", ClothingData[playerid][clothingid][cl_name], clothingid + 1);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");

		}
		else if (!strcmp(name, "adjust", true) || !strcmp(name, "a", true))
		{
      		if (clothingid < 0)
			{
				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID) {
				        SendClientMessageEx(playerid, COLOR_GRAD1, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }
				SendSyntaxMessage(playerid, "/clothing adjust [ไอดีเครื่องแต่งกาย]");
			    return 1;
			}

            if(clothingid < MAX_CLOTHES && ClothingData[playerid][clothingid][cl_object] != INVALID_OBJECT_ID) {
                cl_selected[playerid] = clothingid;
			    SetPlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot], ClothingData[playerid][clothingid][cl_object], ClothingData[playerid][clothingid][cl_bone], ClothingData[playerid][clothingid][cl_x], ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z], ClothingData[playerid][clothingid][cl_rx], ClothingData[playerid][clothingid][cl_ry], ClothingData[playerid][clothingid][cl_rz], ClothingData[playerid][clothingid][cl_scalex], ClothingData[playerid][clothingid][cl_scaley], ClothingData[playerid][clothingid][cl_scalez], ClothingData[playerid][clothingid][cl_mc1], ClothingData[playerid][clothingid][cl_mc2]);

				ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 1,1, 1, 0, 1);
				EditAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
				bf_on(player_bf[playerid], IS_PLAYER_EDITCLOTHING);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else if (!strcmp(name, "give", true) || !strcmp(name, "g", true))
		{
      		if (clothingid < 0)
			{
				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID) {
				        SendClientMessageEx(playerid, COLOR_GRAD1, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

				SendSyntaxMessage(playerid, "/clothing give [ไอดีเครื่องแต่งกาย] [ไอดีผู้เล่น/ชื่อบางส่วน]");
			    return 1;
			}


			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "{s[16]D(-1)}s[24]", name);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendSyntaxMessage(playerid, "/clothing give [ไอดีเครื่องแต่งกาย] [ไอดีผู้เล่น/ชื่อบางส่วน]");
				}
			}

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
                return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			if(clothingid < MAX_CLOTHES && ClothingData[playerid][clothingid][cl_object] != INVALID_OBJECT_ID) {
			
				/*for(new i=0;i!=sizeof(cl_PoliceData);++i) {
					if(cl_PoliceData[i][e_model] == ClothingData[playerid][clothingid][cl_object]) {
						return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่สามารถให้ออบเจ็คนี้กับผู้เล่นอื่นได้");
					}
				}
				for(new i=0;i!=sizeof(cl_MedicData);++i) {
					if(cl_MedicData[i][e_model] == ClothingData[playerid][clothingid][cl_object]) {
						return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่สามารถให้ออบเจ็คนี้กับผู้เล่นอื่นได้");
					}
				}*/
				new clotingName[32];
				format(clotingName, 32, GetClotingItemName(ClothingData[playerid][clothingid][cl_object]));

				if(AddPlayerClothing(
				userid,
				ClothingData[playerid][clothingid][cl_object],
				ClothingData[playerid][clothingid][cl_x],
				ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z],
				ClothingData[playerid][clothingid][cl_rx],
				ClothingData[playerid][clothingid][cl_ry],
				ClothingData[playerid][clothingid][cl_rz],
				ClothingData[playerid][clothingid][cl_bone],
				ClothingData[playerid][clothingid][cl_slot],
				ClothingData[playerid][clothingid][cl_scalex],
				ClothingData[playerid][clothingid][cl_scaley],
				ClothingData[playerid][clothingid][cl_scalez],
				ClothingData[playerid][clothingid][cl_mc1],
				ClothingData[playerid][clothingid][cl_mc2],
				clotingName,
				ClothingData[playerid][clothingid][cl_sid]) != -1)
				{
				    new query[150];
					mysql_format(dbCon, query,sizeof(query),"UPDATE clothing SET owner = %d, name = '%e', equip = 0 WHERE owner = '%d' and id = '%d'", playerData[userid][pID], clotingName, playerData[playerid][pID], ClothingData[playerid][clothingid][cl_sid]);
					mysql_query(dbCon, query);

					if(IsPlayerAttachedObjectSlotUsed(playerid, ClothingData[playerid][clothingid][cl_slot])) RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);

					SendClientMessageEx(userid, COLOR_GRAD1, "   คุณได้รับ %s#%d จาก %s", clotingName, clothingid + 1, ReturnRealName(playerid));
					SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ให้ %s#%d กับ %s", ClothingData[playerid][clothingid][cl_name], clothingid + 1, ReturnRealName(userid));

                    ClothingData[playerid][clothingid][cl_object] = INVALID_OBJECT_ID;
					SetCooldown(playerid,COOLDOWN_CLOTHES,5);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถให้สิ่งของได้");


                SetCooldown(playerid,COOLDOWN_CLOTHES,5);
            }
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");

		}
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กรุณารอ %d วินาทีก่อนที่จะพยายามใช้คำสั่ง /clothing อีกครั้ง",GetCooldownLevel(playerid,COOLDOWN_CLOTHES));

	return 1;
}

CountPlayerClothing(playerid)
{
	new count;
	for (new id = 0; id < MAX_CLOTHES; id ++) if(ClothingData[playerid][id][cl_object] != INVALID_OBJECT_ID) count++;
	return count;
}

AddPlayerClothing(playerid,modelid,Float:fOffsetX,Float:fOffsetY,Float:fOffsetZ,Float:fRotX,Float:fRotY,Float:fRotZ,boneid,index,Float:fScaleX,Float:fScaleY,Float:fScaleZ, fmc1, fmc2, const cName[], sid = -1)
{
	new num = CountPlayerClothing(playerid), bool:success, clothingid;
	switch(playerData[playerid][pDonateRank])
	{
		case 0: if(num >= 6) return -1;
		case 1: if(num >= 8) return -1;
		case 2: if(num >= 10) return -1;
		case 3: if(num >= 15) return -1;
	}

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(ClothingData[playerid][id][cl_object] == INVALID_OBJECT_ID)
	    {
			ClothingData[playerid][id][cl_sid] = sid;
			ClothingData[playerid][id][cl_object] = modelid;
			ClothingData[playerid][id][cl_x] = fOffsetX;
			ClothingData[playerid][id][cl_y] = fOffsetY;
			ClothingData[playerid][id][cl_z] = fOffsetZ;
			ClothingData[playerid][id][cl_rx] = fRotX;
			ClothingData[playerid][id][cl_ry] = fRotY;
			ClothingData[playerid][id][cl_rz] = fRotZ;
			ClothingData[playerid][id][cl_scalex] = fScaleX;
			ClothingData[playerid][id][cl_scaley] = fScaleY;
			ClothingData[playerid][id][cl_scalez] = fScaleZ;
			ClothingData[playerid][id][cl_mc1] = fmc1;
			ClothingData[playerid][id][cl_mc2] = fmc2;
	    	ClothingData[playerid][id][cl_bone] = boneid;
			ClothingData[playerid][id][cl_slot] = index;
			ClothingData[playerid][id][cl_equip] = 0;
			format(ClothingData[playerid][id][cl_name], 32, cName);
			clothingid = id;
	        success = true;
	        break;
	    }
	}
	if(success)
	{
	    return clothingid;
	}
	return -1;
}

//---------------- Clothes
/*CMD:clothing(playerid,params[])
{
	new
	    name[16],
	    userid,
	    clothingid,
		slot;

	if (sscanf(params, "s[16]D(-1)U(65535)", name, clothingid, userid))
 	{
		cl_ShowClothingMenu(playerid);

		return 1;
	}
	if(!HasCooldown(playerid,COOLDOWN_CLOTHES))
	{
		new
		    query[128],
		    rows
		;

        clothingid = clothingid-1;

		if (!strcmp(name, "help", true))
		{
			SendSyntaxMessage(playerid, "/clothing [names] [ID]");
	 		SendClientMessage(playerid, COLOR_GREY, "names: place, drop, adjust, give");
		}
		else if (!strcmp(name, "place", true) || !strcmp(name, "p", true))
		{
		    if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/clothing place [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", playerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

			    return 1;
			}


			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", playerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);


		 	if(cache_num_rows())
 			{
				cache_get_value_name_int(0, "slot", slot);


				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and equip = '1' and slot = '%d'", playerData[playerid][pID], slot);
			 	mysql_query(dbCon, query);


			 	if(cache_num_rows())
	 			{
					format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and id = '%d'",playerData[playerid][pID], cache_get_value_name_int(0, "id"));
					mysql_query(dbCon, query);

					if(IsPlayerAttachedObjectSlotUsed(playerid, slot)) {
					    RemovePlayerAttachedObject(playerid, slot);
					}
 			    }

				if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
				{
					RemovePlayerAttachedObject(playerid, slot);

					format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and id = '%d'",playerData[playerid][pID], clothingid);
					mysql_query(dbCon, query);
				}
				else
				{
					format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", playerData[playerid][pID], clothingid);
					mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_EQUIPCLOTHES);
				}
				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else if (!strcmp(name, "drop", true) || !strcmp(name, "d", true))
		{
		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing drop [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", playerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}
			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", playerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				if(IsPlayerAttachedObjectSlotUsed(playerid, clothingid))
				{
					RemovePlayerAttachedObject(playerid, clothingid);
				}

                cache_get_value_name(0, "name", name);

				format(query,sizeof(query),"DELETE FROM `clothing` WHERE owner = '%d' and slot = '%d'",playerData[playerid][pID], clothingid);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ทิ้ง %s(%d)", name, clothingid + 1);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else if (!strcmp(name, "adjust", true) || !strcmp(name, "a", true))
		{
		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing adjust [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", playerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}

			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", playerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", playerData[playerid][pID], clothingid);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_ADJUSTCLOTHES);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else if (!strcmp(name, "give", true) || !strcmp(name, "g", true))
		{

		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing give [ID] [ไอดีผู้เล่น/ชื่อบางส่วน]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", playerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}

		    if (userid == INVALID_PLAYER_ID && GetPlayerMaskID(userid) == INVALID_PLAYER_ID)
		        return SendSyntaxMessage(playerid, "/clothing give [ID] [ไอดีผู้เล่น/ชื่อบางส่วน]");

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
                return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", playerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				if(IsPlayerAttachedObjectSlotUsed(playerid, clothingid))
				{
					RemovePlayerAttachedObject(playerid, clothingid);
				}
				cache_get_value_name(0, "name", name);

				format(query,sizeof(query),"UPDATE clothing SET owner = %d, equip = 0 WHERE owner = '%d' and slot = '%d'",playerData[userid][pID], playerData[playerid][pID], clothingid);
				mysql_query(dbCon, query);

				SendClientMessageEx(userid, COLOR_GRAD1, "   คุณได้รับ %s(%d) จาก %s", name, clothingid + 1, ReturnRealName(playerid));
				SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ให้ %s(%d) กับ %s", name, clothingid + 1, ReturnRealName(userid));

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
		}
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กรุณารอ %d วินาทีก่อนที่จะพยายามใช้คำสั่ง /clothing อีกครั้ง",GetCooldownLevel(playerid,COOLDOWN_CLOTHES));

	return 1;
}*/
//

CMD:acceptdeath(playerid, params[])
{
    if(!isInjuredmode{playerid} || isDeathmode{playerid})
 		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้บาดเจ็บ");

	if(deathtime[playerid] > 120)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องรอเวลาประมาณ 2 นาทีเพื่อที่จะยอมรับความตาย");
			
    SetPlayerChatBubble(playerid, "(( ผู้เล่นนี้ตายแล้ว ))", 0xFF6347FF, 20.0, 1000);
    SendClientMessage(playerid, COLOR_YELLOW, "-> คุณตายแล้วในขณะนี้ คุณจำเป็นต้องรอ 60 วินาทีและหลังจากนั้นคุณถึงจะสามารถ /respawnme");

    if (!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
    
	isDeathmode{playerid} = true;
	deathtime[playerid] = 60;

	return 1;
}

CMD:damages(playerid, params[])
{
	new targetid, str[2000], bool:count;

	if (sscanf(params, "u", targetid))
		return SendSyntaxMessage(playerid, "/damages [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, targetid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	for(new i = 0; i != MAX_DAMAGES; ++i) {
		if(DamageData[targetid][i][dExists])
		{
		    new diff = gettime()-DamageData[targetid][i][dSec];
		    new mins, hours;
			//format(str, sizeof(str), "%s%d dmg from %s to %s (Kevlarhit: %d) %s ago\n", str, DamageData[targetid][i][dDamage], ReturnWeaponNameEx(DamageData[targetid][i][dWeaponid]), GetBodyPartName(DamageData[targetid][i][dShotType]), DamageData[targetid][i][dArmour], ConvertTime(diff, mins, hours));

            format(str, sizeof(str), "%s%d ความเสียหายจาก %s โดนตรง%s (%s) %sที่แล้ว\n", str, DamageData[targetid][i][dDamage], ReturnWeaponNameEx(DamageData[targetid][i][dWeaponid]), GetBodyPartName(DamageData[targetid][i][dShotType]), DamageData[targetid][i][dArmour] ? ("โดนเกราะ") : ("ไม่โดนเกราะ"), ConvertTimeTH(diff, mins, hours));
            //23 ความเสียหายจาก Desert Eagle โดนตรงแขน (ไม่โดนเกราะ) 2 วินาทีที่แล้ว
			count = true;
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, ReturnPlayerName(targetid), (count) ? (str) : ("ยังไม่มีความเสียหายให้แสดง ..."), "Close", "");
}

CMD:respawnme(playerid, params[])
{
	if(isDeathmode{playerid} && deathtime[playerid] <= 0)
	{
	    ResetPlayer(playerid);
		ResetDamages(playerid);
		isDeathmode{playerid} = false;
		deathtime[playerid] = 0;
		MedicBill[playerid] = 1;
		isInjuredmode{playerid}=false;
		playerData[playerid][pHealth]=25;
		bf_off(player_bf[playerid], IS_PLAYER_SPAWNED);
		SpawnPlayer(playerid);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "กรุณารอ 60 วินาที");

	return 1;
}
//***** ADMIN

CMD:createfaction(playerid, params[])
{
	new
	    id = -1,
		type,
		name[32];

    if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/createfaction [type] [name]");
	    SendClientMessage(playerid, COLOR_GREY, "Available types: 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: SA Sheriff's Department | 7: SA Department of Corrections");
		return 1;
	}
	if (type < 1 || type > 7)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ประเภทที่ระบุอยู่ในระหว่าง 1 ถึง 7");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "เซิร์ฟเวอร์นี้ได้สร้างฝ่ายหรือกลุ่มเกินขีดจำกัดแล้ว");

	SendClientMessageEx(playerid, COLOR_GRAD1, "คุณประสบความสำเร็จในการสร้างฝ่ายหรือกลุ่มไอดี: %d", id);
	return 1;
}

CMD:destroyfaction(playerid, params[])
{
	new
	    id = 0;

    if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyfaction [faction id]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณระบุไอดีฝ่ายหรือกลุ่มไม่ถูกต้อง");

	Faction_Delete(id);
	SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณประสบความสำเร็จในการทำลายฝ่ายหรือกลุ่มไอดี: %d", id);
	return 1;
}

CMD:editfaction(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editfaction [id] [type]");
	    SendClientMessage(playerid, COLOR_GRAD1, "[type]: name, color, type, ranks, maxranks");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณระบุไอดีฝ่ายหรือกลุ่มไม่ถูกต้อง");

    if (!strcmp(type, "name", true))
	{
	    new name[32], clean_name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [name] [new name]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับชื่อของฝ่ายหรือกลุ่มไอดี: %d เป็น \"%s\"", ReturnPlayerName(playerid), id, clean_name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [maxranks] [maximum ranks]");

		if (ranks < 1 || ranks > 20)
		    return SendClientMessage(playerid, COLOR_GRAD1, "   ยศที่ระบุไม่ควรต่ำกว่า 1 หรือมากกว่า 20");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับยศสูงสุดของฝ่ายหรือกลุ่มไอดี: %d เป็น %d", ReturnPlayerName(playerid), id, ranks);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "color", true))
	{
	    new color;

	    if (sscanf(string, "x", color))
	        return SendSyntaxMessage(playerid, "/editfaction [id] [color] [hex color]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปร{%06x}ั"EMBED_YELLOW"บ สี ของฝ่ายหรือกลุ่มไอดี: %d", ReturnPlayerName(playerid), color >>> 8, id);
	}
	else if (!strcmp(type, "type", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editfaction [id] [type] [faction type]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:"EMBED_WHITE" 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: SASD | 7: SADOC");
            return 1;
		}
		if (typeint < 1 || typeint > 7)
		    return SendClientMessage(playerid, COLOR_GRAD1, "   ประเภทที่ระบุไม่ถูกต้อง อยู่ระหว่าง 1 ถึง 7");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับประเภทของฝ่ายหรือกลุ่มไอดี: %d เป็น %s", ReturnPlayerName(playerid), id, GetFactionTypeName(typeint));
	}
	return 1;
}

CMD:viewfactions(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	ViewFactions(playerid);
	return 1;
}

CMD:factions(playerid, params[])
{
	new factionid = playerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	SendClientMessageEx(playerid, COLOR_GRAD1, "Member of %s online:", FactionData[factionid][factionName]);

	foreach (new i : Player) if (playerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "(ID: %03d) {%s} %s %s", i, (playerData[i][pOnDuty]) ? (GetFactionColor(factionid)) : ("BFC0C2"), Faction_GetRank(i), ReturnRealName(i));
	}
	return 1;
}


CMD:nofam(playerid, params[])
{
    new factionid = playerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

    if(playerData[playerid][pFactionRank] > 4)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(!FactionData[factionid][factionChat])
	{
		FactionData[factionid][factionChat] = 1;
 		SendFactionIDMessage(factionid, COLOR_FACTION, "(( (%d) %s ได้ปิดกั้นระบบแชทกลุ่ม ))", playerData[playerid][pFactionRank], ReturnRealName(playerid));
	}
	else
	{
		FactionData[factionid][factionChat] = 0;
		SendFactionIDMessage(factionid, COLOR_FACTION, "(( (%d) %s ได้เปิดใช้งานระบบแชทกลุ่ม ))", playerData[playerid][pFactionRank], ReturnRealName(playerid));
	}
	return 1;
}


CMD:government(playerid, params[])
{
    new factionid = playerData[playerid][pFaction];

 	if (factionid == -1 || GetFactionType(playerid) == FACTION_TYPE_GANG)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

    if(playerData[playerid][pFactionRank] > 2)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(gov)ernment [message]");

	new string[128];

	format(string, sizeof(string), "{%s}------ ข่าวสารจาก (%s) ------", GetFactionColor(factionid), FactionData[factionid][factionName]);
	SendClientMessageToAll(COLOR_WHITE, string);

	format(string, sizeof(string), "*[HQ] %s: %s", ReturnRealName(playerid), params);
	SendClientMessageToAll(COLOR_WHITE, string);

	format(string, sizeof(string), "{%s}------ ข่าวสารจาก (%s) ------", GetFactionColor(factionid), FactionData[factionid][factionName]);
	SendClientMessageToAll(COLOR_WHITE, string);

	//SQL_LogChat(playerid, "/gov", params);
	return 1;
}
alias:government("gov");


CMD:announce(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/announce [message]");

    new string[128];

	if (strlen(params) > 80) {
	    format(string, sizeof(string), "[ANNOUNCE] %s: %.80s", ReturnPlayerName(playerid), params);
	    SendClientMessageToAll(0xFF436FFF, string);
	    format(string, sizeof(string), "... %s", params[80]);
	    SendClientMessageToAll(0xFF436FFF, string);
	}
	else {
	    format(string, sizeof(string), "[ANNOUNCE] %s: %s", ReturnPlayerName(playerid), params);
	    SendClientMessageToAll(0xFF436FFF, string);
	}
    //SQL_LogChat(playerid, "/announce", params);
	return 1;
}

alias:fac("f");
CMD:fac(playerid, params[])
{
    new factionid = playerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [message]");

	if (FactionData[factionid][factionChat])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "แชทกลุ่มถูกปิดกั้น");

    if (bf_get(player_bf[playerid], TOGGLE_FACTION))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเปิดการใช้งานแชทของฝ่ายหรือกลุ่มก่อน");

	SendFactionIDMessage(factionid, COLOR_FACTION, "(( (%d) %s %s: %s ))", playerData[playerid][pFactionRank], Faction_GetRank(playerid), ReturnRealName(playerid), params);
	Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnRealName(playerid), params);
	return 1;
}

CMD:invite(playerid, params[])
{
	new
	    userid;

	if (playerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (playerData[playerid][pFactionRank] > 3)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณไม่สามารถใช้คำสั่งนี้ได้!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/invite [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (playerData[userid][pFaction] == playerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นเป็นส่วนหนึ่งของฝ่ายหรือกลุ่มคุณแล้ว");

    if (playerData[userid][pFaction] != -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นเป็นส่วนหนึ่งของฝ่ายหรือกลุ่มอื่นอยู่แล้ว");

	playerData[userid][pFactionOffer] = playerid;
    playerData[userid][pFactionOffered] = playerData[playerid][pFaction];

    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ส่งคำร้องถึง %s ให้เข้าร่วม \"%s\"", ReturnRealName(userid), Faction_GetName(playerid));
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้เสนอให้คุณเข้าร่วม \"%s\" (ใช้ \"/accept invite\")", ReturnRealName(playerid), Faction_GetName(playerid));

	return 1;
}

CMD:uninvite(playerid, params[])
{
    new
	    userid;

	if (playerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (playerData[playerid][pFactionRank] > 3)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณไม่สามารถใช้คำสั่งนี้ได้!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uninvite [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (playerData[userid][pFaction] != playerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้เป็นส่วนหนึ่งของฝ่ายหรือกลุ่มเดียวกับคุณ");

    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ลบ %s ออกจาก \"%s\"", ReturnRealName(userid), Faction_GetName(playerid));
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้ลบคุณออกจากฝ่ายหรือกลุ่ม \"%s\"", ReturnRealName(playerid), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:customskin(playerid, params[])
{
    new
	    userid,
		rankid;

	if (playerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (FactionData[playerData[playerid][pFaction]][factionSkins] == 0)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "สกินยังไม่ถูกตั้งค่าโปรดติดต่อผู้ดูแลระบบ!");

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/customskin [ไอดีผู้เล่น/ชื่อบางส่วน] [skin (0[ใช้สกินหลัก]-%d)]", FactionData[playerData[playerid][pFaction]][factionSkins]);

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (playerData[userid][pFaction] != playerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้เป็นส่วนหนึ่งของฝ่ายหรือกลุ่มเดียวกับคุณ");

	if (rankid < 0 || rankid > FactionData[playerData[playerid][pFaction]][factionSkins])
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "   สกินที่ระบุไม่ถูกต้อง สกินต้องอยู่ระหว่าง 0 ถึง %d", FactionData[playerData[playerid][pFaction]][factionSkins]);

	if(rankid == 0) {
	    SetPlayerSkin(userid, playerData[userid][pModel]);
	    playerData[userid][pChar] = 0;
	}
	else {

	  	SetPlayerSkin(userid, FactionSkins[playerData[userid][pFaction]][rankid - 1]);
	 	playerData[userid][pChar] = FactionSkins[playerData[userid][pFaction]][rankid - 1];
	}
	return 1;
}

//OFFICIAL SKIN

CMD:giveofficial(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1) 
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	
	new targetid;

	if(sscanf(params,"u",targetid)) 
		return SendSyntaxMessage(playerid, "/giveofficial [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	playerData[targetid][pOfficialSkin] = 1;

	SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้มอบสิทธ์ในการเป็น Official Character ให้กับ %s เรียบร้อยแล้ว (/delofficial หากคุณต้องการลบออก)", ReturnRealName(targetid));
	SendClientMessageEx(targetid, COLOR_GREEN2, "คุณได้รับสิทธ์ในการเป็น Official Character จากผู้ดูแล %s เรียบร้อยแล้ว (/officialskin หากคุณต้องการเปลี่ยนสกิน)", ReturnRealName(targetid));

	return 1;
}

CMD:delofficial(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1) 
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	
	new targetid;

	if(sscanf(params,"u",targetid)) 
		return SendSyntaxMessage(playerid, "/delofficial [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	playerData[targetid][pOfficialSkin] = 0;
	playerData[targetid][pOffSkin] = 0;
	
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณได้ยึดสิทธ์ในการเป็น Official Character ของ %s", ReturnRealName(targetid));
	SendClientMessageEx(targetid, COLOR_LIGHTRED, "คุณได้ถูกยึดสิทธ์ในการเป็น Official Character โดยผู้ดูแล %s", ReturnRealName(playerid));

	return 1;
}


CMD:editskin(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1) 
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	
	new targetid;

	if(sscanf(params,"u",targetid)) 
		return SendSyntaxMessage(playerid, "/editskin [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	AEditSkin[playerid] = targetid;
	Dialog_Show(playerid, EditSkin, DIALOG_STYLE_INPUT, "การแก้ไขสกินส่วนตัว", "ปัจจุบันตัวละครนี้ใช้สกิน : %d\n\nระบุสกินที่คุณต้องการที่นี่ :", "ตกลง", "ยกเลิก", playerData[targetid][pOffSkin]);

	return 1;
}

CMD:officialskin(playerid, params[])
{
	if (playerData[playerid][pOfficialSkin] == 0)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้เป็น Official Character");

	if (playerData[playerid][pOffSkin] == 0)
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "โปรดติดต่อผู้ดูแล, คุณยังไม่ได้กำหนด Official Skin ของคุณ");

	SetPlayerSkin(playerid, playerData[playerid][pOffSkin]);
	playerData[playerid][pChar] = playerData[playerid][pOffSkin];

	SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}คุณได้เปลี่ยนมาใช้ Official Skin เรียบร้อยแล้ว");
	return 1;
}

CMD:giverank(playerid, params[])
{
    new
	    userid,
		rankid;

	if (playerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (playerData[playerid][pFactionRank] > 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถใช้คำสั่งนี้ได้!");

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/giverank [ไอดีผู้เล่น/ชื่อบางส่วน] [rank (1-%d)]", FactionData[playerData[playerid][pFaction]][factionRanks]);

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถปรับยศตัวเองได้");

	if (playerData[userid][pFaction] != playerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้เป็นส่วนหนึ่งของฝ่ายหรือกลุ่มเดียวกับคุณ");

	if (rankid < 0 || rankid > FactionData[playerData[playerid][pFaction]][factionRanks])
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "   ยศที่ระบุไม่ถูกต้อง ยศต้องอยู่ระหว่าง 1 ถึง %d", FactionData[playerData[playerid][pFaction]][factionRanks]);

	if(playerData[userid][pFactionRank] >= rankid)
	{
	    playerData[userid][pFactionRank] = rankid;
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้เลื่อนตำแหน่ง %s เป็น %s (%d)", ReturnRealName(userid), Faction_GetRank(userid), rankid);
	    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้เลื่อนตำแหน่งคุณเป็น %s (%d)", ReturnRealName(playerid), Faction_GetRank(userid), rankid);
	}
	else
	{
	    playerData[userid][pFactionRank] = rankid;
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ลดตำแหน่ง %s เป็น %s (%d)", ReturnRealName(userid), Faction_GetRank(userid), rankid);
	    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้ลดตำแหน่งคุณเป็น %s (%d)", ReturnRealName(playerid), Faction_GetRank(userid), rankid);
	}

	return 1;
}


CMD:editrankname(playerid, params[])
{
	if (playerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

	if (playerData[playerid][pFactionRank] > 2)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณไม่ได้เป็นผู้นำ!");

	Faction_ShowRanks(playerid, playerData[playerid][pFaction]);
	return 1;
}

CMD:makeleader(playerid, params[])
{
	new
		userid,
		id;

    if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/makeleader [ไอดีผู้เล่น/ชื่อบางส่วน] [faction id] (Use -1 to unset)");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณระบุไอดีฝ่ายหรือกลุ่มผิดพลาด");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ลบ %s จากฝ่ายหรือกลุ่มของเขา", ReturnRealName(userid));
    	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้ลบคุณออกจากฝ่ายหรือกลุ่มของคุณ", ReturnRealName(playerid));
	}
	else
	{
		SetFaction(userid, id);

		if (!playerData[userid][pFactionRank])
	    	playerData[userid][pFactionRank] = 1;

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ตั้งค่าฝ่ายหรือกลุ่มของ %s เป็น \"%s\"", ReturnRealName(userid), FactionData[id][factionName]);
    	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้ตั้งค่าฝ่ายหรือกลุ่มของคุณเป็น \"%s\"", ReturnRealName(playerid), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetrank(playerid, params[])
{
	new
		userid,
		rank,
		factionid;

    if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/asetrank [ไอดีผู้เล่น/ชื่อบางส่วน] [rank id]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if ((factionid = playerData[userid][pFaction]) == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ใช่สมาชิกของฝ่ายหรือกลุ่มใด ๆ");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendClientMessageEx(playerid, COLOR_GRAD1, "   ยศไม่ถูกต้อง ยศของฝ่ายหรือกลุ่มนี้อยู่ระหว่าง 1 ถึง %d", FactionData[factionid][factionRanks]);

	playerData[userid][pFactionRank] = rank;

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ตั้งค่ายศฝ่ายหรือกลุ่มของ %s เป็น %d", ReturnRealName(userid), rank);
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "   %s ได้ตั้งค่ายศฝ่ายหรือกลุ่มของคุณเป็น %d", ReturnRealName(playerid), rank);

    return 1;
}

CMD:accept(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/accept [name]");
		SendClientMessage(playerid, COLOR_GREY, "Available names: invite, job");
		return 1;
	}
	if (!strcmp(params, "invite", true) && playerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = playerData[playerid][pFactionOffer],
	        factionid = playerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || playerData[targetid][pFactionRank] > 2)
	   	 	return SendClientMessage(playerid, COLOR_GRAD1, "   ข้อเสนอฝ่ายหรือกลุ่มไม่สามารถใช้งานได้");

		SetFaction(playerid, factionid);
		playerData[playerid][pFactionRank] = FactionData[factionid][factionRanks];

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "   คุณได้ยอมรับข้อเสนอ %s เพื่อเข้าร่วม \"%s\"", ReturnRealName(targetid), Faction_GetName(targetid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, "   %s ได้ยอมรับข้อเสนอของคุณเพื่อเข้าร่วม \"%s\"", ReturnRealName(playerid), Faction_GetName(targetid));

        playerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        playerData[playerid][pFactionOffered] = -1;
        playerData[playerid][pBadgeNumber] = randomEx(23465, 99999);
	}
	else if (!strcmp(params, "job", true) && HireRequester[playerid] != INVALID_PLAYER_ID)
	{
		playerData[playerid][pWorkOn] = playerData[HireRequester[playerid]][pPbiskey];
		SendClientMessage(playerid, COLOR_GREY, "คุณยอมรับข้อเสนองานแล้ว");
		SendClientMessage(HireRequester[playerid], COLOR_GREY, "เขายอมรับข้อเสนองาน");
		HireRequester[playerid] = INVALID_PLAYER_ID;
		SQL_SaveCharacter(playerid);
		return 1;
	}
	return 1;
}

CMD:door(playerid, params[])
{
	new house=-1;
	if((house = HouseEntered[playerid]) != -1)
	{
		new
			Float:fDistance = FLOAT_INFINITY,
			i = -1
		;
		
		new data[furnitureE], p_virworld = GetPlayerVirtualWorld(playerid);
		for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
			if(!IsValidDynamicObject(x)) continue;
			if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == p_virworld && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
				if(data[fType] == TYPE_HOUSE && data[fHouseID] == house) {
					new
						Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);
	
					if (temp < fDistance)
					{
						fDistance = temp;
						i = x;
					}
				}
			}
		}

		if(i != -1 && fDistance < 3.0) {
		
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			if(data[fOpened] == 0)
			{
				if(data[fLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "ประตูล็อก!");

				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]-90.0);
				data[fOpened] = 1;
			}
			else
			{
				data[fOpened] = 0;
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]);
			}
			
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			return 1;
		}
	
		return 1;
	}
	if((house = BizEntered[playerid]) != -1)
	{
		new
			Float:fDistance = FLOAT_INFINITY,
			i = -1
		;

		new data[furnitureE], p_virworld = GetPlayerVirtualWorld(playerid);
		for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
			if(!IsValidDynamicObject(x)) continue;
			if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == p_virworld && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
				if(data[fType] == TYPE_BUSINESS && data[fHouseID] == house) {
					new
						Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);

					if (temp < fDistance)
					{
						fDistance = temp;
						i = x;
					}
				}
			}
		}

		if(i != -1 && fDistance < 3.0) {
		
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			if(data[fOpened] == 0)
			{
				if(data[fLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "ประตูล็อก!");
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ]/*+0.01*/, /*0.01*/1, data[fPosRX], data[fPosRY], data[fPosRZ]-90.0);
				data[fOpened] = 1;
			}
			else
			{
				data[fOpened] = 0;
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], /*0.01*/1, data[fPosRX], data[fPosRY], data[fPosRZ]);
			}
			
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			return 1;
		}
		return 1;
	}
    else {

		new
			Float:fDistance = FLOAT_INFINITY,
			i = -1
		;

		foreach(new x: sv_movedoors)
		{
			new
        		Float:temp = GetPlayerDistanceFromPoint(playerid, Doors[x][doorPosX], Doors[x][doorPosY], Doors[x][doorPosZ]);

			if (temp < fDistance)
			{
				fDistance = temp;
				i = x;
			}
		}

		if(i != -1 && fDistance < 3) {
			if(Doors[i][doorFaction] == -1 || (Doors[i][doorFaction] != -1 && Doors[i][doorFaction] == playerData[playerid][pFaction]))
			{
				if(Doors[i][doorOpened] == 1)
				{
					Doors[i][doorOpened] = 0;
					MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
				
				
					if(Doors[i][doorLink] != 0) {
						foreach(new y: sv_movedoors) if(Doors[y][doorID] == Doors[i][doorLink])
						{
							Doors[y][doorOpened] = 0;
							MoveDynamicObject(Doors[y][doorObject], Doors[y][doorPosX], Doors[y][doorPosY], Doors[y][doorPosZ], Doors[y][doorOpenSpeed], Doors[y][doorPosRX], Doors[y][doorPosRY], Doors[y][doorPosRZ]);
							break;
						}
					}
				}
				else
				{
					Doors[i][doorOpened] = 1;
					MoveDynamicObject(Doors[i][doorObject], Doors[i][doorMoveX], Doors[i][doorMoveY], Doors[i][doorMoveZ], Doors[i][doorOpenSpeed], Doors[i][doorMoveRX], Doors[i][doorMoveRY], Doors[i][doorMoveRZ]);
				
					if(Doors[i][doorLink] != 0) {
						foreach(new y: sv_movedoors) if(Doors[y][doorID] == Doors[i][doorLink])
						{
							Doors[y][doorOpened] = 1;
							MoveDynamicObject(Doors[y][doorObject], Doors[y][doorMoveX], Doors[y][doorMoveY], Doors[y][doorMoveZ], Doors[y][doorOpenSpeed], Doors[y][doorMoveRX], Doors[y][doorMoveRY], Doors[y][doorMoveRZ]);
							break;
						}
					}
				}
				return 1;
			}
		}

		if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {

			if (IsPlayerInRangeOfPoint(playerid, 3.0, 253.0706,109.0695,1003.2188)) // LSPD DOOR 1
			{
			    if(LSPDDoor[0]) // Openned
			    {
			        MoveDynamicObject(LSPDDoorObject[0], 253.2095, 107.5746, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[1], 253.1822, 110.5749, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
			        LSPDDoor[0] = 0;
			    }
			    else
			    {
			        MoveDynamicObject(LSPDDoorObject[0], 253.2095, 106.5846, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[1], 253.1822, 111.5849, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
			        LSPDDoor[0] = 1;
			    }
		    }
		    else if (IsPlayerInRangeOfPoint(playerid, 3.0, 239.7274,117.5998,1003.2188)) // LSPD DOOR 2
			{
			    if(LSPDDoor[1]) // Openned
			    {
			        MoveDynamicObject(LSPDDoorObject[2], 239.5697, 116.1145, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[3], 239.5820, 119.1149, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
		            LSPDDoor[1] = 0;
			    }
			    else
			    {
			        MoveDynamicObject(LSPDDoorObject[2], 239.5697, 115.0945, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[3], 239.5820, 120.0849, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
		            LSPDDoor[1] = 1;
			    }
		    }
	    }
	}
	return 1;
}

CMD:enter(playerid, params[])
{
	new id, str[256];

	if ((id = nearHouse_var[playerid]) != -1 && ((HouseInfo[id][hType] == 1 && HouseEntered[playerid] == -1) || (HouseInfo[id][hType] == 0 && HouseEntered[playerid] == HouseInfo[id][hSubid])))
	{
		if(HouseInfo[id][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetPlayerInterior(playerid,HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid,HouseInfo[id][hWorld]);
		HouseEntered[playerid] = id;
		BizEntered[playerid] = -1;

		playerData[playerid][pInterior] = HouseInfo[id][hInterior];
		playerData[playerid][pWorld] = HouseInfo[id][hWorld];
		playerData[playerid][pLocal] = id + LOCAL_HOUSE;

		if(playerData[playerid][pHouseKey] == id) GameTextForPlayer(playerid, "~w~Welcome to the house", 5000, 1);

        strunpack(str, HouseInfo[id][hradioURL]);
		if(HouseInfo[id][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
	}
	else if ((id = nearBiz_var[playerid]) != -1 && BizEntered[playerid] == -1)
	{
		if(playerData[playerid][pPbiskey] == id || playerData[playerid][pCash] >= BizInfo[id][bEntranceCost] || BizInfo[id][bEntranceCost] <= 0)
		{
			if(playerData[playerid][pPbiskey] != id && playerData[playerid][pWorkOn] != id)
			{
				if(BizInfo[id][bLocked] == 1)
				{
					GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
					return 1;
				}
				if(BizInfo[id][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}

				if(BizInfo[id][bEntranceCost])
				{
					playerData[playerid][pCash] -= BizInfo[id][bEntranceCost];
					format(str, sizeof(str), "~r~-$%d~n~~w~type /exit~n~to get out", BizInfo[id][bEntranceCost]);
					BizInfo[id][bTill] += BizInfo[id][bEntranceCost];
					UpdateBizInfo(id);
					GameTextForPlayer(playerid, str, 5000, 3);
					Log_Write("logs/biz.txt", "[%s] %s: payed $%d to enter biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), BizInfo[id][bEntranceCost], id, BizInfo[id][bID]);
				}
			}

			switch(BizInfo[id][bType])
			{
			    case 2: {
					SendClientMessageEx(playerid, COLOR_GREEN,"/buygun เพื่อซื้ออาวุธ");
				}
			    case 3: {
					SendClientMessageEx(playerid, COLOR_GREEN,"24/7 Supermarket /withdraw /balance /buy");
				}
			    case 9: { // Restaurant
					switch(BizInfo[id][bsubType])
					{
				        case 1: // Pizza
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"ที่นี่คือ"EMBED_LIGHTRED" ร้าน Pizza");
						}
				        case 2: // Donut
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"ที่นี่คือ"EMBED_LIGHTRED" ร้าน Rusty Brown's Ring Donuts");
						}
				        case 3: // Burger
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"ที่นี่คือ"EMBED_LIGHTRED" ร้าน Burger Shot");
						}
				        case 4: // Chicken Bell
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"ที่นี่คือ"EMBED_LIGHTRED" ร้าน Cluckin' Bell");
						}
					}
					SendClientMessageEx(playerid, COLOR_WHITE,"คุณสามารถกินในธุรกิจนี้ได้ใช้ "EMBED_LIGHTRED"/eat"EMBED_WHITE" หรือ "EMBED_LIGHTRED"/meal order");
				}
				case 12: {
					SendClientMessageEx(playerid, COLOR_GREEN,"Bank: /bank /savings /withdraw /balance /transfer /pincode");
				}
				case 13: {
			    	SendClientMessageEx(playerid, COLOR_WHITE,"ยินดีต้อนรับเข้าสู่บ่อนคาสิโน!");
			    	SendClientMessageEx(playerid, COLOR_LIGHTRED,"อย่าใช้เครื่อง/โต๊ะ ของ San Andreas");
			    	SendClientMessageEx(playerid, COLOR_LIGHTRED,"แม้มันจะถูกเขียนมาให้คุณใช้");
			    	SendClientMessageEx(playerid, COLOR_WHITE,"/casino");
				}
				/*case 8: {
					SendClientMessageEx(playerid, COLOR_GREEN,"Bar: /bar");
				}*/
			}

   			GameTextForPlayer(playerid, BizInfo[id][bInfo], 5000, 1);
			SetPlayerVirtualWorld(playerid, BizInfo[id][bWorld]);
			SetPlayerInterior(playerid,BizInfo[id][bInterior]);
			if(BizInfo[id][bEntime]) SetPlayerPosEx(playerid,BizInfo[id][bExitX],BizInfo[id][bExitY],BizInfo[id][bExitZ], BizInfo[id][bEntime]);
			else SetPlayerPos(playerid,BizInfo[id][bExitX],BizInfo[id][bExitY],BizInfo[id][bExitZ]);
			playerData[playerid][pInterior] = BizInfo[id][bInterior];
			playerData[playerid][pWorld] = BizInfo[id][bWorld];
			playerData[playerid][pLocal] = id + LOCAL_BIZ;
			BizEntered[playerid] = id;
			HouseEntered[playerid] = -1;

            strunpack(str, BizInfo[id][bradioURL]);
			if(BizInfo[id][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
		}
		else
		{
			GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 1);
		}
	}

	else if ((id = Garage_Nearest(playerid)) != -1 && GarageData[id][gPosExX] != 0.0 && GarageData[id][gPosExY] != 0.0)
	{
	    /*new garagetemp1[MAX_PLAYER_NAME+1];
	    strunpack(garagetemp1, GarageData[id][PlayerOwner]);
	        
        if((strlen(garagetemp1) && !strcmp(ReturnPlayerName(playerid), garagetemp1, true)))
		{*/
		if(GarageData[id][gLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);

		if(GarageData[id][gExHouse] != -1 && GarageData[id][gEnHouse] != GarageData[id][gExHouse]) {
			if(HouseInfo[GarageData[id][gExHouse]][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
		}
		if(GarageData[id][gExBiz] != -1 && GarageData[id][gEnHouse] != GarageData[id][gExHouse]) {
			if(BizInfo[GarageData[id][gExBiz]][bLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
		}

		switch(GarageData[id][gType]) {
			case 0: {
				SetPlayerPosEx(playerid,GarageData[id][gPosExX],GarageData[id][gPosExY],GarageData[id][gPosExZ],GarageData[id][gExTime]);
				SetPlayerFacingAngle(playerid, GarageData[id][gPosExA]);
			}
			case 1: {
				if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					new temp_vehicle = GetPlayerVehicleID(playerid);
					SetVehiclePos(temp_vehicle, GarageData[id][gPosExX],GarageData[id][gPosExY]+4.0,GarageData[id][gPosExZ]);
					SetVehicleZAngle(temp_vehicle, GarageData[id][gPosExA]);
					LinkVehicleToInterior(temp_vehicle, GarageData[id][gExInt]);
					SetVehicleVirtualWorld(temp_vehicle, GarageData[id][gExWorld]);
				}
				else {
					SetPlayerPosEx(playerid,GarageData[id][gPosExX],GarageData[id][gPosExY],GarageData[id][gPosExZ],GarageData[id][gExTime]);
					SetPlayerFacingAngle(playerid, GarageData[id][gPosExA]);
				}
			}
		}
		
		SetPlayerInterior(playerid,GarageData[id][gExInt]);
		SetPlayerVirtualWorld(playerid,GarageData[id][gExWorld]);
		/*HouseEntered[playerid] = GarageData[id][gExHouse];
		BizEntered[playerid] = GarageData[id][gExBiz];*/

		//GarageEntered[playerid] = id;

		HouseEntered[playerid] = -1;
		BizEntered[playerid] = -1;
		GarageEntered[playerid] = id;

		playerData[playerid][pInterior] = GarageData[id][gExInt];
		playerData[playerid][pWorld] = GarageData[id][gExWorld];
		playerData[playerid][pLocal] = GarageData[id][gExLocal];

		/*if(HouseEntered[playerid] != -1)
		{
			strunpack(str, HouseInfo[HouseEntered[playerid]][hradioURL]);
			if(HouseInfo[HouseEntered[playerid]][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else if(BizEntered[playerid] != -1)
		{
			strunpack(str, BizInfo[BizEntered[playerid]][bradioURL]);
			if(BizInfo[BizEntered[playerid]][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else StopAudioStreamForPlayer(playerid);*/
	}

	else if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][ePosExX] != 0.0 && EntranceData[id][ePosExY] != 0.0)
	{
	    if(EntranceData[id][eExHouse] != -1 && EntranceData[id][eEnHouse] != EntranceData[id][eExHouse]) {
			if(HouseInfo[EntranceData[id][eExHouse]][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
	    }
	    if(EntranceData[id][eExBiz] != -1 && EntranceData[id][eEnHouse] != EntranceData[id][eExHouse]) {
	    	if(BizInfo[EntranceData[id][eExBiz]][bLocked] == 1) return GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
	    }
	    switch(EntranceData[id][eType]) {
	        case 0: {
				SetPlayerPosEx(playerid,EntranceData[id][ePosExX],EntranceData[id][ePosExY],EntranceData[id][ePosExZ],EntranceData[id][eExTime]);
		        SetPlayerFacingAngle(playerid, EntranceData[id][ePosExA]);
	        }
	        case 1: {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					new temp_vehicle = GetPlayerVehicleID(playerid);
					SetVehiclePos(temp_vehicle, EntranceData[id][ePosExX],EntranceData[id][ePosExY],EntranceData[id][ePosExZ]);
					SetVehicleZAngle(temp_vehicle, EntranceData[id][ePosExA]);
					LinkVehicleToInterior(temp_vehicle, EntranceData[id][eExInt]);
					SetVehicleVirtualWorld(temp_vehicle, EntranceData[id][eExWorld]);
				}
				else {
					SetPlayerPosEx(playerid,EntranceData[id][ePosExX],EntranceData[id][ePosExY],EntranceData[id][ePosExZ],EntranceData[id][eExTime]);
			        SetPlayerFacingAngle(playerid, EntranceData[id][ePosExA]);
				}
	        }
	    }
        
		SetPlayerInterior(playerid,EntranceData[id][eExInt]);
		SetPlayerVirtualWorld(playerid,EntranceData[id][eExWorld]);
		HouseEntered[playerid] = EntranceData[id][eExHouse];
		BizEntered[playerid] = EntranceData[id][eExBiz];

		playerData[playerid][pInterior] = EntranceData[id][eExInt];
		playerData[playerid][pWorld] = EntranceData[id][eExWorld];
		playerData[playerid][pLocal] = EntranceData[id][eExLocal];

		if(HouseEntered[playerid] != -1)
		{
	        strunpack(str, HouseInfo[HouseEntered[playerid]][hradioURL]);
			if(HouseInfo[HouseEntered[playerid]][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else if(BizEntered[playerid] != -1)
		{
            strunpack(str, BizInfo[BizEntered[playerid]][bradioURL]);
			if(BizInfo[BizEntered[playerid]][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else StopAudioStreamForPlayer(playerid);
	}

	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1554.4711,-1675.6097,16.1953)) // LSPD
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 10001);
		SetPlayerPosEx(playerid, 1344.9938,13.1854,1019.2106);
		SetPlayerFacingAngle(playerid, 359.3215);
		GameTextForPlayer(playerid, "~w~Welcome to the Los Santos Police Department", 5000, 1);
		playerData[playerid][pInterior] = 10;
		playerData[playerid][pLocal] = 101;
		playerData[playerid][pWorld] = 10001;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 131.0016,1927.6133,19.3563)) // SACF Arrest
	{
		SetPlayerInterior(playerid, 8);
		SetPlayerVirtualWorld(playerid, 10008);

		SetPlayerPosEx(playerid, 251.2120,63.6648,901.0391);
		SetPlayerFacingAngle(playerid, 266.7942);

		playerData[playerid][pInterior] = 8;

		playerData[playerid][pLocal] = 107;
		playerData[playerid][pWorld] = 10008;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 153.6319,1917.2780,19.1003)) // Prison A,b to SACF HQ
	{
	    if(playerData[playerid][pPrisonDept] == 0) {
			SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 10007);

			SetPlayerPosEx(playerid, 246.4171,86.8469,1003.6406);
			SetPlayerFacingAngle(playerid, 180.6032);

			playerData[playerid][pInterior] = 6;

			playerData[playerid][pLocal] = 107;
			playerData[playerid][pWorld] = 10007;
		}
		else {
		    GameTextForPlayer(playerid, "~r~You not allow", 5000, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1361.0450,42.0488,1019.1917)) // LSPD Court
	{
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 10025);
		
		SetPlayerPosEx(playerid, 1414.6218,-16.6933,1000.9734);
		SetPlayerFacingAngle(playerid, 90.1325);

		playerData[playerid][pInterior] = 6;
		
		playerData[playerid][pLocal] = 101;
		playerData[playerid][pWorld] = 10025;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 628.5346,-571.8113,17.1738)) // SASD
	{
		SetPlayerInterior(playerid, 5);
		SetPlayerVirtualWorld(playerid, 10005);
		SetPlayerPosEx(playerid, 1397.6414,-21.7709,1001.1614);
		SetPlayerFacingAngle(playerid, 90.9335);
		GameTextForPlayer(playerid, "~w~Welcome to the Los Santos Sheriff's Department", 5000, 1);
		playerData[playerid][pInterior] = 5;
		playerData[playerid][pLocal] = 105;
		playerData[playerid][pWorld] = 10005;
	}
	/*else if (IsPlayerInRangeOfPoint(playerid, 3.0, 2317.3894,-1366.0944,24.1246)) // LSPD
	{
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 10006);
		SetPlayerPosEx(playerid, 246.7690,63.5800,1003.6406);
		SetPlayerFacingAngle(playerid, 0.8205);
		GameTextForPlayer(playerid, "~w~Welcome to 54th Street Community Police Station", 5000, 1);
		playerData[playerid][pInterior] = 6;
		playerData[playerid][pLocal] = 106;
		playerData[playerid][pWorld] = 10006;
	}*/
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 2138.1533,-2170.9658,13.5544)) // LSPD
	{
		SetPlayerInterior(playerid, 12);
		SetPlayerVirtualWorld(playerid, 10006);
		SetPlayerPosEx(playerid, 1418.0818,-16.1466,1000.9465);
		SetPlayerFacingAngle(playerid, 85.9945);
		GameTextForPlayer(playerid, "~w~Welcome to HABOR Station", 5000, 1);
		playerData[playerid][pInterior] = 12;
		playerData[playerid][pLocal] = 255;
		playerData[playerid][pWorld] = 10006;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1570.4418,-1337.4415,16.4844)) // NEWS
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 10010);
		SetPlayerPosEx(playerid, 1552.7800,-1360.1278,286.6675);
		SetPlayerFacingAngle(playerid, 84.02);
		GameTextForPlayer(playerid, "~w~Welcome to San Andreas Network Station", 5000, 1);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pLocal] = 110;
		playerData[playerid][pWorld] = 10010;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 123.3456,1918.5425,19.9584)) // SADOC
	{
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 10007);
		SetPlayerPosEx(playerid, 246.8598,63.2870,1003.6406);
		SetPlayerFacingAngle(playerid, 357.7256);
		GameTextForPlayer(playerid, "~w~Welcome to the San Andreas Department of Corrections HQ", 5000, 1);
		playerData[playerid][pInterior] = 6;
		playerData[playerid][pLocal] = 107;
		playerData[playerid][pWorld] = 10007;
	}
	/*else if (IsPlayerInRangeOfPoint(playerid, 3.0, 533.4344,-1812.9364,6.5781)) // LSPD Santa Maria
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 10004);
		SetPlayerPosEx(playerid, 1407.6658,-2.1649,1073.8362);
		SetPlayerFacingAngle(playerid, 84.7823);
		GameTextForPlayer(playerid, "~w~Welcome to the Santa Maria HQ", 5000, 1);
		playerData[playerid][pInterior] = 10;
		playerData[playerid][pLocal] = 104;
		playerData[playerid][pWorld] = 10004;
	}*/
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1297.3621,-1125.5790,23.8150)) // LSPD West Station
	{
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 1997);
		SetPlayerPosEx(playerid, 1297.3289,-1122.2892,23.9127);
		SetPlayerFacingAngle(playerid, 358.6718);
		GameTextForPlayer(playerid, "~w~Welcome to the Vinewood HQ", 5000, 1);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pLocal] = 255;
		playerData[playerid][pWorld] = 1997;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1568.6520,-1690.1764,5.8906)) // LSPD GARAGE
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, 276.3826,122.0751,1004.6172);
		SetPlayerFacingAngle(playerid, 273.2600);
		playerData[playerid][pInterior] = 10;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 101;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1481.0662,-1771.3069,18.7958)) // City Hall
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 15);
		SetPlayerPosEx(playerid, 1381.0485,-0.3997,1007.9149);
		SetPlayerFacingAngle(playerid, 179.6784);
		GameTextForPlayer(playerid, "~w~Welcome to the City Hall", 5000, 1);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pWorld] = 15;

		playerData[playerid][pLocal] = 102;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1173.1841,-1323.3143,15.3952)) // Hospital
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 10003);
		SetPlayerPosEx(playerid, 510.7639,195.5221,1019.9844);
		SetPlayerFacingAngle(playerid, 274.0443);
		GameTextForPlayer(playerid, "~w~Welcome to the All Saints General Hospital", 5000, 1);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pWorld] = 10003;

		playerData[playerid][pLocal] = 103;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.8688,50.6348,1019.2106)) // สำรอง LSPD เก่า
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, 246.4187,107.9756,1003.2188);
		SetPlayerFacingAngle(playerid, 357.7276);
		playerData[playerid][pInterior] = 10;
		playerData[playerid][pLocal] = 101;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 215.2958,1918.8972,18.1084)) // Enter Prison A
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 201);
		SetPlayerPosEx(playerid, 144.3957,-193.1968,342.9205);
		SetPlayerFacingAngle(playerid, 269.5294);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pLocal] = 201;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 167.7188,1900.9974,18.7828)) // Enter Prison B
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 202);
		SetPlayerPosEx(playerid, 144.3957,-193.1968,342.9205);
		SetPlayerFacingAngle(playerid, 269.5294);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pLocal] = 202;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 297.0300,1772.8552,17.9356)) // Enter Prison C
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 203);
		SetPlayerPosEx(playerid, 144.3957,-193.1968,342.9205);
		SetPlayerFacingAngle(playerid, 269.5294);
		playerData[playerid][pInterior] = 1;
		playerData[playerid][pLocal] = 203;
	}
	
	else if (IsPlayerInRangeOfPoint(playerid, 4,2073.2979,-1831.1228,13.5469))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD  || GetFactionType(playerid) == FACTION_TYPE_MEDIC)
	        {
	            if(playerData[playerid][pOnDuty])
	            {
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2062.1294,-1831.5498,13.5469);
	        		SetVehicleZAngle(tmpcar, 90);
					SetPVarInt(playerid, "SprayID", 1);
					TogglePlayerControllable(playerid, 0);
	        		SetTimerEx("AfterSpray", 7500, 0, "i", playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ตำรวจ");
			}
	    }
	}
	else if (IsPlayerInRangeOfPoint(playerid, 4,1024.9756,-1030.7930,32.0257))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD  || GetFactionType(playerid) == FACTION_TYPE_MEDIC)
	        {
	            if(playerData[playerid][pOnDuty])
	            {
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1024.9763,-1021.8850,32.1016);
	        		SetVehicleZAngle(tmpcar, 0);
	        		SetPVarInt(playerid, "SprayID", 2);
	        		TogglePlayerControllable(playerid, 0);
	        		SetTimerEx("AfterSpray", 7500, 0, "i", playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ตำรวจ");
			}
	    }
	}
	else if (IsPlayerInRangeOfPoint(playerid, 4,488.3819,-1733.0563,11.1752))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD  || GetFactionType(playerid) == FACTION_TYPE_MEDIC)
	        {
	            if(playerData[playerid][pOnDuty])
	            {
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 487.4099,-1741.4585,11.1330);
	        		SetVehicleZAngle(tmpcar, 180);
	        		SetPVarInt(playerid, "SprayID", 3);
	        		TogglePlayerControllable(playerid, 0);
	        		SetTimerEx("AfterSpray", 7500, 0, "i", playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ตำรวจ");
			}
	    }
	}
	else if (IsPlayerInRangeOfPoint(playerid, 4,719.8940,-464.8272,16.3359))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD  || GetFactionType(playerid) == FACTION_TYPE_MEDIC)
	        {
	            if(playerData[playerid][pOnDuty])
	            {
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 720.3924,-456.0286,16.3359);
	        		SetVehicleZAngle(tmpcar, 0);
	        		SetPVarInt(playerid, "SprayID", 4);
	        		TogglePlayerControllable(playerid, 0);
	        		SetTimerEx("AfterSpray", 7500, 0, "i", playerid);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ตำรวจ");
			}
	    }
	}
	// 0 - Player, 1 - Vehicle, 2 BOLT

	return 1;
}

CMD:eat(playerid)
{
	new id;
	if ((id = BizEntered[playerid]) != -1)
	{
	    if(BizInfo[id][bType] == 9)
	    {
			ShowPlayerRestaurantMenu(playerid, id);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ร้านอาหาร!");
	}
	return 1;
}

CMD:meal(playerid, params[])
{
	new
	    type[24],
		menuid,
		value;

	if (sscanf(params, "s[24]D()D()", type, menuid, value))
 	{
	    SendClientMessage(playerid, COLOR_GRAD3, "Available commands:");
	    SendClientMessage(playerid, -1, "{FF6347}/meal order "EMBED_WHITE"- เปิดเมนูสั่งอาหาร");
        SendClientMessage(playerid, -1, "{FF6347}/meal exit "EMBED_WHITE"- ออกจากเมนูสั่งอาหารในกรณีที่คุณติด");
        SendClientMessage(playerid, -1, "{FF6347}/meal place "EMBED_WHITE"- หากคุณกำลังถือถาดอาหาร คุณสามารถวางมันบนโต๊ะได้");
        SendClientMessage(playerid, -1, "{FF6347}/meal pickup "EMBED_WHITE"- คุณสามารถหยิบถาดอาหารของคุณที่วางอยู่ได้");
        SendClientMessage(playerid, -1, "{FF6347}/meal throw "EMBED_WHITE"- โยนถาดอาหารทิ้ง");
        SendClientMessage(playerid, -1, "{FF6347}/meal config "EMBED_WHITE"- ตั้งค่าเมนูสำหรับเจ้าของร้านอาหาร");
		return 1;
	}

	if (!strcmp(type, "exit", true))
	{
		for(new i=0;i!=sizeof(TD_Restaurant);i++)
			TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

        for(new i=0;i!=9;i++)
			PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

        CancelSelectTextDraw(playerid);
	}
	else if (!strcmp(type, "order", true))
	{
		PC_EmulateCommand(playerid, "/eat");
	}
	else if (!strcmp(type, "place", true))
	{
		if(IsPlayerHoldMeal(playerid))
		{
            if(MealObject[playerid] == -1)
            {
		 		new Float:px, Float:py, Float:pz, Float:a;
				GetPlayerPos(playerid, px, py, pz);
				GetPlayerFacingAngle(playerid, a);

				px += (0.2 * floatsin(-a + 90.0, degrees));
				py += (0.2 * floatcos(-a + 90.0, degrees));

				//SetPlayerCheckpoint(playerid, px, py, pz, 1.0);

				px += (1.0 * floatsin(-a, degrees));
				py += (1.0 * floatcos(-a, degrees));


		  		//new Float:rz = 159.500076, Float:a;

		  		//rz += floatsin(-a, degrees);
		  		//92.2354 //159.500076
		  		//-16.799961 //272.2354
				if(MealHolding[playerid] >= 2221 && MealHolding[playerid] <= 2223)
				{
				    MealObject[playerid] = MealPlace(MealHolding[playerid], px,py,pz,0, 0, a + 67.5, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
				}
				else MealObject[playerid] = MealPlace(MealHolding[playerid], px,py,pz,-25.600013, 22.000013, a + 67.5, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));


                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
                EditDynamicObject(playerid, MealDrop[MealObject[playerid]][mObject]);
                SetPlayerThrowMeal(playerid);

                SendClientMessage(playerid, -1, "คุณสามารถปรับตำแหน่งถาดอาหารได้ในขณะนี้ กด ESC เพื่อย้อนกลับ คลิกที่ไอคอนบันทึกเพื่อบันทึก");
			}
            else SendClientMessage(playerid, -1, "คุณได้วางถาดอาหารไปแล้ว");
		}
		else SendClientMessage(playerid, -1, "คุณไม่ได้ถือถาดอาหารอยู่");
	}
	else if (!strcmp(type, "pickup", true))
	{
		if(GetPlayerNearMeal(playerid))
		{
		    MealHolding[playerid] = MealDrop[MealObject[playerid]][mID];
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);

			MealDestroy(MealObject[playerid]);
			MealObject[playerid]=-1;
		}
		else SendClientMessage(playerid, -1, "คุณไม่ได้วางถาดอาหารไว้รอบตัวคุณ");
	}
	else if (!strcmp(type, "throw", true))
	{
    	if(MealObject[playerid] != -1 || IsPlayerHoldMeal(playerid))
      	{
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s โยนถาดอาหารของเขาไป", ReturnRealName(playerid));
			MealDestroy(MealObject[playerid]);
			MealObject[playerid]=-1;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerThrowMeal(playerid);

			MealDestroy(MealObject[playerid]);
			MealObject[playerid]=-1;
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			SetPlayerThrowMeal(playerid);

			if(MealObject[playerid] != -1)
			{
			    MealDestroy(MealObject[playerid]);
			    MealObject[playerid]=-1;
			    return 1;
			}
      	}
      	else SendClientMessage(playerid, -1, "คุณไม่ได้อยู่ใกล้ถาดอาหารของคุณ");
	}
	else if (!strcmp(type, "config", true))
	{
	    new id = -1;
		if((id = BizEntered[playerid]) != -1)
		{
			if (Biz_IsOwner(playerid, id))
			{
			    if(BizInfo[BizEntered[playerid]][bType] == 9)
			    {
				    if(sscanf(params, "{s[24]}dd", menuid, value))
				    {
						SendClientMessage(playerid, COLOR_GRAD2, "การใช้: /meal config [menuid] [ราคา]");
						SendClientMessage(playerid, -1, "{FF6347}[Menu]");

						switch(BizInfo[BizEntered[playerid]][bsubType])
						{
						    case 1:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Buster - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
	          					SendClientMessageEx(playerid, -1, "2. Double D-Luxe - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
	          					SendClientMessageEx(playerid, -1, "3. Full Rack - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salad Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
						    }
						    case 2:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Rusty's D-Luxe - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
	          					SendClientMessageEx(playerid, -1, "2. Rusty's Double Barrel - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
	          					SendClientMessageEx(playerid, -1, "3. Rusty's Huge Double - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
						    }
						    case 3:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Moo Kids Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
	          					SendClientMessageEx(playerid, -1, "2. Beef Tower - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
	          					SendClientMessageEx(playerid, -1, "3. Meat Stack - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salad Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
						    }
						    case 4:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Cluckin' Little Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][0]));
	          					SendClientMessageEx(playerid, -1, "2. Cluckin' Big Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][1]));
	          					SendClientMessageEx(playerid, -1, "3. Cluckin' Huge Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salad Meal - %s", FormatNumber(BizInfo[BizEntered[playerid]][bPriceProducts][3]));
						    }
						}
				        return 1;
				    }
				    printf("%d %d", menuid, value);
				    if(menuid >= 1 && (menuid <= 3 || (menuid <= 4 && BizInfo[BizEntered[playerid]][bsubType] != 2)))
				    {
						if(value < 1 || value > 9999)
						    return SendClientMessage(playerid, COLOR_GRAD2, "ราคาต้องไม่ต่ำกว่า 1 หรือมากกว่า 9999!");

						BizInfo[BizEntered[playerid]][bPriceProducts][menuid-1] = value;
						SendClientMessageEx(playerid, COLOR_WHITE, "คุณแก้ไขราคาอาหาร #%d เรียบร้อยแล้ว", menuid);
				    }
				    else SendClientMessage(playerid, COLOR_LIGHTRED, "หมายเลขรายการอาหารไม่ถูกต้อง!");
			    }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับกิจการที่เป็นร้านอาหารเท่านั้น!");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของร้านอาหาร!");
		}
		else
		{
		    SendClientMessage(playerid, -1, "คุณไม่ได้อยู่ในร้านอาหาร");
		}
	}
	return 1;
}



ShowPlayerRestaurantMenu(playerid, id)
{
	new string[256];
	SendClientMessage(playerid, COLOR_WHITE, "หากคุณติดอยู่ในเมนู คุณสามารถปิดได้โดยใช้ {FF6347}/meal exit");
	PRestaurantOpening{ playerid }=true;

	switch(BizInfo[id][bsubType])
	{
		case 1: // Pizza
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2218);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2219);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2220);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2355);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);


			format(string, sizeof(string), "Buster~n~~r~Health: +30~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

		    format(string, sizeof(string), "Double D-Luxe~n~~r~Health: +60~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

		    format(string, sizeof(string), "Full Rack~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

		    format(string, sizeof(string), "Salad Meal~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
 		case 2: // Donut
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2221);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2223);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2222);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

            format(string, sizeof(string), "Rusty's D-Luxe~n~~r~Health: +30~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Rusty's Double Barrel~n~~r~Health: +60~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

		    format(string, sizeof(string), "Rusty's Huge Double~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);
		}
 		case 3: // Burger
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2213);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2214);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2212);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2354);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);

            format(string, sizeof(string), "Moo Kids Meal~n~~r~Health: +30~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Beef Tower~n~~r~Health: +60~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

            format(string, sizeof(string), "Meat Stack~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

            format(string, sizeof(string), "Salad Meal~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
 		case 4: // Cluckin
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2215);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2216);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2217);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2353);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);

            format(string, sizeof(string), "Cluckin' Little Meal~n~~r~Health: +30~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Cluckin' Big Meal~n~~r~Health: +60~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

            format(string, sizeof(string), "Cluckin' Huge Meal~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

            format(string, sizeof(string), "Salad Meal~n~~r~Health: +100~n~Removes hunger~n~~b~Price: %s", FormatNumber(BizInfo[id][bPriceProducts][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
	}

	for(new i=0;i!=sizeof(TD_Restaurant);i++)
		TextDrawShowForPlayer(playerid, TD_Restaurant[i]);

    PlayerTextDrawSetString(playerid, PTD_Restaurant[playerid][8], ClearGameTextColor(BizInfo[id][bInfo]));
	PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][8]);

	SelectTextDraw(playerid, 0x00FF00FF);
}

CMD:exit(playerid, params[])
{
	new id, str[256];

	if (nearBiz_var[playerid] != -1 && (id = BizEntered[playerid]) != -1) {

		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		playerData[playerid][pInterior] = 0;
		SetPlayerPos(playerid,BizInfo[id][bEntranceX],BizInfo[id][bEntranceY],BizInfo[id][bEntranceZ]);
		playerData[playerid][pLocal] = 255;
		playerData[playerid][pWorld] = 0;
		HouseEntered[playerid] = -1;
		BizEntered[playerid]=-1;
		grantbuild[playerid]=-1;
	
		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);
	
			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
		if(BizInfo[id][bradioOn]) StopAudioStreamForPlayer(playerid);
		
	}
	else if ((id = nearHouse_var[playerid]) != -1 && IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ])) {

		SetCameraBehindPlayer(playerid);
		
		if(HouseInfo[id][hSubid] != -1) {
			SetPlayerPosEx(playerid,HouseInfo[id][hEntranceX],HouseInfo[id][hEntranceY],HouseInfo[id][hEntranceZ]);
			
			SetPlayerVirtualWorld(playerid,HouseInfo[id][hEntranceWorld]);
			SetPlayerInterior(playerid,HouseInfo[id][hEntranceInt]);
			playerData[playerid][pInterior] = HouseInfo[id][hEntranceInt];
			playerData[playerid][pWorld] = HouseInfo[id][hEntranceWorld];
			playerData[playerid][pLocal] = HouseInfo[id][hSubid] + LOCAL_HOUSE;
			HouseEntered[playerid] = HouseInfo[id][hSubid];
			BizEntered[playerid]=-1;
		}
		else {
			SetPlayerPos(playerid,HouseInfo[id][hEntranceX],HouseInfo[id][hEntranceY],HouseInfo[id][hEntranceZ]);
			
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			playerData[playerid][pInterior] = 0;
			playerData[playerid][pWorld] = 0;
			HouseEntered[playerid] = -1;
			BizEntered[playerid]=-1;
			playerData[playerid][pLocal] = 255;
		}
		
		grantbuild[playerid]=-1;
		
		if (playerData[playerid][pFreeze] && HouseInfo[id][hSubid] == -1)
		{
			KillTimer(playerData[playerid][pFreezeTimer]);
		
			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
		if(HouseInfo[id][hradioOn]) StopAudioStreamForPlayer(playerid);
	}
	else if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][ePosEnX] != 0.0 && EntranceData[id][ePosEnY] != 0.0)
	{
	    switch(EntranceData[id][eType]) {
	        case 0: {
				SetPlayerPosEx(playerid,EntranceData[id][ePosEnX],EntranceData[id][ePosEnY],EntranceData[id][ePosEnZ],EntranceData[id][eEnTime]);
		        SetPlayerFacingAngle(playerid, EntranceData[id][ePosEnA]);
	        }
	        case 1: {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					new temp_vehicle = GetPlayerVehicleID(playerid);
					SetVehiclePos(temp_vehicle, EntranceData[id][ePosEnX],EntranceData[id][ePosEnY],EntranceData[id][ePosEnZ]);
					SetVehicleZAngle(temp_vehicle, EntranceData[id][ePosEnA]);
					LinkVehicleToInterior(temp_vehicle, EntranceData[id][eEnInt]);
					SetVehicleVirtualWorld(temp_vehicle, EntranceData[id][eEnWorld]);
				}
				else {
					SetPlayerPosEx(playerid,EntranceData[id][ePosEnX],EntranceData[id][ePosEnY],EntranceData[id][ePosEnZ],EntranceData[id][eEnTime]);
			        SetPlayerFacingAngle(playerid, EntranceData[id][ePosEnA]);
				}
	        }
	    }

		SetPlayerInterior(playerid,EntranceData[id][eEnInt]);
		SetPlayerVirtualWorld(playerid,EntranceData[id][eEnWorld]);
		HouseEntered[playerid] = EntranceData[id][eEnHouse];
		BizEntered[playerid] = EntranceData[id][eEnBiz];

		playerData[playerid][pInterior] = EntranceData[id][eEnInt];
		playerData[playerid][pWorld] = EntranceData[id][eEnWorld];
		playerData[playerid][pLocal] = EntranceData[id][eEnLocal];

		if(HouseEntered[playerid] != -1)
		{
	        strunpack(str, HouseInfo[HouseEntered[playerid]][hradioURL]);
			if(HouseInfo[HouseEntered[playerid]][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else if(BizEntered[playerid] != -1)
		{
            strunpack(str, BizInfo[BizEntered[playerid]][bradioURL]);
			if(BizInfo[BizEntered[playerid]][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
			else StopAudioStreamForPlayer(playerid);
		}
		else StopAudioStreamForPlayer(playerid);
	}

	else if ((id = Garage_Inside(playerid)) != -1 && GarageData[id][gPosEnX] != 0.0 && GarageData[id][gPosEnY] != 0.0)
	{
	    switch(GarageData[id][gType]) {
	        case 0: {
				SetPlayerPosEx(playerid,GarageData[id][gPosEnX],GarageData[id][gPosEnY],GarageData[id][gPosEnZ],GarageData[id][gEnTime]);
		        SetPlayerFacingAngle(playerid, GarageData[id][gPosEnA]);
	        }
	        case 1: {
		        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
					new temp_vehicle = GetPlayerVehicleID(playerid);
					SetVehiclePos(temp_vehicle, GarageData[id][gPosEnX],GarageData[id][gPosEnY]-4.0,GarageData[id][gPosEnZ]);
					SetVehicleZAngle(temp_vehicle, GarageData[id][gPosEnA]);
					LinkVehicleToInterior(temp_vehicle, GarageData[id][gEnInt]);
					SetVehicleVirtualWorld(temp_vehicle, GarageData[id][gEnWorld]);
				}
				else {
					SetPlayerPosEx(playerid,GarageData[id][gPosEnX],GarageData[id][gPosEnY],GarageData[id][gPosEnZ],GarageData[id][gEnTime]);
			        SetPlayerFacingAngle(playerid, GarageData[id][gPosEnA]);
				}
	        }
	    }

		SetPlayerInterior(playerid,GarageData[id][gEnInt]);
		SetPlayerVirtualWorld(playerid,GarageData[id][gEnWorld]);
		
		HouseEntered[playerid] = GarageData[id][gEnHouse];
		BizEntered[playerid] = GarageData[id][gEnBiz];
		//GarageEntered[playerid] = GarageData[id][gEnBiz];

		HouseEntered[playerid] = -1;
		BizEntered[playerid]=-1;
		GarageEntered[playerid] = -1;

		playerData[playerid][pInterior] = GarageData[id][gEnInt];
		playerData[playerid][pWorld] = GarageData[id][gEnWorld];
		playerData[playerid][pLocal] = GarageData[id][gEnLocal];
	}

	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1552.7800,-1360.1278,286.6675)) // SAN NEWS
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1570.4418,-1337.4415,16.4844);
		SetPlayerFacingAngle(playerid, 310.0);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.9938,13.1854,1019.2106) && playerData[playerid][pLocal] == 101) // LSPD
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1554.4711,-1675.6097,16.1953);
		SetPlayerFacingAngle(playerid, 90.4584);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 251.2120,63.6648,901.0391) && playerData[playerid][pLocal] == 107) // SACF Arrest
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 131.0016,1927.6133,19.3563);
		SetPlayerFacingAngle(playerid, 359.9424);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 246.4171,86.8469,1003.6406) && playerData[playerid][pLocal] == 107) // SACF HQ to Prison A,B
	{
		if(playerData[playerid][pPrisonDept] == 0) {
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 153.6319,1917.2780,19.1003);
			SetPlayerFacingAngle(playerid, 269.8263);
			playerData[playerid][pInterior] = 0;
			playerData[playerid][pWorld] = 0;
			playerData[playerid][pLocal] = 255;

			if (playerData[playerid][pFreeze])
			{
				KillTimer(playerData[playerid][pFreezeTimer]);

				playerData[playerid][pFreeze] = 0;
				TogglePlayerControllable(playerid, 1);
			}
		}
		else {
		    GameTextForPlayer(playerid, "~r~You not allow", 5000, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1414.6218,-16.6933,1000.9734) && playerData[playerid][pLocal] == 101) // LSPD Court
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 10001);
		
		SetPlayerPosEx(playerid, 1361.0450,42.0488,1019.1917);
		SetPlayerFacingAngle(playerid, 87.9623);

		playerData[playerid][pInterior] = 10;
		
		playerData[playerid][pLocal] = 101;
		playerData[playerid][pWorld] = 10001;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1397.6414,-21.7709,1001.1614) && playerData[playerid][pLocal] == 105) // SASD
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 628.5346,-571.8113,17.1738);
		SetPlayerFacingAngle(playerid, 268.9410);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1418.0818,-16.1466,1000.9465) && playerData[playerid][pLocal] == 255) // LSPD Habor
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 2138.1533,-2170.9658,13.5544);
		SetPlayerFacingAngle(playerid, 42.7540);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1297.3289,-1122.2892,23.9127) && playerData[playerid][pLocal] == 255) // LSPD Vinewood
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1297.3694,-1125.6064,23.8145);
		SetPlayerFacingAngle(playerid, 177.9236);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 246.8598,63.2870,1003.6406) && playerData[playerid][pLocal] == 107) // SADOC
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 123.3456,1918.5425,19.9584);
		SetPlayerFacingAngle(playerid, 3.2981);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 276.3826,122.0751,1004.6172) && playerData[playerid][pLocal] == 101) // LSPD to Garage
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1568.6520,-1690.1764,5.8906);
		SetPlayerFacingAngle(playerid, 180);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1381.0485,-0.3997,1007.9149)) // City Hall
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1481.0662,-1771.3069,18.7958);
		SetPlayerFacingAngle(playerid, 357.5479);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 511.1213,195.4349,1019.9844)) // Hospital
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1173.1841,-1323.3143,15.3952);
		SetPlayerFacingAngle(playerid, 275.1958);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 246.4187,107.9756,1003.2188) && playerData[playerid][pLocal] == 101) // สำรอง LSPD
	{
		SetPlayerVirtualWorld(playerid, 10001);
		SetPlayerInterior(playerid, 10);
		SetPlayerPosEx(playerid, 1344.8688,50.6348,1019.2106);
		SetPlayerFacingAngle(playerid, 177.6778);
		playerData[playerid][pInterior] = 10;
		playerData[playerid][pWorld] = 10001;
		playerData[playerid][pLocal] = 101;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 144.3957,-193.1968,342.9205)) // Exit Prison A
	{
		switch(playerData[playerid][pLocal]) {
		    case 201: {
				SetPlayerPos(playerid, 215.2958,1918.8972,18.1084);
				SetPlayerFacingAngle(playerid, 178.4993);
		    }
		    case 202: {
				SetPlayerPos(playerid, 167.7188,1900.9974,18.7828);
				SetPlayerFacingAngle(playerid, 275.6102);
		    }
		    case 203: {
				SetPlayerPos(playerid, 297.0300,1772.8552,17.9356);
				SetPlayerFacingAngle(playerid, 90.6747);
		    }
		}
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		playerData[playerid][pLocal] = 255;

		if (playerData[playerid][pFreeze])
		{
			KillTimer(playerData[playerid][pFreezeTimer]);

			playerData[playerid][pFreeze] = 0;
			TogglePlayerControllable(playerid, 1);
		}
	}
	
	else if (IsPlayerInRangeOfPoint(playerid, 4,2062.1294,-1831.5498,13.5469))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        new tmpcar = GetPlayerVehicleID(playerid);
			DeletePVar(playerid, "SprayID");
			TogglePlayerControllable(playerid, 1);
			SetVehiclePos(tmpcar, 2073.2979,-1831.1228,13.5469);
			SetVehicleZAngle(tmpcar, 0);
	    }
	}
	else if (IsPlayerInRangeOfPoint(playerid, 4,1024.9763,-1021.8850,32.1016))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        new tmpcar = GetPlayerVehicleID(playerid);
			DeletePVar(playerid, "SprayID");
			TogglePlayerControllable(playerid, 1);
			SetVehiclePos(tmpcar, 1024.9756,-1030.7930,32.0257);
			SetVehicleZAngle(tmpcar, 90);
	    }
	}
	else if (IsPlayerInRangeOfPoint(playerid, 4,487.4099,-1741.4585,11.1330))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        new tmpcar = GetPlayerVehicleID(playerid);
			DeletePVar(playerid, "SprayID");
			TogglePlayerControllable(playerid, 1);
			SetVehiclePos(tmpcar, 488.3819,-1733.0563,11.1752);
			SetVehicleZAngle(tmpcar, 90);
	    }
	}
	
	else if (IsPlayerInRangeOfPoint(playerid, 4,720.3924,-456.0286,16.3359))
	{ // Pay & Spray
	    if(GetPlayerState(playerid) == 2)
	    {
	        new tmpcar = GetPlayerVehicleID(playerid);
			DeletePVar(playerid, "SprayID");
			TogglePlayerControllable(playerid, 1);
			SetVehiclePos(tmpcar, 719.8940,-464.8272,16.3359);
			SetVehicleZAngle(tmpcar, 90);
	    }
	}
	return 1;
}
/*
CMD:createsignal(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/createsignal [name]");

	new id = Signal_Create(playerid, params);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   เซิร์ฟเวอร์นี้มี Radio Tower เกินขีดจำกัดแล้ว");

	SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ประสบความสำเร็จในการสร้าง Radio Tower ไอดี: %d", id);
	return 1;
}

CMD:editsignal(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (playerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editsignal [id] [name]");
	    SendClientMessage(playerid, COLOR_GREY, "Available names: location, range, name");
		return 1;
	}
	if ((id < 0 || id >= MAX_SIGNALTOWER) || !SignalData[id][signalID])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณระบุไอดี Radio Tower ไม่ถูกต้อง");

	if (!strcmp(type, "location", true))
	{
	    GetPlayerPos(playerid, SignalData[id][signalX], SignalData[id][signalY], SignalData[id][signalZ]);

		Signal_Save(id);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับตำแหน่งของ Radio Tower ไอดี: %d", ReturnPlayerName(playerid), id);
	}
	else if (!strcmp(type, "name", true))
	{
	    new name[64];

	    if (sscanf(string, "s[64]", name))
	        return SendSyntaxMessage(playerid, "/editsignal [id] [name] [new name]");

	    //format(SignalData[id][signalName], 64, name);
	    strpack(SignalData[id][signalName], name, 64 char);

	    Signal_Save(id);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับชื่อของ Radio Tower ไอดี: %d เป็น \"%s\"", ReturnPlayerName(playerid), id, name);
	}
	else if (!strcmp(type, "range", true))
	{

	    new num;

	    if (sscanf(string, "d", num))
	        return SendSyntaxMessage(playerid, "/editsignal [id] [range] [number]");

	    SignalData[id][signalRange] = num;
	    Signal_Save(id);

	    SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับระยะสัญญาณของ Radio Tower ไอดี: %d", ReturnPlayerName(playerid), id);
	}
	return 1;
}

CMD:destroysignal(playerid, params[])
{
	new
	    id = 0;

    if (playerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroysignal [signal id]");

	if ((id < 0 || id >= MAX_SIGNALTOWER) || !SignalData[id][signalExists])
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณระบุไอดี Radio Tower ไม่ถูกต้อง");

	Signal_Delete(id);
	SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ประสบความสำเร็จในการทำลาย Radio Tower ไอดี: %d", id);
	return 1;
}
*/
CMD:goto(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;
	if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/goto [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	GetPlayerPos(targetid, x, y, z);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
	else {
		if (playerData[playerid][pFreeze])
		{
		    KillTimer(playerData[playerid][pFreezeTimer]);
		    playerData[playerid][pFreeze] = 0;
		}
		SetPlayerPos(playerid, x, y ,z);
	}
    playerData[playerid][pInterior] = playerData[targetid][pInterior];
    SetPlayerInterior(playerid, playerData[targetid][pInterior]);

    playerData[playerid][pWorld] = playerData[targetid][pWorld];
    SetPlayerVirtualWorld(playerid, playerData[targetid][pWorld]);

    playerData[playerid][pLocal] = playerData[targetid][pLocal];

    HouseEntered[playerid] = HouseEntered[targetid];

    BizEntered[playerid] = BizEntered[targetid];

 	SendClientMessageEx(playerid, COLOR_GRAD1, "คุณเคลื่อนย้ายไปหา %s สำเร็จ", ReturnPlayerName(targetid));
	return 1;
}

CMD:gotocar(playerid, params[])
{
	new vehicleid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/gotocar [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:getcar(playerid, params[])
{
	new vehicleid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/getcar [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x, y - 2, z + 2);

	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	return 1;
}


CMD:gethere(playerid, params[])
{
	new targetid, Float:x, Float:y, Float:z;
	if (playerData[playerid][pAdmin] < 1) return  SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/gethere [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	GetPlayerPos(playerid, x, y, z);
	if(GetPlayerState(targetid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(targetid), x, y, z);
	else {
		if (playerData[targetid][pFreeze])
		{
		    KillTimer(playerData[targetid][pFreezeTimer]);
		    playerData[targetid][pFreeze] = 0;
		}
		SetPlayerPos(targetid, x, y ,z);
	}
    playerData[targetid][pInterior] = playerData[playerid][pInterior];
    SetPlayerInterior(targetid, playerData[playerid][pInterior]);

    playerData[targetid][pWorld] = playerData[playerid][pWorld];
    SetPlayerVirtualWorld(targetid, playerData[playerid][pWorld]);

    playerData[targetid][pLocal] = playerData[playerid][pLocal];

    HouseEntered[targetid] = HouseEntered[playerid];

    BizEntered[targetid] = BizEntered[playerid];

    Log_Write("logs/admin_action.txt", "[%s] [/gethere] %s target: %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid));

 	SendClientMessageEx(targetid, COLOR_WHITE, "คุณได้รับการเคลื่อนย้ายโดยผู้ดูแล %s", ReturnPlayerName(playerid));
	return 1;
}

CMD:freeze(playerid, params[])
{
	new
	    userid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/freeze [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	TogglePlayerControllable(userid, 0);
	GameTextForPlayer(userid, "~w~Now you freeze.", 2000, 3);
	//SendClientMessageEx(playerid, "คุณได้แช่แข็งการเคลื่อนไหวของ %s", ReturnRealName(userid));
	SendAdminAlert(COLOR_RED, "AdmCmd: %s ถูกแช่แข็งการเคลื่อนไหวโดยผู้ดูแล %s", ReturnRealName(userid), ReturnPlayerName(playerid));
	return 1;
}

CMD:slap(playerid, params[])
{
	new targetid,Float:slx, Float:sly, Float:slz;
	if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/slap [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	GetPlayerPos(targetid, slx, sly, slz);
	SetPlayerPos(targetid, slx, sly, slz+5);
	PlayerPlaySound(targetid, 1130, slx, sly, slz+5);
	return 1;
}

CMD:forcerespawn(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    
    new targetid;
    
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/forcerespawn [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	ResetPlayer(targetid);
	ResetDamages(targetid);
	isDeathmode{targetid} = false;
	deathtime[targetid] = 0;
	MedicBill[targetid] = 0;
	isInjuredmode{targetid}=false;
	playerData[targetid][pHealth]=25;
	bf_off(player_bf[targetid], IS_PLAYER_SPAWNED);
	SpawnPlayer(targetid);

	return 1;
}

CMD:a_helpup(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    
    new targetid;
    
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/a_helpup [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	ResetPlayer(targetid);
	ResetDamages(targetid);
	knotime[targetid]=0;
	isKNOmode{targetid}=false;
	ClearAnimations(targetid);

	SetPlayerHealth(targetid, 50);

	SendClientMessageEx(targetid, COLOR_GREEN2, "คุณได้ถูกทำการช่วยเหลือจากการหมดสติโดยผู้ดูแล %s", ReturnPlayerName(playerid));
	SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้ทำการช่วยเหลือ %s จากการหมดสติด้วยคำสั่งผู้ดูแล", ReturnPlayerName(targetid));

	return 1;
}

CMD:setplayerspawn(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

    new targetid;

	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/setplayerspawn [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

    MedicBill[targetid] = 0;
	SetPlayerSpawn(targetid);

	return 1;
}

CMD:unfreeze(playerid, params[])
{
	new
	    userid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/unfreeze [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

    playerData[playerid][pFreeze] = 0;
    GameTextForPlayer(userid, "~w~Now you un-freeze.", 2000, 3);
	TogglePlayerControllable(userid, 1);
	SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s ถูกทำปลดจากการแช่แข็งโดยผู้ดูแล %s", ReturnPlayerName(userid), ReturnPlayerName(playerid));
	//SendAdminAction(playerid, "คุณปลดแช่แข็งการเคลื่อนไหวของ %s", ReturnRealName(userid));
	return 1;
}

CMD:clearpos(playerid)
{
	if(playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	HouseEntered[playerid]=-1;
	BizEntered[playerid]=-1;
	playerData[playerid][pInterior] = 0;
	playerData[playerid][pWorld] = 0;
	playerData[playerid][pLocal] = 255;

	return 1;
}

CMD:gotols(playerid)
{
	if(playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	
	HouseEntered[playerid]=-1;
	BizEntered[playerid]=-1;
	playerData[playerid][pInterior] = 0;
	playerData[playerid][pWorld] = 0;
	playerData[playerid][pLocal] = 255;
					
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้เคลื่อนย้ายไปยัง Los Santos!");
	return 1;
}
CMD:gotosf(playerid)
{
    if(playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	SetPlayerPos(playerid, -1973.3322,138.0420,27.6875);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	
	HouseEntered[playerid]=-1;
	BizEntered[playerid]=-1;
	playerData[playerid][pInterior] = 0;
	playerData[playerid][pWorld] = 0;
	playerData[playerid][pLocal] = 255;
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้เคลื่อนย้ายไปยัง San Fierro!");
	return 1;
}

CMD:gopos(playerid, params[]) {
    new Float:Pos[3], int;
	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "fffi", Pos[0], Pos[1], Pos[2], int)) return SendSyntaxMessage(playerid, "/gopos [x] [y] [z] [int]");
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, int);
	playerData[playerid][pInterior] = int;
	return 1;
}

CMD:gocp(playerid, params[]) {
	if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE) return 1;
	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	SetPlayerPos(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:gorcp(playerid, params[]) {
	if(playerData[playerid][pCP_Type] == -1) return 1;
	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	SetPlayerPos(playerid, playerData[playerid][pCP_X], playerData[playerid][pCP_Y], playerData[playerid][pCP_Z]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:duty(playerid, params[])
{
	new type = GetFactionType(playerid);
 	if (type == FACTION_TYPE_POLICE)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.9730,30.8543,1019.1917) && playerData[playerid][pLocal] == 101 || IsPlayerInRangeOfPoint(playerid, 3.0, 1400.1931,-3.2171,1073.8362) && playerData[playerid][pLocal] == 104 || IsPlayerInRangeOfPoint(playerid, 3.0, 254.3041,77.2286,1003.6406) && playerData[playerid][pLocal] == 106 || IsPlayerInRangeOfPoint(playerid, 3.0, 1408.5481,-6.1385,1000.9465) && playerData[playerid][pLocal] == 255 || IsPlayerInRangeOfPoint(playerid, 3.0, 1391.6810,-2.5625,1001.3486) && playerData[playerid][pLocal] == 255 || IsPlayerInRangeOfPoint(playerid, 3.0, 1275.6534,-1115.0360,23.9127) && playerData[playerid][pLocal] == 255) {

	  		if (!playerData[playerid][pOnDuty])
	    	{

				new roster[20];
				if(sscanf(params, "s[20]", roster))
					return SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /duty [ชื่อหน่วยเรียกขาน]");

				if (!MDC_CheckExists(roster)) {
					return SendClientMessage(playerid, COLOR_LIGHTRED, "ชื่อหน่วยไม่ถูกต้องตามแบบที่เตรียมไว้!");
				}

				new count;
				foreach(new i : Player)
				{
					if(playerData[i][pFaction] != playerData[playerid][pFaction])
						continue;

					if (playerData[i][pOnDuty] && isequal(playerData[i][pDutyUnitName], roster, true)) 
					{
						count++;
					}
				}

				format(playerData[playerid][pDutyUnitName], 20, roster);
				playerData[playerid][pOnDuty] = true;

				if (count == 1) {
					ConfirmDialog(playerid, "การยืนยัน", "{FFFFFF}หน่วยที่ระบุมีสมาชิกท่านอื่นอ้างสิทธิ์ใช้งานแล้ว คุณต้องการเข้าร่วมหรือไม่?", "OnDuty");
					return 1;
				}
				else if (count == 2) {
					playerData[playerid][pOnDuty] = false;
					SendClientMessage(playerid, COLOR_LIGHTRED, "หน่วยที่ระบุไม่มีที่ว่างสำหรับคุณ");
					return 1;
				}

                ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 41, 5000);
                GivePlayerWeaponEx(playerid, 3, 1);
                GivePlayerWeaponEx(playerid, 24, 150);

	          	playerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
	        	if(playerData[playerid][pChar] > 0)
	       		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s หยิบตราและอาวุธจากล็อกเกอร์ของเขา", ReturnRealName(playerid));
				SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้ภายใต้ %s! **", Faction_GetRank(playerid), ReturnRealName(playerid), playerData[playerid][pDutyUnitName]);
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				playerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SetPlayerSkin(playerid, playerData[playerid][pModel]);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เก็บตราและอาวุธเข้าล็อกเกอร์ของเขา", ReturnRealName(playerid));
				SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "** HQ: %s %s ได้ออกจากการปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
 	else if (type == FACTION_TYPE_SASD)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1385.8762,-21.8015,1001.1614) && playerData[playerid][pLocal] == 105) {

	  		if (!playerData[playerid][pOnDuty])
	    	{
                ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 41, 5000);
                GivePlayerWeaponEx(playerid, 3, 1);
                GivePlayerWeaponEx(playerid, 24, 150);

	          	playerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
	        	if(playerData[playerid][pChar] > 0)
	       		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s หยิบตราและอาวุธจากล็อกเกอร์ของเขา", ReturnRealName(playerid));
				SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				playerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SetPlayerSkin(playerid, playerData[playerid][pModel]);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เก็บตราและอาวุธเข้าล็อกเกอร์ของเขา", ReturnRealName(playerid));
				SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "** HQ: %s %s ได้ออกจากการปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
	else if (type == FACTION_TYPE_MEDIC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 542.2574,218.4133,1019.9844) && playerData[playerid][pLocal] == 103 || IsPlayerInRangeOfPoint(playerid, 3.0, 1021.6387,1829.9999,1001.0859) && playerData[playerid][pLocal] == 255) {
	  		if (!playerData[playerid][pOnDuty])
	    	{
	    	    ResetWeapons(playerid);
				GivePlayerWeaponEx(playerid, 42, 5000);
	          	playerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
				SendFactionMessage(FACTION_TYPE_MEDIC, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				playerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SendFactionMessage(FACTION_TYPE_MEDIC, COLOR_RADIO, "** HQ: %s %s ได้ออกจากการปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));

	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
	else if (type == FACTION_TYPE_SADOC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 254.3545,77.2077,1003.6406) && playerData[playerid][pLocal] == 107) {
	  		if (!playerData[playerid][pOnDuty])
	    	{
	    	    ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 41, 5000);
                GivePlayerWeaponEx(playerid, 3, 1);
                GivePlayerWeaponEx(playerid, 24, 150);
                
                
	          	playerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
				SendFactionMessage(FACTION_TYPE_SADOC, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				playerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SendFactionMessage(FACTION_TYPE_SADOC, COLOR_RADIO, "** HQ: %s %s ได้ออกจากการปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));

	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
	else if (type == FACTION_TYPE_NEWS)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1537.0662,-1348.2950,290.2202) && playerData[playerid][pLocal] == 110) {
	  		if (!playerData[playerid][pOnDuty])
	    	{
	    	    ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 43, 500);
	          	playerData[playerid][pOnDuty] = true;
	        	SetFactionColor(playerid);
				SendFactionMessage(FACTION_TYPE_SADOC, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				playerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SendFactionMessage(FACTION_TYPE_SADOC, COLOR_RADIO, "** HQ: %s %s ได้ออกจากการปฏิบัติหน้าที่ในขณะนี้! **", Faction_GetRank(playerid), ReturnRealName(playerid));

	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ !");

	return 1;
}

CMD:uniform(playerid, params[])
{
	new skinid, type = GetFactionType(playerid);

 	if (type == FACTION_TYPE_POLICE)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.9730,30.8543,1019.1917) && playerData[playerid][pLocal] == 101 || IsPlayerInRangeOfPoint(playerid, 3.0, 1400.1931,-3.2171,1073.8362) && playerData[playerid][pLocal] == 104 || IsPlayerInRangeOfPoint(playerid, 3.0, 254.3041,77.2286,1003.6406) && playerData[playerid][pLocal] == 106) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniform [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Off-duty uniform ");
				SendClientMessage(playerid, COLOR_GRAD4, "1-9: Officer\t\t10: Motorbike");
				SendClientMessage(playerid, COLOR_GRAD4, "11: SWAT\t\t12-14: Plain clothes");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 14) return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดีต้องไม่ต่ำกว่า 0 หรือมากกว่า 14 !");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, playerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 265);
					playerData[playerid][pChar] = 265;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 266);
					playerData[playerid][pChar] = 266;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 267);
					playerData[playerid][pChar] = 267;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 280);
					playerData[playerid][pChar] = 280;
			    }
			    case 5:
			    {
				  	SetPlayerSkin(playerid, 281);
					playerData[playerid][pChar] = 281;
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 300);
					playerData[playerid][pChar] = 300;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 301);
					playerData[playerid][pChar] = 301;
			    }
			    case 8:
			    {
				  	SetPlayerSkin(playerid, 306);
					playerData[playerid][pChar] = 306;
			    }
			    case 9:
			    {
				  	SetPlayerSkin(playerid, 307);
					playerData[playerid][pChar] = 307;
			    }
			    case 10:
			    {
				  	SetPlayerSkin(playerid, 284);
					playerData[playerid][pChar] = 284;
			    }
			    case 11:
			    {
					if(playerData[playerid][pSwat]) {
					  	SetPlayerSkin(playerid, 285);
						playerData[playerid][pChar] = 285;
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับหน่วย SWAT เท่านั้น!");
			    }
			    case 12:
			    {
				  	SetPlayerSkin(playerid, 303);
					playerData[playerid][pChar] = 303;
			    }
			    case 13:
			    {
				  	SetPlayerSkin(playerid, 304);
					playerData[playerid][pChar] = 304;
			    }
			    case 14:
			    {
				  	SetPlayerSkin(playerid, 305);
					playerData[playerid][pChar] = 305;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
 	else if (type == FACTION_TYPE_SASD)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1385.8762,-21.8015,1001.1614) && playerData[playerid][pLocal] == 105) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniform [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Off-duty uniform ");
				SendClientMessage(playerid, COLOR_GRAD4, "1-4: Officer\t\t5: SWAT");
				SendClientMessage(playerid, COLOR_GRAD4, "6-8: Plain clothes");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 8) return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดีต้องไม่ต่ำกว่า 0 หรือมากกว่า 8 !");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, playerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 288);
					playerData[playerid][pChar] = 288;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 283);
					playerData[playerid][pChar] = 283;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 310);
					playerData[playerid][pChar] = 310;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 311);
					playerData[playerid][pChar] = 311;
			    }
			    case 5:
			    {
					if(playerData[playerid][pSwat]) {
					  	SetPlayerSkin(playerid, 285);
						playerData[playerid][pChar] = 285;
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับหน่วย SWAT เท่านั้น!");
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 303);
					playerData[playerid][pChar] = 303;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 304);
					playerData[playerid][pChar] = 304;
			    }
			    case 8:
			    {
				  	SetPlayerSkin(playerid, 305);
					playerData[playerid][pChar] = 305;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
 	else if (type == FACTION_TYPE_SADOC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 254.3545,77.2077,1003.6406) && playerData[playerid][pLocal] == 107) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniform [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Off-duty uniform ");
				SendClientMessage(playerid, COLOR_GRAD4, "1-4: Officer");
				SendClientMessage(playerid, COLOR_GRAD4, "5-7: Plain clothes");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 7) return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดีต้องไม่ต่ำกว่า 0 หรือมากกว่า 7 !");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, playerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 282);
					playerData[playerid][pChar] = 282;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 302);
					playerData[playerid][pChar] = 302;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 309);
					playerData[playerid][pChar] = 309;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 311);
					playerData[playerid][pChar] = 311;
			    }
			    case 5:
			    {
				  	SetPlayerSkin(playerid, 303);
					playerData[playerid][pChar] = 303;
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 304);
					playerData[playerid][pChar] = 304;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 305);
					playerData[playerid][pChar] = 305;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
	else if (type == FACTION_TYPE_MEDIC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 542.2574,218.4133,1019.9844) && playerData[playerid][pLocal] == 103) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniform [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Off-duty uniform ");
				SendClientMessage(playerid, COLOR_GRAD4, "1-7: Medic");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 7) return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดีต้องไม่ต่ำกว่า 0 หรือมากกว่า 8 !");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, playerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 274);
					playerData[playerid][pChar] = 274;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 275);
					playerData[playerid][pChar] = 275;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 276);
					playerData[playerid][pChar] = 276;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 308);
					playerData[playerid][pChar] = 308;
			    }
			    case 5:
			    {
				  	SetPlayerSkin(playerid, 277);
					playerData[playerid][pChar] = 277;
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 278);
					playerData[playerid][pChar] = 278;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 70);
					playerData[playerid][pChar] = 70;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");
 	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่เจ้าหน้าที่ !");

	return 1;
}

/*CMD:clothes(playerid, params[])
{
 	if (GetFactionType(playerid) == FACTION_TYPE_POLICE)
 	{
 	    if (IsNearFactionSpawn(playerid)) {

			new clothid;
	  		if (sscanf(params, "d", clothid))
	    		return SendSyntaxMessage(playerid, "/clothes [id(1-12)]");

			switch(clothid)
			{
			    case 0:
			}

 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ตำรวจ !");

	return 1;
}*/

CMD:near(playerid, params[])
{
	new
	    id = -1;

    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

    if ((id = GetPlayerClosestRadioTower(playerid)) != -1)
	    SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณกำลังยืนอยู่ใกล้ Radio Tower ไอดี: %d", id);

    if ((id = nearHouse_var[playerid]) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณกำลังยืนอยู่ใกล้ House ไอดี: %d", HouseInfo[id][hID]);

    if ((id = nearBiz_var[playerid]) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณกำลังยืนอยู่ใกล้ Business ไอดี: %d", BizInfo[id][bID]);

    if ((id = Warehouse_Nearest(playerid)) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณกำลังยืนอยู่ใกล้ Warehouse ไอดี: %d", id);

	return 1;
}

CMD:weapons(playerid, params[])
{
    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");


	SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อทิ้งอาวุธของคุณพิมพ์ /dropgun [weapon ID]");

	for (new i = 0; i < 13; i ++) {
	    if (playerData[playerid][pGuns][i] != 0 && playerData[playerid][pAmmo][i] != 0) {

			if(playerData[playerid][pGun2] == playerData[playerid][pGuns][i]) {
				if(playerData[playerid][pPLicense]) {
					SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Weapon:[%s] - Ammo:[%d] - ใบอนุญาติหมายเลข %d", playerData[playerid][pGuns][i], ReturnWeaponName(playerData[playerid][pGuns][i]), playerData[playerid][pAmmo][i], playerData[playerid][pPLicense]);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Weapon:[%s] - Ammo:[%d] - ไม่มีใบอนุญาติ", playerData[playerid][pGuns][i], ReturnWeaponName(playerData[playerid][pGuns][i]), playerData[playerid][pAmmo][i]);
			}
			else if(playerData[playerid][pGun3] == playerData[playerid][pGuns][i]) {
				if(playerData[playerid][pSLicense]) {
					SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Weapon:[%s] - Ammo:[%d] - ใบอนุญาติหมายเลข %d", playerData[playerid][pGuns][i], ReturnWeaponName(playerData[playerid][pGuns][i]), playerData[playerid][pAmmo][i], playerData[playerid][pSLicense]);
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Weapon:[%s] - Ammo:[%d] - ไม่มีใบอนุญาติ", playerData[playerid][pGuns][i], ReturnWeaponName(playerData[playerid][pGuns][i]), playerData[playerid][pAmmo][i]);
			}
			else {
				SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Weapon:[%s] - Ammo:[%d]", playerData[playerid][pGuns][i], ReturnWeaponName(playerData[playerid][pGuns][i]), playerData[playerid][pAmmo][i]);
			}

		}
	}
	return 1;
}

CMD:weapon(playerid, params[])
{
	new option[16], weaponname[64], value[64];

	if (sscanf(params, "s[16]S()[64]S()[64]", option, weaponname, value)) {
	//{FF6347}
		SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [adjust / bone / hide / reset]");
	    return 1;
	}

	if(!strcmp(option, "adjust", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {
					SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(weaponid), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					EditAttachedObject(playerid, FREESLOT9);

					SetPVarInt(playerid, "AttachSlot", slot);

				 	bf_on(player_bf[playerid], IS_PLAYER_EDITWEAPON);

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" อาวุธนี้ไม่รองรับการแก้ไข");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่รู้จักพารามิเตอร์ %s", weaponname);
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [adjust] [weapon name/id]");
	}
	else if(!strcmp(option, "bone", true))
	{
	    new boneid, weaponid = GetWeaponByName(weaponname);
		if(strlen(weaponname) && !sscanf(params, "{s[16]S()[64]}d", boneid)) {

			if(boneid < 1 || boneid > 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" กระดูกไม่ต่ำกว่า 1 หรือมากกว่า 10");

			if(weaponid != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {

			        PlayerAttachWeapon[playerid][slot][awBone] = boneid;

					SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(weaponid), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					EditAttachedObject(playerid, FREESLOT9);

					SetPVarInt(playerid, "AttachSlot", slot);

				 	bf_on(player_bf[playerid], IS_PLAYER_EDITWEAPON);

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" อาวุธนี้ไม่รองรับการแก้ไข");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่รู้จักพารามิเตอร์ %s", weaponname);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [bone] [weapon name/id] [bone id]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" Available bone: 1 (กระดูกสันหลัง), 3 (แขนซ้าย), 4 (แขนขวา), 5 (มือซ้าย), 6 (มือขวา)");
            SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" 7 (ต้นแขนซ้าย), 8 (ต้นขาขวา), 9 (เท้าซ้าย) และ 10 (เท้าขวา)");
		}
	}
	else if(!strcmp(option, "hide", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {

			        if(weaponid > 24) return SendClientMessage(playerid, COLOR_LIGHTRED, "สามารถระบุได้เฉพาะอาวุธที่มีขนาดเล็กเท่านั้น");

					if(PlayerAttachWeapon[playerid][slot][awHide])
					{
					    PlayerAttachWeapon[playerid][slot][awHide] = 0;
					    SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณได้ตั้งอาวุธหมายเลข %d ให้แสดง", weaponid);
					}
					else {
					    PlayerAttachWeapon[playerid][slot][awHide] = 1;
					    SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณได้ตั้งอาวุธหมายเลข %d ให้ไม่แสดง", weaponid);
					}
			        UpdatePlayerAttachWeapon(playerid, slot);
     				cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" อาวุธนี้ไม่รองรับการแก้ไข");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่รู้จักพารามิเตอร์ %s", weaponname);
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [hide] [weapon name/id]");
	}
	else if(!strcmp(option, "reset", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {
			        SetPVarInt(playerid, "ResetWeaponid", weaponid);
					SetPVarInt(playerid, "ResetWeaponSlot", slot);
					Dialog_Show(playerid, WeaponReset, DIALOG_STYLE_MSGBOX, "Are you sure?", "คุณแน่ใจหรือที่จะรีเซตการสวมใส่อาวุธนี้?", "Yes", "No");
			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" อาวุธนี้ไม่รองรับการแก้ไข");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่รู้จักพารามิเตอร์ %s", weaponname);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [reset] [weapon name/id]");
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /weapon [adjust / bone / hide / reset]");
	}
	return 1;
}

Dialog:WeaponReset(playerid, response, listitem, inputtext[])
{
	if(response) {
		new slot = GetPVarInt(playerid, "ResetWeaponSlot");
		PlayerAttachWeapon[playerid][slot][awHide] = 0;
		PlayerAttachWeapon[playerid][slot][awBone] = 1;
		PlayerAttachWeapon[playerid][slot][aPx] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPy] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPz] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPrx] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPry] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPrz] = 0.0;
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" การสวมใส่ %s ของคุณถูกรีเซต", ReturnWeaponName(GetPVarInt(playerid, "ResetWeaponid")));
		UpdatePlayerAttachWeapon(playerid, slot);
		cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));
	}
	DeletePVar(playerid, "ResetWeaponSlot");
	DeletePVar(playerid, "ResetWeaponid");
	return 1;
}

CMD:passgun(playerid, params[])
{
	new userid, weaponid;

	if (sscanf(params, "ui", userid, weaponid))
		return SendSyntaxMessage(playerid, "/passgun [ไอดีผู้เล่น] [weaponid]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{dS()[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถให้อาวุธกับตัวเองได้");

	if (weaponid && playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {

		if(playerData[playerid][pGun1] == weaponid)
		{
			GivePlayerValidWeapon(userid, playerData[playerid][pGun1], playerData[playerid][pAmmo1]);
			SQL_SaveCharacter(userid);
			playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;

			SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้ส่งมอบอาวุธ %s ของคุณให้กับ %s", ReturnWeaponName(playerData[playerid][pGun1]), ReturnRealName(userid));
			SendClientMessageEx(userid, COLOR_YELLOW2, "คุณได้รับอาวุธ %s จาก %s", ReturnWeaponName(playerData[playerid][pGun1]), ReturnRealName(playerid));
		}
		else if(playerData[playerid][pGun2] == weaponid)
		{
 			GivePlayerValidWeapon(userid, playerData[playerid][pGun2], playerData[playerid][pAmmo2]);
			SQL_SaveCharacter(userid);
         	playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0, playerData[playerid][pPLicense] = 0;
			
			SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้ส่งมอบอาวุธ %s ของคุณให้กับ %s", ReturnWeaponName(playerData[playerid][pGun2]), ReturnRealName(userid));
			SendClientMessageEx(userid, COLOR_YELLOW2, "คุณได้รับอาวุธ %s จาก %s", ReturnWeaponName(playerData[playerid][pGun2]), ReturnRealName(playerid));
		}
		else if(playerData[playerid][pGun3] == weaponid)
		{
			GivePlayerValidWeapon(userid, playerData[playerid][pGun3], playerData[playerid][pAmmo3]);
			SQL_SaveCharacter(userid);
			playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0, playerData[playerid][pSLicense] = 0;

			SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้ส่งมอบอาวุธ %s ของคุณให้กับ %s", ReturnWeaponName(playerData[playerid][pGun3]), ReturnRealName(userid));
			SendClientMessageEx(userid, COLOR_YELLOW2, "คุณได้รับอาวุธ %s จาก %s", ReturnWeaponName(playerData[playerid][pGun3]), ReturnRealName(playerid));
		}

		new temp_holdweapon = GetPlayerWeapon(playerid);
		RemoveWeapon(playerid, weaponid);
		if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
		else SetPlayerArmedWeapon(playerid, temp_holdweapon);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");
	return 1;
}

CMD:dropgun(playerid, params[])
{
	new weaponid, bool:success;

	if (sscanf(params, "d", weaponid))
	    return SendSyntaxMessage(playerid, "/dropgun [weapon ID]");

	for (new i = 0; i < 13; i ++) {
	    if (playerData[playerid][pGuns][i] == weaponid) {

		    if(playerData[playerid][pGuns][i] == playerData[playerid][pGun1]) {
		        Log_Write("logs/removegun.txt", "[%s] %s: %s(%d)", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun1]), playerData[playerid][pAmmo1]);
		        playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;
			}
		    if(playerData[playerid][pGuns][i] == playerData[playerid][pGun2]) {
		        Log_Write("logs/removegun.txt", "[%s] %s: %s(%d) [LC:%d]", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun2]), playerData[playerid][pAmmo2], playerData[playerid][pPLicense]);
		        playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0, playerData[playerid][pPLicense] = 0;
			}
		    if(playerData[playerid][pGuns][i] == playerData[playerid][pGun3]) {
		        Log_Write("logs/removegun.txt", "[%s] %s: %s(%d) [LC:%d]", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun3]), playerData[playerid][pAmmo3], playerData[playerid][pSLicense]);
		        playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0, playerData[playerid][pSLicense] = 0;
			}
			new temp_holdweapon = GetPlayerWeapon(playerid);
			RemoveWeapon(playerid, weaponid);
			if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
			else SetPlayerArmedWeapon(playerid, temp_holdweapon);
			
			format(szString, sizeof(szString), "* %s ได้ทิ้ง %s", ReturnRealName(playerid), ReturnWeaponName(temp_holdweapon));
			SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
	    	//ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
         	/*#define SPEED (4.0)
			#define Z_SPEED (4.0)
			#define GRAVITY (13.0)

			new Float:x, Float:y, Float:z, Float:ang;
			GetPlayerPos(playerid, x, y, z);

			GetPlayerFacingAngle(playerid, ang);
			new object = CreateObject(GetGunObjectID(weaponid), x, y - 0.5 * floatcos(-(ang + 90.0), degrees), z, 93.7, 120.0, ang + 60.0);
			PHY_InitObject(object);
			PHY_SetObjectVelocity(object, SPEED * floatsin(-ang, degrees), SPEED * floatcos(-ang, degrees), Z_SPEED);
			PHY_SetObjectFriction(object, 100); // This will stop the object when it touchs the ground.
			PHY_SetObjectGravity(object, GRAVITY);
			PHY_SetObjectZBound(object, z - 1.0, _, 0.0);
			ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	    	SetTimerEx("DeleteObject", 1500, false, "d", object);*/
	    	success = true;
			break;
		}
	}

	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธนี้");

	return 1;
}

CMD:leavegun(playerid, params[])
{

    if( GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถวางอาวุธไว้ที่นี่ได้");

  	if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK && !isDeathmode{playerid} && !isInjuredmode{playerid} && !isKNOmode{playerid})
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในท่าหมอบ");

	new
	    weaponid,
	    Float:x,
	    Float:y,
	    Float:z
	;

	if (sscanf(params, "d", weaponid))
	    return SendClientMessage(playerid, COLOR_WHITE, "/leavegun weapon_id (รายชื่อไอดีใน /weapons)");

    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

	if (weaponid && playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {

  		GetPlayerPos(playerid, x, y, z);

		if(playerData[playerid][pGun1] == weaponid)
		{
			DropGun(playerid, playerData[playerid][pGun1], playerData[playerid][pAmmo1], _, x, y, z);
			playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;
		}
		else if(playerData[playerid][pGun2] == weaponid)
		{
        	DropGun(playerid, playerData[playerid][pGun2], playerData[playerid][pAmmo2], playerData[playerid][pPLicense], x, y, z);
         	playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0, playerData[playerid][pPLicense] = 0;
		}
		else if(playerData[playerid][pGun3] == weaponid)
		{
			DropGun(playerid, playerData[playerid][pGun3], playerData[playerid][pAmmo3], playerData[playerid][pSLicense], x, y, z);
			playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0, playerData[playerid][pSLicense] = 0;
		}

		new temp_holdweapon = GetPlayerWeapon(playerid);
		RemoveWeapon(playerid, weaponid);
		if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
		else SetPlayerArmedWeapon(playerid, temp_holdweapon);
			
	 	SendClientMessage(playerid, COLOR_WHITE, "/grabgun เพื่อเก็บกลับมา");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"อาวุธจะหายไปหากไม่เก็บขึ้นมาใน 30 นาที");
		
		format(szString, sizeof(szString), "* %s ได้ทิ้ง %s", ReturnRealName(playerid), ReturnWeaponName(temp_holdweapon));
		SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");

	return 1;
}

/*CMD:throwgun(playerid, params[])
{

    if( GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถวางอาวุธไว้ที่นี่ได้");

  	if( GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK )
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในท่ายืน");

	new
	    weaponid;

	if (sscanf(params, "d", weaponid))
	    return SendClientMessage(playerid, COLOR_WHITE, "/leavegun weapon_id (รายชื่อไอดีใน /weapons)");

    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

	if (playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {

		if(playerData[playerid][pGun1] == weaponid)
		{
			ThrowGun(playerid, playerData[playerid][pGun1], playerData[playerid][pAmmo1]);
			playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;
		}
		else if(playerData[playerid][pGun2] == weaponid)
		{
        	ThrowGun(playerid, playerData[playerid][pGun2], playerData[playerid][pAmmo2]);
         	playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0;
		}
		else if(playerData[playerid][pGun3] == weaponid)
		{
			ThrowGun(playerid, playerData[playerid][pGun3], playerData[playerid][pAmmo3]);
			playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0;
		}

	 	RemoveWeapon(playerid, weaponid);
	 	SendClientMessage(playerid, COLOR_WHITE, "/grabgun เพื่อเก็บกลับมา");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"อาวุธจะหายไปหากไม่เก็บขึ้นมาใน 30 นาที");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");

	return 1;
}*/

CMD:grabgun(playerid, params[])
{
    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

	new
	    id;

	if((id = DropGun_Nearest(playerid)) != -1)
	{
	    //SendClientMessageEx(playerid, COLOR_GREY, "คุณได้เก็บ %s", ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));
		//if((IsMelee(GunInfo[id][DropGunAmmount][0]) && IsMeleeSlotTaken(playerid)) || (IsPrimary(GunInfo[id][DropGunAmmount][0]) && IsPrimarySlotTaken(playerid)) || (IsSecondary(GunInfo[id][DropGunAmmount][0]) && IsSecondarySlotTaken(playerid))) return SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", GunInfo[id][DropGunAmmount][0], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));
		/*if(IsPrimary(GunInfo[id][DropGunAmmount][0]) && IsPrimarySlotTaken(playerid)) return SendClientMessage(playerid, -1, "สล็อตอาวุธหลักของคุณถูกใช้แล้ว");
		if(IsSecondary(GunInfo[id][DropGunAmmount][0]) && IsSecondarySlotTaken(playerid)) return SendClientMessage(playerid, -1, "สล็อตอาวุธรองของคุณถูกใช้แล้ว");
*/
		new weapontaken = 0;
		if((weapontaken = ExistWeaponSlot(playerid, GunInfo[id][DropGunAmmount][0])) != 0) {
			SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken));
			return 1;
		}
        //if(playerData[playerid][pGuns][g_aWeaponSlots[GunInfo[id][DropGunAmmount][0]]] != 0) return SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", GunInfo[id][DropGunAmmount][0], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));

        if(GunInfo[id][DropLicense]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) grab %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]), GunInfo[id][DropGunAmmount][1], GunInfo[id][DropLicense]);
        else Log_Write("logs/weapon.txt", "[%s] %s (%s) grab %s(%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]), GunInfo[id][DropGunAmmount][1], GunInfo[id][DropLicense]);

		GivePlayerValidWeapon(playerid, GunInfo[id][DropGunAmmount][0], GunInfo[id][DropGunAmmount][1], GunInfo[id][DropLicense]);
	    ResetDropGun(id);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, " ..ไม่มีอะไรรอบ ๆ ตัวคุณ");

	return 1;
}

CMD:openbiz(playerid, params[])
{
	new bouse = playerData[playerid][pPbiskey];
	if(bouse != -1 && strcmp(ReturnPlayerName(playerid), BizInfo[bouse][bOwner], true) == 0)
	{
		if(BizInfo[bouse][bActive]) {
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้นำเครื่องหมายการเปิดกิจการของคุณออกแล้ว");
			BizInfo[bouse][bActive]=0;
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้เปิดกิจการของคุณและมันได้ถูกทำเครื่องหมายเอาไว้");
			SendClientMessage(playerid, COLOR_LIGHTRED, "หวังว่าคุณจะช่วยทำให้บทบาทสมมุติประสบความสำเร็จในธุรกิจของคุณ");
			SendClientMessage(playerid, COLOR_LIGHTRED, "เพื่อไม่เป็นการสแปม /cad และเพื่อสิ้นสุดให้พิมพ์คำสั่งนี้อีกครั้งเพื่อนำเครื่องหมายออก");
			BizInfo[bouse][bActive]=1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "คุณต้องอยู่ในธุรกิจที่เป็นเจ้าของ");
	}
	return 1;
}

CMD:aopenbiz(playerid, params[])
{
	new bizid;
	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/aopenbiz [bizid]");
	bizid = GetBizSID(bizid);
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "ไอดีของธุรกิจไม่ถูกต้อง");

	if(BizInfo[bizid][bActive]) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ถอนเครื่องหมายเปิดของธุรกิจ %s", BizInfo[bizid][bInfo]);
		BizInfo[bizid][bActive]=0;
	}
	else {
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ตั้งเครื่องหมายเปิดให้กับธุรกิจ %s", BizInfo[bizid][bInfo]);
		BizInfo[bizid][bActive]=1;
	}
	return 1;
}

CMD:bizinfo(playerid, params[])
{
	new bouse = playerData[playerid][pPbiskey];
	if(bouse != -1)
	{
		PrintBizInfo(playerid,bouse);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่เจ้าของธุรกิจ");
	}
	return 1;
}

CMD:compprice(playerid, params[])
{
	new bouse = playerData[playerid][pPbiskey], price;
	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ใช่เจ้าของธุรกิจ");
	if (sscanf(params, "d", price)) return SendSyntaxMessage(playerid, "/compprice [จำนวน]");
	if(price < 0 || price > 20000) return SendClientMessage(playerid, COLOR_WHITE, "จำนวนที่น้อยที่สุดคือ $0 และจำนวนที่มากที่สุดคือ $20000");
	if(price > BizInfo[bouse][bTill]) return SendClientMessage(playerid, COLOR_WHITE, "เงินใน Cashbox ของคุณมีไม่เพียงพอ");

	BizInfo[bouse][bPriceProd] = price;
	SendClientMessageEx(playerid, COLOR_WHITE,  "การซื้อสินค้า $%d", BizInfo[bouse][bPriceProd]);
	UpdateBizInfo(bouse);
	return 1;
}

CMD:bizfee(playerid, params[])
{
	new bouse = playerData[playerid][pPbiskey], fee;
	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ใช่เจ้าของธุรกิจ");
    if (sscanf(params, "d", fee)) return SendSyntaxMessage(playerid, "/bizfee [จำนวน]");
	if(fee < 0 || fee > 50000) return SendClientMessage(playerid, COLOR_WHITE, "จำนวนที่น้อยที่สุดคือ $0 และจำนวนที่มากที่สุดคือ $50000");

	BizInfo[bouse][bEntranceCost] = fee;
	SendClientMessageEx(playerid, COLOR_WHITE,  "ค่าธรรมเนียมในการเข้า $%d", BizInfo[bouse][bEntranceCost]);
	UpdateBizInfo(bouse);
	return 1;
}

CMD:lock(playerid, params[])
{
	new
	    id = -1,
	    str[128],
		vehicleid,
		canlock;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (nearHouse_var[playerid] == -1) ? (HouseEntered[playerid]) : (nearHouse_var[playerid])) != -1)
	{
		if((HouseInfo[id][hSubid] != -1 && House_IsOwner(playerid, HouseInfo[id][hSubid])) || House_IsOwner(playerid, id) || playerData[playerid][pHouseKey] == id)
		{
		
			new
				Float:fDistance = FLOAT_INFINITY,
				i = -1
			;
			
			new data[furnitureE], p_virworld = GetPlayerVirtualWorld(playerid);
			for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
				if(!IsValidDynamicObject(x)) continue;
				if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == p_virworld && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
					if(data[fType] == TYPE_HOUSE && data[fHouseID] == id) {
						new
							Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);
		
						if (temp < fDistance)
						{
							fDistance = temp;
							i = x;
						}
					}
				}
			}
	
			if(i != -1 && fDistance < 3.0) {
			
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				
				if(data[fOpened] == 1) return SendClientMessage(playerid, COLOR_GREY, "โปรดปิดประตูก่อนที่จะล็อกมัน!");
				if(data[fLocked] == 0)
				{
					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					data[fLocked] = 1;
				}
				else if(data[fLocked] == 1)
				{
					GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					data[fLocked] = 0;
				}
				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				return 1;
			}

			if(HouseInfo[id][hLocked] == 1)
			{
				HouseInfo[id][hLocked] = 0;
				GameTextForPlayer(playerid, "~w~House ~g~Unlocked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(HouseInfo[id][hLocked] == 0)
			{
				HouseInfo[id][hLocked] = 1;
				GameTextForPlayer(playerid, "~w~House ~r~Locked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
			return 1;
		}
	}

	else if (!IsPlayerInAnyVehicle(playerid) && (id = (GarageEntered[playerid] == -1) ? Garage_Nearest(playerid) : (GarageEntered[playerid])) != -1)
	{
	    new garagetemp1[MAX_PLAYER_NAME+1];
	    strunpack(garagetemp1, GarageData[id][PlayerOwner]);
	        
        if((strlen(garagetemp1) && !strcmp(ReturnPlayerName(playerid), garagetemp1, true)))
		{
			new
			    Float:fDistance = FLOAT_INFINITY,
			    i = -1
			;
			new data[furnitureE], p_virworld = GetPlayerVirtualWorld(playerid);
			for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
				if(!IsValidDynamicObject(x)) continue;
				if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == p_virworld && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
					if(data[fType] == TYPE_BUSINESS && data[fHouseID] == id) {
						new
							Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);

						if (temp < fDistance)
						{
							fDistance = temp;
							i = x;
						}
					}
				}
			}

			if(i != -1 && fDistance < 3) {
				
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				
				if(data[fOpened] == 1) return SendClientMessage(playerid, COLOR_GREY, "โปรดปิดประตูก่อนที่จะล็อกมัน!");
				if(data[fLocked] == 0)
				{
					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					data[fLocked] = 1;
				}
				else if(data[fLocked] == 1)
				{
					GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					data[fLocked] = 0;
				}
				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				return 1;
			}

			if(GarageData[id][gLocked] == 1)
			{
				GarageData[id][gLocked] = 0;
				GameTextForPlayer(playerid, "~w~Garage ~g~Unlocked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(GarageData[id][gLocked] == 0)
			{
				GarageData[id][gLocked] = 1;
				GameTextForPlayer(playerid, "~w~Garage ~r~Locked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
			return 1;
		}
	}

	else if (!IsPlayerInAnyVehicle(playerid) && (id = (BizEntered[playerid] == -1) ? (nearBiz_var[playerid]) : (BizEntered[playerid])) != -1)
	{
		if (Biz_IsOwner(playerid, id) || playerData[playerid][pWorkOn] == id)
		{

			new
			    Float:fDistance = FLOAT_INFINITY,
			    i = -1
			;
			new data[furnitureE], p_virworld = GetPlayerVirtualWorld(playerid);
			for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
				if(!IsValidDynamicObject(x)) continue;
				if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == p_virworld && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
					if(data[fType] == TYPE_BUSINESS && data[fHouseID] == id) {
						new
							Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);

						if (temp < fDistance)
						{
							fDistance = temp;
							i = x;
						}
					}
				}
			}

			if(i != -1 && fDistance < 3) {
				
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				
				if(data[fOpened] == 1) return SendClientMessage(playerid, COLOR_GREY, "โปรดปิดประตูก่อนที่จะล็อกมัน!");
				if(data[fLocked] == 0)
				{
					GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 6);
					data[fLocked] = 1;
				}
				else if(data[fLocked] == 1)
				{
					GameTextForPlayer(playerid, "~w~Door ~g~Unlocked", 5000, 6);
					data[fLocked] = 0;
				}
				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
				return 1;
			}

			if(BizInfo[id][bLocked] == 1)
			{
				BizInfo[id][bLocked] = 0;
				GameTextForPlayer(playerid, "~w~Business ~g~Unlocked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(BizInfo[id][bLocked] == 0)
			{
				BizInfo[id][bLocked] = 1;
				GameTextForPlayer(playerid, "~w~Business ~r~Locked", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 6);
			return 1;
		}
	}
	else if( (IsPlayerInAnyVehicle(playerid) ? ((vehicleid = GetPlayerVehicleID(playerid)) != 0) : ((vehicleid = Vehicle_Nearest(playerid)) != -1)) /*&& !IsABicycle(vehicleid) */)
	{
		new
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective;


		if((id = Car_GetID(vehicleid)) != -1)
		{
			if(id == playerData[playerid][pPCarkey] || CarData[id][carDupKey] == playerData[playerid][pPDupkey]) {

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

				if (!CarData[id][carLocked])
				{	
					/*if (CarData[id][carActive] == 1)
					{
						CarData[id][carLocked] = true;
						Car_Save(id);

						format(str, sizeof(str), "~r~%s Locked", CarData[id][carName]);
						GameTextForPlayer(playerid, str, 2000, 4);

						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else if (CarData[id][carActive] == 0)
					{*/
					CarData[id][carLocked] = true;
					Car_Save(id);

					format(str, sizeof(str), "~r~%s Locked", ReturnVehicleModelName(CarData[id][carModel]));
					GameTextForPlayer(playerid, str, 2000, 4);

					//PlayerPlaySoundEx(playerid, 24600);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);					
					//}
				}
				else
				{
					/*if (CarData[id][carActive] == 1)
					{
						CarData[id][carLocked] = false;
						Car_Save(id);

						format(str, sizeof(str), "~g~%s Unlocked", CarData[id][carName]);
						GameTextForPlayer(playerid, str, 2000, 4);

						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, objective);
					}
					else if (CarData[id][carActive] == 0)
					{*/
					CarData[id][carLocked] = false;
					Car_Save(id);

					format(str, sizeof(str), "~g~%s Unlocked", ReturnVehicleModelName(CarData[id][carModel]));
					GameTextForPlayer(playerid, str, 2000, 4);


					//PlayerPlaySoundEx(playerid, 24600);
					SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, objective);						
					//}
				}
				canlock = 1;

			}
			else {

                SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณไม่สามารถเข้าถึงยานพาหนะนี้ได้");

				if (CarData[id][carLocked]) {
					if (!isnull(params) && !strcmp(params, "breakin", true)) {
						if(CarData[id][carProtect] == 0) {
							SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถเริ่มพังประตูได้ในขณะนี้! วิธีในการพัง:");
							SendClientMessage(playerid, COLOR_WHITE, "-กำปั้น");
							SendClientMessage(playerid, COLOR_WHITE, "-อาวุธระยะประชิด");

							if(!IsABike(vehicleid) && !IsABicycle(vehicleid)) {
								CoreVehicles[vehicleid][vbreakin] = 50 + floatround(CarData[id][carLock]*25);
							}
							else CoreVehicles[vehicleid][vbreakin] = 1;
							CoreVehicles[vehicleid][vbreaktime] = 20;
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะคันนี้ยังอยู่ในโหมดป้องกันตัวเอง โปรดลองใหม่ภายหลัง");
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: หากคุณพยายามที่จะพังเข้าไป: "EMBED_YELLOW"\"/lock "EMBED_WHITE"breakin"EMBED_YELLOW"\"");
				}
                return 1;

				//SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่มีกุญแจสำหรับยานพาหนะคันนี้");
			}
		}
		else
		{

			if (IsPlayerInAnyVehicle(playerid) && !IsVehicleRental(vehicleid)) {

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

				if(doors != 1)
				{
					format(str, sizeof(str), "~r~%s Locked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
					GameTextForPlayer(playerid, str, 2000, 4);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
				}
				else
				{
					format(str, sizeof(str), "~g~%s Unlocked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
					GameTextForPlayer(playerid, str, 2000, 4);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
				}
				canlock = 1;
			}
			else
			{
				if( (!IsVehicleRental(vehicleid) && gLastCar[playerid] == vehicleid)  || RentCarKey[playerid] == vehicleid)
				{
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if(doors != 1)
					{
						format(str, sizeof(str), "~r~%s Locked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, str, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
						format(str, sizeof(str), "~g~%s Unlocked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, str, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
					}
					canlock = 1;
				}
			}

		}
	}
	if(!canlock) return SendClientMessage(playerid, COLOR_LIGHTRED, " ..ไม่มีอะไรรอบ ๆ ตัวคุณที่สามารถล็อกได้");
	return 1;
}

CMD:bizwithdraw(playerid, params[])
{
	new
		bouse = playerData[playerid][pPbiskey],
		cashdeposit;

	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ใช่เจ้าของธุรกิจ");

	if (sscanf(params, "d", cashdeposit))
	{
		SendSyntaxMessage(playerid, "/bizwithdraw [จำนวน]");
		SendClientMessageEx(playerid, COLOR_GRAD3, "  คุณมี $%d อยู่ใน Cashbox", BizInfo[bouse][bTill]);
		return 1;
	}

	if (cashdeposit > BizInfo[bouse][bTill] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้มีมากขนาดนั้น");

	if (bouse == BizEntered[playerid])
	{
		playerData[playerid][pCash] += cashdeposit;
		BizInfo[bouse][bTill] -= cashdeposit;
		UpdateBizInfo(bouse);
		SendClientMessageEx(playerid, COLOR_YELLOW, "  คุณถอน $%d จาก Cashbox ของคุณ คงเหลือ: $%d ", cashdeposit,BizInfo[bouse][bTill]);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   คุณอยู่ห่างไกลจากธุรกิจของคุณ");
	}
	return 1;
}

CMD:bizbank(playerid, params[])
{
	new
		bouse = playerData[playerid][pPbiskey],
		cashdeposit;

	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ใช่เจ้าของธุรกิจ");

	if (sscanf(params, "d", cashdeposit))
	{
		SendSyntaxMessage(playerid, "/bizbank [จำนวน]");
		SendClientMessageEx(playerid, COLOR_GRAD3, "  คุณมี $%d อยู่ใน Cashbox", BizInfo[bouse][bTill]);
		return 1;
	}

	if (cashdeposit > playerData[playerid][pCash] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้มีมากขนาดนั้น");

	if (bouse == BizEntered[playerid])
	{
		playerData[playerid][pCash] -= cashdeposit;
		BizInfo[bouse][bTill] += cashdeposit;
		UpdateBizInfo(bouse);
		SendClientMessageEx(playerid, COLOR_YELLOW, "  คุณฝาก $%d เข้า Cashbox ของคุณ คงเหลือ: $%d ", cashdeposit, BizInfo[bouse][bTill]);

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "   คุณอยู่ห่างไกลจากธุรกิจของคุณ");
	}
	return 1;
}

CMD:buybiz(playerid, params[])
{
	if(OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "คุณมีธุรกิจอยู่แล้ว ใช้ /sellbiz เพื่อขายธุรกิจของคุณ");

	new confirm[8], h = -1;

	if ((h = nearBiz_var[playerid]) != -1 && BizInfo[h][bOwned] == 0) {

   		if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "yes", true)) {

			if(playerData[playerid][pLevel] < BizInfo[h][bLevelNeeded])
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "คุณต้องมีเลเวล %d เพื่อซื้อมัน", BizInfo[h][bLevelNeeded]);
				return 1;
			}
			if(playerData[playerid][pCash] < BizInfo[h][bBuyPrice]) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถซื้ออสังหาริมทรัพย์นี้ได้!");


			new
				pname[MAX_PLAYER_NAME + 1];

			GetPlayerName(playerid, pname, sizeof(pname));

			playerData[playerid][pPbiskey] = h;
			BizInfo[h][bOwned] = 1;
			BizInfo[h][bLocked] = 1;
			BizInfo[h][bTill] = 0;
			strmid(BizInfo[h][bOwner], pname, 0, strlen(pname), MAX_PLAYER_NAME);
			playerData[playerid][pCash] -= BizInfo[h][bBuyPrice];
			SendClientMessage(playerid, COLOR_WHITE, "ขอแสดงความยินดีในการสั่งซื้อใหม่ของคุณ!");
			SendClientMessage(playerid, COLOR_WHITE, "ใช้ /help เพื่อการตรวจสอบการเข้าถึงใหม่ของคุณ  !");
			Biz_Refresh(h);
			UpdateBizInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `PlayerBusinessKey` = %d WHERE `ID` = %d", playerData[playerid][pCash], h, playerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			//SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/buybiz yes");
			format(szString, sizeof(szString), "ธุรกิจที่คุณกำลังซื้อราคา $%d", BizInfo[h][bBuyPrice]);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
 	}
	return 1;
}

CMD:sellbiz(playerid, params[])
{
	new confirm[8], house = playerData[playerid][pPbiskey];

	if(house != -1 && strcmp(ReturnPlayerName(playerid), BizInfo[house][bOwner], true) == 0)
	{
		new houseprice = BizInfo[house][bBuyPrice];
		new housetax = ((houseprice*1)/100);

	    if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "yes", true)) {

			if(BizInfo[house][bTill] > 0)
			{
			    playerData[playerid][pCash] += BizInfo[house][bTill];
				SendClientMessageEx(playerid, COLOR_GRAD2, "คุณได้รับเงินสดจากธุรกิจ $%d", BizInfo[house][bTill]);
			}
			BizInfo[house][bLocked] = 1;
			BizInfo[house][bTill] = 0;
			BizInfo[house][bOwned] = 0;
			StopBizBoomBox(house);
			strmid(BizInfo[house][bOwner], "The State", 0, strlen("The State"), 24);

			Biz_Refresh(house);
			playerData[playerid][pCash] += houseprice-housetax;
			PlayerPlaySoundEx(playerid, 1052);
			format(szString, sizeof(szString), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", houseprice-housetax);
			GameTextForPlayer(playerid, szString, 10000, 3);
			SendClientMessageEx(playerid, COLOR_GRAD3, "ภาษีของรัฐ: $%d", housetax);
			UpdateBizInfo(house);

			if(BizEntered[playerid] == house)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid,BizInfo[house][bEntranceX], BizInfo[house][bEntranceY], BizInfo[house][bEntranceZ]);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
				playerData[playerid][pInterior] = 0;
				playerData[playerid][pWorld] = 0;
				BizEntered[playerid] = -1;
				playerData[playerid][pLocal] = 255;
				return 1;
			}

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `PlayerBusinessKey` = %d", -1, house);
			mysql_query(dbCon, szQuery);

			playerData[playerid][pPbiskey] = -1;

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			//SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/sellbiz yes");
			format(szString, sizeof(szString), "ธุรกิจที่คุณกำลังขายราคา $%d และมีภาษี $%d", houseprice, housetax);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในธุรกิจที่เป็นเจ้าของ");
	return 1;
}

/*CMD:sellbiz(playerid, params[])
{
	new key = playerData[playerid][pPbiskey];
	if(!OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของธุรกิจ");

	BizInfo[key][bizOwned] = 0;
	BizInfo[key][bizLocked] = 1;
	BizInfo[key][bizRadio] = 0;
	BizInfo[key][bizRadioOn] = 0;
	strmid(BizInfo[key][bizOwner], "The State", 0, strlen("The State"), 255);
	new bizvalue = BizInfo[key][bizPrice] / 4 * 3;
	GiveCash(playerid, bizvalue);
	format(msg, sizeof(msg), "Congratulations You have sold your property for "EMBED_YELLOW"$%d", bizvalue);
	SendClientMessage(playerid, COLOR_GRAD1, msg);
	if(BizInfo[key][bizCash] > 0)
	{
		format(msg, sizeof(msg), "As you had $%d in your cashbox, you got it back.", BizInfo[key][bizCash]);
		SendClientMessage(playerid, COLOR_GRAD1, msg);
		GiveCash(playerid, BizInfo[key][bizCash]);
	}
	BizInfo[key][bizCash] = 0;
	foreach(new i : Player)
	{
		if(BizEntered[i] == key)
		{
			SetPlayerPos(i,BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]);
			SetInterior(i,0);
			SetWorld(i,0);
			BizEntered[i] = -1;
			FreezePlayer(i);
			SetTimerEx("UnFreezePlayer", 1000, 0, "i", i);
			SendClientMessage(i, COLOR_GRAD1, "The owner has just sold this business, everyone out.");
		}
	}
	UpdateBizInfo(key);
	playerData[playerid][pBizKey] = -1;
	return 1;
}*/

//----------------------------------[Bank System]-----------------------------------------------

CMD:withdraw(playerid, params[])
{
	new cashdeposit, tax;

    if(playerData[playerid][pLocal] == 502 || playerData[playerid][pLocal] == 503 || playerData[playerid][pLocal] == 504 || (BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 3)) {

		if (sscanf(params, "d", cashdeposit))
		{
			SendSyntaxMessage(playerid, "/withdraw [จำนวน]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "  คุณมี $%d อยู่ในบัญชี", playerData[playerid][pAccount]);
			return 1;
		}
		if(cashdeposit < 250) return SendClientMessage(playerid, COLOR_LIGHTRED, "ถอนได้ตั้งแต่ $250 ขึ้นไป");
	    if(playerData[playerid][pSavingsCollect]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถใช้คำสั่งนี้ได้ในขณะที่เปิดบัญชีออมทรัพย์");

        tax = floatround(cashdeposit * 0.002, floatround_round);
		if (cashdeposit+tax > playerData[playerid][pAccount] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้มีมากขนาดนั้น !");

	    cashdeposit = cashdeposit - tax;
		playerData[playerid][pCash] += cashdeposit;
		playerData[playerid][pAccount] -= cashdeposit + tax;
	 	SendClientMessageEx(playerid, COLOR_YELLOW, "  คุณถอน $%d จากบัญชีของคุณ คงเหลือ: $%d ภาษี $%d", cashdeposit + tax, playerData[playerid][pAccount], tax);

	}
	else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");

	return 1;
}

CMD:bank(playerid, params[])
{
    new cashdeposit;

	if (BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 12) {
		if (sscanf(params, "d", cashdeposit))
		{
			SendSyntaxMessage(playerid, "/bank [จำนวน]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "  คุณมี $%d อยู่ในบัญชี", playerData[playerid][pAccount]);
			return 1;
		}

		if(playerData[playerid][pSavingsCollect]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถใช้คำสั่งนี้ได้ในขณะที่เปิดบัญชีออมทรัพย์");
		if (cashdeposit > playerData[playerid][pCash] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้มีมากขนาดนั้น");

		playerData[playerid][pCash] -= cashdeposit;
		new curfunds = playerData[playerid][pAccount];
		playerData[playerid][pAccount]=cashdeposit+playerData[playerid][pAccount];
		SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATEMENT ___|");
		SendClientMessageEx(playerid, COLOR_FADE1, "  ยอดเงินเก่า: $%d", curfunds);
		SendClientMessageEx(playerid, COLOR_FADE1, "  เงินฝาก: $%d",cashdeposit);
		SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
		SendClientMessageEx(playerid, COLOR_WHITE, "  ยอดเงินใหม่: $%d", playerData[playerid][pAccount]);
	}
	else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	return 1;
}

CMD:balance(playerid, params[])
{
	if(playerData[playerid][pLocal] == 502 || playerData[playerid][pLocal] == 503 || playerData[playerid][pLocal] == 504 || (BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 3)) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "  คุณมี $%d อยู่ในบัญชี",playerData[playerid][pAccount]);
	} else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	return 1;
}

CMD:pincode(playerid, params[])
{
	if(playerData[playerid][pLocal] == 502 || playerData[playerid][pLocal] == 503 || playerData[playerid][pLocal] == 504 || (BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 3)) {

        new pincode[16];

		if(sscanf(params,"s[16]",pincode)) {
			SendSyntaxMessage(playerid, "/pincode [PinCode(หมายเลข 0-9)(ความยาว 6 ตัวอักษร)]");
			SendClientMessage(playerid, COLOR_GRAD3, "  ค่าบริการ $1,000");
			return 1;
		}
		
        if(playerData[playerid][pCash] < 1000 && !playerData[playerid][pBankNumber]) return SendClientMessage(playerid, COLOR_GRAD2, "  คุณมีเงินไม่พอ (1,000) !");
		
		if(strlen(pincode) != 6 || !IsNumber(pincode)) return SendClientMessage(playerid, COLOR_LIGHTRED, "หมายเลข 0-9 เท่านั้นและต้องมีความยาวเท่ากับ 6 ตัวอักษร");
		
		format(playerData[playerid][pBankPin], 10, pincode);
		if(!playerData[playerid][pBankNumber]) {
			playerData[playerid][pBankNumber] = 10000 + random(99999);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "หมายเลขธนาคารของคุณคือ: %d", playerData[playerid][pBankNumber]);
			playerData[playerid][pCash] -= 1000;
		}
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "PIN Code สำหรับ ATM ของคุณคือ: %s", playerData[playerid][pBankPin]);

	} else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	return 1;
}

CMD:transfer(playerid, params[])
{
	if (BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 12) {

        new id, amount, string[128];
        
		if(playerData[playerid][pSavingsCollect]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถใช้คำสั่งนี้ได้ในขณะที่เปิดบัญชีออมทรัพย์");
        if(!playerData[playerid][pBankNumber]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีหมายเลขธนาคารสำหรับการโอน (/pincode)");
		if(sscanf(params,"dd",id,amount)) {
			SendSyntaxMessage(playerid, "/transfer [banknumber] [จำนวน]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "  คุณมี $%d อยู่ในบัญชี", playerData[playerid][pAccount]);
			return 1;
		}
        if(playerData[playerid][pAccount] < amount || amount < 1) return SendClientMessage(playerid, COLOR_GRAD2, "  คุณไม่ได้มีมากขนาดนั้น");
		if(id == playerData[playerid][pBankNumber]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถโอนเงินให้ตัวเองได้");
   
		new targetid = INVALID_PLAYER_ID;
		
		foreach (new i : Player) {
			if(playerData[i][pBankNumber] == id) {
				targetid = i;
				break;
			}
		}

		if(targetid != INVALID_PLAYER_ID) {

			playerData[playerid][pAccount] -= amount;
			playerData[targetid][pAccount] += amount;

			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "คุณได้โอนเงิน $%d เข้าบัญชีหมายเลขธนาคาร %d", amount, playerData[targetid][pBankNumber]);
			SendClientMessageEx(targetid, COLOR_LIGHTBLUE, "คุณได้รับ $%d เข้าธนาคารจากหมายเลขธนาคาร %d", amount, playerData[playerid][pBankNumber]);
		
			Log_Write("logs/pay_log.txt", "[%s] %s (%s) has transfer %s to %s (%s).", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pIP], FormatNumber(amount), ReturnRealName(targetid), playerData[targetid][pIP]);

			format(string, sizeof(string), "โอน %d ให้ %s", amount, ReturnPlayerName(targetid));
			SQL_LogPay(playerid, "/transfer", string);
		}
		else {
		    SendClientMessage(playerid, COLOR_GREY, "   ไม่พบข้อมูลบัญชีหมายเลขธนาคารนี้ !");
		}
		
	} else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	return 1;
}


CMD:savings(playerid, params[])
{

	if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 12) {

		if(!strcmp(params, "withdraw", true))
		{
			Dialog_Show(playerid, WithdrawSavings, DIALOG_STYLE_MSGBOX, "Confirmation", "คุณแน่ใจหรือที่จะถอนเงินจากบัญชีอ{FF0000}อมทรัพย์ ?\nมันไม่สามารถเปลี่ยนกลับได้และคุณจะต้องเริ่มต้นใหม่!", "Yes", "No");
		}
		else
		{
			if(playerData[playerid][pSavings])
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______ BANK STATEMENT _______|");
				SendClientMessageEx(playerid, COLOR_GRAD1, "ยอดเงินในบัญชีเงินฝากออมทรัพย์: %s", FormatNumber(playerData[playerid][pSavingsCollect]));
				SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"คุณมี %s อยู่ในบัญชีฝากออมทรัพย์", FormatNumber(playerData[playerid][pSavingsCollect]));

				new paycheck = 0, maximum = 20000000;
				new i = playerData[playerid][pSavings], currently;

				while(i < maximum)
				{
					i += floatround((i/100.0)*(0.5), floatround_round);
					paycheck++;

					if(playerData[playerid][pSavingsCollect] > i) currently = 2 + paycheck;
				}


				SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"เงินฝากออมทรัพย์ของคุณเหลืออีก %d/%d paydays (%d%s)", currently, paycheck, floatround(float(currently) / float(paycheck) * 100), "%%");
				SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE" เพื่อถอนเงินฝา{FF6347}ก ใช้ /savings withdraw");
			}
			else
			{
				new savings = strval(params);

				if (!savings)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" เพื่อสร้างบัญชีออมทรัพย์ /savings [จำนวน]");

				if(savings == 50000 || savings == 100000)
				{
					if(playerData[playerid][pCash] > savings)
					{
						playerData[playerid][pSavings] = savings;
						playerData[playerid][pSavingsCollect] = savings;
						playerData[playerid][pCash] -= savings;

						SendClientMessage(playerid, COLOR_WHITE, "|_______ BANK STATEMENT _______|");
						SendClientMessageEx(playerid, COLOR_GRAD1, "ยอดเงินในบัญชีเงินฝากออมทรัพย์: %s", FormatNumber(savings));
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"คุณมี %s อยู่ในบัญชีฝากออมทรัพย์", FormatNumber(savings));


						new paycheck = 0, maximum = 20000000;
						new i = playerData[playerid][pSavings], currently;

						while(i < maximum)
						{
							i += floatround((i/float(100))*(0.5), floatround_round);
							paycheck++;
							if(playerData[playerid][pSavingsCollect] > i) currently = 2 + paycheck;
						}


						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"เงินฝากออมทรัพย์ของคุณเหลืออีก %d/%d paydays (%d%s)", currently, paycheck, floatround(currently / float(paycheck) * 100), "%%");
						SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE" เพื่อถอนเงินฝา{FF6347}ก ใช้ /savings withdraw");
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ !");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "เงินฝากออมทรัพย์ต้องอยู่ระหว่าง $50,000 และ $100,000 เท่านั้น");
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	return 1;
}

CMD:resetint(playerid,params[])
{
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);

	playerData[playerid][pInterior] = 0;
	playerData[playerid][pWorld] = 0;
	playerData[playerid][pLocal] = 255;

	SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ทำการรีเซ็ต Interior & Virtual ของคุณ");

	return 1;
}

CMD:fuel(playerid, params[]) {

	if (IsPlayerInAnyVehicle(playerid))
	{
	    new str[64], vehicleid = GetPlayerVehicleID(playerid);

		if (!IsDoorVehicle(vehicleid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะคันนี้ไม่มีน้ำมัน");

		format(str, sizeof(str), "~w~Fuel: ~p~%.2f gallon", CoreVehicles[vehicleid][vehFuel]);
		GameTextForPlayer(playerid, str, 5000, 1);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในยานพาหนะ");
	return 1;
}

CMD:veh(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {

		new
			carid[32],
			Float: carSpawnPos[4], // 3 for the usual dimensions, +1 for the rotation/angle.
			messageString[64],
			color1,
			color2;

        if (!sscanf(params, "s[32]I(-1)I(-1)", carid, color1, color2)) {

			if ((carid[0] = GetVehicleModelByName(carid)) == 0)
			    return SendClientMessage(playerid, COLOR_GREY, "   เลขยานพาหนะต้องไม่ต่ำกว่า 400 หรือมากกว่า 611 !");

			if(systemVariables[vehicleCounts][0] + systemVariables[vehicleCounts][1] + systemVariables[vehicleCounts][2] < MAX_VEHICLES) {

                for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(!AdminSpawnedVehicles[i])
				{

					GetPlayerPos(playerid, carSpawnPos[0], carSpawnPos[1], carSpawnPos[2]);
					GetPlayerFacingAngle(playerid, carSpawnPos[3]);

					AdminSpawnedVehicles[i] = CreateVehicle(carid[0], carSpawnPos[0], carSpawnPos[1], carSpawnPos[2], carSpawnPos[3], color1, color2, -1);
					systemVariables[vehicleCounts][2]++;

		    		ResetVehicle(AdminSpawnedVehicles[i]);

					LinkVehicleToInterior(AdminSpawnedVehicles[i], GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(AdminSpawnedVehicles[i], GetPlayerVirtualWorld(playerid));

					PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);

					new
						engine,
						lights,
						alarm,
						doors,
						bonnet,
						boot,
						objective;

					GetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(AdminSpawnedVehicles[i], 1, lights, alarm, doors, bonnet, boot, objective);

					switch(carid[0]) {
						case 427, 428, 432, 528, 601: SetVehicleHealthEx(AdminSpawnedVehicles[i], 10000.0);
					}

					format(messageString, sizeof(messageString), "  คุณให้กำเนิด %s (ยานพาหนะไอดี %d)", ReturnVehicleModelName(carid[0]), AdminSpawnedVehicles[i]);
					SendClientMessage(playerid, COLOR_WHITE, messageString);

					break;
				}
			}
			else {
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "(error) 01x08");
				printf("ERROR: Vehicle limit reached (MODEL %d, MAXIMUM %d, TYPE ADMIN) [01x08]", carid, MAX_VEHICLES);
			}
        }
        else {
            return SendSyntaxMessage(playerid, "/veh [model id/name] <color 1> <color 2>");
        }
    }

	return 1;
}

CMD:fuelveh(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1) {

		new id;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/fuelveh [vehicle id]");
		}
		if (id < 1 || id > MAX_VEHICLES || !IsValidVehicle(id))
			return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");

		CoreVehicles[id][vehFuel] = GetVehicleDataFuel(GetVehicleModel(id));
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณได้เติมน้ำมันยานพาหนะไอดี %d", id);
		SendAdminAlert(COLOR_YELLOW, "%s ได้เติมน้ำมันยานพาหนะไอดี %d", ReturnPlayerName(playerid), id);
    }
	return 1;
}

CMD:desfuelveh(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1) {

		new id;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/desfuelveh [vehicle id]");
		}
		if (id < 1 || id > MAX_VEHICLES || !IsValidVehicle(id))
			return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");

		CoreVehicles[id][vehFuel] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณได้เติมน้ำมันยานพาหนะไอดี %d", id);
		SendAdminAlert(COLOR_YELLOW, "%s ได้เติมน้ำมันยานพาหนะไอดี %d", ReturnPlayerName(playerid), id);
    }
	return 1;
}


CMD:fuelall(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {
        for(new i=0;i!=MAX_VEHICLES;i++) if(IsValidVehicle(i)) {
			CoreVehicles[i][vehFuel] = GetVehicleDataFuel(GetVehicleModel(i));
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้เติมน้ำมันยานพาหนะทั้งเซิร์ฟเวอร์");
		SendAdminAlert(COLOR_YELLOW, "%s ได้เติมน้ำมันยานพาหนะทั้งเซิร์ฟเวอร์", ReturnPlayerName(playerid));
    }
	return 1;
}

CMD:respawncar(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1) {

		new id;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/respawncar [vehicle id]");
		}
		SetVehicleToRespawn(id);

		LinkVehicleToInterior(CarData[id][carVehicle], CarData[id][carInt]);
		SetVehicleVirtualWorld(CarData[id][carVehicle], CarData[id][carWorld]);
    }
	return 1;
}

CMD:respawncars(playerid, params[]) 
{
    if(playerData[playerid][pAdmin] >= 1)
	{
		new bool:done;
		for(new c=0;c<sizeof(CarRent);c++) {
			done = false;
			foreach (new i : Player) if(gLastCar[i] == CarRent[c] || RentCarKey[i] == CarRent[c]) done = true;
			if(!done) SetVehicleToRespawn(CarRent[c]);
		}

		for(new x=0;x<sizeof(CarDMV);x++)
		{
			if (GetVehicleDriver(x) == INVALID_PLAYER_ID)
			{
				SetVehicleToRespawn(x);
			}
		}

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ทำการส่งรถเช่า (CarRent) และ รถสำหรับสอบใบขับขี่ (DMV) กลับคืนที่เดิมเรียบร้อยแล้ว", ReturnPlayerName(playerid));
	}

	return 1;
}

CMD:desvehicles(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {

		new vehCount;
        for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) {
            if(AdminSpawnedVehicles[i]) {
	            DestroyVehicle(AdminSpawnedVehicles[i]);
				
				AdminSpawnedVehicles[i] = 0;
				systemVariables[vehicleCounts][2]--;
				vehCount++;
			}
		}

		if(vehCount)
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ทำลายยานพาหนะผู้ดูแลทั้งหมด %d คัน", ReturnPlayerName(playerid), vehCount);
    }
	return 1;
}

CMD:desvehicle(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {

		new id, bool:success;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/desvehicle [vehicle id]");
		}

        for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == id)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ทำลายยานพาหนะผู้ดูแลไอดี %d", AdminSpawnedVehicles[i]);
			DestroyVehicle(AdminSpawnedVehicles[i]);
			
			AdminSpawnedVehicles[i] = 0;
			systemVariables[vehicleCounts][2]--;
			success = true;
			return 1;
		}

		if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในยานพาหนะที่ผู้ดูแลให้กำเนิด");
    }
	return 1;
}

CMD:checkcar(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {

		new vehicleid, id = -1;

		if (sscanf(params, "d", vehicleid))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	vehicleid = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/checkcar [player vehicleid]");
		}

        if((id = Car_GetID(vehicleid)) != -1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Life Span: Engine Life[%.2f], Battery Life[%.2f], Miles Driven[%.2f]", CarData[id][carEngineL], CarData[id][carBatteryL], CarData[id][carMileage]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Security: Lock[%d], Alarm[%d], Immob[%d], Insurance[%d]", CarData[id][carLock], CarData[id][carAlarm], CarData[id][carImmob], CarData[id][carInsurance]);

			if(CarData[id][carArmour]) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Primary Color[{%06x}#%d"EMBED_WHITE"], Secondary Color[{%06x}#%d"EMBED_WHITE"], License Plate[%s], Armour[%.2f]",
				g_arrSelectColors[CarData[id][carColor1]] >>> 8, CarData[id][carColor1], g_arrSelectColors[CarData[id][carColor2]] >>> 8, CarData[id][carColor2], CarData[id][carPlate], CarData[id][carArmour]);
		    }
		    else
		    {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Primary Color[{%06x}#%d"EMBED_WHITE"], Secondary Color[{%06x}#%d"EMBED_WHITE"], License Plate[%s]",
				g_arrSelectColors[CarData[id][carColor1]] >>> 8, CarData[id][carColor1], g_arrSelectColors[CarData[id][carColor2]] >>> 8, CarData[id][carColor2], CarData[id][carPlate]);
		    }
			SendClientMessageEx(playerid, COLOR_WHITE, "Owner ID: %d", CarData[id][carOwner]);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะคันนี้ไม่ใช่ยานพาหนะของผู้เล่น");
		return 1;
    }
    return 0;
}


CMD:despawncar(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 3) {

		new vehicleid, id = -1;

		if (sscanf(params, "d", vehicleid))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	vehicleid = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/despawncar [player vehicleid]");
		}

		if((id = Car_GetID(vehicleid)) != -1)
		{
		    foreach(new x : Player) {
		        if(playerData[x][pPCarkey] == id) {
	                SaveSlotVehicleDamage(id);
					Car_SaveID(id);
	                Car_DespawnEx(id);
	                playerData[x][pPCarkey] = 9999;
					break;
				}
			}
			return 1;
		}

		SendClientMessage(playerid, COLOR_LIGHTRED, "นี่ไม่ใช่ยานพาหนะที่มีเจ้าของ");
    }
	return 1;
}

CMD:saveveh(playerid, params[])
{
    if(playerData[playerid][pAdmin] >= 4) {
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะเพื่อบันทึกมัน");

		if(GetPVarInt(playerid, "sCc") == 1) {

			new i = Iter_Free(sv_servercar);

		    if(i != -1)
			{
				    new
				        queryString[255],
				        Float: vPos[4],
						vehicleid = GetPlayerVehicleID(playerid); // x, y, z + z angle

				    GetVehiclePos(vehicleid, vPos[0], vPos[1], vPos[2]);
				    GetVehicleZAngle(vehicleid, vPos[3]);

				    format(queryString, sizeof(queryString), "INSERT INTO vehicles (vehicleModelID, vehiclePosX, vehiclePosY, vehiclePosZ, vehiclePosRotation) VALUES('%d', '%f', '%f', '%f', '%f')", GetVehicleModel(vehicleid), vPos[0], vPos[1], vPos[2], vPos[3]);
				    mysql_query(dbCon,queryString);

				    new insertid = cache_insert_id();

				    SendClientMessage(playerid, COLOR_GRAD1, "   ยานพาหนะถูกบันทึก !");

					vehicleVariables[i][vVehicleID] = insertid;
				    vehicleVariables[i][vVehicleModelID] = GetVehicleModel(vehicleid);
				    vehicleVariables[i][vVehiclePosition][0] = vPos[0];
				    vehicleVariables[i][vVehiclePosition][1] = vPos[1];
				    vehicleVariables[i][vVehiclePosition][2] = vPos[2];
				    vehicleVariables[i][vVehicleRotation] = vPos[3];
				    vehicleVariables[i][vVehicleFaction] = -1;

				    vehicleVariables[i][vVehicleScriptID] = vehicleid;

				    Iter_Add(sv_servercar, i);

					for(new x=0;x!=MAX_ADMIN_VEHICLES;x++) {
						if(AdminSpawnedVehicles[x] == vehicleid) {
         					AdminSpawnedVehicles[x] = 0; // If the vehicle is admin-spawned, we can remove it from the array and move it to the vehicle script enum/arrays.
                            break;
						}
					}

					systemVariables[vehicleCounts][2]--;
					systemVariables[vehicleCounts][0]++;
					DeletePVar(playerid, "sCc");

					return 1;
			}
		}
		else {
		    SetPVarInt(playerid, "sCc", 1);
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณแน่ใจหรือว่าจะบันทึกยานพาหนะนี้? ใช้คำสั่งนี้อีกครั้งเพื่อยืนยัน");
		}
	}

	return 1;
}

CMD:deleteveh(playerid, params[])
{
	new
	    id = 0;

    if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/deleteveh [vehicle id]");
	}
	if((id = Vehicle_GetID(id)) != -1)
	{
		new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vehicles` WHERE `vehicleID` = '%d'", vehicleVariables[id][vVehicleID]);
		mysql_tquery(dbCon, string);

		SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ทำลายยานพาหนะไอดี %d", vehicleVariables[id][vVehicleScriptID]);
		DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);
		Iter_Remove(sv_servercar, id);
	}
	return 1;
}


CMD:editveh(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editveh [id] [name]");
	    SendClientMessage(playerid, COLOR_GREY, "Available names: location, faction, color1, color2, plate");
		return 1;
	}
	if((id = Vehicle_GetID(id)) != -1)
	{
		if (!strcmp(type, "location", true))
		{

		    if (IsPlayerInAnyVehicle(playerid))
		    {
		        new vehicleid = GetPlayerVehicleID(playerid);
				GetVehiclePos(vehicleid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
				GetVehicleZAngle(vehicleid, vehicleVariables[id][vVehicleRotation]);
			}
			else
			{
		 		GetPlayerPos(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
				GetPlayerFacingAngle(playerid, vehicleVariables[id][vVehicleRotation]);
			}
			vehicleVariables[id][vVehicleWorld]=GetPlayerVirtualWorld(playerid);
			vehicleVariables[id][vVehicleInterior]=GetPlayerInterior(playerid);

			
			Vehicle_Save(id);
			
			
			DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);
	
			vehicleVariables[id][vVehicleScriptID] = CreateVehicle(vehicleVariables[id][vVehicleModelID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], 60000);

			LinkVehicleToInterior(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleInterior]);
			SetVehicleVirtualWorld(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleWorld]);

			if(vehicleVariables[id][vVehicleFaction] != -1) {
				//SetVehicleNumberPlate(vehicleVariables[id][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[id][vVehicleFaction]][factionName]));
				SetVehicleNumberPlate(vehicleVariables[id][vVehicleScriptID], FactionData[vehicleVariables[id][vVehicleFaction]][factionPlate]);
			}
			else {
				new plate[8];
				format(plate, 8, "%s", RandomVehiclePlate());
				SetVehicleNumberPlate(vehicleVariables[id][vVehicleScriptID], plate);
			}

			SetPlayerPosEx(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2] + 2.0, 1000);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับตำแหน่งของยานพาหนะไอดี: %d", ReturnPlayerName(playerid), vehicleVariables[id][vVehicleScriptID]);

		}
		else if (!strcmp(type, "faction", true))
		{
		    new typeint;

		    if (sscanf(string, "d", typeint))
		 	{
		 	    SendSyntaxMessage(playerid, "/editcar [id] [faction] [id]");
			 	return 1;
			}

			vehicleVariables[id][vVehicleFaction] = typeint;

			Vehicle_Save(id);

			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับกลุ่มของยานพาหนะไอดี: %d เป็น %d", ReturnPlayerName(playerid), vehicleVariables[id][vVehicleScriptID], typeint);
		}
		else if (!strcmp(type, "color1", true))
		{
		    new color1;

		    if (sscanf(string, "d", color1))
				return SendSyntaxMessage(playerid, "/editcar [id] [color1] [color]");

			if (color1 < 0 || color1 > 255)
			    return SendClientMessage(playerid, COLOR_GRAD1, "   สีต้องไม่ต่ำกว่า 0 หรือมากกว่า 255");

			vehicleVariables[id][vVehicleColour][0] = color1;
			ChangeVehicleColor(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1]);

			Vehicle_Save(id);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับสีที่ 1 ของยานพาหนะไอดี: %d เป็น %d", ReturnPlayerName(playerid), vehicleVariables[id][vVehicleScriptID], color1);
		}
		else if (!strcmp(type, "color2", true))
		{
		    new color2;

		    if (sscanf(string, "d", color2))
				return SendSyntaxMessage(playerid, "/editcar [id] [color2] [color]");

			if (color2 < 0 || color2 > 255)
			    return SendClientMessage(playerid, COLOR_GRAD1, "   สีต้องไม่ต่ำกว่า 0 หรือมากกว่า 255");

			vehicleVariables[id][vVehicleColour][1] = color2;
			ChangeVehicleColor(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1]);

			Vehicle_Save(id);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับสีที่ 2 ของยานพาหนะไอดี: %d เป็น %d", ReturnPlayerName(playerid), vehicleVariables[id][vVehicleScriptID], color2);
		}
		else if (!strcmp(type, "plate", true))
		{
		    new plate;

		    if (sscanf(string, "s[32]", plate))
				return SendSyntaxMessage(playerid, "/editcar [id] [plate]");

			format(vehicleVariables[id][vVehiclePlate], 32, "%s", plate);
			SetVehicleNumberPlate(id, "KUY");

			Vehicle_Save(id);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับเลขทะเบียนของยานพาหนะไอดี: %d เป็น %s", ReturnPlayerName(playerid), vehicleVariables[id][vVehicleScriptID], plate);
		}
		else
		{
		 	SendSyntaxMessage(playerid, "/editveh [id] [name]");
		    SendClientMessage(playerid, COLOR_GREY, "Available names: location, faction, color1, color2");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");
	}
	return 1;
}

CMD:park(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

	new vehicleid = GetPlayerVehicleID(playerid), factionid = playerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

    /*if(playerData[playerid][pFactionRank] > 4)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
*/
	new id = -1;
	if((id = IsAFactionCar(vehicleid, factionid)) != -1)
	{
	
		GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
		GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);
		vehicleVariables[id][vVehicleWorld]=GetPlayerVirtualWorld(playerid);
		vehicleVariables[id][vVehicleInterior]=GetPlayerInterior(playerid);
		Vehicle_Save(id);
		
		new temp_damages[4], Float:temp_vhealth;
		GetVehicleDamageStatus(vehicleVariables[id][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);
		GetVehicleHealth(vehicleVariables[id][vVehicleScriptID], temp_vhealth);

		DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);

		vehicleVariables[id][vVehicleScriptID] = CreateVehicle(vehicleVariables[id][vVehicleModelID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], 60000);
		LinkVehicleToInterior(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleInterior]);
		SetVehicleVirtualWorld(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleWorld]);

        //SetVehicleNumberPlate(vehicleVariables[id][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[id][vVehicleFaction]][factionName]));
		SetVehicleNumberPlate(vehicleVariables[id][vVehicleScriptID], FactionData[vehicleVariables[id][vVehicleFaction]][factionPlate]);

		SetVehicleHealth(vehicleVariables[id][vVehicleScriptID], temp_vhealth);
		SetVehicleDamageStatus(vehicleVariables[id][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);

		//SetPlayerPosEx(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2] + 2.0, 1000);
        PutPlayerInVehicle(playerid, vehicleVariables[id][vVehicleScriptID], 0);

        SendFactionIDMessage(factionid, COLOR_FACTION, "(( (%d) %s ได้ปรับตำแหน่งยานพาหนะไอดี %d ))", playerData[playerid][pFactionRank], ReturnPlayerName(playerid), vehicleid);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่บนยานพาหนะที่เป็นเจ้าของโดยแฟคชั่นเดียวกับคุณ");
	}
	return 1;
}

CMD:towcars(playerid, params[])
{
	new factionid = playerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องเป็นสมาชิกของฝ่ายหรือกลุ่ม");

    if(playerData[playerid][pFactionRank] > 7)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (GetFactionType(playerid) == FACTION_TYPE_GANG)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คำสั่งนี้สำหรับหน่วยงานรัฐเท่านั้น");
		
	foreach(new i : sv_servercar) if(vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] == factionid && GetVehicleDriver(vehicleVariables[i][vVehicleScriptID]) == INVALID_PLAYER_ID)
	{
        SetVehicleToRespawn(vehicleVariables[i][vVehicleScriptID]);
		LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
		SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);
		SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);
	}
	SendFactionIDMessage(factionid, COLOR_FACTION, "** (( (%d) %s ได้ส่งยานพาหนะที่ไม่มีคนนั่งของกลุ่มกลับจุดเกิดทั้งหมด ))", playerData[playerid][pFactionRank], ReturnPlayerName(playerid));
	return 1;
}

CMD:changespawn(playerid, params[])
{
	new type, tmp2[16];
	if(sscanf(params,"dS()[16]",type, tmp2)) return SendSyntaxMessage(playerid, "/changespawn [type(0-Normal,1-Faction,2-House)]");

	if(type > 2 || type < 0) return SendSyntaxMessage(playerid, "/changespawn [0-Normal,1-Faction,2-House]");
	if(type == 0)
 	{
 		SendClientMessage(playerid, COLOR_YELLOW, "คุณได้เปลี่ยนแปลงจุดเกิด: ปกติ");
 		playerData[playerid][pSpawnPoint] = 0;
	}
	if(type == 1)
	{
		if(playerData[playerid][pFactionID] == -1) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีฝ่ายหรือกลุ่ม");
		SendClientMessage(playerid, COLOR_YELLOW, "คุณได้เปลี่ยนแปลงจุดเกิด: ฝ่ายหรือกลุ่ม");
		playerData[playerid][pSpawnPoint] = 1;
	}
	if(type == 2)
	{
		new houseid;

		if(sscanf(tmp2,"d",houseid)) {

			new hcount;

	        SendClientMessage(playerid, COLOR_YELLOW, "|_______________House_______________|");

			foreach(new i : sv_houses)
			{
				if(HouseInfo[i][hOwned] == 1 && ((playerData[playerid][pHouseKey] == i) || (!strcmp(HouseInfo[i][hOwner], ReturnPlayerName(playerid), true))))
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "%d: %s", i, HouseInfo[i][hAddress]);
		      		hcount++;
				}
			}
			if(hcount) {
				SendSyntaxMessage(playerid, "/changespawn 2 [houseid]");
			}
			else {
			    SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีบ้าน");
			}
			return 1;
		}

		if(Iter_Contains(sv_houses, houseid)) {
			if(HouseInfo[houseid][hOwned] == 1 && ((playerData[playerid][pHouseKey] == houseid) || (!strcmp(HouseInfo[houseid][hOwner], ReturnPlayerName(playerid), true))))
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เปลี่ยนแปลงจุดเกิด: บ้าน #%d", houseid);
				playerData[playerid][pSpawnPoint] = 2;
				playerData[playerid][pHouseKey] = houseid;
			}
			else SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีบ้าน");
		}
	}
	return 1;
}

// HOTWIRE
CMD:unscramble(playerid, params[])
{
    new string[128], vehicleid, Float:vhealth;

	if (isnull(params))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /(uns)cramble <unscrambled word>");

	if(IsPlayerInAnyVehicle(playerid) && h_vid[playerid] != -1)
	{
	    vehicleid = CarData[h_vid[playerid]][carVehicle];

		if(GetPlayerVehicleID(playerid) == vehicleid)
		{
		    if(!strcmp(params, ScrambleWord[h_wid[playerid]], true))
		    {
		        h_score[playerid]++;
		        if(h_score[playerid] >= 10)
		        {
		            vehicleid = CarData[h_vid[playerid]][carVehicle];
			    	GetVehicleHealth(vehicleid, vhealth);
	                PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);

	                h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
	                h_word[playerid][0]='\0';

				    if(vhealth > 650)
				    {
						SetEngineStatus(vehicleid, true);
					 	GameTextForPlayer(playerid, "~g~Engine On", 2000, 4);
					  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เริ่มเครื่องยนต์ของ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
					}
					else
					{
				 	    new delay = floatround(900/vhealth);
					    if(delay > 3) { delay = 3; }

						if(delay == 0)
						{
							SetEngineStatus(vehicleid, true);
						}
						else
						{
		    	 			CoreVehicles[vehicleid][startup_delay] = delay;
							CoreVehicles[vehicleid][startup_delay_sender] = playerid;
							CoreVehicles[vehicleid][startup_delay_random] = delay;
						}
						GameTextForPlayer(playerid, "~g~Engine On", 2000, 4);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เริ่มเครื่องยนต์ของ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
					}
					return 1;
			 	}
				else PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		    }
		    else {

				PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);

				h_failed[playerid]++;

	            if(h_failed[playerid] >= 6)
	            {
	                // TAZER
					new
					    Float:x,
					    Float:y,
					    Float:z;

					GetPlayerPos(playerid, x, y, z);
					SetPlayerPos(playerid, x, y, z+2);
					ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 1, 1, 0, 1);
					//ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
					bf_on(player_bf[playerid], IS_PLAYER_TAZER);
					TogglePlayerControllable(playerid, false);
					TazerCount[playerid]=10;
					SetTimerEx("SetUnTazed", 10000, 0, "i", playerid);

		         	h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
		          	h_word[playerid][0]='\0';

	                GameTextForPlayer(playerid, "YOU ARE TAZER", 5000, 5);
	                ShowPlayerFooter(playerid, "~r~You've failed too many words.");

	                return 1;
	            }
			}
			h_wid[playerid] = random(sizeof(ScrambleWord));
			h_word[playerid] = CreateScramble(ScrambleWord[h_wid[playerid]]);
            //CreateScramble(ScrambleWord[h_wid[playerid]], h_word[playerid]);

			format(string, sizeof(string), "~y~/(uns)cramber ~w~<unscrambled word> ~r~to unscramble the word.~n~'~w~%s~r~'.", h_word[playerid]);
		 	ShowPlayerFooter(playerid, string, 8000);
		}
	}
	return 1;
}
alias:unscramble("uns");

CMD:engine(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = -1, Float:vhealth, bool:canstart;

	if (VCarModingSetting{playerid} || VDealerSetting{playerid}) return 1;

	if (!IsEngineVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้อยู่ในยานพาหนะ");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

	if (!CoreVehicles[vehicleid][vehFuel])
  		return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะคันนี้ไม่มีน้ำมัน");

	if(HasCooldown(playerid,COOLDOWN_ENGINE))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถเริ่มเครื่องยนต์ได้ในขณะนี้ลองใหม่อีกครั้ง");

    if((id = Car_GetID(vehicleid)) != -1)
    {
		if(CarData[id][carBatteryL] <= 0.0) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถเริ่มเครื่องยนต์ได้เนื่องจากแบตเตอรี่ หมดอายุการใช้งาน/ได้รับความเสียหาย");
		}
		else if(CarData[id][carEngineL] <= 0.0) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถเริ่มเครื่องยนต์ได้เนื่องจากเครื่องยนต์ หมดอายุการใช้งาน/ได้รับความเสียหาย");
		}
		if(playerData[playerid][pPCarkey] != id && playerData[playerid][pPDupkey] != CarData[id][carDupKey]) {

            if(h_vid[playerid] == -1)
            {
	            new string[128];
	            // Hotwire
			 	h_vid[playerid]=id;
				h_times[playerid] = 25 * (6-CarData[id][carImmob]);
                h_failed[playerid]=0;
				h_wid[playerid] = random(sizeof(ScrambleWord));
				h_word[playerid] = CreateScramble(ScrambleWord[h_wid[playerid]]);
				CreateScramble(h_word[playerid]);

				format(string, sizeof(string), "~y~/(uns)cramber ~w~<unscrambled word> ~r~to unscramble the word.~n~'~w~%s~r~'.~n~You have ~w~%d ~r~seconds left to finish.", h_word[playerid], h_times[playerid]);
	            ShowPlayerFooter(playerid, string, 8000);
			}
            return 1;
        }
        else {
	      	if(playerData[playerid][pPCarkey] == id) {
	        	if(CarData[id][carImpound]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะของคุณถูกยึด ใช้ /unimpound เพื่อจ่าย 1,500$");
			}
			canstart = true;
		}
    }

	if(Vehicle_GetID(vehicleid) != -1 || RentCarKey[playerid] == vehicleid || canstart)
	{
		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				GetVehicleHealth(vehicleid,vhealth);

				if(vhealth > 650)
				{
					SetEngineStatus(vehicleid, true);
					GameTextForPlayer(playerid, "~g~Engine On", 2000, 4);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เริ่มเครื่องยนต์ของ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
				}
				else if(vhealth < 390) {
					if(CoreVehicles[vehicleid][vehicleBadlyDamage] == 0) {
					 	GameTextForPlayer(playerid, "~r~ENGINE COULDN'T START DUE TO DAMAGE", 5000, 4);
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: เครื่องยนต์เสียหายอย่างหนัก");
						SendClientMessage(playerid, COLOR_YELLOW, "ข้อแนะ: กดปุ่ม "EMBED_WHITE"W"EMBED_YELLOW" เพื่อติดเครื่องยนต์");
						SendClientMessage(playerid, COLOR_YELLOW, "ข้อแนะ: คุณมีเวลา "EMBED_WHITE"10"EMBED_YELLOW" วินาที เพื่อติดเครื่องยนต์");
						CoreVehicles[vehicleid][vehicleBadlyDamage] = 10;
					}
					else {
					    GameTextForPlayer(playerid, "~r~ENGINE COULDN'T START DUE TO DAMAGE", 5000, 4);
					}
					return 1;
				}
				else
				{
				    new owner_delay;
				    if(id != -1) owner_delay = floatround((VehicleData[CarData[id][carModel] - 400][c_engine] - CarData[id][carEngineL]) / 25);
					new delay = floatround(1300/vhealth) + owner_delay;
					if(delay > 5) { delay = 5; }

					if(delay <= 0)
					{
						SetEngineStatus(vehicleid, true);
						GameTextForPlayer(playerid, "~g~Engine On", 2000, 4);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เริ่มเครื่องยนต์ของ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
					}
					else
					{
						CoreVehicles[vehicleid][startup_delay] = delay;
						CoreVehicles[vehicleid][startup_delay_sender] = playerid;
						CoreVehicles[vehicleid][startup_delay_random] = delay;
					}
				}
				SetCooldown(playerid,COOLDOWN_ENGINE,3);
			}
			case true:
			{
				SetEngineStatus(vehicleid, false);
				SetLightStatus(vehicleid, false);
				GameTextForPlayer(playerid, "~r~Engine Off", 2000, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s หยุดเครื่องยนต์ของ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
                StopCarBoomBox(vehicleid);
			
				if(CoreVehicles[ vehicleid ][ vELMTimer ] != -1) {
					KillTimer(CoreVehicles[ vehicleid ][ vELMTimer ]);
					CoreVehicles[ vehicleid ][ vELMTimer ] = -1;
					UpdateVehicleDamageStatus(vehicleid, CoreVehicles[vehicleid][vehDamage][0], CoreVehicles[vehicleid][vehDamage][1], CoreVehicles[vehicleid][vehDamage][2], CoreVehicles[vehicleid][vehDamage][3]);
				}
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
		return 1;
	}

	return 1;
}

// Radio System

alias:megaphone("meg");
CMD:megaphone(playerid,params[])
{
    if(IsACopCar(GetPlayerVehicleID(playerid))) {
	 	if (isnull(params)) return SendSyntaxMessage(playerid, "(/meg)aphone [megaphone chat]");
		if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD || GetFactionType(playerid) == FACTION_TYPE_SADOC || GetFactionType(playerid) == FACTION_TYPE_MEDIC)
			SendNearbyMessage(playerid, 60.0, COLOR_YELLOW, "[ %s:o< %s ]", ReturnRealName(playerid), params);
		else
			SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจะต้องอยู่ในรถลาดตระเวนของตำรวจ!");
    return 1;
}

alias:microphone("mic");
CMD:microphone(playerid, params[])
{
	if (isnull(params)) return SendSyntaxMessage(playerid, "(/mic)rophone [microphone chat]");

	new house = HouseEntered[playerid];

	if(!OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของธุรกิจ");

	if (house != -1 && (strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0))
	{
		if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในบ้าน");
		SendNearbyMessage(playerid, 60.0, COLOR_LIGHTGREEN, "%s พูดว่า [ลำโพง] (ไมโครโฟน): %s", ReturnRealName(playerid), params);
	}

	house = BizEntered[playerid];
	if (house != -1 && (strcmp(ReturnPlayerName(playerid), BizInfo[house][bOwner], true) == 0))
	{
		if (!Biz_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในธุรกิจ");
		SendNearbyMessage(playerid, 60.0, COLOR_LIGHTGREEN, "%s พูดว่า [ลำโพง] (ไมโครโฟน): %s", ReturnRealName(playerid), params);
	}
	return 1;
}


alias:departments("d");

CMD:departments(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE  && GetFactionType(playerid) != FACTION_TYPE_SASD && GetFactionType(playerid) != FACTION_TYPE_MEDIC && GetFactionType(playerid) != FACTION_TYPE_GOV && GetFactionType(playerid) != FACTION_TYPE_SADOC)
	    return SendClientMessage(playerid, COLOR_GRAD2,"   คุณไม่ใช่ส่วนหนึ่งของทีม !");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "(/d)epartments [department chat]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_TYPE_POLICE  || FactionData[i][factionType] == FACTION_TYPE_SASD || FactionData[i][factionType] == FACTION_TYPE_MEDIC || FactionData[i][factionType] == FACTION_TYPE_GOV || FactionData[i][factionType] == FACTION_TYPE_SADOC) {
		SendFactionIDMessage(i, TEAM_CYAN_COLOR, "** [%s] %s %s: %s **", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnRealName(playerid), params);
	}
	Log_Write("logs/faction_chat.txt", "[%s] [/departments] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnRealName(playerid), params);


	//SQL_LogChat(playerid, "/departments", params);
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [ข้อความ]");

	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถซื้อโทรศัพท์มือถือได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], playerData[playerid][pRSlot], ReturnRealName(playerid), params);
		SendRadioMessage(playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessage(playerid, string);
	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], playerData[playerid][pRSlot], ReturnRealName(playerid), params);
		SendRadioMessage(playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: %d] %s", playerData[playerid][pRChannel], playerData[playerid][pRSlot], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r1(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r1 [ข้อความ]");

	if (playerData[playerid][pRadio] < 1)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 1, ReturnRealName(playerid), params);
		SendRadioMessageEx(1, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(1, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 1, ReturnRealName(playerid), params);
		SendRadioMessageEx(1, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 1] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r2(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r2 [ข้อความ]");

	if (playerData[playerid][pRadio] < 2)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 2, ReturnRealName(playerid), params);
		SendRadioMessageEx(2, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(2, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 2, ReturnRealName(playerid), params);
		SendRadioMessageEx(2, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 2] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r3(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r3 [ข้อความ]");

	if (playerData[playerid][pRadio] < 3)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 3, ReturnRealName(playerid), params);
		SendRadioMessageEx(3, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(3, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 3, ReturnRealName(playerid), params);
		SendRadioMessageEx(3, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 3] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r4(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r4 [ข้อความ]");

	if (playerData[playerid][pRadio] < 4)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 4, ReturnRealName(playerid), params);
		SendRadioMessageEx(4, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(4, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 4, ReturnRealName(playerid), params);
		SendRadioMessageEx(4, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 4] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r5(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r5 [ข้อความ]");

	if (playerData[playerid][pRadio] < 5)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 5, ReturnRealName(playerid), params);
		SendRadioMessageEx(5, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(5, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 5, ReturnRealName(playerid), params);
		SendRadioMessageEx(5, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 5] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r6(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r6 [ข้อความ]");

	if (playerData[playerid][pRadio] < 6)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 6, ReturnRealName(playerid), params);
		SendRadioMessageEx(6, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(6, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 6, ReturnRealName(playerid), params);
		SendRadioMessageEx(6, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 6] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r7(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r7 [ข้อความ]");

	if (playerData[playerid][pRadio] < 7)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 7, ReturnRealName(playerid), params);
		SendRadioMessageEx(7, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(7, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 7, ReturnRealName(playerid), params);
		SendRadioMessageEx(7, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 7] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}

CMD:r8(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r8 [ข้อความ]");

	if (playerData[playerid][pRadio] < 8)
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถวิทยุได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], 8, ReturnRealName(playerid), params);
		SendRadioMessageEx(8, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(8, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], 8, ReturnRealName(playerid), params);
		SendRadioMessageEx(8, playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);
	ProxDetector(playerid, 20.0, string);
/*
	format(szQuery, sizeof(szQuery), "[CH: %d S: 8] %s", playerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);*/
	return 1;
}




CMD:rlow(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/rlow [ข้อความ]");

	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_WHITE,"คุณสามารถซื้อโทรศัพท์มือถือได้ที่ 24-7");

	if (!playerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณยังไม่ได้ตั้งค่าช่องวิทยุ");

	new
	    string[128];

	if(playerData[playerid][pRChannel] == 911 && GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",playerData[playerid][pRChannel], playerData[playerid][pRSlot], ReturnRealName(playerid), params);
		SendRadioMessage(playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessage(playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", playerData[playerid][pRChannel], playerData[playerid][pRSlot], ReturnRealName(playerid), params);
		SendRadioMessage(playerid, string);


	}
	format(string, sizeof(string),"(Radio) %s: %s", ReturnRealName(playerid), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 5.0, 6000);
	ProxDetector(playerid, 5.0, string);

	/*format(szQuery, sizeof(szQuery), "[CH: %d S: %d] %s", playerData[playerid][pRChannel], playerData[playerid][pRSlot], params);
   	SQL_LogChat(playerid, "/rlow", szQuery);*/
	return 1;
}

CMD:setslot(playerid, params[])
{
	new
	    slot;

	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"   คุณไม่มีวิทยุ");

	if (sscanf(params, "d", slot)) return SendSyntaxMessage(playerid, "/setslot [1-%d]", playerData[playerid][pRadio]);

	if(slot < 1 && slot > playerData[playerid][pRadio]) return SendClientMessageEx(playerid, COLOR_GRAD1,"   สล็อตต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", playerData[playerid][pRadio]);

	if(playerData[playerid][pRadio] >= slot) ConnectRadio(playerid, slot, playerData[playerid][pRChannel]);
	else SendClientMessage(playerid, COLOR_GRAD1,"   วิทยุของคุณไม่รองรับสล็อตนี้");

	return 1;
}

CMD:setchannel(playerid, params[])
{
	new
	    slot, ch;

	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"   คุณไม่มีวิทยุ");

	if (sscanf(params, "dd", slot, ch)) return SendSyntaxMessage(playerid, "/setchannel [slot ID] [channel #]");

	if(playerData[playerid][pRadio] >= slot) ConnectRadio(playerid, slot, ch);
	else SendClientMessage(playerid, COLOR_GRAD1, "   วิทยุของคุณไม่รองรับสล็อตนี้");

	return 1;
}

CMD:part(playerid, params[])
{
	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"   คุณไม่มีวิทยุ");

	if(playerData[playerid][pRChannel])
	{
	    playerData[playerid][pRChannel] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "   คุณได้ออกจากช่องวิทยุในปัจจุบันแล้ว");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในช่องวิทยุใด ๆ");

	return 1;
}

CMD:auth(playerid, params[])
{
    new password[24], esc_password[24];

	if (!playerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"   คุณไม่มีวิทยุ");

	if (sscanf(params, "s[24]", password))
	   	return SendSyntaxMessage(playerid, "/auth [password]");

	if(strlen(password) > 16)
		return SendClientMessage(playerid, COLOR_WHITE, "   รหัสผ่านต้องไม่เกิน 16 ตัวอักษร");

	mysql_escape_string(password,esc_password);
	format(playerData[playerid][pRAuth], 16, esc_password);
	SendClientMessage(playerid, COLOR_WHITE, "   คุณได้ตั้งรหัสผ่านวิทยุแล้ว");

	return 1;
}

CMD:cal(playerid, params[])
{
	if(playerData[playerid][pCash] >= 5000)
	{
		new channel, password[24], query[128];
		if (sscanf(params, "dS(None)[24]", channel, password))
			return SendSyntaxMessage(playerid, "/cal [channel] [password]");

		if(channel == 911) return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องนี้สำหรับหน่วยงานรัฐ");

        mysql_escape_string(password, password);

		format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", channel);
		mysql_query(dbCon, query);

		if(cache_num_rows()) {

			new owning_id;
			cache_get_value_name_int(0, "owning_character", owning_id);

			if(playerData[playerid][pID] == owning_id)
			{
			    //Update Password

				format(query, sizeof(query), "UPDATE `radio` SET `password` = '%s' WHERE `channel` = %d;", password, channel);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้ตั้งรหัสผ่านให้กับวิทยุช่อง #%d", channel);
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องวิทยุนี้มีเจ้าของแล้ว ");
				return 1;
			}
		}
		else
		{
			format(query,sizeof(query),"INSERT INTO `radio` (channel,owning_character,password) VALUES ('%d','%d','%s')", channel, playerData[playerid][pID], password);
			mysql_query(dbCon, query);

			playerData[playerid][pCash]-=5000;


			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			//SQL_SaveCharacter(playerid);

			SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้เช่าวิทยุช่อง #%d ในราคา $5,000",channel);
		}
	}
	else
	{

		SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ ($5,000) !");
		return 1;

	}
	return 1;
}

CMD:kickoffradio(playerid, params[])
{
	new targetid, query[128];

	if (sscanf(params, "u", targetid))
		return SendSyntaxMessage(playerid, "/kickoffradio [ID]");

    if(playerid == targetid) return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่สามารถใช้กับตัวเองได้!!");

	if(IsPlayerConnected(targetid))
	{
	    if(playerData[playerid][pRChannel] == playerData[targetid][pRChannel] && playerData[playerid][pRChannel] != 0)
	    {
			format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", playerData[playerid][pRChannel]);
			mysql_query(dbCon, query);

			if(cache_num_rows()) {

				new owning_id;
				cache_get_value_name_int(0, "owning_character", owning_id);

				if(playerData[playerid][pID] == owning_id)
				{
				    playerData[targetid][pRChannel] = 0;
					SendClientMessageEx(playerid, COLOR_GRAD1, "คุณได้เตะ %s ออกจากช่องวิทยุของคุณ", ReturnRealName(targetid));
					SendClientMessageEx(targetid, COLOR_GRAD1, "คุณถูก %s เตะออกจากช่องวิทยุของเขา", ReturnRealName(playerid));
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของวิทยุช่องนี้");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของวิทยุช่องนี้");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของวิทยุช่องนี้");
			return 1;
		}
	}
	return 1;
}

// Radio System




// Private Vehicle System

/*CMD:vehiclename(playerid, params[]) 
{
	new
	    type[64],
		vehicleid;

	vehicleid = GetPlayerVehicleID(playerid);

	if(playerData[playerid][pRequestVehicle] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: {FFFFFF}มีคำขอที่รอดำเนินการสำหรับยานพาหนะนี้แล้ว");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}หากคุณต้องการยกเลิกคำขอ? พิมพ์ /remove_vehiclename");
		return 1;
	}

	if (sscanf(params, "s[64]", type))
 	{
 	    SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	 	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /vehiclename [ป้อนชื่อที่กำหนดเอง]");
	    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: ต้องไม่ใส่จุดลงท้ายชื่อยานพาหนะ");
	    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: ชื่อรุ่นที่กำหนดเองของคุณนั้นควรใส่ปีของรุ่นรถนั้นด้วย");
		SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: หากคุณต้องการลบชื่อรุ่นที่คุณกำหนดเอง, คุณสามารถพิมพ์ /remove_vehiclename");
		SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
		return 1;
	}

	if(isnull(type))
		return SendClientMessage(playerid, COLOR_GRAD2, "คุณต้องกำหนดชื่อรุ่นของยานพาหนะ!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

	if((vehicleid = Car_GetID(vehicleid)) != -1)
	{
		if(vehicleid == playerData[playerid][pPCarkey])
		{
			//format(CarData[vehicleid][carName], 64, type);
			format(playerData[playerid][pRVehicleMessage], 64, type);
			playerData[playerid][pRequestVehicle] = 1;
			playerData[playerid][pVehicleID] = GetPlayerVehicleID(playerid);
			SendClientMessageEx(playerid, COLOR_GRAD2, "%d", GetPlayerVehicleID(playerid));
			SendAdminAlert(COLOR_LIGHTRED, "มีคำขอเกี่ยวกับรุ่นของยานพาหนะเข้ามาใหม่ '/vehnames list' เพื่อตรวจสอบ");

			SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}คำขอของคุณได้ถูกส่งไปเรียบร้อยแล้ว #%d", playerid);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "คำสั่งนี้สามารถใช้ได้เฉพาะกับยานพาหนะส่วนตัวเท่านั้น!");
	}
	else return 1;

	return 1;
}

CMD:remove_vehiclename(playerid, params[]) 
{
	new
	    type[64],
		vehicleid;

	vehicleid = GetPlayerVehicleID(playerid);

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

	if((vehicleid = Car_GetID(vehicleid)) != -1)
	{
		if(vehicleid == playerData[playerid][pPCarkey])
		{
			format(CarData[vehicleid][carName], 64, "None");
			CarData[vehicleid][carActive] = 0;

			format(playerData[playerid][pRVehicleMessage], 64, type);
			playerData[playerid][pRequestVehicle] = 0;

			SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}คำขอของคุณได้รับการยกเลิกเรียบร้อยแล้ว!", playerid);
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "คำสั่งนี้สามารถใช้ได้เฉพาะกับยานพาหนะส่วนตัวเท่านั้น!");
	}
	else return 1;

	return 1;
}*/

alias:vehicle("v");
CMD:vehicle(playerid, params[])
{
	new
	    type[24],
		vehicleid,
		query[128],
		cf[16],
		cf2[16],
		cf3[16];

	if (sscanf(params, "s[24]S()[16]S()[16]S()[16]", type, cf, cf2, cf3))
 	{
 	    SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	 	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle [action]");
	    SendClientMessage(playerid, COLOR_YELLOW3, "[Actions] get, park, sell, register, unregister, buy, upgrade, lights");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Actions] stats, tow, duplicatekey, faction, find, buypark, lock");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Delete] scrap (คำเตือน: ยานพาหนะของคุณจะถูกลบอย่างสมบูรณ์)");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Hint] มีคำแนะนำวิธีใช้การปฏิบัติเหล่านี้ทั้งหมดที่ forum.la-rp.co.th");
		SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
		return 1;
	}

	if (!strcmp(type, "list", true) || !strcmp(type, "get", true))
	{
		if(GetNumberOwnerCar(playerid)) ShowPlayerCarMenu(playerid);
		else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่มียานพาหนะที่เป็นเจ้าของ");
	}
	else if (!strcmp(type, "sell", true))
	{

		if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID]) {

            vehicleid = GetPlayerVehicleID(playerid);

			if(!IsPlayerInAnyVehicle(playerid) || vehicleid != CarData[playerData[playerid][pPCarkey]][carVehicle])
				return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในยานพาหนะ");

			if(IsDonateCar(CarData[playerData[playerid][pPCarkey]][carModel])) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถขายยานพาหนะบริจาคนี้ได้");

			new userid = INVALID_PLAYER_ID, price;

			if(sscanf(params, "{s[24]}ud", userid, price)) return SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle sell [ไอดีผู้เล่น/ชื่อบางส่วน] [ราคา]");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "{s[24]}s[24]{d}", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");
				}
			}

			if(userid == playerid)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถเสนอให้ตัวเองได้!");

			if(tToAccept[userid] != OFFER_TYPE_NONE)
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นมีข้อเสนออยู่ในปัจจุบัน!");

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");


			if(playerData[userid][pPCarkey] != 9999)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นมียานพาหนะส่วนตัวที่ปรากฏอยู่!");

			if(GetNumberOwnerCar(userid) >= 10)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นมียานพาหนะส่วนตัวถึงขีดจำกัดแล้ว!");

			if(price < 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ราคาไม่ถูกต้อง!");

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: ข้อเสนอถูกส่ง");

			pToAccept[userid] = playerid;
			vToAccept[userid] = playerData[playerid][pPCarkey];
			prToAccept[userid] = price;
			tToAccept[userid] = OFFER_TYPE_VSELL;

			format(query, sizeof(query), "%s has offered to sell you their ~y~%s ~n~~w~for ~g~%s~n~~p~press ~g~Y~p~ to accept or ~r~N ~p~to deny.", ReturnRealName(pToAccept[userid]), g_arrVehicleNames[CarData[vToAccept[userid]][carModel] - 400], FormatNumber(prToAccept[userid]));
		 	ShowPlayerFooter(userid, query, -1);

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
	}
	else if (!strcmp(type, "duplicatekey", true))
	{
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID]) {

        	if(!IsPlayerInAnyVehicle(playerid) && vehicleid == CarData[playerData[playerid][pPCarkey]][carVehicle]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในยานพาหนะ");

			if(playerData[playerid][pCash] < 500)
				return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ ($500) !");

			new userid;

			if (sscanf(cf, "u", userid))
				return SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle duplicatekey [ไอดีผู้เล่น/ชื่อบางส่วน]");

			if (userid == playerid)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถเสนอให้ตัวเองได้!");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(cf, "s[24]", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");
				}
			}

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
			    return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");


	        SendNearbyMessage(playerid, 30.0, COLOR_GREEN, "* %s ได้ให้ชุดกุญแจสำรองของ %s ให้กับ %s", ReturnRealName(playerid), g_arrVehicleNames[CarData[playerData[playerid][pPCarkey]][carModel] - 400], ReturnRealName(userid));
            playerData[userid][pPDupkey] = CarData[playerData[playerid][pPCarkey]][carDupKey];
            playerData[playerid][pCash]-=500;

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
	}
	else if (!strcmp(type, "insurance", true))
	{
		new id = -1;

		if ((id = Biz_Nearest(playerid, 10.0)) != -1 && BizInfo[id][bType] == 4)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
				if(CarData[playerData[playerid][pPCarkey]][carOwe] <= 0) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีค่าปรับค้างชำระอยู่ในปัจจุบัน");
					return 1;
				}
				
		        if(!strlen(cf))
		        {
					SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(CarData[playerData[playerid][pPCarkey]][carOwe]));
					SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle insurance "EMBED_YELLOW"pay");
	         	}
				else if(!strcmp(cf,"pay",true))
				{
					if(playerData[playerid][pCash] >= CarData[playerData[playerid][pPCarkey]][carOwe]) {
						SendClientMessageEx(playerid, COLOR_YELLOW, "INSURANCE: ขอบคุณสำหรับการชำระเงินจำนวน %s!", FormatNumber(CarData[playerData[playerid][pPCarkey]][carOwe]));
						playerData[playerid][pCash]-=CarData[playerData[playerid][pPCarkey]][carOwe];
						CarData[playerData[playerid][pPCarkey]][carOwe]=0;
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถจ่ายมันได้ขออถัยด้วย");
				}
				else {
					SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(CarData[playerData[playerid][pPCarkey]][carOwe]));
					SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle insurance "EMBED_YELLOW"pay");
				}
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");
	}
	else if (!strcmp(type, "upgrade", true))
	{
		new id = -1;

		if ((id = Biz_Nearest(playerid, 10.0)) != -1 && BizInfo[id][bType] == 4)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new uplevel = strval(cf2);

		        if(!strlen(cf))
		        {
	             	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level]");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] lock, alarm, immob, insurance, armour");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] battery, engine (( ตัวเลือกนี้จะวางทับของเดิม ))");
	         	}
				else if(!strcmp(cf,"lock",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"yes",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADELOCK, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[uplevel-1][u_rate]) + VehicleUpgradeLock[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level] "EMBED_YELLOW"yes");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade lock [lock-level]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "ระบบล็อคระดับ 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "ระบบล็อคระดับ 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "ระบบล็อคระดับ 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "ระบบล็อคระดับ 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
					}
				}
				else if(!strcmp(cf,"alarm",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"yes",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEALARM, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[uplevel-1][u_rate]) + VehicleUpgradeAlarm[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level] "EMBED_YELLOW"yes");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade alarm [alarm-level]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "สัญญาณเตือนภัยระดับ 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "สัญญาณเตือนภัยระดับ 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "สัญญาณเตือนภัยระดับ 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "สัญญาณเตือนภัยระดับ 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
					}
				}
				else if(!strcmp(cf,"immob",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"yes",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEIMMOB, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[uplevel-1][u_rate]) + VehicleUpgradeImmob[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level] "EMBED_YELLOW"yes");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade immob [immob-level]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob Level 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob Level 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob Level 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob Level 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
					}
				}
				else if(!strcmp(cf,"insurance",true))
				{
					if(CarData[playerData[playerid][pPCarkey]][carOwe] > 0) {
						SendClientMessage(playerid, COLOR_LIGHTRED, "INSURANCE: การจ่ายค่าปรับประกันภัยของคุณไม่สำเร็จ");
						SendClientMessage(playerid, COLOR_LIGHTRED, "INSURANCE: เราไม่สามารถให้บริการนี้กับคุณได้จนกว่าจะชำระเงินเสร็จสมบูรณ์");
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: /v insurance pay (ขณะอยู่ในรถยนต์ ณ ตัวแทนจำหน่ายยานพาหนะ)");
						return 1;
					}
						
					if(uplevel > 0 && uplevel < 4 && !IsABike(vehicleid) && !IsABicycle(vehicleid))
					{
						if(!strcmp(cf3,"yes",true) && strlen(cf3))
					    {
					        //if(IsABicycle(vehicleid) && IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: ขออภัย ดูเหมือนมันจะไม่ทำงานกับจักรยานรุ่นนี้");
							//if(IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: ขออภัย ดูเหมือนมันจะไม่ทำงานกับจักรยานยนต์รุ่นนี้");

							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEINSURANCE, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(((IsABike(vehicleid)) ? 1000 : 2500) * uplevel));
							SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level] "EMBED_YELLOW"yes");
					    }
					}
					else
					{	
						SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade insurance [insurance-level]");
						SendClientMessage(playerid, COLOR_YELLOW3, "Insurance 1st Level: ปรากฏยานพาหนะด้วยเลือดสูงสุดทุกครั้ง");
						SendClientMessage(playerid, COLOR_YELLOW3, "Insurance 2nd Level: ป้องกันความเสียหายแบบ Cosmetic damage เมื่อยานพาหนะปรากฏอีกครั้งมันจะดีเหมือนใหม่");
						SendClientMessage(playerid, COLOR_YELLOW3, "Insurance 3rd Level: คุ้มครองการปรับแต่งยานพาหนะ เราจะเก็บเค้าโครงที่ปรับแต่งและเพลง XM ไว้ทั้งคู่");
					}
				}
				else if(!strcmp(cf,"armour",true))
				{
					if(uplevel >= 10 && uplevel <= 250 && (CarData[playerData[playerid][pPCarkey]][carArmour] + float(uplevel)) <= 250)
					{
						if(!strcmp(cf3,"yes",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
								new time = 5;
								if(uplevel >= 20) time = uplevel/10;

							 	SetVehicleLabel(vehicleid, VLT_TYPE_ARMOUR, time);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(uplevel * GetVehicleDataArmourCost(CarData[playerData[playerid][pPCarkey]][carModel])));
					        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level] "EMBED_YELLOW"yes");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade armour [จำนวน]");
		                SendClientMessage(playerid, COLOR_YELLOW3, "AMOUNT: 10-250");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "{33AA33}$%d{F0EA92} per Armour point.", GetVehicleDataArmourCost(CarData[playerData[playerid][pPCarkey]][carModel]));
					}
				}
				else if(!strcmp(cf,"battery",true))
				{
					if(!strcmp(cf2,"yes",true) && strlen(cf2))
					{
						if(!VehicleLabel[vehicleid][vLabelTime])
						{
							SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEBATTERY, 30);
							CoreVehicles[vehicleid][vOwnerID] = playerid;
							CoreVehicles[vehicleid][vUpgradeID] = uplevel;
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					}
					else
					{
					   	SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / 2.48) + floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_battery] * 13.0)));
					  	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade battery "EMBED_YELLOW"yes");
					}
				}
				else if(!strcmp(cf,"engine",true))
				{
					if(!strcmp(cf2,"yes",true) && strlen(cf2))
					{
						if(!VehicleLabel[vehicleid][vLabelTime])
						{
							SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEENGINE, 30);
							CoreVehicles[vehicleid][vOwnerID] = playerid;
							CoreVehicles[vehicleid][vUpgradeID] = uplevel;
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
					}
					else
					{
					   	SendClientMessageEx(playerid, COLOR_YELLOW, "การดำเนินการนี้ต้องการ %s", FormatNumber(floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_price] / 1.72) + floatround(VehicleData[CarData[playerData[playerid][pPCarkey]][carModel] - 400][c_engine] * 13.0)));
					  	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade engine "EMBED_YELLOW"yes");
					}
				}
				else
				{
	             	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle upgrade [upgrade] [upgrade-level]");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] lock, alarm, immob, insurance, armour");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] battery, engine (( ตัวเลือกนี้จะวางทับของเดิม ))");
				}
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");
	}
	else if (!strcmp(type, "scrap", true))
	{
		vehicleid = GetPlayerVehicleID(playerid);
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new scrap_price = VehicleData[GetVehicleModel(vehicleid) - 400][c_scrap];
	        if(scrap_price)
	        {
			    if(!strcmp(cf,"yes",true) && strlen(cf))
			    {
					format(query, sizeof(query), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[playerData[playerid][pPCarkey]][carSID]);
					mysql_tquery(dbCon, query, "OnPlayerVehicleScrap", "dd", playerid, scrap_price);
			    }
			    else
			    {
			 	    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: คุณได้เลือกที่จะทำให้ยานพาหนะเป็นเศษซาก");
				 	SendClientMessageEx(playerid, COLOR_YELLOW3, "SERVER: คุณจะได้รับแค่ %s จากการทำให้เป็นเศษซาก", FormatNumber(scrap_price));
				    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: เมื่อคุณทำลายให้เป็นเศษซาก ยานพาหนะนั้นจะถูกลบออกจากที่มีอยู่");
			        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle scrap yes");
			    }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "โปรดติดต่อผู้ดูแลระบบ เนื่องจากราคาต่ำกว่า $1");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
	}
	else if (!strcmp(type, "faction", true))
	{
	    new temp_faction = playerData[playerid][pFaction];
	    if(temp_faction == -1 || playerData[playerid][pFactionRank] > 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ผู้นำของ Faction");

		new count_vehicle=0;
		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleFaction] == temp_faction) {
                count_vehicle++;
			}
		}

		if(count_vehicle >= FactionData[temp_faction][factionVehicle]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะแฟคชั่นของคุณเต็มจำนวนสูงสุดแล้ว");
		
		new carid = playerData[playerid][pPCarkey];
		vehicleid = GetPlayerVehicleID(playerid);
	    if(carid != 9999 && CarData[carid][carVehicle] == vehicleid && CarData[carid][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new scrap_price = VehicleData[GetVehicleModel(vehicleid) - 400][c_scrap];
	        if(scrap_price)
	        {
			    if(!strcmp(cf,"yes",true) && strlen(cf))
			    {
					format(query, sizeof(query), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carSID]);
					mysql_tquery(dbCon, query, "OnPlayerVehicleFaction", "ii", playerid, carid);
			    }
			    else
			    {
			 	    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: คุณแน่ใจแล้วหรือที่จะย้ายยานพาหนะคันนี้ให้เป็นของแฟคชั่น");
				 	SendClientMessageEx(playerid, COLOR_YELLOW3, "SERVER: ยานพาหนะส่วนตัวของคุณจะถูกลบและไม่สามารถกู้คืนมาได้");
			        SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle faction yes");
			    }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "โปรดติดต่อผู้ดูแลระบบ เนื่องจากราคาต่ำกว่า $1");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
	}
	else if (!strcmp(type, "buy", true))
	{
	    new id = -1;

		if ((id = nearBiz_var[playerid]) != -1 && BizInfo[id][bType] == 4)
		{
            ShowPlayerDealershipMenu(playerid);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");
	}
	else if (!strcmp(type, "find", true))
	{
		if(FishingPlace[playerid] != -1)
			return SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องหยุดการตกปลาก่อนจึงจะสามารถค้นหารถได้");

	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID]) {
			new vid = CarData[playerData[playerid][pPCarkey]][carVehicle];
			if(GetVehicleDriver(vid) == INVALID_PLAYER_ID && !VehicleLabel[vid][vLabelTime])
			{
			    new Float:vehDistance[3];
			    GetVehiclePos(vid, vehDistance[0], vehDistance[1], vehDistance[2]);
				SetPlayerCheckpoint(playerid,vehDistance[0], vehDistance[1], vehDistance[2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "มีใครบางคนอยู่ในรถของคุณ เราไม่สามารถค้นหามันได้!");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
	}
	else if (!strcmp(type, "park", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    if (IsPlayerInRangeOfPoint(playerid, 4.0, CarData[playerData[playerid][pPCarkey]][carPos][0], CarData[playerData[playerid][pPCarkey]][carPos][1], CarData[playerData[playerid][pPCarkey]][carPos][2])) {
                
				SaveVehicleDamage(vehicleid);
				Car_Save(vehicleid);
                Car_DespawnEx(playerData[playerid][pPCarkey]);
                playerData[playerid][pPCarkey] = 9999;
                SendClientMessage(playerid, COLOR_GREEN, "ยานพาหนะถูกจอด");
		    }
		    else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่จอดยานพาหนะคันนี้");
				SendClientMessage(playerid, TEAM_CUN_COLOR, "ตามเครื่องหมาย");
			    SetPlayerCheckpoint(playerid,CarData[playerData[playerid][pPCarkey]][carPos][0], CarData[playerData[playerid][pPCarkey]][carPos][1], CarData[playerData[playerid][pPCarkey]][carPos][2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
	}
	else if (!strcmp(type, "buypark", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new bool:housepark = false;

		    foreach(new i : sv_houses) {
				if(HouseInfo[i][hOwned] != 0) {

					if(HouseInfo[i][hSubid] != -1 && (playerData[playerid][pHouseKey] == i || strcmp(ReturnPlayerName(playerid), HouseInfo[i][hOwner], true) == 0)) {
						new temp_house = HouseInfo[i][hSubid];
						if(IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[temp_house][hEntranceX], HouseInfo[temp_house][hEntranceY], HouseInfo[temp_house][hEntranceZ])) {
							housepark = true;
							break;
						}
					}
					if(HouseInfo[i][hSubid] == -1 && (playerData[playerid][pHouseKey] == i || strcmp(ReturnPlayerName(playerid), HouseInfo[i][hOwner], true) == 0)) {
						if(IsPlayerInRangeOfPoint(playerid, 20.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) && HouseInfo[i][hOwned] != 0) {
							housepark = true;
							break;
						}
					}
				}
			}
	        if(playerData[playerid][pCash] < 5000 && !housepark)
				return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ ($5,000) !");

			format(query, sizeof(query), "SELECT carPosX, carPosY, carPosZ FROM `cars`");
			mysql_query(dbCon, query);

			new
				Float:vehDistance[4],
				bool:checked = false
			;

			new rows;
			cache_get_row_count(rows);

			for (new i = 0; i < rows; i ++)
			{
				cache_get_value_index_float(i, 0,	vehDistance[0]);
				cache_get_value_index_float(i, 1,	vehDistance[1]);
				cache_get_value_index_float(i, 2,	vehDistance[2]);

			    if (IsPlayerInRangeOfPoint(playerid, 4.5, vehDistance[0], vehDistance[1], vehDistance[2]) && GetPlayerVirtualWorld(playerid) == 0) {
					checked = true;
					break;
				}
			}

			if(!checked)
			{
			    GetVehiclePos(vehicleid, vehDistance[0], vehDistance[1], vehDistance[2]);
			    GetVehicleZAngle(vehicleid, vehDistance[3]);

                CarData[playerData[playerid][pPCarkey]][carPos][0]=vehDistance[0];
                CarData[playerData[playerid][pPCarkey]][carPos][1]=vehDistance[1];
                CarData[playerData[playerid][pPCarkey]][carPos][2]=vehDistance[2];
                CarData[playerData[playerid][pPCarkey]][carPos][3]=vehDistance[3];

				CarData[playerData[playerid][pPCarkey]][carWorld] = GetPlayerVirtualWorld(playerid);
				CarData[playerData[playerid][pPCarkey]][carInt] = GetPlayerInterior(playerid);

                SaveVehicleDamage(vehicleid);
                Car_Save(vehicleid);
                Car_DespawnEx(playerData[playerid][pPCarkey]);
                playerData[playerid][pPCarkey] = 9999;
                SendClientMessage(playerid, COLOR_GREEN, "ยานพาหนะถูกจอด");

	         	if(!housepark) {
				 	playerData[playerid][pCash] -= 5000;

					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
					mysql_query(dbCon, szQuery);
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "พื้นที่จอดรถตรงนี้ถูกใช้แล้ว");
		}
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");
	}
	else if (!strcmp(type, "stats", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerVehicleID(playerid) == CarData[playerData[playerid][pPCarkey]][carVehicle] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Life Span: Engine Life[%.2f], Battery Life[%.2f], Miles Driven[%.2f]", CarData[playerData[playerid][pPCarkey]][carEngineL], CarData[playerData[playerid][pPCarkey]][carBatteryL], CarData[playerData[playerid][pPCarkey]][carMileage]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Security: Lock[%d], Alarm[%d], Immob[%d], Insurance[%d]", CarData[playerData[playerid][pPCarkey]][carLock], CarData[playerData[playerid][pPCarkey]][carAlarm], CarData[playerData[playerid][pPCarkey]][carImmob], CarData[playerData[playerid][pPCarkey]][carInsurance]);

			if(CarData[playerData[playerid][pPCarkey]][carArmour]) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Primary Color[{%06x}#%d"EMBED_WHITE"], Secondary Color[{%06x}#%d"EMBED_WHITE"], License Plate[%s], Armour[%.2f]",
				g_arrSelectColors[CarData[playerData[playerid][pPCarkey]][carColor1]] >>> 8, CarData[playerData[playerid][pPCarkey]][carColor1], g_arrSelectColors[CarData[playerData[playerid][pPCarkey]][carColor2]] >>> 8, CarData[playerData[playerid][pPCarkey]][carColor2], CarData[playerData[playerid][pPCarkey]][carPlate], CarData[playerData[playerid][pPCarkey]][carArmour]);
		    }
		    else
		    {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Primary Color[{%06x}#%d"EMBED_WHITE"], Secondary Color[{%06x}#%d"EMBED_WHITE"], License Plate[%s]",
				g_arrSelectColors[CarData[playerData[playerid][pPCarkey]][carColor1]] >>> 8, CarData[playerData[playerid][pPCarkey]][carColor1], g_arrSelectColors[CarData[playerData[playerid][pPCarkey]][carColor2]] >>> 8, CarData[playerData[playerid][pPCarkey]][carColor2], CarData[playerData[playerid][pPCarkey]][carPlate]);
		    }
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในยานพาหนะของคุณ");
	}
	else if (!strcmp(type, "register", true))
	{

		if(playerData[playerid][pCash] < 100)
			return SendClientMessage(playerid, COLOR_YELLOW3, "การดำเนินการนี้ต้องการ $100");

		new id = -1;

		if ((id = nearBiz_var[playerid]) != -1 && BizInfo[id][bType] == 4)
		{
		    vehicleid = GetPlayerVehicleID(playerid);
		    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
				if(!VehicleLabel[vehicleid][vLabelTime])
				{
		         	SetVehicleLabel(vehicleid, VLT_TYPE_REGISTER, 10);
					CoreVehicles[vehicleid][vOwnerID] = playerid;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");
	}
	else if (!strcmp(type, "unregister", true))
	{
	    if (IsAtBlackMarket(playerid)) {
		    vehicleid = GetPlayerVehicleID(playerid);
		    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
				if(!VehicleLabel[vehicleid][vLabelTime])
				{
		         	SetVehicleLabel(vehicleid, VLT_TYPE_UNREGISTER, 10);

					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: ลบการลงทะเบียนยานพาหนะได้เริ่มขึ้น...");
					CoreVehicles[vehicleid][vOwnerID] = playerid;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ตลาดมืด");
	}
	else if (!strcmp(type, "tow", true))
	{
	    if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID]) {

		 	if(playerData[playerid][pCash] < 2000)
				return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ ($2,000) !");

            new vid = CarData[playerData[playerid][pPCarkey]][carVehicle], streamin = 0;

			foreach (new i : Player) if(IsVehicleStreamedIn(vid, i)) streamin++;

            if(isDeathmode{playerid} || isInjuredmode{playerid} || streamin || isKNOmode{playerid})
                return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่สามารถใช้ได้ในขณะนี้ (คุณกำลังบาดเจ็บ/ตายหรือมีคนอื่นอยู่ในบริเวณยานพาหนะของคุณ)");
            
			if(GetVehicleDriver(vid) == INVALID_PLAYER_ID)
			{
			    if(!VehicleLabel[vid][vLabelTime])
			    {
	                SetVehicleLabel(vid, VLT_TYPE_TOWING, 15);
					SendClientMessage(playerid, COLOR_GREEN, "ยานพาหนะกำลังถูกลาก");
					playerData[playerid][pCash] -= 2000;
					CoreVehicles[vid][vOwnerID] = playerid;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s ได้ถูกใช้ / ขโมย", g_arrVehicleNames[GetVehicleModel(vid) - 400]);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");
	}
	else if (!strcmp(type, "lights", true))
	{
	    if (IsPlayerInAnyVehicle(playerid)) {

			vehicleid = GetPlayerVehicleID(playerid);

			if (!IsEngineVehicle(vehicleid))
				return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้อยู่ในยานพาหนะ");

			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

			switch (GetLightStatus(vehicleid))
			{
			    case false:
			    {
			        SetLightStatus(vehicleid, true);
			        GameTextForPlayer(playerid, "~g~Lights On", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(vehicleid, false);
				    GameTextForPlayer(playerid, "~r~Lights Off", 2000, 4);
					
					if(CoreVehicles[ vehicleid ][ vELMTimer ] != -1) {
						KillTimer(CoreVehicles[ vehicleid ][ vELMTimer ]);
						CoreVehicles[ vehicleid ][ vELMTimer ] = -1;
						UpdateVehicleDamageStatus(vehicleid, CoreVehicles[vehicleid][vehDamage][0], CoreVehicles[vehicleid][vehDamage][1], CoreVehicles[vehicleid][vehDamage][2], CoreVehicles[vehicleid][vehDamage][3]);
					}
				}
			}

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "   คุณไม่ได้อยู่ในยานพาหนะ");
	}
	else if (!strcmp(type, "lock", true))
	{

		if( (IsPlayerInAnyVehicle(playerid) ? ((vehicleid = GetPlayerVehicleID(playerid)) != 0) : ((vehicleid = Vehicle_Nearest(playerid)) != -1)) /*&& !IsABicycle(vehicleid)*/)
		{
	 		new
	 		    id,
			    engine,
			    lights,
			    alarm,
			    doors,
			    bonnet,
			    boot,
			    objective;


		    if((id = Car_GetID(vehicleid)) != -1)
		    {
				if((id == playerData[playerid][pPCarkey] && CarData[id][carOwner] == playerData[playerid][pID]) || id == playerData[playerid][pPDupkey]) {

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if (!CarData[id][carLocked])
					{
						CarData[id][carLocked] = true;
						Car_Save(id);

	                    format(query, sizeof(query), "~r~%s Locked", ReturnVehicleModelName(CarData[id][carModel]));
						GameTextForPlayer(playerid, query, 2000, 4);

						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
						CarData[id][carLocked] = false;
						Car_Save(id);

	                    format(query, sizeof(query), "~g~%s Unlocked", ReturnVehicleModelName(CarData[id][carModel]));
						GameTextForPlayer(playerid, query, 2000, 4);


						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, objective);
					}

				}
				else {

					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณไม่สามารถเข้าถึงยานพาหนะนี้ได้");
					if (CarData[id][carLocked]) {
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: หากคุณพยายามที่จะพังเข้าไป: "EMBED_YELLOW"\"/lock "EMBED_WHITE"breakin"EMBED_YELLOW"\"");
					}
				}
		    }
		    else
		    {

                if (IsPlayerInAnyVehicle(playerid)) {

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if(doors != 1)
					{
					    format(query, sizeof(query), "~r~%s Locked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, query, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
					    format(query, sizeof(query), "~g~%s Unlocked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, query, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
					}

				}
				else
				{
				    if(gLastCar[playerid] == vehicleid)
				    {
						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

						if(doors != 1)
						{
						    format(query, sizeof(query), "~r~%s Locked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
							GameTextForPlayer(playerid, query, 2000, 4);
							SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
						}
						else
						{
						    format(query, sizeof(query), "~g~%s Unlocked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
							GameTextForPlayer(playerid, query, 2000, 4);
							SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
						}
				    }
				}

		    }
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, " ..ไม่มียานพาหนะอยู่ใกล้คุณ");
		//if (IsPlayerInAnyVehicle(playerid))
	    /*if(playerData[playerid][pPCarkey] != 999) {

			vehicleid = CarData[playerData[playerid][pPCarkey]][carVehicle];

			switch (GetLightStatus(vehicleid))
			{
			    case false:
			    {
			        SetLightStatus(vehicleid, true);
			        GameTextForPlayer(playerid, "~g~Lights On", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(vehicleid, false);
				    GameTextForPlayer(playerid, "~r~Lights Off", 2000, 4);
				}
			}

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");*/
	}
	else
	{
 	    SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	 	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /(v)ehicle [action]");
	    SendClientMessage(playerid, COLOR_YELLOW3, "[Actions] list, park, sell, register, unregister, buy, upgrade, lights");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Actions] stats, tow, duplicatekey, faction, find, buypark, lock");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Delete] scrap (คำเตือน: พาหนะของคุณจะถูกลบอย่างสมบูรณ์)");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Hint] มีคำแนะนำวิธีใช้การปฏิบัติเหล่านี้ทั้งหมดที่ forum.la-rp.co.th");
		SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	}
	return 1;
}

CMD:hood(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i) || GetPlayerVehicleID(playerid) == i)
	{
	    if (!IsDoorVehicle(i))
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "รถคันนี้ไม่มีฝากระโปรงหน้ารถ");

		/*if (!GetEngineStatus(i))
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณสามารถที่จะทำเช่นนี้ได้ก็ต่อเมื่อเครื่องยนต์ของยานพาหนะติดอยู่");*/

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ได้เปิดฝากระโปรงหน้ารถ", ReturnRealName(playerid));
	        GameTextForPlayer(playerid, "~g~Hood Opened", 2000, 4);
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ได้ปิดฝากระโปรงหน้ารถ", ReturnRealName(playerid));
	        GameTextForPlayer(playerid, "~r~Hood Closed", 2000, 4);
		}
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องยืนอยู่ใกล้กระโปรงหน้ารถหรือในรถ");
	return 1;
}


CMD:trunk(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) || GetPlayerVehicleID(playerid) == i)
	{
	    if (!IsDoorVehicle(i))
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Error: "EMBED_WHITE"ยานพาหนะนี้ไม่มีฝากระโปรงหลังรถ");

		if(IsVehicleTrunkBroken(i))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "(( กระโปรงหลังรถหลุดออกจากตัวถัง");
			SendClientMessage(playerid, COLOR_YELLOW, "(( ตราบใดที่มันเสีย/เปิดโล่ง จะได้รับสิทธิ์เพื่อเข้าถึง /takegun และ /place");
		    return 1;
		}

		if (GetLockStatus(i))
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Error: "EMBED_WHITE"ยานพาหนะล็อก");

	    if (!GetTrunkStatus(i))
		{
	        SetTrunkStatus(i, true);
	        SendClientMessage(playerid, COLOR_YELLOW, "คุณได้เปิดกระโปรงหลังรถ");
	        if(Car_GetID(i) != -1 && IsVehicleTrunk(i)) SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถใช้ /place และ /takegun");

			format(szString, sizeof(szString), "* %s ได้เปิดฝากระโปรงหลังรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(i) - 400]);
		 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
		 	SendClientMessage(playerid, COLOR_PURPLE, szString);

		}
		else
		{
			SetTrunkStatus(i, false);
			SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ปิดกระโปรงหลังรถ");

			format(szString, sizeof(szString), "* %s ได้ปิดฝากระโปรงหลังรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(i) - 400]);
		 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
		 	SendClientMessage(playerid, COLOR_PURPLE, szString);
		}
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องยืนอยู่ใกล้กระโปรงหลังรถหรือในรถ");

	return 1;
}
 /*
GetDoorState(doorStates, Door:door, DoorState:doorState)
	return (doorStates >>> (8 * door)) & doorState;
	*/
IsVehicleTrunkBroken(vehicleid)
{
	new damage1, damage2, damage3, damage4;
  	GetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
	//new RearBumper = damage1 >> 24 & 15;
	//new RearBumper = damage1 >> 8 * damage1 & 15;
	/*printf("Panels %d %d %d %d", (damage1 >>> (8 * 1) & 15), (damage1 >>> (8 * 2) & 15), (damage1 >>> (8 * 3) & 15), (damage1 >>> (8 * 4) & 15));
	printf("Doors %d %d %d %d", (damage2 >>> (8 * 1) & 15), (damage2 >>> (8 * 2) & 15), (damage2 >>> (8 * 3) & 15), (damage2 >>> (8 * 4) & 15));
	printf("Lights %d %d %d %d", (damage3 >>> (8 * 1) & 15), (damage3 >>> (8 * 2) & 15), (damage3 >>> (8 * 3) & 15), (damage3 >>> (8 * 4) & 15));
	printf("Tired %d %d %d %d", (damage4 >>> (8 * 1) & 15), (damage4 >>> (8 * 2) & 15), (damage4 >>> (8 * 3) & 15), (damage4 >>> (8 * 4) & 15));*/
	return (damage2 >>> 8 & 15) >= 4 ? true:false;
	// damage2 >>> (8 * 1) & 15 Truck Remove 4
	// damage2 >>> (8 * 2) & 15 Door Left
	// damage2 >>> (8 * 3) & 15 Door Right
	// damage2 >>> (8 * 4) & 15 Hood Remove 4

	//return RearBumper;
}

/*GetVehiclePanelsDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight, &WindShield, &FrontBumper, &RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	FrontLeft = Panels & 15;
	FrontRight = Panels >> 4 & 15;
	RearLeft = Panels >> 8 & 15;
	RearRight = Panels >> 12 & 15;
	WindShield = Panels >> 16 & 15;
	FrontBumper = Panels >> 20 & 15;
	RearBumper = Panels >> 24 & 15;
	return true;
}*/

IsVehicleTrunk(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case 415,517,525,473,541,545,542,562,480,475,603,402,559,474,500,401,410,589,532,496,491,526,536,549,518,436: return 10;
	    case 492,445,405,438,426,421,467,507,550,585,604,404,546,547,422,551,420,596,597,412,533,419,600,534,575,540,516,529,561,483: return 15;
	    case 580,479,567,560,535,554,478,566,446,430,601,497,487,488: return 20;
	    case 579,400,489,418,409,453,599,423: return 25;
	    case 431,582,482,508,417,408,588,454,416,490,427: return 30;
	}
	return 0;
}
// Private Vehicle System



// CHEQUE SYSTEM
CMD:cheque(playerid,params[])
{
	new tmp[32], tmp2[32], query[256];
	if (sscanf(params, "s[32]S()[32]", tmp, tmp2)) {
		SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque [param]");
		//SendClientMessage(playerid,COLOR_WHITE,"/cheque rip - ทำลายเช็คในปัจจุบันที่คุณสร้างขึ้น");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque display - ตรวจสอบโดยไอดีเช็คหรือเช็คทั้งหมดที่คุณมีอยู่ในตัว");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque give - ให้เช็คของคุณกับคนอื่น");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque cash - ใช้เช็คเป็นเงินสด");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque paycheck - รับ Paycheck จากอาชีพของคุณ");
		return 1;
	}
	if(strcmp(tmp,"display",true) == 0)
	{
	    new string[32];

		if (sscanf(tmp2, "s[32]", string)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque display all หรือ chequeID");

        if(strcmp(string,"all",true) == 0)
		{
			format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' ORDER BY id ASC", playerData[playerid][pID]);
			mysql_query(dbCon, query);

			if(cache_num_rows())
			{
			    new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64], amount, id;
			    GetPlayerName(playerid, playername, sizeof(playername));

			    for(new i = 0; i != cache_num_rows(); ++i)
			    {
				    cache_get_value_name(i, "sender", sen);
				    cache_get_value_name(i, "reciever", rec);
				    cache_get_value_name(i, "code", code);
					cache_get_value_name_int(i, "amount", amount);
					cache_get_value_name_int(i, "id", id);

                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Check_ID:_%06d_|", id);
                    SendClientMessage(playerid,COLOR_YELLOW3, "|_BANK OF LOS SANTOS - Los Santos, San Andress.");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Pay to the order of: %s |_ From: %s", rec, sen);
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|____  To the sum of: $%d", amount);
                    SendClientMessage(playerid,COLOR_YELLOW3, "| Signature: Towards your efforts n the agency.");
                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");

                    if(!strcmp(playername, rec, true))
                    {
                    	SendClientMessageEx(playerid,COLOR_YELLOW3,   "|=== Code: %s", code);
                    }
			    }
			}
		}
		else
		{
			if(IsNumeric(string))
			{
				format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' AND id = '%s'", playerData[playerid][pID], string);
				mysql_query(dbCon, query);

				if(cache_num_rows())
				{
				    new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64];

				    cache_get_value_name(0, "sender", sen);
				    cache_get_value_name(0, "reciever", rec);
				    cache_get_value_name(0, "code", code);

					new amount;
					cache_get_value_name_int(0, "amount", amount);

                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Check_ID:_%06d_|", strval(string));
                    SendClientMessage(playerid,COLOR_YELLOW3, "|_BANK OF LOS SANTOS - Los Santos, San Andress.");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Pay to the order of: %s |_ From: %s", rec, sen);
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|____  To the sum of: $%d", amount);
                    SendClientMessage(playerid,COLOR_YELLOW3, "| Signature: Towards your efforts n the agency.");
                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");

                    GetPlayerName(playerid, playername, sizeof(playername));
                    if(!strcmp(playername, rec, true))
                    {
                    	SendClientMessageEx(playerid,COLOR_YELLOW3,   "|=== Code: %s", code);
                    }
				}
			}
		}
		return 1;

	}
	else if(strcmp(tmp,"paycheck",true) == 0)
	{
	    if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 12) {

			new string[16];
			if (sscanf(tmp2, "s[16]", string)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque paycheck yes เพื่อยืนยัน");

			if(strcmp(string,"yes",true) == 0)
			{
				printf("paycheck yes");
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
		return 1;

	}
	else if(strcmp(tmp,"cash",true) == 0)
	{
	    if(BizEntered[playerid] != -1 && BizInfo[BizEntered[playerid]][bType] == 12) {

			new chequeid;
			if (sscanf(tmp2, "d", chequeid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque cash chequeID");

			format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' AND id = '%d'", playerData[playerid][pID], chequeid);
			mysql_query(dbCon, query);

			if(cache_num_rows())
			{
				new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64];

				cache_get_value_name(0, "sender", sen);
				cache_get_value_name(0, "reciever", rec);
				cache_get_value_name(0, "code", code);

				GetPlayerName(playerid, playername, sizeof(playername));
				if(!strcmp(playername, rec, true))
				{
					new amount;
					cache_get_value_name_int(0, "amount", amount);
					playerData[playerid][pChequeCash] += amount;

					SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATEMENT ___|");
					SendClientMessageEx(playerid, COLOR_FADE1, "  เช็คหมายเลข: %06d", chequeid);
					SendClientMessageEx(playerid, COLOR_FADE1, "  สั่งจ่ายให้กับ: %s", rec);
					SendClientMessageEx(playerid, COLOR_FADE1, "  จาก: %s", sen);
					SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
					SendClientMessageEx(playerid, COLOR_WHITE, "  รวมทั้งสิ้น: $%d", amount);
					SendClientMessage(playerid,COLOR_WHITE, "คุณจะได้รับเงินใน Paycheck ถัดไป");

					format(query,sizeof(query),"DELETE FROM `cheques` WHERE `id` = '%d'", chequeid);
					mysql_query(dbCon, query);
				}
				else // Need Code
				{
					new string[16];
					new pass[64];
					if (sscanf(tmp2, "s[16]s[64]", string, pass)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque cash chequeID code [pass]");

					if(strcmp(string,"code",true) == 0)
					{
						if(!strcmp(code, pass, true))
						{
							new amount;
							cache_get_value_name_int(0, "amount", amount);
							playerData[playerid][pChequeCash] += amount;

							SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATEMENT ___|");
							SendClientMessageEx(playerid, COLOR_FADE1, "  เช็คหมายเลข: %06d", chequeid);
							SendClientMessageEx(playerid, COLOR_FADE1, "  สั่งจ่ายให้กับ: %s", rec);
							SendClientMessageEx(playerid, COLOR_FADE1, "  จาก: %s", sen);
							SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
							SendClientMessageEx(playerid, COLOR_WHITE, "  รวมทั้งสิ้น: $%d", amount);
							SendClientMessage(playerid,COLOR_WHITE, "คุณจะได้รับเงินใน Paycheck ถัดไป");

							format(query,sizeof(query),"DELETE FROM `cheques` WHERE `id` = '%d'", chequeid);
							mysql_query(dbCon, query);
						}
					}
				}
			}
		}
		else SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ได้อยู่ที่ธนาคาร !");
	}
	return 1;

}

CMD:admins(playerid, params[])
{
	new str[128];
	SendClientMessage(playerid, COLOR_GREY, "Admins Online:");
	foreach(new i : Player)
	{
		if((playerData[i][pAdmin] >= 1 && playerData[i][pAdmin] <= playerData[playerid][pAdmin] && playerData[playerid][pAdmin] != 0) || (playerData[i][pAdmin] > 0 && playerData[i][pAdmin] < 1337 && playerData[playerid][pAdmin] == 0))
		{
			if(!isAdminDuty(i))
			{
				format(str, 128, "(Level: %d) %s (%s) Adminduty: ไม่", playerData[i][pAdmin], ReturnRealName(i), playerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREY, str);
			}
			else
			{
				format(str, 128, "(Level: %d) %s (%s) Adminduty: ใช่", playerData[i][pAdmin], ReturnRealName(i), playerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREEN2, str);
			}
		}
 		/*if(playerData[i][pTester] >= 1 && playerData[i][pTester] < 3)
		{
			if(!isAdminDuty(i))
			{
				format(str, 128, "(Level: %d) %s (%s) Testerduty: ไม่", playerData[i][pTester], ReturnRealName(i), playerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREY, str);
			}
			else
			{
				format(str, 128, "(Level: %d) %s (%s) Testerduty: ใช่", playerData[i][pTester], ReturnRealName(i), playerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREEN2, str);
			}
		}*/
	}
	return 1;
}

CMD:testers(playerid, params[])
{
	new str[128];
	SendClientMessage(playerid, COLOR_GREY, "Testers Online:");
	foreach(new i : Player)
	{
		if(playerData[i][pTester] >= 1)
		{
			if(!isTesterDuty(i))
			{
				format(str, 128, "(Level: %d) %s Testerduty: ไม่", playerData[i][pTester], ReturnRealName(i));
				SendClientMessage(playerid, COLOR_GREY, str);
			}
			else
			{
				format(str, 128, "(Level: %d) %s Testerduty: ใช่", playerData[i][pTester], ReturnRealName(i));
				SendClientMessage(playerid, COLOR_GREEN2, str);
			}
		}
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(!strcmp(playerData[playerid][pAdminName], "(null)", true)) {
		return SendClientMessage(playerid, COLOR_GREY, "คุณยังไม่ได้ตั้งค่าชื่อแอดมิน ติดต่อ Lead Administrator (หรือสูงกว่า) ก่อน");
	}
	else {
		if(!isAdminDuty(playerid))
		{
			SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s ได้ปฏิบัติหน้าที่เป็นผู้ดูแลระบบในขณะนี้", ReturnPlayerName(playerid));

			SetPVarInt(playerid, "AdminDuty", 1);
			SetPlayerHealthEx(playerid, 999);
			SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
		else if(isAdminDuty(playerid))
		{
			SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s ได้ออกจากการปฏิบัติหน้าที่ผู้ดูแลระบบ", ReturnPlayerName(playerid));

			DeletePVar(playerid, "AdminDuty");
			SetPlayerHealthEx(playerid, 100);
	        SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
	}
	return 1;
}

CMD:tduty(playerid, params[])
{
	if (playerData[playerid][pTester] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(!isTesterDuty(playerid))
	{
		SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s ได้ปฏิบัติหน้าที่เป็น Tester ในขณะนี้", ReturnPlayerName(playerid));
		SetPVarInt(playerid, "TesterDuty", 1);
		SetPlayerToTeamColor(playerid);
	 	foreach (new i : Player)
	 	{
			if(i != playerid)
		  	{
				RefreshMaskStatus(playerid,i);
			}
	 	}
		return 1;
	}
	else if(isTesterDuty(playerid))
	{
		SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s ได้ออกจากการปฏิบัติหน้าที่  Tester", ReturnPlayerName(playerid));
		DeletePVar(playerid, "TesterDuty");
		SetPlayerToTeamColor(playerid);
	 	foreach (new i : Player)
	 	{
			if(i != playerid)
		  	{
				RefreshMaskStatus(playerid,i);
			}
	 	}
		return 1;
	}

	return 1;
}

// Car GUI System

RenderPlayerCarMenu(playerid, page, caramount, const data[][], const header[] = "", dealership = 0)
{
	new count = 0, str[32];

	new Float:sX = 118, Float:sY = 118;
	new Float:nX = 183, Float:nY = 228;
	new Float:pX = 131, Float:pY = 141;

	for (new i = 0; i < 6; i ++)
	{
		if(data[i][0] != 0)
		{
			PCARTextSlot[playerid][i] = CreatePlayerTextDraw(playerid, sX, sY, "_");
			if(!dealership) PlayerTextDrawBackgroundColor(playerid,PCARTextSlot[playerid][i], data[i][3] ? 0x7A936AAA : 0xBDBDBDAA);
			else PlayerTextDrawBackgroundColor(playerid,PCARTextSlot[playerid][i], data[i][3] ? 0x7A936A60 : 0x92698160);

			PlayerTextDrawFont(playerid,PCARTextSlot[playerid][i], 5);
			PlayerTextDrawLetterSize(playerid,PCARTextSlot[playerid][i], 0.710000, 7.500000);
			PlayerTextDrawColor(playerid,PCARTextSlot[playerid][i], -1);
			PlayerTextDrawSetOutline(playerid,PCARTextSlot[playerid][i], 0);
			PlayerTextDrawSetProportional(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawSetShadow(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawUseBox(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawBoxColor(playerid,PCARTextSlot[playerid][i], -491797408);
			PlayerTextDrawTextSize(playerid,PCARTextSlot[playerid][i], 130.000000, 130.000000);
			PlayerTextDrawSetPreviewRot(playerid, PCARTextSlot[playerid][i], -16.000000, 0.000000, -55.000000, 0.850000);
			PlayerTextDrawSetPreviewModel(playerid, PCARTextSlot[playerid][i], data[i][0]);
			PlayerTextDrawSetPreviewVehCol(playerid, PCARTextSlot[playerid][i], data[i][1], data[i][2]);
			PlayerTextDrawSetSelectable(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawShow(playerid, PCARTextSlot[playerid][i]);

			if(dealership && VDealerSelectCatalog[playerid] == -1)
			{
				for(new x = 0; x != sizeof(VehicleMenuInfo); x ++ )
				{
				    if(VehicleMenuInfo[x][0] == data[i][0])
				    {
				        PCARTextName[playerid][i] = CreatePlayerTextDraw(playerid,nX, nY, VehicleMenuInfo[x][1]);
						break;
				    }
				}
			}
			else PCARTextName[playerid][i] = CreatePlayerTextDraw(playerid,nX, nY, ReturnVehicleModelNameEx(data[i][0]));

			PlayerTextDrawAlignment(playerid,PCARTextName[playerid][i], 2);
			PlayerTextDrawBackgroundColor(playerid,PCARTextName[playerid][i], 255);
			PlayerTextDrawFont(playerid,PCARTextName[playerid][i], 3);
			PlayerTextDrawLetterSize(playerid,PCARTextName[playerid][i], 0.460000, 2.000000);
			PlayerTextDrawColor(playerid,PCARTextName[playerid][i], -1);
			PlayerTextDrawSetOutline(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawSetProportional(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawUseBox(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawBoxColor(playerid,PCARTextName[playerid][i], 255);
			PlayerTextDrawTextSize(playerid,PCARTextName[playerid][i], 0.000000, -134.000000);
			PlayerTextDrawSetSelectable(playerid,PCARTextName[playerid][i], 0);
			PlayerTextDrawShow(playerid, PCARTextName[playerid][i]);

			if(dealership && data[i][4])
			{
				format(str, sizeof(str), "%s", FormatNumber(data[i][4]));
				PCARTextPrice[playerid][i] = CreatePlayerTextDraw(playerid,pX, pY, str);
				PlayerTextDrawBackgroundColor(playerid,PCARTextPrice[playerid][i], 255);
				PlayerTextDrawFont(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawLetterSize(playerid,PCARTextPrice[playerid][i], 0.529999, 2.000000);
				PlayerTextDrawColor(playerid,PCARTextPrice[playerid][i], -1);
				PlayerTextDrawSetOutline(playerid,PCARTextPrice[playerid][i], 0);
				PlayerTextDrawSetProportional(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawSetShadow(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawSetSelectable(playerid,PCARTextPrice[playerid][i], 0);
				PlayerTextDrawShow(playerid, PCARTextPrice[playerid][i]);
			}

			if(count == 2)
			{
				sX = 118;
				sY = 248;


				nX = 183;
				nY = 358;

				if(dealership) pX = 131, pY = 262;
			}
			else
			{
				sX += 130;
				nX += 130;
				if(dealership) pX += 130;
			}

			count++;

			if(count > 5)
				break;
		}
	}

	if(!isnull(header))
	{
		PCARTextHeader[playerid] = CreatePlayerTextDraw(playerid, 124.000137, 82.133392, header);
		PlayerTextDrawLetterSize(playerid, PCARTextHeader[playerid], 0.992799, 5.278573);
		PlayerTextDrawTextSize(playerid, PCARTextHeader[playerid], 306.400100, 57.742218);
		PlayerTextDrawAlignment(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawColor(playerid, PCARTextHeader[playerid], -1);
		PlayerTextDrawUseBox(playerid, PCARTextHeader[playerid], true);
		PlayerTextDrawBoxColor(playerid, PCARTextHeader[playerid], -255);
		PlayerTextDrawSetShadow(playerid, PCARTextHeader[playerid], 0);
		PlayerTextDrawSetOutline(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawBackgroundColor(playerid, PCARTextHeader[playerid], 255);
		PlayerTextDrawFont(playerid, PCARTextHeader[playerid], 0);
		PlayerTextDrawSetProportional(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, PCARTextHeader[playerid], true);
	    PlayerTextDrawShow(playerid, PCARTextHeader[playerid]);
	}
	PCARTextLeft[playerid] = CreatePlayerTextDraw(playerid,66.000000, 220.000000, "ld_beat:left");
	PlayerTextDrawBackgroundColor(playerid,PCARTextLeft[playerid], 255);
	PlayerTextDrawFont(playerid,PCARTextLeft[playerid], 4);
	PlayerTextDrawLetterSize(playerid,PCARTextLeft[playerid], 0.599999, 0.599999);
	PlayerTextDrawColor(playerid,PCARTextLeft[playerid], (page > 1) ? 0x7A936AAA : -1);
	PlayerTextDrawSetOutline(playerid,PCARTextLeft[playerid], 0);
	PlayerTextDrawSetProportional(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawSetShadow(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawUseBox(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawBoxColor(playerid,PCARTextLeft[playerid], 255);
	PlayerTextDrawTextSize(playerid,PCARTextLeft[playerid], 69.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid,PCARTextLeft[playerid], (page > 1) ? true : false);
	PlayerTextDrawShow(playerid, PCARTextLeft[playerid]);

	PCARTextRight[playerid] = CreatePlayerTextDraw(playerid,(count < 3) ? 103 + count * 130 : 493, 220.000000, "ld_beat:right");
	PlayerTextDrawBackgroundColor(playerid,PCARTextRight[playerid], 255);
	PlayerTextDrawFont(playerid,PCARTextRight[playerid], 4);
	PlayerTextDrawLetterSize(playerid,PCARTextRight[playerid], 0.599999, 0.599999);
	PlayerTextDrawColor(playerid,PCARTextRight[playerid], (floatround(caramount/(page * 6), floatround_ceil) && caramount % 6 != 0) ? 0x7A936AAA : -1);
	PlayerTextDrawSetOutline(playerid,PCARTextRight[playerid], 0);
	PlayerTextDrawSetProportional(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawSetShadow(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawUseBox(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawBoxColor(playerid,PCARTextRight[playerid], 255);
	PlayerTextDrawTextSize(playerid,PCARTextRight[playerid], 69.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid,PCARTextRight[playerid], (floatround(caramount/(page * 6), floatround_ceil) && caramount % 6 != 0) ? true : false);
	PlayerTextDrawShow(playerid, PCARTextRight[playerid]);
}

ClosePlayerCarMenu(playerid, force = 0)
{
    PlayerTextDrawDestroy(playerid, PCARTextHeader[playerid]);
    PlayerTextDrawDestroy(playerid, PCARTextLeft[playerid]);
    PlayerTextDrawDestroy(playerid, PCARTextRight[playerid]);

    for(new i=0;i!=6;++i)
        PlayerTextDrawDestroy(playerid, PCARTextSlot[playerid][i]),
		PlayerTextDrawDestroy(playerid, PCARTextName[playerid][i]),
		PlayerTextDrawDestroy(playerid, PCARTextPrice[playerid][i]);

	if(!force) {
	    CancelSelectTextDraw(playerid);
	    PCarPage[playerid]=1;
	    VDealerSelectCatalog[playerid] = -1;

	    if(PCarType[playerid]==1) {
			for(new i = 0; i != 6; i++)
			{
				VDealerData[playerid][i][0] = 0;
				VDealerData[playerid][i][1] = -1;
				VDealerData[playerid][i][2] = -1;
				VDealerData[playerid][i][3] = 0;
				VDealerData[playerid][i][4] = 0;
			}
		}

		PCarType[playerid]=0;
	}
    PCarOpening{ playerid }=false;

	//if(!bf_get(player_bf[playerid], TOGGLE_HUD)) showPlayerHUD(playerid);
}

ShowPlayerCarMenu(playerid)
{
	//hidePlayerHUD(playerid);
    ClosePlayerCarMenu(playerid, 1);

    VDealerSelectCatalog[playerid]=-1;

    SelectTextDraw(playerid, 0x83C689AA);

    new
		numbveh,
		query[128];

	format(query, sizeof(query), "SELECT * FROM `cars` WHERE `carOwner` = %d ORDER BY `carDate` ASC", playerData[playerid][pID]);
	mysql_query(dbCon, query);

	// Getting Data

	new
		Float:vehDistance[3]
	;

    numbveh = cache_num_rows();

	new data[6][4], count; // 0 - carModel, 1 - Color 1, 2 - Color 2, 3 - Green, 4 - Price if have

	for (new i = (PCarPage[playerid]==1) ? 0:6; i < ((PCarPage[playerid]==1) ? ((numbveh < 6)) ? numbveh:6 :numbveh); i ++)
	{
		cache_get_value_name_int(i, "carModel", data[count][0]);
		cache_get_value_name_int(i, "carColor1", data[count][1]);
		cache_get_value_name_int(i, "carColor2", data[count][2]);

		cache_get_value_name_float(i, "carPosX",	vehDistance[0]);
		cache_get_value_name_float(i, "carPosY",	vehDistance[1]);
		cache_get_value_name_float(i, "carPosZ",	vehDistance[2]);

		if(IsPlayerInRangeOfPoint(playerid, 200.0, vehDistance[0], vehDistance[1], vehDistance[2]))
		{
            data[count][3] = 1;
		}
       	//data[count][3] = (i==green)?1:0;
        count++;
	}
	RenderPlayerCarMenu(playerid, PCarPage[playerid], numbveh, data);
	PCarOpening{ playerid } = true;
	PCarType[playerid]=0;
}

ShowPlayerDealershipMenu(playerid)
{
	//hidePlayerHUD(playerid);
    ClosePlayerCarMenu(playerid, 1);
    SelectTextDraw(playerid, 0x58585860); // 0x58585890

	new str[128], count, numbveh; // 0 - carModel, 1 - Color 1, 2 - Color 2, 3 - Green, 4 - Price if have

	for(new i = 0; i != 6; i++)
	{
		VDealerData[playerid][i][0] = 0;
		VDealerData[playerid][i][1] = -1;
		VDealerData[playerid][i][2] = -1;
		VDealerData[playerid][i][3] = 0;
		VDealerData[playerid][i][4] = 0;
	}


    if(VDealerSelectCatalog[playerid]==-1) {

		numbveh = sizeof(VehicleMenuInfo);

		for (new i = (PCarPage[playerid]-1) * 6; i < numbveh; i ++)
		{
			VDealerData[playerid][count][0] = VehicleMenuInfo[i][0];
			VDealerData[playerid][count][1] = -1;
			VDealerData[playerid][count][2] = -1;
			VDealerData[playerid][count][3] = 0;

			for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == i) {
			    new price = VehicleData[VehicleDealership[x][0] - 400][c_price];
			    if(playerData[playerid][pCash] >= price) {
					VDealerData[playerid][count][3] = 1;
					break;
			    }
			}

		  	count++;

			if(count > 5)
		  		break;
		}
		format(str, sizeof(str), "Categories");
	}
	else
	{
	    new nextpage = (PCarPage[playerid]-1) * 6;

		for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == VDealerSelectCatalog[playerid])
		{
		    numbveh++;

			if(nextpage)
			{
			    nextpage--;
			    continue;
			}

			if(count < 6)
			{
				VDealerData[playerid][count][0] = VehicleDealership[x][0];
				VDealerData[playerid][count][4] = VehicleData[VehicleDealership[x][0] - 400][c_price];
				VDealerData[playerid][count][1] = -1;
				VDealerData[playerid][count][2] = -1;

			  	VDealerData[playerid][count][3] = (playerData[playerid][pCash] >= VDealerData[playerid][count][4]) ? 1:0;

			  	count++;
     		}
		}

		format(str, sizeof(str), "Categories_->_%s", VehicleMenuInfo[VDealerSelectCatalog[playerid]][1]);
	}
	RenderPlayerCarMenu(playerid, PCarPage[playerid], numbveh, VDealerData[playerid], str, 1);
	PCarOpening{ playerid } = true;
	PCarType[playerid]=1;
}


GetNumberOwnerCar(playerid)
{
	new str[128];
	format(str, sizeof(str), "SELECT carID FROM `cars` WHERE `carOwner` = %d", playerData[playerid][pID]);
	mysql_query(dbCon, str);
	return cache_num_rows();
}

SpawnPlayerCar(playerid, slot)
{
	new query[256];

	if(PCarOpening{ playerid })
	{
	    if(playerData[playerid][pPCarkey] != 9999)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณมียานพาหนะส่วนตัวที่ปรากฏอยู่จำนวนสูงสุดแล้ว");
	        return 1;
	    }

	    if(PCarPage[playerid]!=1) slot = slot + 6;

		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `carOwner` = %d ORDER BY `carDate` ASC", playerData[playerid][pID]);
		mysql_tquery(dbCon, query, "OnLoadPlayerCar", "dd", playerid, slot);
    }
    return 1;
}

forward OnLoadPlayerCar(playerid, slot);
public OnLoadPlayerCar(playerid, slot) {

    new
	    rows, str[256];
	    
	cache_get_row_count(rows);
	
	if(rows && playerData[playerid][pPCarkey] == 9999) {
	//sv_playercar
		
		new i = -1;
		if((i = Iter_Free(sv_playercar)) != -1)
		{
			Iter_Add(sv_playercar, i);
			
			for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
			{
				CarData[i][carPackageWP][x]=0;
				CarData[i][carPackageAmmo][x]=0;
			}
			for(new x = 0; x != MAX_CAR_WEAPONS; x++)
			{
				CarData[i][carWeapon][x] = 0;
				CarData[i][carAmmo][x] = 0;
				CarData[i][carWeaponLicense][x] = 0;
			}

			cache_get_value_name_int(slot, "carID", CarData[i][carSID]);
			cache_get_value_name_int(slot, "carOwner", CarData[i][carOwner]);
			cache_get_value_name_int(slot, "carModel", CarData[i][carModel]);
			cache_get_value_name_float(slot, "carPosX", CarData[i][carPos][0]);
			cache_get_value_name_float(slot, "carPosY", CarData[i][carPos][1]);
			cache_get_value_name_float(slot, "carPosZ", CarData[i][carPos][2]);
			cache_get_value_name_float(slot, "carPosR", CarData[i][carPos][3]);
			cache_get_value_name_int(slot, "carColor1", CarData[i][carColor1]);
			cache_get_value_name_int(slot, "carColor2", CarData[i][carColor2]);
			cache_get_value_name_int(slot, "carLock", CarData[i][carLock]);
			cache_get_value_name_int(slot, "carAlarm", CarData[i][carAlarm]);
			cache_get_value_name_int(slot, "carXM", CarData[i][carXM]);
			cache_get_value_name_int(slot, "carInsurance", CarData[i][carInsurance]);
			cache_get_value_name_float(slot, "carMileage", CarData[i][carMileage]);
			cache_get_value_name_int(slot, "carImmob", CarData[i][carImmob]);
			cache_get_value_name_float(slot, "carBatteryL", CarData[i][carBatteryL]);
			cache_get_value_name_float(slot, "carEngineL", CarData[i][carEngineL]);
			cache_get_value_name_float(slot, "carFuel", CarData[i][carFuel]);
			cache_get_value_name_int(slot, "carDamage1", CarData[i][carDamage][0]);
			cache_get_value_name_int(slot, "carDamage2", CarData[i][carDamage][1]);
			cache_get_value_name_int(slot, "carDamage3", CarData[i][carDamage][2]);
			cache_get_value_name_int(slot, "carDamage4", CarData[i][carDamage][3]);
			cache_get_value_name_float(slot, "carHealth", CarData[i][carHealth]);
			cache_get_value_name_int(slot, "carComps", CarData[i][carComps]);
			cache_get_value_name_int(slot, "carDuplicate", CarData[i][carDupKey]);
			cache_get_value_name_int(slot, "carPaintjob", CarData[i][carPaintjob]);
			cache_get_value_name_int(slot, "carWorld", CarData[i][carWorld]);
			cache_get_value_name_int(slot, "carInt", CarData[i][carInt]);
			cache_get_value_name_int(slot, "carImpound", CarData[i][carImpound]);
			cache_get_value_name_float(slot, "carImpoundX", CarData[i][carImpoundPos][0]);
			cache_get_value_name_float(slot, "carImpoundY", CarData[i][carImpoundPos][1]);
			cache_get_value_name_float(slot, "carImpoundZ", CarData[i][carImpoundPos][2]);
			cache_get_value_name_float(slot, "carImpoundA", CarData[i][carImpoundPos][3]);
			cache_get_value_name_int(slot, "carOwe", CarData[i][carOwe]);
			
			cache_get_value_name(slot, "carPlate", str);
			format(CarData[i][carPlate], 32, str);

			cache_get_value_name(slot, "carPlacePos", str);
			AssignPlaceItems(i, str);

			cache_get_value_name(slot, "carPackageWeapons", str);
			AssignVehicleWeapons(i, str);

			cache_get_value_name(slot, "licenseWeapons", str);
			AssignCarLicenseWeapons(i, str);

			cache_get_value_name_int(slot, "carNos", CarData[i][carNos]);

			cache_get_value_name(slot, "carName", str);
			format(CarData[i][carName], 64, str);

			cache_get_value_name_int(slot, "carActive", CarData[i][carActive]);

			format(str, sizeof(str), "SELECT * FROM `drugs_car` WHERE `carID` = '%d'", CarData[i][carSID]);
			mysql_tquery(dbCon, str, "OnQueryFinished", "dd", i, THREAD_VEHICLE_DRUG);

			new
				Float:SpawnPosX = CarData[i][carPos][0],
				Float:SpawnPosY = CarData[i][carPos][1],
				Float:SpawnPosZ = CarData[i][carPos][2],
				Float:SpawnPosA = CarData[i][carPos][3]
			;

			if(CarData[i][carImpound]) {
				SpawnPosX = CarData[i][carImpoundPos][0];
				SpawnPosY = CarData[i][carImpoundPos][1];
				SpawnPosZ = CarData[i][carImpoundPos][2];
				SpawnPosA = CarData[i][carImpoundPos][3];
			}

			CarData[i][carVehicle] = CreateVehicle(CarData[i][carModel], SpawnPosX, SpawnPosY, SpawnPosZ, SpawnPosA, CarData[i][carColor1], CarData[i][carColor2], -1);

			SetVehicleDamageStatus(CarData[i][carVehicle],CarData[i][carDamage][0],CarData[i][carDamage][1],CarData[i][carDamage][2],CarData[i][carDamage][3]);
			if(CarData[i][carHealth] >= 250.0) SetVehicleHealthEx(CarData[i][carVehicle],CarData[i][carHealth]);
			else SetVehicleHealthEx(CarData[i][carVehicle],250.0);
			
			CoreVehicles[CarData[i][carVehicle]][vehFuel] = CarData[i][carFuel];

			LinkVehicleToInterior(CarData[i][carVehicle], CarData[i][carInt]);
			SetVehicleVirtualWorld(CarData[i][carVehicle], CarData[i][carWorld]);

			SetVehicleNumberPlate(CarData[i][carVehicle], CarData[i][carPlate]);

			for(new x = 0; x != 14; x++)
			{
				format(str, sizeof(str), "carMod%d", x+1);
				cache_get_value_name_int(slot, str, CarData[i][carMods][x]);
				if(CarData[i][carMods][x]) {
					switch(CarData[i][carMods][x])
					{
						case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) {
							RemoveVehicleComponent(CarData[i][carVehicle], CarData[i][carMods][x]);
							CarData[i][carNos] = 0;
						}
					}
					if(IsComponentidCompatible(CarData[i][carModel], CarData[i][carMods][x])) AddVehicleComponent(CarData[i][carVehicle], CarData[i][carMods][x]);
				}
			}

			for(new x = 0; x != MAX_CAR_WEAPONS; x++)
			{
				format(str, sizeof(str), "carWeapon%d", x);
				cache_get_value_name_int(slot, str, CarData[i][carWeapon][x]);

				format(str, sizeof(str), "carAmmo%d", x);
				cache_get_value_name_int(slot, str, CarData[i][carAmmo][x]);

				if(CarData[i][carWeapon][x] != 0)
				{
					CarPlace[i][x][cPobj] = CreateDynamicObject(GetGunObjectID(CarData[i][carWeapon][x]), 0, 0, 0, 0, 0, 0);
					AttachDynamicObjectToVehicle(CarPlace[i][x][cPobj], CarData[i][carVehicle], CarPlace[i][x][cPx], CarPlace[i][x][cPy], CarPlace[i][x][cPz], CarPlace[i][x][cPrx], CarPlace[i][x][cPry], CarPlace[i][x][cPrz]);
				}
			}
			ChangeVehiclePaintjob(CarData[i][carVehicle], 3 - CarData[i][carPaintjob]);

			playerData[playerid][pPCarkey] = i;
			//CoreVehicles[CarData[i][carVehicle]][vehFuel] = 100.0;
			CarData[i][carFuel] = CarData[i][carFuel];

			switch(CarData[i][carLock]) {
			    case 1: {
			        CarData[i][carProtect] = 500;
			    }
			    case 2: {
			        CarData[i][carProtect] = 750;
			    }
			    case 3: {
			        CarData[i][carProtect] = 750;
			    }
			    case 4: {
			        CarData[i][carProtect] = 1250;
			    }
				default: {
					CarData[i][carProtect] = 0;
				}
			}

			CarData[i][carLocked] = 1;

			format(CarData[i][carOwnerName], MAX_PLAYER_NAME, "%s", ReturnPlayerName(playerid));

			SendClientMessageEx(playerid, COLOR_GREEN, "%s ได้ปรากฏขึ้นที่จอดยานพาหนะ:", ReturnVehicleModelName(CarData[i][carModel]));
			SendClientMessageEx(playerid, COLOR_WHITE, "ล็อค[%d] สัญญาณเตือนภัย[%d] อิมโมบิ[%d] ประกันภัย[%d]", CarData[i][carLock], CarData[i][carAlarm], CarData[i][carImmob], CarData[i][carInsurance]);
			SendClientMessageEx(playerid, COLOR_WHITE, "อายุการใช้งาน: อายุเครื่องยนต์[%.2f] อายุแบตเตอรี่[%.2f] ระยะไมล์ที่ขับ[%.2f]", CarData[i][carEngineL], CarData[i][carBatteryL], CarData[i][carMileage]);
			SendClientMessage(playerid, TEAM_CUN_COLOR, "ข้อแนะ: ตามเครื่องหมายสีแดงเพื่อค้นหายานพาหนะของคุณ");

			if(CarData[i][carImpound]) {
				SendClientMessage(playerid, COLOR_RED, "ยานพาหนะของคุณถูกยึด");

				SetPlayerCheckpoint(playerid,CarData[i][carImpoundPos][0], CarData[i][carImpoundPos][1], CarData[i][carImpoundPos][2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
			else {
				SetPlayerCheckpoint(playerid,CarData[i][carPos][0], CarData[i][carPos][1], CarData[i][carPos][2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective;

			GetVehicleParamsEx(CarData[i][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(CarData[i][carVehicle], engine, lights, alarm, CarData[i][carLocked], bonnet, boot, objective);
		}
	}
	ClosePlayerCarMenu(playerid);
	return 1;
}

/*forward Float:GetPlayerMileage(vehicleid);
public Float:GetPlayerMileage(vehicleid)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return (((rtn * 100 * 1.61) / 60) / 2) / 1.609;
}*/


forward SetPlayerLabel(playerid, type, time);
public SetPlayerLabel(playerid, type, time)
{
    if(!IsValidDynamic3DTextLabel(PlayerLabel[playerid][pLabel])) 
	{
		switch(type)
		{
			case PLT_TYPE_KNOCKOUT: PlayerLabel[playerid][pLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการช่วยเหลือ", COLOR_GREEN2, 0, 0, 0, 20, playerid, INVALID_VEHICLE_ID,  0, 0, 0, -1, 50);
		}
	}

	PlayerLabel[playerid][pLabelType] = type;
	PlayerLabel[playerid][pLabelTime] = time;
	PlayerLabel[playerid][pLabelCount] = 0;
}

forward SetVehicleLabel(vehicleid, type, time);
public SetVehicleLabel(vehicleid, type, time)
{
    if(!IsValidDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel])) {
		switch(type)
		{
		    case VLT_TYPE_TOWING: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nกำลังลากยานพาหนะ", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
		    case VLT_TYPE_PERMITFACTION: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("คุณไม่ได้รับอนุญาตให้เข้าไปในรถคันนี้ (Faction-vehicle)", COLOR_WHITE, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
		    case VLT_TYPE_LOCK: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("ยานพาหนะคันนี้ล็อก!", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
		    case VLT_TYPE_UNREGISTER: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nกำลังถอดทะเบียน", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_REGISTER: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nกำลังลงทะเบียนยานพาหนะ", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_OPERAFAILED: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( การดำเนินการล้มเหลว ))", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADELOCK: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการอัปเกรดล็อก", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEIMMOB: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการอัปเกรดอิมโมบิไลเซอร์", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEALARM: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการอัปเกรดสัญญาณเตือนภัย", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEINSURANCE: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการอัปเกรดประกัน", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_ARMOUR: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nกำลังอัปเกรดเกราะ", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_OPERAOUTOFRANG: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( การดำเนินการอยู่นอกระยะ ))", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
            case VLT_TYPE_REFILL: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการเติมเชื้อเพลิง", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
			case VLT_TYPE_UPGRADEBATTERY: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการเปลี่ยนแบตเตอรี่", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
            case VLT_TYPE_UPGRADEENGINE: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nการเปลี่ยนเครื่องยนต์", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
			case VLT_TYPE_BREAKIN: {
			
		       	CoreVehicles[vehicleid][vbreaktime]=20;

                new string[4];
                format(string, sizeof(string), "%d", CoreVehicles[vehicleid][vbreakin]);
				VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel(CoreVehicles[vehicleid][vbreakin] ? (string) : ("ปลดล็อกแล้ว"), (CoreVehicles[vehicleid][vbreakin]) ? 0xAFAFAFAA : COLOR_GREEN2, -0.9, 0.8, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			}
		}
	}
	VehicleLabel[vehicleid][vLabelType] = type;
	VehicleLabel[vehicleid][vLabelTime] = time;
	VehicleLabel[vehicleid][vLabelCount] = 0;

}

CreateScramble(const s[])
{
	new scam[16];

    strcpi(scam, s);

	new tmp[2], num, len = strlen(scam);
	for(new i=0; scam[i] != EOS; ++i)
	{
	    num = random(len);
		tmp[0] = scam[i];
		tmp[1] = scam[num];
		scam[num] = tmp[0];
		scam[i] = tmp[1];
	}
	return scam;
}

strcpi(dest[], const src[], sz=sizeof(dest))
{
  dest[0] = 0;
  return strcat(dest,src,sz); //Notice that I have used strcat instead of writing my own loops
}


stock GetPlayerRadioSignal(playerid, &radioID = -1)
{
	new signal, Float:dist = FLOAT_NAN;
	
	radioID = GetPlayerClosestRadioTower(playerid, dist);
	
	if(radioID == -1) signal = 0;
	else signal = floatround((((RadioTower[radioID][RadioRange] - dist) / RadioTower[radioID][RadioRange]) * 10.0) / 2.0, floatround_ceil);
	return signal;
}

isAdminDuty(playerid)
{
	if (GetPVarInt(playerid, "AdminDuty") == 1)
		return 1;
	else
		return 0;
}

isTesterDuty(playerid)
{
	if (GetPVarInt(playerid, "TesterDuty") == 1)
		return 1;
	else
		return 0;
}

UpdateHouseInfo(houseid)
{
	new query[1024];
	new subid = 0;
	
	if(HouseInfo[houseid][hSubid] != -1) {
	    subid = HouseInfo[HouseInfo[houseid][hSubid]][hID];
	}

	format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `rentprice` = %d, `rentable` = %d, `interior` = %d, `world` = %d, `cash` = %d WHERE `id` = %d",
	HouseInfo[houseid][hOwner],
	HouseInfo[houseid][hOwned],
	HouseInfo[houseid][hLocked],
	HouseInfo[houseid][hPrice],
	HouseInfo[houseid][hLevelbuy],
	HouseInfo[houseid][hRentprice],
	HouseInfo[houseid][hRentable],
	HouseInfo[houseid][hInterior],
	HouseInfo[houseid][hWorld],
	HouseInfo[houseid][hCash],
	HouseInfo[houseid][hID]);
	mysql_query(dbCon, query);

	format(query, sizeof(query), "UPDATE `houses` SET `checkx` = %f, `checky` = %f, `checkz` = %f, `subid` = %d, `weapons` = '%s', `switch` = '%d', `hEInt` = '%d', `hEWorld` = '%d', `type` = '%d', `SQLsubid` = '%d' WHERE `id` = %d",
	HouseInfo[houseid][hCheckPosX],
	HouseInfo[houseid][hCheckPosY],
	HouseInfo[houseid][hCheckPosZ],
	HouseInfo[houseid][hSubid],
	FormatHouseWeapons(houseid),
	//HouseInfo[houseid][hRadio],
	HouseInfo[houseid][hSwitch],
	HouseInfo[houseid][hEntranceInt],
	HouseInfo[houseid][hEntranceWorld],
	HouseInfo[houseid][hType],
	subid,
	HouseInfo[houseid][hID]);

	mysql_query(dbCon, query);
	
	return 1;
}

FormatCarLicenseWeapons(carid)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_CAR_WEAPONS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",CarData[carid][carWeaponLicense][a]);
		else format(tmp,sizeof(tmp),"|%d",CarData[carid][carWeaponLicense][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignCarLicenseWeapons(carid, const str[])
{
	new wtmp[MAX_CAR_WEAPONS][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPONS; ++z)
	{
		CarData[carid][carWeaponLicense][z] = strval(wtmp[z]);
	}
}

FormatHouseWeapons(house)
{
	new wstr[800];
	new tmp[32];
	for(new a = 0; a != MAX_HOUSE_WEAPONS; ++a)
	{
		new w = HouseInfo[house][hWeapon][a];
		new am = HouseInfo[house][hAmmo][a];
		new lc = HouseInfo[house][hWeaponLicense][a];

		if(!a) format(tmp,sizeof(tmp),"%d=%d=%d",w,am,lc);
		else format(tmp,sizeof(tmp),"|%d=%d=%d",w,am,lc);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignHouseWeapons(house, const str[])
{
	new wtmp[MAX_HOUSE_WEAPONS][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_HOUSE_WEAPONS; ++z)
	{
		new wtmp2[3][32];
		strexplode(wtmp2,wtmp[z],"=");
		HouseInfo[house][hWeapon][z] = strval(wtmp2[0]);
		HouseInfo[house][hAmmo][z] = strval(wtmp2[1]);
		HouseInfo[house][hWeaponLicense][z] = strval(wtmp2[2]);
	}
}

FormatDrugAddiction(playerid)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_DRUGS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",playerData[playerid][pDrugAddiction][a]);
		else format(tmp,sizeof(tmp),"|%d",playerData[playerid][pDrugAddiction][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}


//hItems

FormatHouseItems(house)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_HOUSE_ITEMS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",HouseInfo[house][hItems][a]);
		else format(tmp,sizeof(tmp),"|%d",HouseInfo[house][hItems][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignHouseItems(house, const str[])
{
	new wtmp[MAX_HOUSE_ITEMS][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
	{
		HouseInfo[house][hItems][z] = strval(wtmp[z]);
	}
}

//bPriceProducts

FormatBusinessItems(business)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_BIZ_ITEMS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",BizInfo[business][bItems][a]);
		else format(tmp,sizeof(tmp),"|%d",BizInfo[business][bItems][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignBusinessItems(business, const str[])
{
	new wtmp[MAX_BIZ_ITEMS][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_BIZ_ITEMS; ++z)
	{
		BizInfo[business][bItems][z] = strval(wtmp[z]);
	}
}


FormatBusinessProducts(business)
{
	new wstr[256];
	new tmp[32];

	for(new a = 0; a != MAX_BIZ_PRICEPRODUCT; ++a)
	{
		new w = BizInfo[business][bPriceProducts][a];
		if(!a) format(tmp,sizeof(tmp),"%d",w);
		else format(tmp,sizeof(tmp),"|%d",w);
		strins(wstr,tmp,strlen(wstr));
	}

	return wstr;
}

AssignBusinessProducts(business, const str[])
{
	new wtmp[MAX_BIZ_PRICEPRODUCT][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_BIZ_PRICEPRODUCT; ++z)
	{
		BizInfo[business][bPriceProducts][z] = strval(wtmp[z]);
	}
}

FormatPlaceItems(carid)
{
	new wstr[512];
	new tmp[255];

	for(new a = 0; a != MAX_CAR_WEAPONS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%f,%f,%f,%f,%f,%f,%d",CarPlace[carid][a][cPx],CarPlace[carid][a][cPy],CarPlace[carid][a][cPz],CarPlace[carid][a][cPrx],CarPlace[carid][a][cPry],CarPlace[carid][a][cPrz],CarPlace[carid][a][cPType]);
		else format(tmp,sizeof(tmp),"|%f,%f,%f,%f,%f,%f,%d",CarPlace[carid][a][cPx],CarPlace[carid][a][cPy],CarPlace[carid][a][cPz],CarPlace[carid][a][cPrx],CarPlace[carid][a][cPry],CarPlace[carid][a][cPrz],CarPlace[carid][a][cPType]);
		strins(wstr,tmp,strlen(wstr));
	}

	return wstr;
}

AssignPlaceItems(carid, const str[])
{
	new wtmp[MAX_CAR_WEAPONS][255];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPONS; ++z)
	{
		new wtmp2[7][64];
		strexplode(wtmp2,wtmp[z],",");
		CarPlace[carid][z][cPx] = floatstr(wtmp2[0]);
		CarPlace[carid][z][cPy] = floatstr(wtmp2[1]);
		CarPlace[carid][z][cPz] = floatstr(wtmp2[2]);
		CarPlace[carid][z][cPrx] = floatstr(wtmp2[3]);
		CarPlace[carid][z][cPry] = floatstr(wtmp2[4]);
		CarPlace[carid][z][cPrz] = floatstr(wtmp2[5]);
		CarPlace[carid][z][cPType] = strval(wtmp2[6]);
	}
}

AddATMToFile(atmid, atminfo[], interior, Float:x, Float:y, Float:z)
{
	format(szQuery, sizeof(szQuery), "INSERT INTO `atms` (posx, posy, posz, interior, info) VALUES(%f, %f, %f, %d, '%s')", x, y, z, interior, atminfo);
	mysql_tquery(dbCon, szQuery, "OnATMInsert", "d", atmid);
	return 1;
}

AddWarehouseToFile(warehouseid) {

	format(szQuery, sizeof(szQuery), "INSERT INTO `faction_warehouse` (fw_type, fw_x, fw_y, fw_z, fw_world, fw_int) VALUES(%d, %f, %f, %f, %d, %d)", WareHouseInfo[warehouseid][whType], WareHouseInfo[warehouseid][whX], WareHouseInfo[warehouseid][whY], WareHouseInfo[warehouseid][whZ], WareHouseInfo[warehouseid][whWorld], WareHouseInfo[warehouseid][whInt]);

	mysql_tquery(dbCon, szQuery, "OnWarehouseInsert", "d", warehouseid);
}

AddHouseToFile(houseid, price, houseinfo[], Float:x, Float:y, Float:z)
{
	new biggestQuery[1024];
	format(biggestQuery, sizeof(biggestQuery), "INSERT INTO `houses` (posx, posy, posz, checkx, checky, checkz, info, price, owned, owner, cash, rentprice, rentable, locked, radio, subid, hEInt, hEWorld) VALUES(%f, %f, %f, %f, %f, %f, '%s', %d, %d, '%s', %d, %d, %d, %d, %d, %d, %d, %d)",
	x, y, z, 0.0, 0.0, 0.0, houseinfo, price, 0, "The State", 0, 0, 0, 1, 0, HouseInfo[houseid][hSubid], HouseInfo[houseid][hEntranceInt], HouseInfo[houseid][hEntranceWorld]);

	mysql_tquery(dbCon, biggestQuery, "OnHouseInsert", "d", houseid);
	return 1;
}

AddEntranceToFile(entranceid, etype, etime)
{
	new biggestQuery[1024];
	format(biggestQuery, sizeof(biggestQuery), "INSERT INTO `entrance` (ePosEnX, ePosEnY, ePosEnZ, ePosEnA, eEnInt, eEnWorld, eEnLocal, eEnHouse, eEnBiz, eEnTime, eType) VALUES(%f, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d)",EntranceData[entranceid][ePosEnX], EntranceData[entranceid][ePosEnY], EntranceData[entranceid][ePosEnZ], EntranceData[entranceid][ePosEnA], EntranceData[entranceid][eEnInt],
	EntranceData[entranceid][eEnWorld], EntranceData[entranceid][eEnLocal], EntranceData[entranceid][eEnHouse], EntranceData[entranceid][eEnBiz], etime, etype);
	mysql_tquery(dbCon, biggestQuery, "OnEntranceInsert", "d", entranceid);
	return 1;
}

AddGarageToFile(garageid, gtype, gtime)
{
	new biggestQuery[1024];
	format(biggestQuery, sizeof(biggestQuery), "INSERT INTO `garage` (gPosEnX, gPosEnY, gPosEnZ, gPosEnA, gEnInt, gEnWorld, gEnLocal, gEnHouse, gEnBiz, gEnTime, gType) VALUES(%f, %f, %f, %f, %d, %d, %d, %d, %d, %d, %d)",GarageData[garageid][gPosEnX], GarageData[garageid][gPosEnY], GarageData[garageid][gPosEnZ], GarageData[garageid][gPosEnA], GarageData[garageid][gEnInt],
	GarageData[garageid][gEnWorld], GarageData[garageid][gEnLocal], GarageData[garageid][gEnHouse], GarageData[garageid][gEnBiz], gtime, gtype);
	mysql_tquery(dbCon, biggestQuery, "OnGarageInsert", "d", garageid);
	return 1;
}

AddBizToFile(bizid, price, type, owner[], info[], Float:x, Float:y, Float:z)
{
	format(szQuery, sizeof(szQuery), "INSERT INTO `business` (biz_enX, biz_enY, biz_enZ, biz_info, biz_owner, biz_owned, biz_locked, biz_price, biz_till, biz_world, biz_type) VALUES(%f, %f, %f, '%s', '%s', %d, %d, %d, %d, %d, %d)",
	x, y, z, info, owner, 0, 1, price, 0, bizid, type);
	mysql_tquery(dbCon, szQuery, "OnBizInsert", "d", bizid);
	return 1;
}

AddTeleToFile(teleid, mapname[], interior, Float:LX, Float:LY, Float:LZ)
{
	format(szQuery, sizeof(szQuery), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior) VALUES('%s', %f, %f, %f, %d)", mapname, LX, LY, LZ, interior);
	mysql_tquery(dbCon, szQuery, "OnTeleportInsert", "d", teleid);
	return 1;
}

AddMoveDoorToFile(id, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, const name[])
{
    new clean_name[64];
    mysql_escape_string(name,clean_name);
	format(szQuery, sizeof(szQuery), "INSERT INTO `movedoors` (model, faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, name, openspeed) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s', 2.5)",modelid,faction,x,y,z,interior,virworld,clean_name);
	mysql_tquery(dbCon, szQuery, "OnMoveDoorInsert", "d", id);
	return 1;
}

SaveEditedMoveDoor(id, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[id][doorID]);
	mysql_tquery(dbCon, szQuery, "OnEditedMoveDoor", "d", id);
	return 1;
}

SaveEditedMoveDoorMove(id, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `movex` = %f, `movey` = %f, `movez` = %f, `moverx` = %f, `movery` = %f, `moverz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[id][doorID]);
	mysql_tquery(dbCon, szQuery, "OnEditedMoveDoor", "d", id);
	return 1;
}

forward OnMoveDoorRemove(objectid);
public OnMoveDoorRemove(objectid)
{
	Doors[objectid][doorPosX] = 0.0;
	Doors[objectid][doorPosY] = 0.0;
	Doors[objectid][doorPosZ] = 0.0;
	Doors[objectid][doorPosRX] = 0.0;
	Doors[objectid][doorPosRY] = 0.0;
	Doors[objectid][doorPosRZ] = 0.0;
	Doors[objectid][doorInterior] = 0;
	Doors[objectid][doorFaction] = -1;
	Doors[objectid][doorLink] = 0;
	Doors[objectid][doorOpened] = 0;
	Doors[objectid][doorVirtualWorld] = 0;
	
	
	return 1;
}

forward OnMoveDoorInsert(id);
public OnMoveDoorInsert(id)
{
	Doors[id][doorID] = cache_insert_id();
	return 1;
}

forward OnEditedMoveDoor(objectid);
public OnEditedMoveDoor(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(Doors[objectid][doorObject], x, y, z);
	GetDynamicObjectRot(Doors[objectid][doorObject], rx, ry, rz);

	Doors[objectid][doorPosX] = x;
	Doors[objectid][doorPosY] = y;
	Doors[objectid][doorPosZ] = z;
	Doors[objectid][doorPosRX] = rx;
	Doors[objectid][doorPosRY] = ry;
	Doors[objectid][doorPosRZ] = rz;
	return 1;
}

GetClosestHouseID(playerid)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = -1
	;
	foreach (new i : sv_houses) {

		new
		 	Float:temp = GetPlayerDistanceFromPoint(playerid, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]);

		if (temp < fDistance && temp < 3.0)
		{
			fDistance = temp;
			iIndex = i;
		}
	}
	return iIndex;
}

forward OnPlayerAttachWeaponInsert(playerid, slot);
public OnPlayerAttachWeaponInsert(playerid, slot)
{
	PlayerAttachWeapon[playerid][slot][awID] = cache_insert_id();
	return 1;
}

forward OnHouseInsert(HouseID);
public OnHouseInsert(HouseID)
{
	HouseInfo[HouseID][hID] = cache_insert_id();
	return 1;
}

forward OnEntranceInsert(EntranceID);
public OnEntranceInsert(EntranceID)
{
	EntranceData[EntranceID][eID] = cache_insert_id();
	return 1;
}

forward OnGarageInsert(GarageID);
public OnGarageInsert(GarageID)
{
	GarageData[GarageID][gID] = cache_insert_id();
	return 1;
}

forward OnWarehouseInsert(warehouseID);
public OnWarehouseInsert(warehouseID)
{
	WareHouseInfo[warehouseID][whID] = cache_insert_id();
	return 1;
}

forward OnATMInsert(AtmID);
public OnATMInsert(AtmID)
{
	ATMInfo[AtmID][atmID] = cache_insert_id();
	return 1;
}

forward OnBizInsert(BizID);
public OnBizInsert(BizID)
{
	BizInfo[BizID][bID] = cache_insert_id();
	Iter_Add(sv_business, BizID);
	return 1;
}

forward OnBizRemove(bizid);
public OnBizRemove(bizid)
{
	BizInfo[bizid][bEntranceX] = 0.0000;
	BizInfo[bizid][bEntranceY] = 0.0000;
	BizInfo[bizid][bEntranceZ] = 0.0000;
	BizInfo[bizid][bExitX] = 0.0000;
	BizInfo[bizid][bExitY] = 0.0000;
	BizInfo[bizid][bExitZ] = 0.0000;
	BizInfo[bizid][bLevelNeeded] = 0;
	BizInfo[bizid][bBuyPrice] = 0;
	BizInfo[bizid][bInterior] = 0;
	BizInfo[bizid][bWorld] = 0;
	BizInfo[bizid][bTill] = 0;
	BizInfo[bizid][bOwned] = 0;
	BizInfo[bizid][bType] = 0;
	BizInfo[bizid][bsubType] = 0;
	BizInfo[bizid][bEntranceCost] = 0;
	BizInfo[bizid][bLocked] = 1;
	BizInfo[bizid][bProducts] = 0;
	//BizInfo[bizid][bRadio] = 0;

	BizInfo[bizid][bBuyingCarX] = 0.0;
	BizInfo[bizid][bBuyingCarY] = 0.0;
	BizInfo[bizid][bBuyingCarZ] = 0.0;
	BizInfo[bizid][bBuyingCarA] = 0.0;
	BizInfo[bizid][bBuyingBoatX] = 0.0;
	BizInfo[bizid][bBuyingBoatY] = 0.0;
	BizInfo[bizid][bBuyingBoatZ] = 0.0;
	BizInfo[bizid][bBuyingBoatA] = 0.0;
	BizInfo[bizid][bBuyingAirX] = 0.0;
	BizInfo[bizid][bBuyingAirY] = 0.0;
	BizInfo[bizid][bBuyingAirZ] = 0.0;
	BizInfo[bizid][bBuyingAirA] = 0.0;
	//BizInfo[bizid][bRadio] = 0;

	format(BizInfo[bizid][bOwner], 24, "The State");
	format(BizInfo[bizid][bInfo], 256, "Business");
	//format(BizInfo[bizid][bMessage], 256, "");
	return 1;
}

forward OnAdminSellBusiness(bizid);
public OnAdminSellBusiness(bizid)
{
	BizInfo[bizid][bTill] = 0;
	BizInfo[bizid][bOwned] = 0;
	BizInfo[bizid][bEntranceCost] = 0;
	BizInfo[bizid][bLocked] = 1;
	format(BizInfo[bizid][bOwner], 24, "The State");
	return 1;
}
/*
GetNextHouseTrunkSlot(house)
{
  for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i) if(HouseInfo[house][hWeapon][i] == 0) return i;
  return -1;
}*/

UpdateHouseText(houseid)
{
	if(!HouseInfo[houseid][hOwned]) {
	    if(!IsValidDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel])) {
	        format(szString, sizeof(szString), ""EMBED_YELLOW"%s\nราคา: $%d\nเลเวล: %d", GetHouseAddress(houseid, false), HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
	        HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseInfo[houseid][hEntranceWorld], HouseInfo[houseid][hEntranceInt], -1, 100.0);
			return 1;
		}

		format(szString, sizeof(szString), ""EMBED_YELLOW"%s\nราคา: $%d\nเลเวล: %d", GetHouseAddress(houseid, false), HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
        UpdateDynamic3DTextLabelText(HouseInfo[houseid][hLabel], -1, szString);
	}
	else
	{
		if(IsValidDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel])) DestroyDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel]);
	}
	return 1;
}


/*PlayPlayerBoomBoxURL(playerid, urlname[], url[])
{
	if(GetPVarInt(playerid, "SelectingHouseRadio"))
	{
	    new msg[128];
		new house = HouseEntered[playerid];

		format(msg, sizeof(msg), "> %s เปลี่ยนสถานีเป็น %s", ReturnRealName(playerid), urlname);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เปลี่ยนสถานีเป็น %s", ReturnRealName(playerid), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);;

		HouseInfo[house][hRadioOn] = 1;
		format(HouseInfo[house][hRadioURL], 256, "%s", url);
		StartMusicInHouse(house, url);
	}
}*/

/*StartMusicInHouse(house, url[])
{
	if(HouseInfo[house][hradioOn])
	{
		foreach(Player, i)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
				SendClientMessageEx(i, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", HouseInfo[house][hradioStation]);
			}
		}
	}
	return 1;
}*/

StopBoomBox(playerid)
{
	if(BoomboxData[playerid][boomboxOn])
	{
        BoomboxData[playerid][boomboxOn]=false;

		foreach(new i : Player)
		{
			if(Boombox_Nearest(i) == playerid)
			{
				StopAudioStreamForPlayer(i);
				SendClientMessage(i, COLOR_LIGHTRED, "วิทยุถูกปิด");
			}

		}
	}
}

StopHouseBoomBox(house)
{
	if(HouseInfo[house][hradioOn])
	{
		HouseInfo[house][hradioOn] = false;
		foreach(new i : Player)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
				SendClientMessage(i, COLOR_LIGHTRED, "วิทยุถูกปิด");
			}
		}
	}
	return 1;
}

StopBizBoomBox(biz)
{
	if(BizInfo[biz][bradioOn])
	{
		BizInfo[biz][bradioOn] = false;
		foreach(new i : Player)
		{
			if(BizEntered[i] == biz)
			{
				StopAudioStreamForPlayer(i);
				SendClientMessage(i, COLOR_LIGHTRED, "วิทยุถูกปิด");
			}
		}
	}
	return 1;
}

LoadHouseFurnitures(houseid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `house_furnitures` WHERE `houseid` = %d", HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnHouseFurnituresLoad", "i", houseid);
	return 1;
}

LoadBizFurnitures(bizid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `business_furnitures` WHERE `houseid` = %d", BizInfo[bizid][bID]);
	mysql_tquery(dbCon, szQuery, "OnBizFurnituresLoad", "i", bizid);
	return 1;
}

isHouseDoor(model)
{
	switch (model) {
		case 3109, 19857, 3093, 2947, 2955, 2946, 2930, 977, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499..1507, 1559, 1567, 1569, 1535, 1523, 1533, 1532, 1522:
		    return 1;
	}
	return 0;
}

forward OnHouseFurnituresLoad(houseid);
public OnHouseFurnituresLoad(houseid)
{
    new rows, str[48];

    cache_get_row_count(rows);

    if(rows)
    {
		new data[furnitureE];
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_name_int(i, "id", data[fID]);
			cache_get_value_name_int(i, "model", data[fModel]);
			cache_get_value_name(i, "name", str);

			format(data[fName], sizeof(str), str);

			data[fHouseID] = houseid;
			data[fType] = TYPE_HOUSE;

			cache_get_value_name_int(i, "interior", data[fInterior]);
			cache_get_value_name_int(i, "virworld", data[fVirtualWorld]);
			cache_get_value_name_int(i, "marketprice", data[fMarketPrice]);
			cache_get_value_name_float(i, "posx", data[fPosX]);
			cache_get_value_name_float(i, "posy", data[fPosY]);
			cache_get_value_name_float(i, "posz", data[fPosZ]);
			cache_get_value_name_float(i, "posrx", data[fPosRX]);
			cache_get_value_name_float(i, "posry", data[fPosRY]);
			cache_get_value_name_float(i, "posrz", data[fPosRZ]);

			new objectid = CreateDynamicObject(data[fModel], data[fPosX], data[fPosY], data[fPosZ], data[fPosRX], data[fPosRY], data[fPosRZ], data[fVirtualWorld], data[fInterior], -1, 200.0);

			if(isHouseDoor(data[fModel]))
			{
				data[fLocked] = 1;
				data[fOpened] = 0;
			}
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			
			format(szQuery, sizeof(szQuery), "SELECT * FROM `house_materials` WHERE `furnitureid` = %d", data[fID]);
			mysql_tquery(dbCon, szQuery, "OnMaterialsLoad", "i", objectid);
		}
    }
    return 1;
}

forward OnBizFurnituresLoad(bizid);
public OnBizFurnituresLoad(bizid)
{
    new rows, str[48];

    cache_get_row_count(rows);

    if(rows)
    {
		new data[furnitureE];
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_name_int(i, "id", data[fID]);
			cache_get_value_name_int(i, "model", data[fModel]);
			cache_get_value_name(i, "name", str);

			format(data[fName], sizeof(str), str);

			data[fHouseID] = bizid;
			data[fType] = TYPE_BUSINESS;

			cache_get_value_name_int(i, "interior", data[fInterior]);
			cache_get_value_name_int(i, "virworld", data[fVirtualWorld]);
			cache_get_value_name_int(i, "marketprice", data[fMarketPrice]);

			cache_get_value_name_float(i, "posx", data[fPosX]);
			cache_get_value_name_float(i, "posy", data[fPosY]);
			cache_get_value_name_float(i, "posz", data[fPosZ]);
			cache_get_value_name_float(i, "posrx", data[fPosRX]);
			cache_get_value_name_float(i, "posry", data[fPosRY]);
			cache_get_value_name_float(i, "posrz", data[fPosRZ]);

			new objectid = CreateDynamicObject(data[fModel], data[fPosX], data[fPosY], data[fPosZ], data[fPosRX], data[fPosRY], data[fPosRZ], data[fVirtualWorld], data[fInterior], -1, 200.0);

			if(isHouseDoor(data[fModel]))
			{
				data[fLocked] = 1;
				data[fOpened] = 0;
			}
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			format(szQuery, sizeof(szQuery), "SELECT * FROM `business_materials` WHERE `furnitureid` = %d", data[fID]);
			mysql_tquery(dbCon, szQuery, "OnMaterialsLoad", "i", objectid);
		
			if(data[fModel] == POKER_OBJECT) {
				Poker_InitTable(objectid);
			}
		}
    }
    return 1;
}

forward CopyMaterial(objectid, matIndex, matModel, matTxd[], MatTexture[]);
public CopyMaterial(objectid, matIndex, matModel, matTxd[], MatTexture[])
{
	SetDynamicObjectMaterial(objectid, matIndex, matModel, matTxd, MatTexture, 0xFFFFFFFF);	
	return 1;
}

forward OnMaterialsLoad(objectid);
public OnMaterialsLoad(objectid)
{
    new rows;

    cache_get_row_count(rows);

    if(rows)
    {
		new matIndex = -1, matModel = 0, matTxd[32], MatTexture[32];
		
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_name_int(i, "matIndex", matIndex);
			cache_get_value_name_int(i, "matModel", matModel);
			cache_get_value_name(i, "matTxd", matTxd, 32);
			cache_get_value_name(i, "MatTexture", MatTexture, 32);
			
			SetDynamicObjectMaterial(objectid, matIndex, matModel, matTxd, MatTexture, 0xFFFFFFFF);
		}
    }
    return 1;
}

GetHouseFurnitures(houseid)
{
	new count = 0, data[furnitureE];
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i != j; ++i) {
		if(!IsValidDynamicObject(i)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[fType] == TYPE_HOUSE && data[fHouseID] == houseid) count++;
	}
	return count;
}

GetBizFurnitures(bizid)
{
	new count = 0, data[furnitureE];
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i != j; ++i) {
		if(!IsValidDynamicObject(i)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[fType] == TYPE_BUSINESS && data[fHouseID] == bizid) count++;
	}
	return count;
}

/*
CountHouseTrunk(house)
{
	new count;
	for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i) if(HouseInfo[house][hWeapon][i] != 0) count++;
	return count;
}
*/
GetHouseLocation(playerid)
{
	new string[128], house = playerData[playerid][pHouseKey];
	
	format(string, sizeof(string), "ไม่พบข้อมูล");
	
	if(house == -1) {
	
		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
			if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnPlayerName(playerid), true))
			{
		   		if(HouseInfo[i][hSubid] != -1) format(string, sizeof(string), "%s", HouseInfo[HouseInfo[i][hSubid]][hAddress]);
				else format(string, sizeof(string), "%s", HouseInfo[i][hAddress]);
				break;
			}
		}
	}
	else {
   		if(HouseInfo[house][hSubid] != -1) format(string, sizeof(string), "%s", HouseInfo[HouseInfo[house][hSubid]][hAddress]);
		else format(string, sizeof(string), "%s", HouseInfo[house][hSubid]);
	}
	return string;
}

/*public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(response == EDIT_RESPONSE_FINAL) {
		MoveObject(gMainShipObjectId,fX, fY, fZ, 20.0, fRotX, fRotY, fRotZ);
		printf("{%f, %f, %f, %f, %f, %f},", fX, fY, fZ, fRotX, fRotY, fRotZ);
	}
	return 1;
}*/

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new str[128];

	//=============================================================================================================================
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if(PlayerPlaceSlot[playerid] != -1 && PlayerPlaceCar[playerid] != -1)
	{
	    new slot = PlayerPlaceSlot[playerid];
	    new i = PlayerPlaceCar[playerid];

		new Float:finalx, Float:finaly, Float:finalz, Float:finalrz;

		GetVehicleAttachCroods(CarData[i][carVehicle], x, y, z, rz, finalx, finaly, finalz, finalrz);

		CarPlace[i][slot][cPx]=finalx;
		CarPlace[i][slot][cPy]=finaly;
		CarPlace[i][slot][cPz]=finalz;
		CarPlace[i][slot][cPrx]=rx;
		CarPlace[i][slot][cPry]=ry;
		CarPlace[i][slot][cPrz]=finalrz;


		new Float:vehicleSize[3];
	    GetVehicleModelInfo(CarData[i][carModel], VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);

		if((finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: วัตถุอยู่นอกขอบเขต เลื่อนกลับไปทางยานพาหนะ");
		}

		if(response == EDIT_RESPONSE_FINAL || EDIT_RESPONSE_CANCEL)
		{
            if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new
					Float:fX,
					Float:fY,
					Float:fZ,
					Float:vA;

				GetVehicleInside(CarData[i][carVehicle], fX, fY, fZ);
				GetVehicleZAngle(CarData[i][carVehicle], vA);

				if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
				{

					GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
					{
						GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ, vA+135, finalx, finaly, finalz, finalrz);

						CarPlace[i][slot][cPx]=finalx;
						CarPlace[i][slot][cPy]=finaly;
						CarPlace[i][slot][cPz]=finalz;
						CarPlace[i][slot][cPrx]=-100.0;
						CarPlace[i][slot][cPry]=-45.0;
						CarPlace[i][slot][cPrz]=finalrz;
						CarPlace[i][slot][cPType]=1;

						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: วัตถุอยู่นอกขอบเขต เลื่อนไปยังตำแหน่งกึ่งกลาง");
					}
				}
			}
			else
			{

				new
					Float:fX,
					Float:fY,
					Float:fZ,
					Float:vA;

				GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
				GetVehicleZAngle(CarData[i][carVehicle], vA);

				if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
				{
					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ + 0.1, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=90.0;
					CarPlace[i][slot][cPry]=270.0;
					CarPlace[i][slot][cPrz]=finalrz;
					CarPlace[i][slot][cPType]=0;


					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: วัตถุอยู่นอกขอบเขต เลื่อนไปยังตำแหน่งกึ่งกลาง");
					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: ไอเท็มสามารถเก็บไว้ในที่จัดเก็บเท่านั้นหากคุณอยู่ด้านนอกยานพาหนะ");
				}

			}
			//printf("%d", CarPlace[i][slot][cPType]);

            AttachDynamicObjectToVehicle(CarPlace[i][slot][cPobj], CarData[i][carVehicle], CarPlace[i][slot][cPx], CarPlace[i][slot][cPy], CarPlace[i][slot][cPz], CarPlace[i][slot][cPrx], CarPlace[i][slot][cPry], CarPlace[i][slot][cPrz]);
            Car_SavePlace(i);
		}
		return 1;
	}

	if(GetPVarInt(playerid, "EditingLadders") == 1 )
	{
	    if( response == EDIT_RESPONSE_FINAL )
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}คุณได้ทำการแก้ไขบันไดฉุกเฉินเรียบร้อยแล้ว");
			DeletePVar( playerid,"EditingLadders" );
		}
		else if( response == EDIT_RESPONSE_CANCEL )
		{
			DestroyDynamicObject(objectid);
			DeletePVar( playerid,"EditingLadders" );
		}
		
		return 1;
	}

	if(GetPVarInt(playerid, "EditingTroll") == 1 ) {
	    if( response == EDIT_RESPONSE_FINAL )
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}คุณได้ทำการแก้ไขเตียงฉุกเฉินเรียบร้อยแล้ว");
			DeletePVar( playerid,"EditingTroll" );
		}
		else if( response == EDIT_RESPONSE_CANCEL )
		{
			DestroyDynamicObject(objectid);
			DeletePVar( playerid,"EditingTroll" );
		}
		return 1;
	}

	if(GetPVarInt(playerid, "EditingRB") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			DeletePVar(playerid, "EditingRB");
			SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF} คุณได้ทำการแก้ไขสิ่งกีดขวางเรียบร้อยแล้ว");
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			EditDynamicObject(playerid, objectid);
  			SendClientMessage(playerid, COLOR_WHITE, "โปรดกดปุ่ม SAVE ที่ตัวแก้ไข");
			DeletePVar(playerid, "EditingRB");
		}
		return 1;
	}

	if(GetPVarInt(playerid, "EditingMoveDoor") == 1 && Iter_Contains(sv_movedoors, GetPVarInt(playerid, "ObjectEditing")))
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new i = GetPVarInt(playerid, "ObjectEditing");

      		Doors[i][doorPosX] = x;
      		Doors[i][doorPosY] = y;
      		Doors[i][doorPosZ] = z;

      		Doors[i][doorPosRX] = rx;
      		Doors[i][doorPosRY] = ry;
      		Doors[i][doorPosRZ] = rz;

			SaveEditedMoveDoor(i, x, y, z, rx, ry, rz);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: เสร็จสิ้นการแก้ไขตำแหน่งประตูเลื่อนแล้ว %f, %f, %f", x, y, z);
			DeletePVar(playerid, "EditingMoveDoor");
			DeletePVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: คุณยกเลิกการแก้ไขตำแหน่งประตูเลื่อน");
			DeletePVar(playerid, "EditingMoveDoor");
			DeletePVar(playerid, "ObjectEditing");
		}
		return 1;
	}
	if(GetPVarInt(playerid, "EditingMoveDoorMove") == 1 && Iter_Contains(sv_movedoors, GetPVarInt(playerid, "ObjectEditing")))
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			new i = GetPVarInt(playerid, "ObjectEditing");

      		Doors[i][doorMoveX] = x;
      		Doors[i][doorMoveY] = y;
      		Doors[i][doorMoveZ] = z;

      		Doors[i][doorMoveRX] = rx;
      		Doors[i][doorMoveRY] = ry;
      		Doors[i][doorMoveRZ] = rz;

			SaveEditedMoveDoorMove(i, x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: เสร็จสิ้นการแก้ไขตำแหน่งการเลื่อนของประตูเลื่อนแล้ว %f, %f, %f", x, y, z);
			DeletePVar(playerid, "EditingMoveDoorMove");
			DeletePVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: คุณยกเลิกการแก้ไขตำแหน่งการเลื่อนของประตูเลื่อน");
			DeletePVar(playerid, "EditingMoveDoorMove");
			DeletePVar(playerid, "ObjectEditing");
		}
		return 1;
	}

	if( GetPVarInt(playerid, "GraffitiCreating") == 1 ) //Checking if player have a positiv variable on GraffitiCreating
	{
	    if( response == EDIT_RESPONSE_FINAL ) // If player press SAVE
		{
            new id = GetPVarInt(playerid, "GraffitiID");

			graff_Info[id][Xpos] = x;
			graff_Info[id][Ypos] = y;
			graff_Info[id][Zpos] = z;

			graff_Info[id][XYpos] = rx;
			graff_Info[id][YYpos] = ry;
			graff_Info[id][ZYpos] = rz;

            SaveGraffiti(id);

			DeletePVar( playerid,"GraffitiCreating" );
		}
		else if( response == EDIT_RESPONSE_CANCEL ) // If he hits ESC
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DeletePVar( playerid,"GraffitiCreating" );
		}
		return 1;
	}

	if(IsValidDynamicObject(objectid) && MealObject[playerid] != -1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
            MealDrop[MealObject[playerid]][mX]=x;
            MealDrop[MealObject[playerid]][mY]=y;
            MealDrop[MealObject[playerid]][mZ]=z;
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
		    MealHolding[playerid] = MealDrop[MealObject[playerid]][mID];
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);

			MealDestroy(MealObject[playerid]);
		    MealObject[playerid]=-1;
		}
		return 1;
	}
	
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingDrugPackage") == 1)
	{			
		if(response == EDIT_RESPONSE_CANCEL)
		{
			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			SetDynamicObjectPos(objectid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);
			SetDynamicObjectRot(objectid, data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ]);
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			data[drugObjectX] = x;
			data[drugObjectY] = y;
			data[drugObjectZ] = z;
			data[drugObjectRX] = rx;
			data[drugObjectRY] = ry;
			data[drugObjectRZ] = rz;

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			
			format(XLQuery, sizeof(XLQuery), "UPDATE `drugs_object` SET `drugObjectX`='%f',`drugObjectY`='%f',`drugObjectZ`='%f',`drugObjectRX`='%f',`drugObjectRY`='%f',`drugObjectRZ`='%f' WHERE `drugSID` = '%d'", 
			data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugSID]);
			mysql_tquery(dbCon, XLQuery);
		}
		DeletePVar(playerid, "EditingDrugPackage");
		return 1;
	}

	//=============================================================================================================================

	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingCCTVs") == 1)
	{	
		new listitem = GetPVarInt(playerid, "CCTVsEditing");
		if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "EditingCCTVs");
			DeletePVar(playerid, "CCTVsEditing");
			SetDynamicObjectPos(CCTVInfo[listitem][cctvObject], CCTVInfo[listitem][cctvX], CCTVInfo[listitem][cctvY], CCTVInfo[listitem][cctvZ]);
			SetDynamicObjectRot(CCTVInfo[listitem][cctvObject], CCTVInfo[listitem][cctvRotX], CCTVInfo[listitem][cctvRotY], CCTVInfo[listitem][cctvRotZ]);
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			CCTVInfo[listitem][cctvX] = x;
			CCTVInfo[listitem][cctvY] = y;
			CCTVInfo[listitem][cctvZ] = z;
			CCTVInfo[listitem][cctvRotX] = rx;
			CCTVInfo[listitem][cctvRotY] = ry;
			CCTVInfo[listitem][cctvRotZ] = rz;
			SaveCCTV(listitem);
			DeletePVar(playerid, "EditingCCTVs");
			DeletePVar(playerid, "CCTVsEditing");
		}
		return 1;
	}
	
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "AddingCCTVs") == 1)
	{	
		new listitem = GetPVarInt(playerid, "CCTVsEditing");
		if(response == EDIT_RESPONSE_CANCEL)
		{
			DeletePVar(playerid, "AddingCCTVs");
			DeletePVar(playerid, "CCTVsEditing");
			DestroyDynamicObject(CCTVInfo[listitem][cctvObject]);
			Iter_Remove(CCTVs, listitem);
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
		
			CCTVInfo[listitem][cctvX] = x;
			CCTVInfo[listitem][cctvY] = y;
			CCTVInfo[listitem][cctvZ] = z;
			CCTVInfo[listitem][cctvRotX] = rx;
			CCTVInfo[listitem][cctvRotY] = ry;
			CCTVInfo[listitem][cctvRotZ] = rz;
			CCTVInfo[listitem][cctvExists] = 1;
		
			format(XLQuery, sizeof(XLQuery), "INSERT INTO cctvs (name, x, y, z, r_x, r_y, r_z, world, interior, faction) VALUES ('%s', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d')",
			CCTVInfo[listitem][cctvName],
			x, y, z, rx, ry, rz,
			CCTVInfo[listitem][cctvWorld],
			CCTVInfo[listitem][cctvInterior],
			CCTVInfo[listitem][cctvFaction]);
			mysql_tquery(dbCon, XLQuery, "OnQueryFinished", "dd", listitem, THREAD_CREATE_CCTV);
		
			DeletePVar(playerid, "AddingCCTVs");
			DeletePVar(playerid, "CCTVsEditing");
		
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้สร้างกล้อง CCTV ID: %d", ReturnPlayerName(playerid), listitem);
			
			format(szString, sizeof(szString), "CCTV ID %d", listitem);
			SQL_LogAdmin_Action(playerid, "/tvcreate", szString);
		}
		return 1;
	}
	/*if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขตำแหน่งของเฟอนิเจอร์เสร็จแล้ว");
			OnPlayerEditedFurniture(objectid, x, y, z, rx, ry, rz);
			DeletePVar(playerid, "EditingFurniture");

			Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "การแก้ไขวัตถุ:", ""EMBED_WHITE"ข้อมูล\nตำแหน่ง\n{FF6347}แก้ไขพื้นผิว"EMBED_WHITE"\nขาย\nเปลี่ยนชื่อ\nก๊อปปี้", "เลือก", "<< กลับ");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ยกเลิกการแก้ไขตำแหน่งของเฟอนิเจอร์");
			DeletePVar(playerid, "EditingFurniture");

			Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "การแก้ไขวัตถุ:", ""EMBED_WHITE"ข้อมูล\nตำแหน่ง\n{FF6347}แก้ไขพื้นผิว"EMBED_WHITE"\nขาย\nเปลี่ยนชื่อ\nก๊อปปี้", "เลือก", "<< กลับ");
		}
		return 1;
	}

	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "JustBoughtFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขตำแหน่งของเฟอนิเจอร์เสร็จแล้ว");
			OnPlayerEditedFurniture(objectid, x, y, z, rx, ry, rz);
			DeletePVar(playerid, "JustBoughtFurniture");
			
			Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "การแก้ไขวัตถุ:", ""EMBED_WHITE"ข้อมูล\nตำแหน่ง\n{FF6347}แก้ไขพื้นผิว"EMBED_WHITE"\nขาย\nเปลี่ยนชื่อ\nก๊อปปี้", "เลือก", "<< กลับ");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
	
			new data[furnitureE];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			
			format(str, sizeof(str), "{AFAFAF}[BUSINESS]"EMBED_WHITE": คุณได้ยกเลิกการซื้อ %s และได้รับเงินคืน $%d", data[fName], data[fMarketPrice]);
			SendClientMessage(playerid, COLOR_GRAD4, str);
			
			playerData[playerid][pCash] += data[fMarketPrice];
			
			if(data[fType] == TYPE_HOUSE) {
				mysql_format(dbCon, szQuery, sizeof(szQuery), "DELETE FROM `house_furnitures` WHERE `id` = %d", data[fID]);
				mysql_tquery(dbCon, szQuery, "", "");
				mysql_format(dbCon, szQuery, sizeof(szQuery), "DELETE FROM `house_materials` WHERE `furnitureid` = %d", data[fID]);
				mysql_tquery(dbCon, szQuery, "", "");
			}
			else if(data[fType] == TYPE_BUSINESS) {
				mysql_format(dbCon, szQuery, sizeof(szQuery), "DELETE FROM `business_furnitures` WHERE `id` = %d", data[fID]);
				mysql_tquery(dbCon, szQuery, "", "");
				mysql_format(dbCon, szQuery, sizeof(szQuery), "DELETE FROM `business_materials` WHERE `furnitureid` = %d", data[fID]);
				mysql_tquery(dbCon, szQuery, "", "");
				
				if(data[fModel] == POKER_OBJECT) 
					Poker_DestroyTable(objectid);
			}
			DestroyDynamicObject(objectid);
			DeletePVar(playerid, "JustBoughtFurniture");

			Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "เมนูเฟอร์นิเจอร์:", "ซื้อเฟอร์นิเจอร์\nเฟอร์นิเจอร์ในปัจจุบัน\nข้อมูล", "เลือก", "<< กลับ");
		}
		DeletePVar(playerid, "FurnitureModelBuying");
		DeletePVar(playerid, "FurniturePriceBuying");
		DeletePVar(playerid, "FurnitureNameBuying");
		return 1;
	}*/
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "BoomboxAdjust") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    DeletePVar(playerid, "BoomboxAdjust");

		    foreach(new i : Player) {
				if (playerid != i && BoomboxData[i][boomboxPlaced] && GetDistance(BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2], BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2]) <= 30.0) {
					SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
					SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
					SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถวางตรงนี้ได้");
			        return 1;
				}
			}



			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			BoomboxData[playerid][boomboxPos][0] = x;
			BoomboxData[playerid][boomboxPos][1] = y;
			BoomboxData[playerid][boomboxPos][2] = z;

			if(BoomboxData[playerid][boomboxOn]) {

				foreach(new i : Player) if(Boombox_Nearest(i) == playerid)
				{
					strunpack(str, BoomboxData[playerid][boomboxURL]);
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, str, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
				}
			}

		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DeletePVar(playerid, "BoomboxAdjust");
		}
		return 1;
	}
	//=============================================================================================================================
	return 1;
}

forward OnHouseRemove(houseid);
public OnHouseRemove(houseid)
{
    HouseInfo[houseid][hID] = 0;
	HouseInfo[houseid][hEntranceX] = 0.0000;
	HouseInfo[houseid][hEntranceY] = 0.0000;
	HouseInfo[houseid][hEntranceZ] = 0.0000;
	HouseInfo[houseid][hExitX] = 0.0000;
	HouseInfo[houseid][hExitY] = 0.0000;
	HouseInfo[houseid][hExitZ] = 0.0000;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hLevelbuy] = 0;
	HouseInfo[houseid][hPrice] = 0;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hInterior] = 0;
	HouseInfo[houseid][hWorld] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hSubid] = -1;
	HouseInfo[houseid][hEntranceInt] = 0;
	HouseInfo[houseid][hEntranceWorld] = 0;
	HouseInfo[houseid][hType] = 0;
	//HouseInfo[houseid][hRadio] = 0;
	format(HouseInfo[houseid][hOwner], 256, "The State");
	HouseInfo[houseid][hLabel] = STREAMER_TAG_3D_TEXT_LABEL:INVALID_3DTEXT_ID;
	Iter_Remove(sv_houses, houseid);
	return 1;
}

forward OnEntranceRemove(entranceid);
public OnEntranceRemove(entranceid)
{
    EntranceData[entranceid][eID] = -1;

	EntranceData[entranceid][ePosEnX] = 0.0;
	EntranceData[entranceid][ePosEnY] = 0.0;
	EntranceData[entranceid][ePosEnZ] = 0.0;
	EntranceData[entranceid][ePosEnA] = 0.0;
	EntranceData[entranceid][eEnTime] = 0;
	EntranceData[entranceid][eEnHouse] = 0;
	EntranceData[entranceid][eEnBiz] = 0;
	EntranceData[entranceid][eEnLocal] = 255;
	
	EntranceData[entranceid][ePosExX] = 0.0;
	EntranceData[entranceid][ePosExY] = 0.0;
	EntranceData[entranceid][ePosExZ] = 0.0;
	EntranceData[entranceid][ePosExA] = 0.0;
	EntranceData[entranceid][eExTime] = 0;
	EntranceData[entranceid][eExHouse] = 0;
	EntranceData[entranceid][eExBiz] = 0;
	EntranceData[entranceid][eExLocal] = 255;
	
	Iter_Remove(sv_entrance, entranceid);
	return 1;
}

forward OnGarageRemove(garageid);
public OnGarageRemove(garageid)
{
    GarageData[garageid][gID] = -1;

	GarageData[garageid][gPosEnX] = 0.0;
	GarageData[garageid][gPosEnY] = 0.0;
	GarageData[garageid][gPosEnZ] = 0.0;
	GarageData[garageid][gPosEnA] = 0.0;
	GarageData[garageid][gEnTime] = 0;
	GarageData[garageid][gEnHouse] = 0;
	GarageData[garageid][gEnBiz] = 0;
	GarageData[garageid][gEnLocal] = 255;
	
	GarageData[garageid][gPosExX] = 0.0;
	GarageData[garageid][gPosExY] = 0.0;
	GarageData[garageid][gPosExZ] = 0.0;
	GarageData[garageid][gPosExA] = 0.0;
	GarageData[garageid][gExTime] = 0;
	GarageData[garageid][gExHouse] = 0;
	GarageData[garageid][gExBiz] = 0;
	GarageData[garageid][gExLocal] = 255;

	strpack(GarageData[garageid][PlayerOwner], "", MAX_PLAYER_NAME char);
	GarageData[garageid][gLocked] = 0;

	Iter_Remove(sv_garage, garageid);
	return 1;
}

forward OnWarehouseRemove(warehouseid);
public OnWarehouseRemove(warehouseid)
{
	WareHouseInfo[warehouseid][whX] = 0.0000;
	WareHouseInfo[warehouseid][whY] = 0.0000;
	WareHouseInfo[warehouseid][whZ] = 0.0000;
	WareHouseInfo[warehouseid][whInt] = 0;
	WareHouseInfo[warehouseid][whWorld] = 0;
	WareHouseInfo[warehouseid][whType] = 0;

	/*format(WareHouseInfo[warehouseid][whPlayer1], 24, "");
	format(WareHouseInfo[warehouseid][whPlayer2], 24, "");*/
	strpack(WareHouseInfo[warehouseid][whPlayer1], "", MAX_PLAYER_NAME char);
	strpack(WareHouseInfo[warehouseid][whPlayer2], "", MAX_PLAYER_NAME char);
	/*strpack(WareHouseInfo[i][whPlayer1], '\0');
	strpack(WareHouseInfo[i][whPlayer2], '\0');*/

	Iter_Remove(sv_warehouse, warehouseid);
	return 1;
}

forward OnAdminSellHouse(houseid);
public OnAdminSellHouse(houseid)
{
	foreach(new i : Player)
	{
		if(playerData[i][pHouseKey] == houseid)
		{
			SendClientMessage(i, COLOR_GRAD1, "บ้านที่คุณเช่าถูกขายแล้ว ตอนนี้คุณไม่มีที่อยู่อาศัย");
			playerData[i][pHouseKey] = -1;
		}
	}
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hCash] = 0;
	//HouseInfo[houseid][hRadio] = 0;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	
	if(HouseInfo[houseid][hSubid] != -1) {
		HouseInfo[HouseInfo[houseid][hSubid]][hCash] -= HouseInfo[houseid][hPrice];
	}
	
	format(HouseInfo[houseid][hOwner], 256, "The State");
	UpdateHouseText(houseid);
	return 1;
}

forward OnEntranceMoved(entranceid, Float:x, Float:y, Float:z, Float:a, etime, ehouse, ebizz, elocal, eint, eworld);
public OnEntranceMoved(entranceid, Float:x, Float:y, Float:z, Float:a, etime, ehouse, ebizz, elocal, eint, eworld)
{
	EntranceData[entranceid][ePosEnX] = x;
	EntranceData[entranceid][ePosEnY] = y;
	EntranceData[entranceid][ePosEnZ] = z;
	EntranceData[entranceid][ePosEnA] = a;

	EntranceData[entranceid][eEnTime] = etime;
	EntranceData[entranceid][eEnHouse] = ehouse;
	EntranceData[entranceid][eEnBiz] = ebizz;
	EntranceData[entranceid][eEnLocal] = elocal;
	EntranceData[entranceid][eEnInt] = eint;
	EntranceData[entranceid][eEnWorld] = eworld;
	
	Entrance_Refresh(entranceid);
	return 1;
}

forward OnEntranceExitMoved(entranceid, Float:x, Float:y, Float:z, Float:a, etime, ehouse, ebizz, elocal, eint, eworld);
public OnEntranceExitMoved(entranceid, Float:x, Float:y, Float:z, Float:a, etime, ehouse, ebizz, elocal, eint, eworld)
{
	EntranceData[entranceid][ePosExX] = x;
	EntranceData[entranceid][ePosExY] = y;
	EntranceData[entranceid][ePosExZ] = z;
	EntranceData[entranceid][ePosExA] = a;

	EntranceData[entranceid][eExTime] = etime;
	EntranceData[entranceid][eExHouse] = ehouse;
	EntranceData[entranceid][eExBiz] = ebizz;
	EntranceData[entranceid][eExLocal] = elocal;
	EntranceData[entranceid][eExInt] = eint;
	EntranceData[entranceid][eExWorld] = eworld;

	//Entrance_Refresh(entranceid);
	return 1;
}

forward OnGarageMoved(garageid, Float:x, Float:y, Float:z, Float:a, gtime, ghouse, gbizz, glocal, gint, gworld);
public OnGarageMoved(garageid, Float:x, Float:y, Float:z, Float:a, gtime, ghouse, gbizz, glocal, gint, gworld)
{
	GarageData[garageid][gPosEnX] = x;
	GarageData[garageid][gPosEnY] = y;
	GarageData[garageid][gPosEnZ] = z;
	GarageData[garageid][gPosEnA] = a;

	GarageData[garageid][gEnTime] = gtime;
	GarageData[garageid][gEnHouse] = ghouse;
	GarageData[garageid][gEnBiz] = gbizz;
	GarageData[garageid][gEnLocal] = glocal;
	GarageData[garageid][gEnInt] = gint;
	GarageData[garageid][gEnWorld] = gworld;
	
	Garage_Refresh(garageid);
	return 1;
}

forward OnGarageExitMoved(garageid, Float:x, Float:y, Float:z, Float:a, gtime, ghouse, gbizz, glocal, gint, gworld);
public OnGarageExitMoved(garageid, Float:x, Float:y, Float:z, Float:a, gtime, ghouse, gbizz, glocal, gint, gworld)
{
	GarageData[garageid][gPosExX] = x;
	GarageData[garageid][gPosExY] = y;
	GarageData[garageid][gPosExZ] = z;
	GarageData[garageid][gPosExA] = a;

	GarageData[garageid][gExTime] = gtime;
	GarageData[garageid][gExHouse] = ghouse;
	GarageData[garageid][gExBiz] = gbizz;
	GarageData[garageid][gExLocal] = glocal;
	GarageData[garageid][gExInt] = gint;
	GarageData[garageid][gExWorld] = gworld;

	//Entrance_Refresh(entranceid);
	return 1;
}

forward OnHouseMoved(houseid, Float:x, Float:y, Float:z, int, world);
public OnHouseMoved(houseid, Float:x, Float:y, Float:z, int, world)
{
	HouseInfo[houseid][hEntranceX] = x;
	HouseInfo[houseid][hEntranceY] = y;
	HouseInfo[houseid][hEntranceZ] = z;
	
	new temp_house = HouseInfo[houseid][hSubid];
	if(temp_house != -1) {
		HouseInfo[houseid][hEntranceInt] = HouseInfo[temp_house][hInterior];	
		HouseInfo[houseid][hEntranceWorld] = HouseInfo[temp_house][hWorld];
	}
	else {
		HouseInfo[houseid][hEntranceInt] = int;	
		HouseInfo[houseid][hEntranceWorld] = world;
	}
	
	DestroyDynamicArea(HouseInfo[houseid][hAreaID][0]);
	HouseInfo[houseid][hAreaID][0] = CreateDynamicSphere(HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], 3.0, HouseInfo[houseid][hEntranceWorld], HouseInfo[houseid][hEntranceInt]); // The house exterior.	
	Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[houseid][hAreaID][0], E_STREAMER_EXTRA_ID, houseid);
		 
	return 1;
}

forward OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z);
public OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z)
{
	HouseInfo[houseid][hExitX] = x;
	HouseInfo[houseid][hExitY] = y;
	HouseInfo[houseid][hExitZ] = z;
	HouseInfo[houseid][hInterior] = interior;
	HouseInfo[houseid][hWorld] = world;
	
	DestroyDynamicArea(HouseInfo[houseid][hAreaID][1]);
	HouseInfo[houseid][hAreaID][1] = CreateDynamicSphere(HouseInfo[houseid][hExitX], HouseInfo[houseid][hExitY], HouseInfo[houseid][hExitZ], 3.0, HouseInfo[houseid][hWorld], HouseInfo[houseid][hInterior]);
	Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[houseid][hAreaID][1], E_STREAMER_EXTRA_ID, houseid);		
	
	return 1;
}

forward OnTeleportRemove(teleid);
public OnTeleportRemove(teleid)
{
	HouseInteriors[teleid][aPosX] = 0.0000;
	HouseInteriors[teleid][aPosY] = 0.0000;
	HouseInteriors[teleid][aPosZ] = 0.0000;
	HouseInteriors[teleid][aTeleOn] = 0;
	return 1;
}

forward GlobalSaving();
public GlobalSaving()
{
	//-------------------------------------------------
	foreach(new i : Player)
	{
		SQL_SaveCharacter(i);
	}
	//-------------------------------------------------
	foreach(new i : sv_houses) UpdateHouseInfo(i);
	foreach(new i : sv_business) UpdateBizInfo(i);
	foreach(new i : sv_playercar) Car_SaveID(i);
	foreach(new i : sv_servercar) Vehicle_SaveID(i);
	
	return 1;
}

forward Industry_Load();
public Industry_Load()
{
    new rows, total, msg[128];

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++) if(i < MAX_ITEM_STORAGE)
		{
			cache_get_value_index_int(i, 0, StorageData[i][in_id]);
			cache_get_value_index_float(i, 1, StorageData[i][in_posx]);
			cache_get_value_index_float(i, 2, StorageData[i][in_posy]);
			cache_get_value_index_float(i, 3, StorageData[i][in_posz]);
			cache_get_value_index_int(i, 4, StorageData[i][in_item]);
			cache_get_value_index_int(i, 5, StorageData[i][in_industryid]);
			cache_get_value_index_int(i, 6, StorageData[i][in_trading_type]);
			cache_get_value_index_int(i, 7, StorageData[i][in_price]);
			cache_get_value_index_int(i, 8, StorageData[i][in_consumption]);
			cache_get_value_index_int(i, 9, StorageData[i][in_stock]);
			cache_get_value_index_int(i, 10, StorageData[i][in_maximum]);

			//if(StorageData[i][in_item] == 23) printf("%d", i);

			if(!IndustryData[StorageData[i][in_industryid]][in_close])
			{
				StorageData[i][in_pickup] = CreateDynamicPickup(1318, 23, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz], 0, 0);

				format(msg, 128, "[{E5FF00}%s"EMBED_WHITE"]\nความจุโกดัง: %d / %d\nราคา: %s / หน่วย", g_arrIndItemNames[StorageData[i][in_item]], StorageData[i][in_stock], StorageData[i][in_maximum], FormatNumber(StorageData[i][in_price]));
				StorageData[i][in_label] = CreateDynamic3DTextLabel(msg, -1, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			}
            total++;

            Iter_Add(sv_industry, i);
		}
    }
	printf("Loaded %d storage from MySQL.", total);
    return 1;
}


forward DynamicTele_Load();
public DynamicTele_Load()
{
    new rows, total;

    cache_get_row_count(rows);

    new msg[128];

    if(rows)
    {
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, HouseInteriors[i][aID]);

			cache_get_value_index(i, 1, msg);
			format(HouseInteriors[i][aMapName], 32, "%s", msg);

			cache_get_value_index_float(i, 2, HouseInteriors[i][aPosX]);
			cache_get_value_index_float(i, 3, HouseInteriors[i][aPosY]);
			cache_get_value_index_float(i, 4, HouseInteriors[i][aPosZ]);

			cache_get_value_index_int(i, 5, HouseInteriors[i][aInterior]);

			HouseInteriors[i][aTeleOn] = 1;
            total++;
		}
    }
	printf("Loaded %d admin teleports from MySQL.", total);
    return 1;
}

forward OnTeleportInsert(TeleID);
public OnTeleportInsert(TeleID)
{
	HouseInteriors[TeleID][aID] = cache_insert_id();
	return 1;
}

forward ShowTenantsAmount(playerid);
public ShowTenantsAmount(playerid)
{
	new rows;
	new tenantname[128];
	cache_get_row_count(rows);
	if(!rows) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่มีใครเช่าบ้านของคุณ");
	SendClientMessage(playerid, COLOR_YELLOW, "|_______________Tenants_______________|");
	for(new i=0; i!=rows; ++i)
	{
		cache_get_value_index(i, 0, tenantname);

		if(strcmp(ReturnPlayerName(playerid), tenantname, true))
		{
			format(szString, sizeof(szString), "[Tenant %d] %s", i, tenantname);
			if(strcmp(tenantname, ReturnPlayerName(playerid), true)) SendClientMessage(playerid, COLOR_GREEN, szString);
		}
	}
	SendClientMessage(playerid, COLOR_YELLOW, "|_______________Tenants_______________|");
	return 1;
}

forward OnPlayerSellHouse(house);
public OnPlayerSellHouse(house)
{
	foreach(new i : Player)
	{
		if(playerData[i][pHouseKey] == house)
		{
			SendClientMessage(i, COLOR_GRAD1, "บ้านที่คุณเช่าถูกขายแล้ว ตอนนี้คุณไม่มีที่อยู่อาศัย");
			playerData[i][pHouseKey] = -1;
		}
	}
	return 1;
}

forward OnPlayerEvictTenant(playerid, house);
public OnPlayerEvictTenant(playerid, house)
{
	foreach(new i : Player)
	{
		if(i == playerid) continue;

		if(playerData[i][pHouseKey] == house)
		{
			playerData[i][pHouseKey] = -1;
			SendClientMessage(i, COLOR_YELLOW, "คุณถูกขับออกจากบ้านโดยเจ้าของ");
		}
	}
	return 1;
}
Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPlayerPosEx(playerid, HouseInteriors[listitem][aPosX], HouseInteriors[listitem][aPosY], HouseInteriors[listitem][aPosZ]);
		SetPlayerInterior(playerid, HouseInteriors[listitem][aInterior]);
	}
	return 1;
}

Dialog:AdminBusinesses(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPlayerPosEx(playerid, BizInfo[listitem][bEntranceX], BizInfo[listitem][bEntranceY], BizInfo[listitem][bEntranceZ]);
	}
	return 1;
}

Dialog:Teles(playerid, response, listitem, inputtext[]) {
	if(!response) return 1;

	switch(listitem)
		{
		    case 0:
		    {
		        SetPlayerPos(playerid, -25.884498,-185.868988,1003.546875);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 1");
			    return 1;
		    }
		    case 1:
		    {
		        SetPlayerPos(playerid, 6.091179,-29.271898,1003.549438);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 2");
			    return 1;
		    }
		    case 2:
		    {
		        SetPlayerPos(playerid, -30.946699,-89.609596,1003.546875);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 3");
			    return 1;
		    }
		    case 3:
		    {
		        SetPlayerPos(playerid, -25.132598,-139.066986,1003.546875);
		        SetPlayerInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 4");
			    return 1;
		    }
		    case 4:
		    {
		        SetPlayerPos(playerid, -27.312299,-29.277599,1003.557250);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 5");
			    return 1;
		    }
		    case 5:
		    {
		        SetPlayerPos(playerid, -26.691598,-55.714897,1003.546875);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}24/7 6");
			    return 1;
		    }
		    case 6:
		    {
		        SetPlayerPos(playerid, -1827.147338,7.207417,1061.143554);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Airoport Ticket Desk");
			    return 1;
		    }
		    case 7:
		    {
		        SetPlayerPos(playerid, -1861.936889,54.908092,1061.143554);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Airoport Baggage Reclaim");
			    return 1;
		    }
		    case 8:
		    {
		        SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Shamal");
			    return 1;
		    }
		    case 9:
		    {
		        SetPlayerPos(playerid, 315.745086,984.969299,1958.919067);
		        SetPlayerInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Andromada");
			    return 1;
		    }
		    case 10:
		    {
		        SetPlayerPos(playerid, 286.148986,-40.644397,1001.515625);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation 1");
			    return 1;
		    }
		    case 11:
		    {
		        SetPlayerPos(playerid, 286.800994,-82.547599,1001.515625);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation 2");
			    return 1;
		    }
		    case 12:
		    {
		        SetPlayerPos(playerid, 296.919982,-108.071998,1001.515625);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation 3");
			    return 1;
		    }
		    case 13:
		    {
		        SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation 4");
			    return 1;
		    }
		    case 14:
		    {
		        SetPlayerPos(playerid, 316.524993,-167.706985,999.593750);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation 5");
			    return 1;
		    }
		    case 15:
		    {
		        SetPlayerPos(playerid, 302.292877,-143.139099,1004.062500);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation Booths");
			    return 1;
		    }
		    case 16:
		    {
		        SetPlayerPos(playerid, 298.507934,-141.647048,1004.054748);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ammunation Range");
			    return 1;
		    }
		    case 17:
		    {
		        SetPlayerPos(playerid, 1038.531372,0.111030,1001.284484);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Blastin Fools Hallway");
			    return 1;
		    }
		    case 18:
		    {
		        SetPlayerPos(playerid, 444.646911,508.239044,1001.419494);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Budget Inn Motel Room");
			    return 1;
		    }
		    case 19:
		    {
		        SetPlayerPos(playerid, 2215.454833,-1147.475585,1025.796875);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Jefferson Motel");
			    return 1;
		    }
		    case 20:
		    {
		        SetPlayerPos(playerid, 833.269775,10.588416,1004.179687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Off Track Betting Shop");
			    return 1;
		    }
		    case 21:
		    {
		        SetPlayerPos(playerid, -103.559165,-24.225606,1000.718750);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Sex Shop");
			    return 1;
		    }
		    case 22:
		    {
		        SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Meat Factory");
			    return 1;
		    }
		    case 23:
		    {
		        SetPlayerPos(playerid, -2240.468505,137.060440,1035.414062);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Zero's RC Shop");
			    return 1;
		    }
		    case 24:
		    {
		        SetPlayerPos(playerid, 663.836242,-575.605407,16.343263);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Dillmore Gas Station");
			    return 1;
		    }
		    case 25:
		    {
		        SetPlayerPos(playerid, 2169.461181,1618.798339,999.976562);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Catigula's Basement");
			    return 1;
		    }
			case 26:
		    {
		        SetPlayerPos(playerid, 1889.953369,1017.438293,31.882812);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}FDC Janitors Room");
			    return 1;
		    }
		    case 27:
		    {
		        SetPlayerPos(playerid, -2159.122802,641.517517,1052.381713);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Woozie's Office");
			    return 1;
		    }
		    case 28:
		    {
		        SetPlayerPos(playerid, 207.737991,-109.019996,1005.132812);
		        SetPlayerInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Binco");
			    return 1;
		    }
		    case 29:
		    {
		        SetPlayerPos(playerid, 204.332992,-166.694992,1000.523437);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Didier Sachs");
			    return 1;
		    }
		    case 30:
		    {
		        SetPlayerPos(playerid, 207.054992,-138.804992,1003.507812);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Prolaps");
			    return 1;
		    }
		    case 31:
		    {
		        SetPlayerPos(playerid, 203.777999,-48.492397,1001.804687);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Suburban");
			    return 1;
		    }
		    case 32:
		    {
		        SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Victim");
			    return 1;
		    }
		    case 33:
		    {
		        SetPlayerPos(playerid, 161.391006,-93.159156,1001.804687);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}ZIP");
			    return 1;
		    }
		    case 34:
		    {
		        SetPlayerPos(playerid, 493.390991,-22.722799,1000.679687);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Alhambra");
			    return 1;
		    }
		    case 35:
		    {
		        SetPlayerPos(playerid, 501.980987,-69.150199,998.757812);
		        SetPlayerInterior(playerid, 11);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ten Green Bottles");
			    return 1;
		    }
		    case 36:
		    {
		        SetPlayerPos(playerid, -227.027999,1401.229980,27.765625);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Lil' Probe Inn");
			    return 1;
		    }
		    case 37:
		    {
		        SetPlayerPos(playerid, 457.304748,-88.428497,999.554687);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Jay's Dinner");
			    return 1;
		    }
		    case 38:
		    {
		        SetPlayerPos(playerid, 454.973937,-110.104995,1000.077209);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Gant Bridge Dinner");
			    return 1;
		    }
		    case 39:
		    {
		        SetPlayerPos(playerid, 435.271331,-80.958938,999.554687);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Secret Valley Dinner");
			    return 1;
		    }
		    case 40:
		    {
		        SetPlayerPos(playerid, 452.489990,-18.179698,1001.132812);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}World of Coq");
			    return 1;
		    }
		    case 41:
		    {
		        SetPlayerPos(playerid, 681.557861,-455.680053,-25.609874);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Welcome Pump");
			    return 1;
		    }
		    case 42:
		    {
		        SetPlayerPos(playerid, 375.962463,-65.816848,1001.507812);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Burger Shot");
			    return 1;
		    }
		    case 43:
		    {
		        SetPlayerPos(playerid, 369.579528,-4.487294,1001.858886);
		        SetPlayerInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Cluckin' Bell");
			    return 1;
		    }
		    case 44:
		    {
		        SetPlayerPos(playerid, 373.825653,-117.270904,1001.499511);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Well Stacked Pizza");
			    return 1;
		    }
		    case 45:
		    {
		        SetPlayerPos(playerid, 381.169189,-188.803024,1000.632812);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Jimmy's Sticky Ring");
			    return 1;
		    }
		    case 46:
		    {
		        SetPlayerPos(playerid, 244.411987,305.032989,999.148437);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Denise Room");
			    return 1;
		    }
		    case 47:
		    {
		        SetPlayerPos(playerid, 271.884979,306.631988,999.148437);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Katie Room");
			    return 1;
		    }
		    case 48:
		    {
		        SetPlayerPos(playerid, 291.282989,310.031982,999.148437);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Helena Room");
			    return 1;
		    }
		    case 49:
		    {
		        SetPlayerPos(playerid, 302.180999,300.722991,999.148437);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Michelle Room");
			    return 1;
		    }
		    case 50:
		    {
		        SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Barbara Room");
			    return 1;
		    }
		    case 51:
		    {
		        SetPlayerPos(playerid, 346.870025,309.259033,999.155700);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Millie Room");
			    return 1;
		    }
		    case 52:
		    {
		        SetPlayerPos(playerid, -959.564392,1848.576782,9.000000);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Sherman Dam");
			    return 1;
		    }
		    case 53:
		    {
		        SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Planning Dept.");
			    return 1;
		    }
		    case 54:
		    {
		        SetPlayerPos(playerid, 223.431976,1872.400268,13.734375);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Area 51");
			    return 1;
		    }
		    case 55:
		    {
		        SetPlayerPos(playerid, 772.111999,-3.898649,1000.728820);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LS Gym");
			    return 1;
		    }
		    case 56:
		    {
		        SetPlayerPos(playerid, 774.213989,-48.924297,1000.585937);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}SF Gym");
			    return 1;
		    }
		    case 57:
		    {
		        SetPlayerPos(playerid, 773.579956,-77.096694,1000.655029);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LV Gym");
			    return 1;
		    }
		    case 58:
		    {
		        SetPlayerPos(playerid, 1527.229980,-11.574499,1002.097106);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}B Dup's House");
			    return 1;
		    }
		    case 59:
		    {
		        SetPlayerPos(playerid, 1523.509887,-47.821197,1002.130981);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}B Dup's Crack Pad");
			    return 1;
		    }
		    case 60:
		    {
		        SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}CJ's House");
			    return 1;
		    }
		    case 61:
		    {
		        SetPlayerPos(playerid, 1267.663208,-781.323242,1091.906250);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Madd Dogg's Mansion");
			    return 1;
		    }
		    case 62:
		    {
		        SetPlayerPos(playerid, 513.882507,-11.269994,1001.565307);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}OG Loc's House");
			    return 1;
		    }
		    case 63:
		    {
		        SetPlayerPos(playerid, 2454.717041,-1700.871582,1013.515197);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Ryder's House");
			    return 1;
		    }
		    case 64:
		    {
		        SetPlayerPos(playerid, 2527.654052,-1679.388305,1015.498596);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Sweet's House");
			    return 1;
		    }
		    case 65:
		    {
		        SetPlayerPos(playerid, 2543.462646,-1308.379882,1026.728393);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Crack Factory");
			    return 1;
		    }
		    case 66:
		    {
		        SetPlayerPos(playerid, 1212.019897,-28.663099,1000.953125);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Big Spread Ranch");
			    return 1;
		    }
		    case 67:
		    {
		        SetPlayerPos(playerid, 761.412963,1440.191650,1102.703125);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Fanny Batters");
			    return 1;
		    }
		    case 68:
		    {
		        SetPlayerPos(playerid, 1204.809936,-11.586799,1000.921875);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Strip Club");
			    return 1;
		    }
		    case 69:
		    {
		        SetPlayerPos(playerid, 1204.809936,13.897239,1000.921875);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Strip Club Private Room");
			    return 1;
		    }
		    case 70:
		    {
		        SetPlayerPos(playerid, 942.171997,-16.542755,1000.929687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Unnamed Brothel");
			    return 1;
		    }
		    case 71:
		    {
		        SetPlayerPos(playerid, 964.106994,-53.205497,1001.124572);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Tiger Skin Brothel");
			    return 1;
		    }
		    case 72:
		    {
		        SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Pleasure Domes");
			    return 1;
		    }
		    case 73:
		    {
		        SetPlayerPos(playerid, -729.276000,503.086944,1371.971801);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Liberty City Outside");
			    return 1;
		    }
		    case 74:
		    {
		        SetPlayerPos(playerid, -794.806396,497.738037,1376.195312);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Liberty City Inside");
			    return 1;
		    }
		    case 75:
		    {
		        SetPlayerPos(playerid, 	2350.339843,-1181.649902,1027.976562);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Gang House");
			    return 1;
		    }
		    case 76:
		    {
		        SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
		        SetPlayerInterior(playerid, 8);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Colonel Furhberger's House");
			    return 1;
		    }
		    case 77:
		    {
		        SetPlayerPos(playerid, 18.564971,1118.209960,1083.882812);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Crack Den");
			    return 1;
		    }
		    case 78:
		    {
		        SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Warehouse 1");
			    return 1;
		    }
		    case 79:
		    {
		        SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Warehouse 2");
			    return 1;
		    }
		    case 80:
		    {
		        SetPlayerPos(playerid, 2522.000000,-1673.383911,14.866223);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Sweet's Garage");
			    return 1;
		    }
		    case 81:
		    {
		        SetPlayerPos(playerid, -221.059051,1408.984008,27.773437);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Lil' Probe Inn Toilet");
			    return 1;
		    }
		    case 82:
		    {
		        SetPlayerPos(playerid, 2324.419921,-1145.568359,1050.710083);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Unused Safe House");
			    return 1;
		    }
		    case 83:
		    {
		        SetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}RC Battlefield");
			    return 1;
		    }
		    case 84:
		    {
		        SetPlayerPos(playerid, 411.625976,-21.433298,1001.804687);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Barber 1");
			    return 1;
		    }
		    case 85:
		    {
		        SetPlayerPos(playerid, 418.652984,-82.639793,1001.804687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Barber 2");
			    return 1;
		    }
		    case 86:
		    {
		        SetPlayerPos(playerid, 412.021972,-52.649898,1001.898437);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Barber 3");
			    return 1;
		    }
		    case 87:
		    {
		        SetPlayerPos(playerid, -204.439987,-26.453998,1002.273437);
		        SetPlayerInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Tatoo Parlour 1");
			    return 1;
		    }
		    case 88:
		    {
		        SetPlayerPos(playerid, -204.439987,-8.469599,1002.273437);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Tatoo Parlour 2");
			    return 1;
		    }
		    case 89:
		    {
		        SetPlayerPos(playerid, -204.439987,-43.652496,1002.273437);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Tatoo Parlour 3");
			    return 1;
		    }
		    case 90:
		    {
		        SetPlayerPos(playerid, 246.783996,63.900199,1003.640625);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LS Police HQ");
			    return 1;
		    }
		    case 91:
		    {
		        SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}SF police HQ");
			    return 1;
		    }
		    case 92:
		    {
		        SetPlayerPos(playerid, 288.745971,169.350997,1007.171875);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LV police HQ");
			    return 1;
		    }
		    case 93:
		    {
		        SetPlayerPos(playerid, -2029.798339,-106.675910,1035.171875);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Car School");
			    return 1;
		    }
		    case 94:
		    {
		        SetPlayerPos(playerid, -1398.065307,-217.028900,1051.115844);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}8-Track");
			    return 1;
		    }
		    case 95:
		    {
		        SetPlayerPos(playerid, -1398.103515,937.631164,1036.479125);
		        SetPlayerInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Bloodbowl");
			    return 1;
		    }
		    case 96:
		    {
		        SetPlayerPos(playerid, -1444.645507,-664.526000,1053.572998);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Dirt Track");
			    return 1;
		    }
		    case 97:
		    {
		        SetPlayerPos(playerid, -1465.268676,1557.868286,1052.531250);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Kickstart");
			    return 1;
		    }
		    case 98:
		    {
		        SetPlayerPos(playerid, -1401.829956,107.051300,1032.273437);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Vice Stadium");
			    return 1;
		    }
		    case 99:
		    {
		        SetPlayerPos(playerid, -1790.378295,1436.949829,7.187500);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}SF Garage");
			    return 1;
		    }
		    case 100:
		    {
		        SetPlayerPos(playerid, 1643.839843,-1514.819580,13.566620);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LS Garage");
			    return 1;
		    }
		    case 101:
		    {
		        SetPlayerPos(playerid, -1685.636474,1035.476196,45.210937);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}SF Bomb Shop");
			    return 1;
		    }
		    case 102:
		    {
		        SetPlayerPos(playerid, 76.632553,-301.156829,1.578125);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Blueberry Warehouse");
			    return 1;
		    }
		    case 103:
		    {
		        SetPlayerPos(playerid, 1059.895996,2081.685791,10.820312);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LV Warehouse 1");
			    return 1;
		    }
		    case 104:
		    {
		        SetPlayerPos(playerid, 1059.180175,2148.938720,10.820312);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LV Warehouse 2");
			    return 1;
		    }
		    case 105:
		    {
		        SetPlayerPos(playerid, 2131.507812,1600.818481,1008.359375);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Catigula's Hidden Room");
			    return 1;
		    }
		    case 106:
		    {
		        SetPlayerPos(playerid, 2315.952880,-1.618174,26.742187);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Bank");
			    return 1;
		    }
		    case 107:
		    {
		        SetPlayerPos(playerid, 2319.714843,-14.838361,26.749565);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Bank - Behind Desk");
			    return 1;
		    }
		    case 108:
		    {
		        SetPlayerPos(playerid, 1710.433715,-1669.379272,20.225049);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}LS Atruim");
			    return 1;
		    }
		    case 109:
		    {
		        SetPlayerPos(playerid, 1494.325195,1304.942871,1093.289062);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or"EMBED_WHITE"Teles: {B4B5B7}คุณได้วาร์ปไปยัง {0099FF}Bike School");
			    return 1;
		    }
		}
    return 1;
}

// TOOLS
/*
HexToInt(string[])
{
    if (string[0] == 0)
    {
        return 0;
    }
    new i;
    new cur = 1;
    new res = 0;
    for (i = strlen(string); i > 0; i--)
    {
        if (string[i-1] < 58)
        {
            res = res + cur * (string[i - 1] - 48);
        }
        else
        {
            res = res + cur * (string[i-1] - 65 + 10);
            cur = cur * 16;
        }
    }
    return res;
}*/

CMD:buyhouse(playerid, params[])
{
	new confirm[8], h = -1;

	if ((h = nearHouse_var[playerid]) != -1 && !HouseInfo[h][hOwned]) {

		new numhouse = CountPlayerOwnHouse(playerid);
		new extra_price = numhouse * 10;
		new houseprice = HouseInfo[h][hPrice];
		if(extra_price) houseprice *= extra_price;

   		if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "yes", true)) {
			new
				pname[MAX_PLAYER_NAME + 1];

			GetPlayerName(playerid, pname, sizeof(pname));

			if(numhouse >= MAX_BUYHOUSES) return SendClientMessage(playerid, COLOR_GRAD1, "คุณมีบ้านเต็มจำนวนสูงสุดแล้ว ใช้ /sellhouse เพื่อขายบ้านของคุณ");
			if(playerData[playerid][pLevel] < HouseInfo[h][hLevelbuy]) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถซื้ออสังหาริมทรัพย์นี้ได้!");
			if(playerData[playerid][pCash] < houseprice) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถซื้ออสังหาริมทรัพย์นี้ได้!");


			playerData[playerid][pHouseKey] = h;
			playerData[playerid][pSpawnPoint] = 2;
			HouseInfo[h][hOwned] = 1;
			HouseInfo[h][hLocked] = 1;
			HouseInfo[h][hRentable] = 0;
			HouseInfo[h][hRentprice] = 0;
			HouseInfo[h][hCash] = 0;
			strmid(HouseInfo[h][hOwner], pname, 0, strlen(pname), 255);
			playerData[playerid][pCash]-=houseprice;

			/*if(HouseInfo[h][hSubid] != -1) {
				HouseInfo[HouseInfo[h][hSubid]][hCash] += houseprice;
			}*/

			SendClientMessage(playerid, COLOR_WHITE, "ขอแสดงความยินดีในการสั่งซื้อใหม่ของคุณ!");
			SendClientMessage(playerid, COLOR_WHITE, "ใช้ /help เพื่อการตรวจสอบการเข้าถึงใหม่ของคุณ  !");

			UpdateHouseText(h);
			UpdateHouseInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `playerHouseKey` = %d, `SpawnPoint` = %d WHERE `ID` = %d", playerData[playerid][pCash], h, 2, playerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			//SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/buyhouse yes");
			format(szString, sizeof(szString), "บ้านที่คุณกำลังซื้อราคา $%d", houseprice);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
 	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
	new confirm[8], house = -1;
	if ((house = nearHouse_var[playerid]) != -1) {
		if(strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
		{
			new houseprice = HouseInfo[house][hPrice];
			new housetax = floatround(houseprice / 100.0);

			if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "yes", true)) {

				if(HouseInfo[house][hCash] > 0)
				{
					playerData[playerid][pCash] += HouseInfo[house][hCash];
					SendClientMessageEx(playerid, COLOR_GRAD2, "คุณได้รับเงินสดจากบ้าน $%d", HouseInfo[house][hCash]);
				}
				HouseInfo[house][hLocked] = 1;
				HouseInfo[house][hOwned] = 0;
				HouseInfo[house][hRentable] = 0;
				HouseInfo[house][hRentprice] = 0;
				HouseInfo[house][hCash] = 0;
				StopHouseBoomBox(house);
				//HouseInfo[house][hRadio] = 0;
				HouseInfo[house][hradioOn] = false;
				playerData[playerid][pSpawnType] = 0;
				for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i)
				{
					HouseInfo[house][hWeapon][i] = 0;
					HouseInfo[house][hAmmo][i] = 0;
					HouseInfo[house][hWeaponLicense][i] = 0;
				}
				strmid(HouseInfo[house][hOwner], "The State", 0, strlen("The State"), 255);
				UpdateHouseText(house);
				playerData[playerid][pCash] += houseprice-housetax;

				if(HouseInfo[house][hSubid] != -1) {
					HouseInfo[HouseInfo[house][hSubid]][hCash] -= houseprice-housetax;
				}
				
				PlayerPlaySoundEx(playerid, 1052);
				format(szString, sizeof(szString), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", houseprice-housetax);
				GameTextForPlayer(playerid, szString, 10000, 3);
				SendClientMessageEx(playerid, COLOR_GRAD3, "ภาษีของรัฐ: $%d", housetax);
				UpdateHouseText(house);
				UpdateHouseInfo(house);

				if(HouseEntered[playerid] == house)
				{
					SetCameraBehindPlayer(playerid);
					SetPlayerPos(playerid,HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerInterior(playerid,0);
					playerData[playerid][pInterior] = 0;
					playerData[playerid][pWorld] = 0;
					HouseEntered[playerid] = -1;
					playerData[playerid][pLocal] = 255;
					if(HouseInfo[house][hradioOn]) StopAudioStreamForPlayer(playerid);
					return 1;
				}

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d", -1, house);
				mysql_tquery(dbCon, szQuery, "OnPlayerSellHouse", "i", house);

				playerData[playerid][pHouseKey] = -1;

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
				mysql_query(dbCon, szQuery);
				//SQL_SaveCharacter(playerid);
				return 1;
			}
			else
			{
				SendSyntaxMessage(playerid, "/sellhouse yes");
				format(szString, sizeof(szString), "บ้านที่คุณกำลังขายราคา $%d และมีภาษี $%d", houseprice, housetax);
				SendClientMessage(playerid, COLOR_GREY, szString);
			}
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	return 1;
}

CMD:setrentable(playerid, params[])
{
	new status;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SendSyntaxMessage(playerid, "/setrentable ([0/1])");
		if(status > 1 || status < 0) return SendSyntaxMessage(playerid, "/setrentable ([0/1])");
		HouseInfo[house][hRentable] = status;
		SendClientMessageEx(playerid, COLOR_GRAD1, "คุณตั้งสถานะการเช่าเป็น %d", status);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	return 1;
}

CMD:setrent(playerid, params[])
{
	new status;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SendSyntaxMessage(playerid, "/setrent ($1-$10,000)");
		if(status < 1 || status > 10000) return SendSyntaxMessage(playerid, "/setrent ($1-$10,000)");
		HouseInfo[house][hRentprice] = status;
		SendClientMessageEx(playerid, COLOR_GRAD1, "ราคาค่าเช่าถูกตั้งเป็น $%d", HouseInfo[house][hRentprice]);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	return 1;
}

CMD:bizupgrade(playerid, params[])
{
	new house = BizEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), BizInfo[house][bOwner], true) == 0)
	{
		new option[24], itemnumb;

		if(sscanf(params, "s[24]D(-1)", option, itemnumb)) {
			SendSyntaxMessage(playerid, "/bizupgrade [level]");
			SendClientMessage(playerid, COLOR_GRAD1, "|Buy: ไอเท็มที่ซื้อได้ ! </bizupgrade buy เพื่อดูรายละเอียดเพิ่มเติม>");
			SendClientMessage(playerid, COLOR_GRAD1, "|Remove: ลบไอเท็มในปัจจุบันของคุณ </bizupgrade remove เพื่อดูรายละเอียดเพิ่มเติม>");
			return 1;
		}

		if(!strcmp(option, "buy", true))
		{
		    if(itemnumb < 1 || itemnumb > 2) {
				SendSyntaxMessage(playerid, "/bizupgrade buy [itemid]");
				SendClientMessage(playerid, COLOR_GRAD1, "|_______ Items to Buy _______|");
				SendClientMessage(playerid, COLOR_GRAD1, "<item ID>- <Price> : <Name>");
				SendClientMessage(playerid, COLOR_GRAD3, "1- $6125: Fridge");
				SendClientMessage(playerid, COLOR_GRAD3, "2- $8000: XM Radio");
				return 1;
			}

			new price = 0;
			if(itemnumb == 1) price = 6125;
			else if(itemnumb == 2) price = 8000;


	        if(playerData[playerid][pCash] < price) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ !");


			new bool:count;
			for(new z = 0; z != MAX_BIZ_ITEMS; ++z)
			{
				if(!BizInfo[house][bItems][z]) {

				    switch(itemnumb) {
				        case 1: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ซื้อ Fridge ไว้ในบ้านของคุณ (/bizinfo)");
				        case 2: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ซื้อ XM Radio ไว้ในบ้านของคุณ (/bizinfo)");
				    }

                    playerData[playerid][pCash] -= price;
				    BizInfo[house][bItems][z] = itemnumb;

					format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_upgradeitems` = '%s' WHERE `biz_id` = %d",
					FormatBusinessItems(house),
					BizInfo[house][bID]);

					mysql_tquery(dbCon, szQuery);

	                count = true;
				    break;
				}
			}
			if(!count) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถซื้อไอเท็มได้มากกว่านี้แล้ว");
		}
		else if(!strcmp(option, "remove", true))
		{
		    if(itemnumb < 0 || itemnumb > 3) {
		        SendSyntaxMessage(playerid, "/houseupgrade remove [item]");
				ShowHouseItemDetail(playerid, house);
				return 1;
			}

			if(BizInfo[house][bItems][itemnumb]) {

				switch(BizInfo[house][bItems][itemnumb]) {
				  	case 1: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ลบไอเท็ม Fridge ออกจากธุรกิจของคุณ");
				   	case 2: {
						SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ลบไอเท็ม XM Radio ออกจากธุรกิจของคุณ");
						StopBizBoomBox(house);
					}
				}

				BizInfo[house][bItems][itemnumb] = 0;

				format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_upgradeitems` = '%s' WHERE `biz_id` = %d",
				FormatHouseItems(house),
				BizInfo[house][bID]);

				mysql_tquery(dbCon, szQuery);

			} else return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีไอเท็มอยู่ในช่องนี้");
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในธุรกิจที่เป็นเจ้าของ");
	}
	return 1;
}

CMD:houseupgrade(playerid, params[])
{
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		new option[24], itemnumb;

		if(sscanf(params, "s[24]D(-1)", option, itemnumb)) {
			SendSyntaxMessage(playerid, "/houseupgrade [level]");
			SendClientMessage(playerid, COLOR_GRAD1, "|Buy: ไอเท็มที่ซื้อได้ ! </houseupgrade buy เพื่อดูรายละเอียดเพิ่มเติม>");
			SendClientMessage(playerid, COLOR_GRAD1, "|Remove: ลบไอเท็มในปัจจุบันของคุณ </houseupgrade remove เพื่อดูรายละเอียดเพิ่มเติม>");
			return 1;
		}

		if(!strcmp(option, "buy", true))
		{
		    if(itemnumb < 1 || itemnumb > 2) {
				SendSyntaxMessage(playerid, "/houseupgrade buy [itemid]");
				SendClientMessage(playerid, COLOR_GRAD1, "|_______ Items to Buy _______|");
				SendClientMessage(playerid, COLOR_GRAD1, "<item ID>- <Price> : <Name>");
				SendClientMessage(playerid, COLOR_GRAD3, "1- $6125: Fridge");
				SendClientMessage(playerid, COLOR_GRAD3, "2- $8000: XM Radio");
				return 1;
			}

			new price = 0;
			if(itemnumb == 1) price = 6125;
			else if(itemnumb == 2) price = 8000;


	        if(playerData[playerid][pCash] < price) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ !");


			new bool:count;
			for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
			{
				if(!HouseInfo[house][hItems][z]) {

				    switch(itemnumb) {
				        case 1: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ซื้อ Fridge ไว้ในบ้านของคุณ (/myhouse items)");
				        case 2: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ซื้อ XM Radio ไว้ในบ้านของคุณ (/myhouse items)");
				    }

                    playerData[playerid][pCash] -= price;
				    HouseInfo[house][hItems][z] = itemnumb;

					format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `items` = '%s' WHERE `id` = %d",
					FormatHouseItems(house),
					HouseInfo[house][hID]);

					mysql_tquery(dbCon, szQuery);

	                count = true;
				    break;
				}
			}
			if(!count) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถซื้อไอเท็มได้มากกว่านี้แล้ว");
		}
		else if(!strcmp(option, "remove", true))
		{
		    if(itemnumb < 0 || itemnumb > 3) {
		        SendSyntaxMessage(playerid, "/houseupgrade remove [item]");
				ShowHouseItemDetail(playerid, house);
				return 1;
			}

			if(HouseInfo[house][hItems][itemnumb]) {

				switch(HouseInfo[house][hItems][itemnumb]) {
				  	case 1: SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ลบไอเท็ม Fridge ออกจากบ้านของคุณ");
				   	case 2: {
						SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ลบไอเท็ม XM Radio ออกจากบ้านของคุณ");
						StopHouseBoomBox(house);
					}
				}

				HouseInfo[house][hItems][itemnumb] = 0;

				format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `items` = '%s' WHERE `id` = %d",
				FormatHouseItems(house),
				HouseInfo[house][hID]);

				mysql_tquery(dbCon, szQuery);

			} else return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีไอเท็มอยู่ในช่องนี้");
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	}
	return 1;
}


CMD:cmdspot(playerid, params[])
{
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
	    GetPlayerPos(playerid, HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]);
	    SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ตั้งตู้เซฟของคุณไว้ในตำแหน่งปัจจุบันแล้ว");

	    UpdateHouseInfo(house);
	}
	else {
	    SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	}
	return 1;
}

ShowHouseItemDetail(targetid, house) {

	SendClientMessage(targetid, COLOR_GRAD1, "|_______ Current Items _______|");

	new bool:count;
 	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
	{
		switch(HouseInfo[house][hItems][z]) {
		 	case 1: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - Fridge", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(Hint):"EMBED_WHITE" /heal: เพื่อเพิ่มเลือดให้ตัวเอง");
		 		count=true;
		 	}
		 	case 2: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - XM Radio", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(Hint):"EMBED_WHITE" /setstation");
		 		count=true;
			}
		}
	}
	if(!count) SendClientMessage(targetid, COLOR_GRAD1, "ไม่พบไอเท็มในปัจจุบัน");
}

ShowBizItemDetail(targetid, house) {

	SendClientMessage(targetid, COLOR_GRAD1, "|_______ Current Items _______|");

	new bool:count;
 	for(new z = 0; z != MAX_BIZ_ITEMS; ++z)
	{
		switch(BizInfo[house][bItems][z]) {
		 	case 1: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - Fridge", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(Hint):"EMBED_WHITE" /heal: เพื่อเพิ่มเลือดให้ตัวเอง");
		 		count=true;
		 	}
		 	case 2: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - XM Radio", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(Hint):"EMBED_WHITE" /setstation");
		 		count=true;
			}
		}
	}
	if(!count) SendClientMessage(targetid, COLOR_GRAD1, "ไม่พบไอเท็มในปัจจุบัน");
}

CMD:myhouse(playerid, params[])
{
    new option[10], secoption[128], msg[128], thirdoption;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params, "s[10]S(NULL)[128]D(-1)", option, secoption, thirdoption)) {
			SendSyntaxMessage(playerid, "/myhouse [choice]");
			SendClientMessage(playerid, COLOR_GRAD1, "| Items | Cash | Inform");
			return 1;
		}
    	if(!strcmp(option, "inform", true))
		{
			format(msg, sizeof(msg), "House Info: บ้านไอดี - %d ราคาตลาด - $%d ราคาเช่า - $%d", HouseInfo[house][hID], HouseInfo[house][hPrice], HouseInfo[house][hRentprice]);
			SendClientMessage(playerid, COLOR_GRAD1, msg);
		}
    	else if(!strcmp(option, "items", true))
		{
		    ShowHouseItemDetail(playerid, house);
		}
		else if(!strcmp(option, "cash", true))
		{
			new choise[11], amount;
			if(sscanf(params, "{s[6]}s[10]d", choise, amount))
			{
				SendSyntaxMessage(playerid, "/myhouse cash [withdraw/deposit] [จำนวน]");
				format(msg, sizeof(msg), "คุณมี $%d อยู่ใน Cashbox", HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);
				return 1;
			}
			if(!strcmp(choise, "withdraw", true))
			{
				if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในบ้าน");
				if (amount > HouseInfo[house][hCash] || amount < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้มีมากขนาดนั้น!");
					return 1;
				}
				playerData[playerid][pCash] += amount;
				HouseInfo[house][hCash] -= amount;
				format(msg, sizeof(msg), "คุณถอน $%d จาก Cashbox รวมทั้งหมด: $%d ", amount,HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);

				UpdateHouseInfo(house);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
				mysql_query(dbCon, szQuery);
			}
			else if(!strcmp(choise, "deposit", true))
			{
				if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในบ้าน");
				if (amount >  playerData[playerid][pCash] || amount < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้มีมากขนาดนั้น!");
					return 1;
				}
				playerData[playerid][pCash] -= amount;
				HouseInfo[house][hCash] += amount;
				format(msg, sizeof(msg), "คุณได้วาง $%d ใน Cashbox ของคุณ รวมทั้งหมด: $%d ", amount,HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);

				UpdateHouseInfo(house);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
				mysql_query(dbCon, szQuery);
			}
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	return 1;
}

CMD:tenants(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (House_IsOwner(playerid, house))
	{
		format(szQuery, sizeof(szQuery), "SELECT `Character` FROM `characters` WHERE `playerHouseKey` = %d and `ID` != %d", house, playerData[playerid][pID]);
		mysql_tquery(dbCon, szQuery, "ShowTenantsAmount", "i", playerid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");
	return 1;
}

CMD:evict(playerid, params[])
{
	new house = HouseEntered[playerid];
	new id;

	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/evict [ไอดีผู้เล่น/ชื่อบางส่วน] (/tenants)");
	if (id != INVALID_PLAYER_ID && house != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถขับไล่ตัวเองออกจากบ้านได้");
		if (!SQL_IsLogged(id)) SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นยังไม่ได้เข้าสู่ระบบ !");
		if(playerData[id][pHouseKey] != house) return SendClientMessage(playerid, COLOR_YELLOW, "ผู้เล่นนั้นไม่ได้เช่าบ้านของคุณ");
		playerData[id][pHouseKey] = -1;
		SendClientMessage(id, COLOR_GRAD1, "คุณถูกขับไล่ออกจากบ้าน คุณเป็นผู้ไร้ที่อยู่อาศัยในขณะนี้");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");

	return 1;
}

CMD:evictall(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (House_IsOwner(playerid, house))
	{
		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d AND `ID`!= %d", -1, house, playerData[playerid][pID]);
		mysql_tquery(dbCon, szQuery, "OnPlayerEvictTenant", "ii", playerid, house);

		SendClientMessage(playerid, COLOR_YELLOW, "ผู้เช่าทั้งหมดถูกขับออกจากบ้านของคุณ");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");

	return 1;
}

CMD:bareswitch(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (House_IsOwner(playerid, house))
	{
	    if(HouseInfo[house][hSwitch]) {

			new
				Float:fX,
	    		Float:fY,
	    		Float:fZ;

	        if(HouseInfo[house][hSwitchStatus]) {
	            HouseInfo[house][hSwitchStatus]=0;
	            SendClientMessage(playerid, COLOR_WHITE, "คุณปิดโหมด Bareswitch");
	            HouseInfo[house][hExitZ]+=100.0;

				foreach(new i : Player)
				{
					if(HouseEntered[i] == house)
     				{
						GetPlayerPos(i, fX, fY, fZ);
						SetPlayerPos(i, fX, fY, fZ+100.5);
					}
				}
	        }
	        else {
	            HouseInfo[house][hSwitchStatus]=1;
	            SendClientMessage(playerid, COLOR_WHITE, "คุณได้เปิดโหมด Bareswitch");
				HouseInfo[house][hExitZ]-=100.0;

				foreach(new i : Player)
				{
					if(HouseEntered[i] == house)
     				{
						GetPlayerPos(i, fX, fY, fZ);
						SetPlayerPos(i, fX, fY, fZ-100.5);
					}
				}
	        }
		
			DestroyDynamicArea(HouseInfo[house][hAreaID][1]);
			HouseInfo[house][hAreaID][1] = CreateDynamicSphere(HouseInfo[house][hExitX], HouseInfo[house][hExitY], HouseInfo[house][hExitZ], 3.0, HouseInfo[house][hWorld], HouseInfo[house][hInterior]);
			Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[house][hAreaID][1], E_STREAMER_EXTRA_ID, house);	
			
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `exitz` = '%f', `switch_status` = '%d' WHERE `id` = %d", HouseInfo[house][hExitZ], HouseInfo[house][hSwitchStatus], HouseInfo[house][hID]);
			mysql_query(dbCon, szQuery);
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "บ้านหลังนี้ไม่มี Bareswitch");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณต้องอยู่ในบ้านที่เป็นเจ้าของ");

	return 1;
}

CMD:rentroom(playerid, params[])
{
	new h = -1;
	if ((h = nearHouse_var[playerid]) != -1) {

		if(HouseInfo[h][hOwned])
		{
			if(HouseInfo[h][hRentable] == 0) return SendClientMessage(playerid, COLOR_GRAD1, "บ้านหลังนี้ไม่ได้เปิดให้เช่า");
			if(playerData[playerid][pHouseKey] != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[h][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถเช่าบ้านในขณะที่เป็นเจ้าของบ้านใด ๆ ได้");
			if(playerData[playerid][pHouseKey] != -1) return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถเช่าบ้านในขณะที่คุณเป็นผู้เช่าอยู่ (/unrent)");
			if(playerData[playerid][pCash] < HouseInfo[h][hRentprice]) {
			    SendClientMessage(playerid, COLOR_GRAD1, "คุณมีเงินไม่พอที่จะเช่า!");
			    return 1;
			}

			playerData[playerid][pHouseKey] = h;
			playerData[playerid][pSpawnPoint] = 2;
			playerData[playerid][pCash] -= HouseInfo[h][hRentprice];
			HouseInfo[h][hCash] += HouseInfo[h][hRentprice];

			SendClientMessage(playerid, COLOR_WHITE, "คุณจะเกิดที่นี่ในขณะนี้!");
			SendClientMessageEx(playerid, COLOR_WHITE, "ค่าเช่าบ้านหลังนี้คือ $%d", HouseInfo[h][hRentprice]);

			UpdateHouseInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `SpawnPoint` = 2, `playerHouseKey` = '%d' WHERE `ID` = %d", playerData[playerid][pCash], h, playerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "บ้างหลังนี้ไม่มีเจ้าของ!");
		}
	}
	return 1;
}

CMD:unrent(playerid, params[])
{
	new housekey = playerData[playerid][pHouseKey];
	if(housekey != -1 && strcmp(ReturnPlayerName(playerid), HouseInfo[housekey][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเลิกเช่าบ้านของตัวเองได้...");
	playerData[playerid][pHouseKey] = -1;
	SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้เช่าบ้านใด ๆ แล้ว");
	//SQL_SaveCharacter(playerid);
	return 1;
}

CMD:teles(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new string[512];
	for(new i = 0; i != sizeof(HouseInteriors); ++i)
	{
		if(HouseInteriors[i][aTeleOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, HouseInteriors[i][aMapName]);
		}
	}
	Dialog_Show(playerid, AdminTeles,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Teleports:"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:maketele(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new mapname[128], interior, teleid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[128]",teleid,mapname)) return SendSyntaxMessage(playerid, "/maketele [id] [name]");
	if(HouseInteriors[teleid][aTeleOn]) return SendClientMessage(playerid, COLOR_GRAD1, "   การเคลื่อนย้ายนี้ถูกใช้งานอยู่");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetPlayerInterior(playerid);
	AddTeleToFile(teleid, mapname,interior, X, Y, Z);
	HouseInteriors[teleid][aPosX] = X;
	HouseInteriors[teleid][aPosY] = Y;
	HouseInteriors[teleid][aPosZ] = Z;
	HouseInteriors[teleid][aInterior] = interior;
	format(HouseInteriors[teleid][aMapName],128,"%s",mapname);
	HouseInteriors[teleid][aTeleOn] = 1;
	return SendClientMessageEx(playerid, COLOR_GREEN, "การเคลื่อนย้ายใหม่ถูกเพิ่มแล้ว [ชื่อ: %s ตำแหน่ง: %f, %f, %f]",mapname,X, Y, Z);
}

CMD:removetele(playerid,params[])
{
	new teleid;
    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",teleid)) return SendSyntaxMessage(playerid, "/removetele [id]");
	if(HouseInteriors[teleid][aTeleOn])
	{
		format(szQuery, sizeof(szQuery), "DELETE FROM `ateles` WHERE `id` = %d",HouseInteriors[teleid][aID]);
		mysql_tquery(dbCon, szQuery, "OnTeleportRemove", "i", teleid);
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ทำลายการเคลื่อนย้ายไอดี: %d!",teleid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR: การเคลื่อนย้ายนี้ไม่มีอยู่!");
	}
	return 1;
}

CMD:serverteles(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `ateles`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Admin teles");
	return 1;
}

CMD:fixveh(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new vehicleid;
	
	if(IsPlayerInAnyVehicle(playerid) && (vehicleid = GetPlayerVehicleID(playerid)))
	{
		SetVehicleHealthEx(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
		SetVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_GREY, "   Vehicle Fixed !");
	}
	return 1;
}

CMD:sethp(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;
	new health;

	if (sscanf(params, "ud", userid, health))
		return SendSyntaxMessage(playerid, "/sethp [ไอดีผู้เล่น/ชื่อบางส่วน] [health]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");
		}
	}

	SetPlayerHealthEx(userid, health);

	return 1;
}

CMD:setarmor(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;
	new health;

	if (sscanf(params, "ud", userid, health))
		return SendSyntaxMessage(playerid, "/setarmor [ไอดีผู้เล่น/ชื่อบางส่วน] [armor]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");
		}
	}

	SetPlayerArmour(userid, health);

	return 1;
}

CMD:setskin(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;
	new skin;

	if (sscanf(params, "ud", userid, skin))
		return SendSyntaxMessage(playerid, "/setskin [ไอดีผู้เล่น/ชื่อบางส่วน] [skinid]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่ใกล้พอ!");
		}
	}

	SetPlayerSkin(userid, skin);

	return 1;
}

CMD:setstat(playerid, params[])
{
	new targetid, statcode, amount, msg[128], bool:success = false;

    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params, "udd", targetid, statcode, amount))
	{
		SendSyntaxMessage(playerid, "/setstat [ไอดีผู้เล่น/ชื่อบางส่วน] [statcode] [จำนวน]");
		SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 Skin |3 RespectPoints |4 Sex |5 Bank");
		SendClientMessage(playerid, COLOR_GRAD4, "|6 Hours |7 Cash |8 Donate |9 Upgrade |10 Phone Number ");
		SendClientMessage(playerid, COLOR_GRAD4, "|11 Saving |12 House key |13 Radio |14 Channel");
		SendClientMessage(playerid, COLOR_GRAD4, "|15 Biz key |16 Faction |17 Faction Rank |18 Job |19 Side Job");
		SendClientMessage(playerid, COLOR_GRAD4, "|20 Job Rank |21 Career |22 Skin(save) |23 Car License |24 Weapon License |25 CCW License");
        SendClientMessage(playerid, COLOR_GRAD4, "|26 Char Skin |27 SavingsCollect |28 Flying License |29 Medical License |30 Driver Warning");
		return 1;
	}
	if (!SQL_IsLogged(targetid)) SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นยังไม่ได้เข้าสู่ระบบ !");
	switch (statcode)
	{
		case 1:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเลเวลเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pLevel]);
			playerData[targetid][pLevel] = amount;
			SetPlayerScore(targetid, amount);


			success = true;
		}
		case 2:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับสกินเป็น %d (%d)", ReturnPlayerName(targetid), amount, GetPlayerSkin(targetid));
			SetPlayerSkin(targetid, amount);

			success = true;
		}
		case 3:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับ Exp เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pExp]);
			playerData[targetid][pExp] = amount;
			success = true;
		}
		case 4:
		{
			playerData[targetid][pGender] = amount;
			format(msg, sizeof(msg), "   %s ถูกปรับเพศเป็น %d", ReturnPlayerName(targetid), amount);

			success = true;
		}
		case 5:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเงินในธนาคารเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pAccount]);
			playerData[targetid][pAccount] = amount;

			success = true;
		}
		case 6:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับชั่วโมงการเล่นเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pPlayingHours]);
			playerData[targetid][pPlayingHours] = amount;
			success = true;
		}
		case 7:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเงินเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pCash]);
			playerData[targetid][pCash] = amount;
			success = true;
		}
		case 8:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับระดับผู้บริจาคเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pDonateRank]);
			playerData[targetid][pDonateRank] = amount;
			success = true;
		}
		case 9:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับค่าอัพเกรดเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pPUpgrade]);
			playerData[targetid][pPUpgrade] = amount;
			success = true;
		}
		case 10:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเบอร์โทรศัพท์เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pPnumber]);
			playerData[targetid][pPnumber] = amount;
			success = true;
		}
		case 11:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเงินฝากเริ่มต้นเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pSavings]);
			playerData[targetid][pSavings] = amount;
			success = true;
		}
		case 12:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับกุญแจบ้านเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pHouseKey]);
			playerData[targetid][pHouseKey] = amount;
			success = true;
		}
		case 13:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับวิทยุเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pRadio]);
			playerData[targetid][pRadio] = amount;
			success = true;
		}
		case 14:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับช่องวิทยุเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pRChannel]);
			playerData[targetid][pRChannel] = amount;
			success = true;
		}
		case 15:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับกุญแจธุรกิจเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pPbiskey]);
			playerData[targetid][pPbiskey] = amount;
			success = true;
		}
		case 16:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับ Faction เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pFactionID]);
			playerData[targetid][pFactionID] = amount;
			success = true;
		}
		case 17:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับยศ Faction เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pFactionRank]);
			playerData[targetid][pFactionRank] = amount;
			success = true;
		}
		case 18:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับอาชีพเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pJob]);
			playerData[targetid][pJob] = amount;
			success = true;
		}
		case 19:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับอาชีพเสริมเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pSideJob]);
			playerData[targetid][pSideJob] = amount;
			success = true;
		}
		case 20:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับยศอาชีพเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pJobRank]);
			playerData[targetid][pJobRank] = amount;
			success = true;
		}
		case 21:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับชั่วโมงการทำงานเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pCareer]);
			playerData[targetid][pCareer] = amount;

			if(playerData[targetid][pCareer] >= 164) playerData[targetid][pJobRank] = 5;
			else if(playerData[targetid][pCareer] >= 116) playerData[targetid][pJobRank] = 4;
			else if(playerData[targetid][pCareer] >= 64) playerData[targetid][pJobRank] = 3;
			else if(playerData[targetid][pCareer] >= 36) playerData[targetid][pJobRank] = 2;
			else if(playerData[targetid][pCareer] >= 12) playerData[targetid][pJobRank] = 1;
			else playerData[targetid][pJobRank] = 0;
				
			success = true;
		}
		case 22:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับสกินโมเดลเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pModel]);
            SetPlayerSkin(targetid, amount);
            playerData[targetid][pModel] = amount;
            success = true;
		}
		case 23:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับใบขับขี่เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pCarLic]);
			playerData[targetid][pCarLic] = amount;
			success = true;
		}
		case 24:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับใบอาวุธเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pWepLic]);
            playerData[targetid][pWepLic] = amount;
            success = true;
		}
		case 25:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับใบพกอาวุธเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pWepLic]);
            playerData[targetid][pCCWLic] = amount;
            success = true;
		}
		case 26:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับสกินเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pChar]);
            playerData[targetid][pChar] = amount;
            if(amount) {
				SetPlayerSkin(targetid, amount);
			}
			else SetPlayerSkin(targetid, playerData[targetid][pModel]);
            success = true;
		}
		case 27:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับเงินฝากสะสมเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pSavingsCollect]);
            playerData[targetid][pSavingsCollect] = amount;

            success = true;
		}
		case 28:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับใบอนุญาตการบินเป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pFlyLic]);
            playerData[targetid][pFlyLic] = amount;
            success = true;
		}
		case 29:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับใบอนุญาตการเป็นแพทย์เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pMedicLic]);
            playerData[targetid][pMedicLic] = amount;
            success = true;
		}
		case 30:
		{
			format(msg, sizeof(msg), "   %s ถูกปรับการถูกตักเตือนใบอนุญาตขับขี่เป็นแพทย์เป็น %d (%d)", ReturnPlayerName(targetid), amount, playerData[targetid][pDW]);
            playerData[targetid][pDW] = amount;
            success = true;
		}
		default:
		{
			format(msg, sizeof(msg), "   Invalid stat code.", amount);
		}
	}
	if(success) {
		SQL_SaveCharacter(targetid);
		strtrim(msg);
		SQL_LogAdmin_Action(playerid, "/setstat", msg);
	}
	SendClientMessage(playerid, COLOR_GRAD1, msg);
	return 1;
}

CMD:ram(playerid, params[])
{
    new id, str[256];
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ตำรวจ !");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");

	if ((id = nearHouse_var[playerid]) != -1) {

		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetPlayerInterior(playerid,HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid,HouseInfo[id][hWorld]);
		HouseEntered[playerid] = id;
		playerData[playerid][pInterior] = HouseInfo[id][hInterior];
		playerData[playerid][pWorld] = HouseInfo[id][hWorld];
		playerData[playerid][pLocal] = id + LOCAL_HOUSE;
		GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
		
		strunpack(str, HouseInfo[id][hradioURL]);
		if(HouseInfo[id][hradioOn]) PlayAudioStreamForPlayer(playerid, str);

		return 1;
	}
	else if ((id = nearBiz_var[playerid]) != -1)
	{

		SetPlayerVirtualWorld(playerid, BizInfo[id][bWorld]);
		SetPlayerInterior(playerid,BizInfo[id][bInterior]);
		SetPlayerPosEx(playerid,BizInfo[id][bExitX],BizInfo[id][bExitY],BizInfo[id][bExitZ]);
		playerData[playerid][pInterior] = BizInfo[id][bInterior];
		playerData[playerid][pWorld] = BizInfo[id][bWorld];
		playerData[playerid][pLocal] = id + LOCAL_BIZ;
		
		strunpack(str, BizInfo[id][bradioURL]);
		if(BizInfo[id][bradioOn]) PlayAudioStreamForPlayer(playerid, str);

		GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
	}

	if((id = HouseEntered[playerid]) != -1)
	{
		new
			Float:fDistance = FLOAT_INFINITY,
			i = -1
		;

		new data[furnitureE];
		for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
			if(!IsValidDynamicObject(x)) continue;
			if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == playerData[playerid][pWorld] && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
				if(data[fType] == TYPE_BUSINESS && data[fHouseID] == id) {
					new
						Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);

					if (temp < fDistance)
					{
						fDistance = temp;
						i = x;
					}
				}
			}
		}

		if(i != -1 && fDistance < 3) {
		
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			if(data[fOpened] == 0)
			{
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]-90.0);
				data[fOpened] = 1;
				data[fLocked] = 0;
			}
			else
			{
				data[fOpened] = 0;
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]);
			}
			
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			return 1;
		}
	}
	else if((id = BizEntered[playerid]) != -1)
	{
		new
			Float:fDistance = FLOAT_INFINITY,
			i = -1
		;

		new data[furnitureE];
		for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
			if(!IsValidDynamicObject(x)) continue;
			if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_WORLD_ID) == playerData[playerid][pWorld] && isHouseDoor(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID))) {
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
				if(data[fType] == TYPE_BUSINESS && data[fHouseID] == id) {
					new
						Float:temp = GetPlayerDistanceFromPoint(playerid, data[fPosX], data[fPosY], data[fPosZ]);

					if (temp < fDistance)
					{
						fDistance = temp;
						i = x;
					}
				}
			}
		}

		if(i != -1 && fDistance < 3) {
		
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			if(data[fOpened] == 0)
			{
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]-90.0);
				data[fOpened] = 1;
				data[fLocked] = 0;
			}
			else
			{
				data[fOpened] = 0;
				MoveDynamicObject(i, data[fPosX], data[fPosY], data[fPosZ], 1, data[fPosRX], data[fPosRY], data[fPosRZ]);
			}
			
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			return 1;
		}
	}
	return 1;
}
/* Business Creation */
CMD:biztypes(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	SendClientMessage(playerid, COLOR_GRAD2, "1: Gas Station 2: Ammunation 3: 24/7 4: Vehicle Dealership 5: Car Modding Shop 6: Pay & Spray 7: Clothing Shop");
	SendClientMessage(playerid, COLOR_GRAD2, "8: Bars 9: Restaurant 10: Furniture Shop 11: Advertisement Center 12: Bank 13: Casino");
	return 1;
}

CMD:showbusinesses(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new string[1024];
	for(new i = 0; i != sizeof(BizInfo); i++)
	{
		if(BizInfo[i][bID])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BizInfo[i][bInfo]);
		}
	}
	Dialog_Show(playerid, AdminBusinesses,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Business(s):"EMBED_RED"",string,"Teleport","Cancel");
	return 1;
}

CMD:whatbusiness(playerid, params[])
{
	new str[128];

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	foreach(new i : sv_business)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]))
		{
			format(str, sizeof(str), "คุณยืนอยู่ใกล้ธุรกิจ: [Normal ID: %d] [MySQL ID: %d]", i,BizInfo[i][bID]);
			SendClientMessage(playerid, COLOR_WHITE, str);
			break;
		}
	}
	return 1;
}


CMD:makebusiness(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new bizid = Iter_Free(sv_business), level, price, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"ddd", level, price, type)) return SendSyntaxMessage(playerid, "/makebusiness [buylevel] [ราคา] [type(/biztypes)]");
	if(type > 12 || type < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Types, 1-12.");

	if(bizid != -1) {

		GetPlayerPos(playerid, x, y, z);
		BizInfo[bizid][bEntranceX] = x;
		BizInfo[bizid][bEntranceY] = y;
		BizInfo[bizid][bEntranceZ] = z;
		BizInfo[bizid][bExitX] = 0.0;
		BizInfo[bizid][bExitY] = 0.0;
		BizInfo[bizid][bExitZ] = 0.0;
		BizInfo[bizid][bLevelNeeded] = level;
		BizInfo[bizid][bBuyPrice] = price;
		BizInfo[bizid][bOwned] = 0;
		BizInfo[bizid][bLocked] = 0;
		BizInfo[bizid][bInterior] = 0;
		BizInfo[bizid][bWorld] = bizid;
		BizInfo[bizid][bTill] = 0;
		BizInfo[bizid][bEntranceCost] = 0;
		BizInfo[bizid][bProducts] = 0;
		//BizInfo[bizid][bRadio] = 0;
		format(BizInfo[bizid][bOwner], 24, "The State");
		format(BizInfo[bizid][bInfo], 256, "Business");
		BizInfo[bizid][bType] = type;
	
		if(type == 12 || type == 11 || type == 10)
		{
            BizInfo[bizid][bOwned] = 1;
		}
		switch(type)
		{
		    case 1: { // Gas Station
		        format(BizInfo[bizid][bInfo], 256, "Gas Station");
		        BizInfo[bizid][bPriceProducts][0] = 50;
                BizInfo[bizid][bMaxProducts] = 2400;
		    }
		    case 2: { // Ammunations
		        format(BizInfo[bizid][bInfo], 256, "Ammunations");
                BizInfo[bizid][bMaxProducts] = 1000;
		    }
		    case 3: { // 24-7
		        format(BizInfo[bizid][bInfo], 256, "24-7");

		        BizInfo[bizid][bPriceProducts][0] = 500;
		        BizInfo[bizid][bPriceProducts][1] = 10000;
		        BizInfo[bizid][bPriceProducts][2] = 1500;
		        BizInfo[bizid][bPriceProducts][3] = 500;
		        BizInfo[bizid][bPriceProducts][4] = 200;
		        BizInfo[bizid][bPriceProducts][5] = 500;
		        BizInfo[bizid][bPriceProducts][6] = 5000;
		        BizInfo[bizid][bPriceProducts][7] = 200;
		        BizInfo[bizid][bPriceProducts][8] = 500;
		        BizInfo[bizid][bPriceProducts][9] = 2000;
		        BizInfo[bizid][bPriceProducts][10] = 5000;
		        BizInfo[bizid][bPriceProducts][11] = 8000;

                BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 4: {
		        format(BizInfo[bizid][bInfo], 256, "Vehicle Dealerships");
		        BizInfo[bizid][bMaxProducts] = 200;
		    }
		    case 5: {
		        format(BizInfo[bizid][bInfo], 256, "Car Modding Shops");
		        BizInfo[bizid][bMaxProducts] = 1000;
		    }
		    case 6: {
		        format(BizInfo[bizid][bInfo], 256, "Pay & Spray");
		        BizInfo[bizid][bMaxProducts] = 600;
		    }
		    case 7: {
		        format(BizInfo[bizid][bInfo], 256, "Clothing Shops");
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 8: {
		        format(BizInfo[bizid][bInfo], 256, "Bars");
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 9: { // Restaurant
		        format(BizInfo[bizid][bInfo], 256, "Restaurant");
		        BizInfo[bizid][bPriceProducts][0] = 100;
		        BizInfo[bizid][bPriceProducts][1] = 200;
		        BizInfo[bizid][bPriceProducts][2] = 300;
		        BizInfo[bizid][bPriceProducts][3] = 300;
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 10: {
		        format(BizInfo[bizid][bInfo], 256, "Furniture Shop");
		        BizInfo[bizid][bMaxProducts] = 10000;
		    }
		    case 11: { // Advertisement
		        format(BizInfo[bizid][bInfo], 256, "Advertisement");
                BizInfo[bizid][bMaxProducts] = 5000;
		    }
		    case 12: { // Bank
		        format(BizInfo[bizid][bInfo], 256, "Bank");
                BizInfo[bizid][bMaxProducts] = 10000;
		    }
		}
		BizInfo[bizid][bsubType] = 0;
		//BizInfo[bizid][bizOn] = 1;
		BizInfo[bizid][bPickup] = CreateDynamicPickup(1239, 2, x, y, z, -1, -1, -1, 100.0);
		AddBizToFile(bizid, price, type, BizInfo[bizid][bOwner], BizInfo[bizid][bInfo], x, y, z);
		format(szString, sizeof(szString), "ธุรกิจใหม่ถูกเพิ่มแล้ว [เลเวล: %d ราคา: %d ประเภท: %s]", level, price, BizInfo[bizid][bInfo]);
		SendClientMessage(playerid, COLOR_GREEN, szString);
	}
	return 1;
}

CMD:removebusiness(playerid,params[])
{
	new bizid, msg[128];

	if(playerData[playerid][pAdmin] < 1337)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

    if((bizid = nearBiz_var[playerid]) != -1) {
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);

		new ply = INVALID_PLAYER_ID;

		if((ply = GetIDByName(BizInfo[bizid][bOwner])) != INVALID_PLAYER_ID)
		{
			playerData[ply][pPbiskey] = -1;

			format(msg, sizeof(msg), "ผู้ดูแล %s ได้ขายธุรกิจของคุณให้กับตลาด", ReturnPlayerName(playerid));
			SendClientMessage(ply, COLOR_GRAD2, msg);

			if(BizInfo[bizid][bTill] > 0)
			{
				format(msg, sizeof(msg), "เงินที่คุณมีอยู่ใน Cashbox คุณได้รับกลับมา $%d", BizInfo[bizid][bTill]);
				SendClientMessage(ply, COLOR_GRAD2, msg);
				playerData[ply][pCash] += BizInfo[bizid][bTill];
			}
		}
		else
		{
			format(msg, sizeof(msg), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `Character` = '%s'", -1, BizInfo[bizid][bOwner]);
			mysql_query(dbCon, msg);

			if(BizInfo[bizid][bTill] > 0)
			{
				format(msg, sizeof(msg), "UPDATE `characters` SET `Cash` = (Cash + %d) WHERE `Character` = '%s'", BizInfo[bizid][bTill], BizInfo[bizid][bOwner]);
				mysql_query(dbCon, msg);
			}
		}
		format(msg, sizeof(msg), "DELETE FROM `business` WHERE `biz_id` = %d",BizInfo[bizid][bID]);
		mysql_tquery(dbCon, msg, "OnBizRemove", "i", bizid);

		format(msg,sizeof(msg),"คุณได้ลบธุรกิจไอดี: %d!",BizInfo[bizid][bID]);
		SendClientMessage(playerid, COLOR_YELLOW, msg);

		Iter_Remove(sv_business, bizid);
	}
	return 1;
}

CMD:asellbusiness(playerid, params[])
{
	new bizid, msg[128];

	if(playerData[playerid][pAdmin] < 1337)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/asellbusiness [bizid]");
	
	bizid = GetBizSID(bizid);
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");
	if(!BizInfo[bizid][bOwned]) return SendClientMessage(playerid, COLOR_GRAD2, "No one bought this business.");

	new ply = INVALID_PLAYER_ID;
	if((ply = GetIDByName(BizInfo[bizid][bOwner])) != INVALID_PLAYER_ID)
	{
		playerData[ply][pPbiskey] = -1;
		format(msg, sizeof(msg), "ผู้ดูแล %s ได้ขายธุรกิจของคุณให้กับตลาด", ReturnPlayerName(playerid));
		SendClientMessage(ply, COLOR_GRAD2, msg);
		if(BizInfo[bizid][bTill] > 0)
		{
			format(msg, sizeof(msg), "เงินที่คุณมีอยู่ใน Cashbox คุณได้รับกลับมา $%d", BizInfo[bizid][bTill]);
			SendClientMessage(ply, COLOR_GRAD2, msg);
			playerData[ply][pCash] += BizInfo[bizid][bTill];
		}
	}
	else
	{
		format(msg, sizeof(msg), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `Character` = '%s'", -1, BizInfo[bizid][bOwner]);
		mysql_query(dbCon, msg);

		if(BizInfo[bizid][bTill] > 0)
		{
			format(msg, sizeof(msg), "UPDATE `characters` SET `Cash` = (Cash + %d) WHERE `Character` = '%s'", BizInfo[bizid][bTill], BizInfo[bizid][bOwner]);
			mysql_query(dbCon, msg);
		}
	}
	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_owner` = '%s', `biz_owned` = %d, `biz_locked` = %d, `biz_till` = %d, `biz_encost` = %d WHERE `biz_id` = %d", "The State", 0, 1, 0, 0, BizInfo[bizid][bID]);
	mysql_tquery(dbCon, szQuery, "OnAdminSellBusiness", "i", bizid);
	return 1;
}

CMD:serverbusinesses(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `business`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Dynamic Businesses");
	return 1;
}

CMD:businessenter(playerid,params[])
{
	new bizid;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/businessenter [bizid]");
	
	bizid = GetBizSID(bizid);
	
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	DestroyDynamicPickup(BizInfo[bizid][bPickup]);
	BizInfo[bizid][bPickup] = CreateDynamicPickup(1239, 2, x, y, z, -1, -1, -1, 100.0);
	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_enX` = '%.4f', `biz_enY` = '%.4f', `biz_enZ` = '%.4f' WHERE `biz_id` = %d", x, y, z, BizInfo[bizid][bID]);
	mysql_query(dbCon, szQuery);
	BizInfo[bizid][bEntranceX] = x;
	BizInfo[bizid][bEntranceY] = y;
	BizInfo[bizid][bEntranceZ] = z;
	
	
	DestroyDynamicArea(BizInfo[bizid][bAreaID][0]);
	BizInfo[bizid][bAreaID][0] = CreateDynamicSphere(BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ], 3.0, 0, 0);
	Streamer_SetIntData(STREAMER_TYPE_AREA, BizInfo[bizid][bAreaID][0], E_STREAMER_EXTRA_ID, bizid);
	
	
	SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	return 1;
}

CMD:businessex1(playerid,params[])
{
	new bizid, status;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/businessex1 [bizid] [1-Disabled]");
	
	bizid = GetBizSID(bizid);
	
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingCarX] = 0.0;
		BizInfo[bizid][bBuyingCarY] = 0.0;
		BizInfo[bizid][bBuyingCarZ] = 0.0;
		BizInfo[bizid][bBuyingCarA] = 0.0;


	    SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingCarX] = x;
		BizInfo[bizid][bBuyingCarY] = y;
		BizInfo[bizid][bBuyingCarZ] = z;
		BizInfo[bizid][bBuyingCarA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	return 1;
}

CMD:businessex2(playerid,params[])
{
	new bizid, status;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/businessex2 [bizid] [1-Disabled]");
	
	bizid = GetBizSID(bizid);
	
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingBoatX] = 0.0;
		BizInfo[bizid][bBuyingBoatY] = 0.0;
		BizInfo[bizid][bBuyingBoatZ] = 0.0;
		BizInfo[bizid][bBuyingBoatA] = 0.0;

	    SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingBoatX] = x;
		BizInfo[bizid][bBuyingBoatY] = y;
		BizInfo[bizid][bBuyingBoatZ] = z;
		BizInfo[bizid][bBuyingBoatA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	return 1;
}

CMD:businessex3(playerid,params[])
{
	new bizid, status;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/businessex3 [bizid] [1-Disabled]");
	
	bizid = GetBizSID(bizid);
	
	
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);

		BizInfo[bizid][bBuyingAirX] = 0.0;
		BizInfo[bizid][bBuyingAirY] = 0.0;
		BizInfo[bizid][bBuyingAirZ] = 0.0;
		BizInfo[bizid][bBuyingAirA] = 0.0;

	    SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingAirX] = x;
		BizInfo[bizid][bBuyingAirY] = y;
		BizInfo[bizid][bBuyingAirZ] = z;
		BizInfo[bizid][bBuyingAirA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	}
	return 1;
}

CMD:businessexit(playerid,params[])
{
	new bizid;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/businessenter [bizid]");
	bizid = GetBizSID(bizid);
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	new Float:x, Float:y, Float:z, bint;
	bint = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, x, y, z);

	BizInfo[bizid][bExitX] = x;
	BizInfo[bizid][bExitY] = y;
	BizInfo[bizid][bExitZ] = z;
	BizInfo[bizid][bInterior] = bint;
	BizInfo[bizid][bWorld] = BIZ_WORLD + BizInfo[bizid][bID];
	
	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_etX` = '%.4f', `biz_etY` = '%.4f', `biz_etZ` = '%.4f', `biz_interior` = %d, `biz_world` = %d WHERE `biz_id` = %d", x, y, z, bint, BIZ_WORLD + BizInfo[bizid][bID], BizInfo[bizid][bID]);
	mysql_tquery(dbCon, szQuery);

	DestroyDynamicArea(BizInfo[bizid][bAreaID][1]);
	BizInfo[bizid][bAreaID][1] = CreateDynamicSphere(BizInfo[bizid][bExitX], BizInfo[bizid][bExitY], BizInfo[bizid][bExitZ], 3.0, BizInfo[bizid][bWorld], BizInfo[bizid][bInterior]);
	Streamer_SetIntData(STREAMER_TYPE_AREA, BizInfo[bizid][bAreaID][1], E_STREAMER_EXTRA_ID, bizid);

	SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	return 1;
}

CMD:gotobusiness(playerid, params[])
{
	new bizid;
	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/businessenter [bizid]");
	bizid = GetBizSID(bizid);
	if(!Iter_Contains(sv_business, bizid)) return SendClientMessage(playerid, COLOR_GRAD2, "Invalid business ID.");

	SetPlayerPos(playerid, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
	return 1;
}

CMD:editbusiness(playerid, params[])
{
	new text[256], type, bizid;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/editbusiness [names] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 1-Price,2-Level,3-SubType,4-Name,5-Entrance,6-Cash,7-Lock/Unlock");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 8-Product,9-Max Product,10-Cargo Price,11-Entrance Time");
	}
	if((bizid = nearBiz_var[playerid]) != -1) {

		new input = strval(text);

		SendClientMessageEx(playerid, COLOR_GRAD2, "Business (%d): Product %d/%d (buy price %d) | Till %d", bizid, BizInfo[bizid][bProducts], BizInfo[bizid][bMaxProducts], BizInfo[bizid][bPriceProd], BizInfo[bizid][bTill]);

		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_till` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bBuyPrice] = input;
		}
		else if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_level` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bLevelNeeded] = input;
		}
		else if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_subtype` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bsubType] = input;
		}
		/*else if(type == 3)
		{
			BizInfo[bizid][bType] = input;
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_type` = %d, `biz_message` = '%s' WHERE `biz_id` = %d", input, BizInfo[bizid][bMessage],  BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
		}*/
		else if(type == 4)
		{
		    new clean_name[256];
		    mysql_escape_string(text,clean_name);
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_info` = '%s' WHERE `biz_id` = %d", clean_name, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			format(BizInfo[bizid][bInfo], 256, "%s", text);
		}
		else if(type == 5)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_encost` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bEntranceCost] = input;
		}
		else if(type == 6)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_till` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bTill] = input;
		}
		else if(type ==7)
		{
			if(BizInfo[bizid][bLocked] == 1)
			{
				BizInfo[bizid][bLocked] = 0;
				//GameTextForPlayer(playerid, "~b~Bussiness ~w~Opened", 5000, 6);
				SendClientMessage(playerid, -1, "ธุรกิจถูกเปิด");
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(BizInfo[bizid][bLocked] == 0)
			{
				BizInfo[bizid][bLocked] = 1;
				//GameTextForPlayer(playerid, "~b~Bussiness ~w~Closed", 5000, 6);
				SendClientMessage(playerid, -1, "ธุรกิจถูกปิด");
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else if(type == 8)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_prod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bProducts] = input;
		}
		else if(type == 9)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_maxprod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bMaxProducts] = input;
		}
		else if(type == 10)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_priceprod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bPriceProd] = input;
		}
		else if(type == 11)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_entime` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bEntime] = input;
		}
		else return SendClientMessage(playerid, COLOR_GRAD2, "ประเภทไม่ถูกต้อง 1-10");
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ได้อยู่ใกล้ธุรกิจใด ๆ");
	SendClientMessage(playerid, COLOR_GRAD2, "สำเร็จแล้ว");
	return 1;
}

CMD:businessint(playerid, params[])
{
	new bizid, int;
	if(playerData[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params,"d",int))
	{
		SendSyntaxMessage(playerid, "/businessint [id (0-48)]");
		SendClientMessage(playerid, COLOR_GRAD2, "0: None - 1: Marcos Bistro (Eat) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Eat) - 4: Cluckin Bell (Eat)");
		SendClientMessage(playerid, COLOR_GRAD2, "5: Well Stacked Pizza (Eat) - 6: Rusty Browns Dohnuts (Eat) - 7: Jays Diner (Eat) - 8: Pump Truck Stop Diner (Eat)");
		SendClientMessage(playerid, COLOR_GRAD2, "9: Alhambra (Drink) - 10: Mistys (Drink) - 11: Lil' Probe Inn (Drink) - 12: Exclusive (Clothes) - 13: Binco (Clothes)");
		SendClientMessage(playerid, COLOR_GRAD2, "14: ProLaps (Clothes) - 15: SubUrban (Clothes) - 16: Victim (Clothes) - 17: Zip (Clothes) - 18: Redsands Casino");
		SendClientMessage(playerid, COLOR_GRAD2, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Gun) - 26: Jizzy's (Drink)");
		SendClientMessage(playerid, COLOR_GRAD2, "27-32: 24-7's (Buy) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino 36: Bikers Garage 37: Ganton gym");
		SendClientMessage(playerid, COLOR_GRAD2, "38: Tattoo 1 39: Tatto 2 40: Tatto 3 41: Crack Den 42: Zero RC shop 43: Record Studio 44: LS Court Room 45: Meat Factory 46: Betting Place");
		SendClientMessage(playerid, COLOR_GRAD2, "47: Barber Shop 48: Pleasure Domes");
		return 1;
	}
	if((bizid = nearBiz_var[playerid]) != -1) {
		if(int < 0 || int > 48) return SendClientMessage(playerid, COLOR_GREY, "ERROR: Interior ID's 0-48");
		SetBusinessInterior(playerid, bizid, int);
	}
	return 1;
}

CMD:removewarehouse(playerid,params[])
{
	new warehouseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if((warehouseid = Warehouse_Nearest(playerid)) != -1) {

		format(szQuery, sizeof(szQuery), "DELETE FROM `houses` WHERE `id` = %d",WareHouseInfo[warehouseid][whID]);
		mysql_tquery(dbCon, szQuery, "OnWarehouseRemove", "i", warehouseid);

		if (IsValidDynamicPickup(WareHouseInfo[warehouseid][whPickup]))
		    DestroyDynamicPickup(WareHouseInfo[warehouseid][whPickup]);

		if(IsValidDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]))
			DestroyDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]);

		format(szString,sizeof(szString),"คุณได้ทำลาย Warehouse ไอดี: %d!",warehouseid);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
	}
	return 1;
}

CMD:makewarehouse(playerid, params[]) {
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new id, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"d", type)) {
		SendSyntaxMessage(playerid, "/makewarehouse [type]");
		SendClientMessage(playerid, COLOR_GREY, "Available types: 1: Weapon | 2: Drug");
		return 1;
	}

	if(type < 1 || type > 2) return SendClientMessage(playerid, COLOR_GRAD1, "ประเภท 1 หรือ 2 เท่านั้น");

	if((id = Iter_Free(sv_warehouse)) != -1) {

		GetPlayerPos(playerid, x, y, z);

		WareHouseInfo[id][whX] = x;
		WareHouseInfo[id][whY] = y;
		WareHouseInfo[id][whZ] = z;

		WareHouseInfo[id][whWorld] = GetPlayerVirtualWorld(playerid);
		WareHouseInfo[id][whInt] = GetPlayerInterior(playerid);

		WareHouseInfo[id][whType] = type;

		strpack(WareHouseInfo[id][whPlayer1], "", MAX_PLAYER_NAME char);
		strpack(WareHouseInfo[id][whPlayer2], "", MAX_PLAYER_NAME char);

		Warehouse_Refresh(id);

		AddWarehouseToFile(id);

		SendClientMessage(playerid, COLOR_GREEN, "Warehouse ถูกสร้างแล้ว !!");

		Iter_Add(sv_warehouse, id);
	}
	return 1;
}

CMD:makeentrance(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new entranceid, etype, etime, Float:x, Float:y, Float:z, Float:ang;
	if(sscanf(params,"dd", etype, etime)) return SendSyntaxMessage(playerid, "/makeentrance [type(0|1 รองรับยานพาหนะ)] [Teleport Time (1000 = 1 วินาที)]");

	if((entranceid = Iter_Free(sv_entrance)) != -1) {

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);
		
		EntranceData[entranceid][ePosEnX] = x;
		EntranceData[entranceid][ePosEnY] = y;
		EntranceData[entranceid][ePosEnZ] = z;
		EntranceData[entranceid][ePosEnA] = ang;
		EntranceData[entranceid][eEnTime] = etime;
		EntranceData[entranceid][eEnHouse] = HouseEntered[playerid];
		EntranceData[entranceid][eEnBiz] = BizEntered[playerid];
		EntranceData[entranceid][eEnLocal] = playerData[playerid][pLocal];
		EntranceData[entranceid][eEnInt] = GetPlayerInterior(playerid);
		EntranceData[entranceid][eEnWorld] = GetPlayerVirtualWorld(playerid);
		
		EntranceData[entranceid][ePosExX] = 0.0;
		EntranceData[entranceid][ePosExY] = 0.0;
		EntranceData[entranceid][ePosExZ] = 0.0;
		EntranceData[entranceid][ePosExA] = 0.0;
		EntranceData[entranceid][eExTime] = 0;
		EntranceData[entranceid][eExHouse] = 0;
		EntranceData[entranceid][eExBiz] = 0;
		EntranceData[entranceid][eExLocal] = 255;
		

		EntranceData[entranceid][eType] = etype;


		AddEntranceToFile(entranceid, etype, etime);
		format(szString, sizeof(szString), "ทางเข้าใหม่ถูกเพิ่มแล้ว [ไอดี:%d]", entranceid);
		SendClientMessage(playerid, COLOR_GREEN, szString);

		Iter_Add(sv_entrance, entranceid);
	}
	return 1;
}

CMD:removeentrance(playerid,params[])
{
	new entranceid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if((entranceid = Entrance_Nearest(playerid)) != -1) {

		if (IsValidDynamicPickup(EntranceData[entranceid][ePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][ePickup]);


		format(szQuery, sizeof(szQuery), "DELETE FROM `entrance` WHERE `eID` = %d",EntranceData[entranceid][eID]);
		mysql_tquery(dbCon, szQuery, "OnEntranceRemove", "i", entranceid);
		
		format(szString,sizeof(szString),"คุณได้ทำลายทางเข้าไดนามิคไอดี: %d!",entranceid);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
	}
	return 1;
}

CMD:entranceenter(playerid,params[])
{
	new houseid, etime, Float:px, Float:py, Float:pz, Float:pa;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"dD(-1)",houseid, etime)) return SendSyntaxMessage(playerid, "/entranceenter [entrance id] [time]");
	if(!Iter_Contains(sv_entrance, houseid)) return SendClientMessage(playerid, -1, "Invalid entrance id.");

	new
		pint = GetPlayerInterior(playerid),
		pworld = GetPlayerVirtualWorld(playerid)
	;
	
	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, pa);

	format(XLQuery, sizeof(XLQuery), "UPDATE `entrance` SET `ePosEnX`= %f,`ePosEnY`= %f,`ePosEnZ`= %f,`ePosEnA`= %f,`eEnTime`= %d,`eEnHouse`= %d,`eEnBiz`= %d,`eEnLocal`= %d,`eEnInt`= %d,`eEnWorld`= %d WHERE `eID`= %d", px, py, pz, pa, etime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld, EntranceData[houseid][eID]);
	mysql_tquery(dbCon, XLQuery, "OnEntranceMoved", "iffffdddddd", houseid, px, py, pz, pa, etime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld);
	//printf("%d enter", houseid);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางเข้าสำเร็จแล้ว");
	return 1;
}

CMD:entranceexit(playerid,params[])
{
	new houseid, etime, Float:px, Float:py, Float:pz, Float:pa;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"dD(-1)",houseid, etime)) return SendSyntaxMessage(playerid, "/entranceexit [entrance id] [time]");
	if(!Iter_Contains(sv_entrance, houseid)) return SendClientMessage(playerid, -1, "Invalid entrance id.");

	new
		pint = GetPlayerInterior(playerid),
		pworld = GetPlayerVirtualWorld(playerid)
	;

	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, pa);

	format(XLQuery, sizeof(XLQuery), "UPDATE `entrance` SET `ePosExX`= %f,`ePosExY`= %f,`ePosExZ`= %f,`ePosExA`= %f,`eExTime`= %d,`eExHouse`= %d,`eExBiz`= %d,`eExLocal`= %d,`eExInt`= %d,`eExWorld`= %d WHERE `eID`= %d", px, py, pz, pa, etime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld, EntranceData[houseid][eID]);
	mysql_tquery(dbCon, XLQuery, "OnEntranceExitMoved", "iffffdddddd", houseid, px, py, pz, pa, etime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld);
    //printf("%d exit", houseid);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางออกสำเร็จแล้ว");
	return 1;
}

CMD:editentrance(playerid, params[])
{
	new text[128], type, houseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/editentrance [names] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 1-Type(0|1 รองรับยานพาหนะ), 2-PickupID, 3-PickupType");
	}
	if((houseid = Entrance_Nearest(playerid)) != -1) {

		new input = strval(text);
		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `entrance` SET `eType` = %d WHERE `eID` = %d", input, EntranceData[houseid][eID]);
			mysql_query(dbCon, szQuery);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
		else if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `entrance` SET `ePickupid` = %d WHERE `eID` = %d", input, EntranceData[houseid][eID]);
			mysql_query(dbCon, szQuery);
			EntranceData[houseid][ePickupid] = input;
			Entrance_Refresh(houseid);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
		else if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `entrance` SET `ePickuptype` = %d WHERE `eID` = %d", input, EntranceData[houseid][eID]);
			mysql_query(dbCon, szQuery);
			EntranceData[houseid][ePickuptype] = input;
			Entrance_Refresh(houseid);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
	}
	return 1;
}

CMD:gotoentrance(playerid, params[])
{
	new id, str[256];

	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",id)) return SendSyntaxMessage(playerid, "/gotoentrance [entrance id]");
	if(!Iter_Contains(sv_entrance, id)) return SendClientMessage(playerid, -1, "Invalid house id.");

	SetPlayerPosEx(playerid,EntranceData[id][ePosEnX],EntranceData[id][ePosEnY],EntranceData[id][ePosEnZ],EntranceData[id][eEnTime]);
	SetPlayerFacingAngle(playerid, EntranceData[id][ePosEnA]);

	SetPlayerInterior(playerid,EntranceData[id][eEnInt]);
	SetPlayerVirtualWorld(playerid,EntranceData[id][eEnWorld]);
	HouseEntered[playerid] = EntranceData[id][eEnHouse];
	BizEntered[playerid] = EntranceData[id][eEnBiz];

	playerData[playerid][pInterior] = EntranceData[id][eEnInt];
	playerData[playerid][pWorld] = EntranceData[id][eEnWorld];
	playerData[playerid][pLocal] = EntranceData[id][eEnLocal];

	if(HouseEntered[playerid] != -1)
	{
		strunpack(str, HouseInfo[HouseEntered[playerid]][hradioURL]);
		if(HouseInfo[HouseEntered[playerid]][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
		else StopAudioStreamForPlayer(playerid);
	}
	else if(BizEntered[playerid] != -1)
	{
		strunpack(str, BizInfo[BizEntered[playerid]][bradioURL]);
		if(BizInfo[BizEntered[playerid]][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
		else StopAudioStreamForPlayer(playerid);
	}
	else StopAudioStreamForPlayer(playerid);

	return 1;
}
///////////////

CMD:makegarage(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new garageid, gtype, gtime, Float:x, Float:y, Float:z, Float:ang;
	if(sscanf(params,"dd", gtype, gtime)) return SendSyntaxMessage(playerid, "/makegarage [เลือก 1 หากคุณต้องการเปิดโรงรถ] [Teleport Time (1000 = 1 วินาที)]");

	if((garageid = Iter_Free(sv_garage)) != -1) {

		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, ang);
		
		GarageData[garageid][gPosEnX] = x;
		GarageData[garageid][gPosEnY] = y;
		GarageData[garageid][gPosEnZ] = z;
		GarageData[garageid][gPosEnA] = ang;
		GarageData[garageid][gEnTime] = gtime;
		GarageData[garageid][gEnHouse] = HouseEntered[playerid];
		GarageData[garageid][gEnBiz] = BizEntered[playerid];
		GarageData[garageid][gEnLocal] = playerData[playerid][pLocal];
		GarageData[garageid][gEnInt] = GetPlayerInterior(playerid);
		GarageData[garageid][gEnWorld] = GetPlayerVirtualWorld(playerid);
		
		GarageData[garageid][gPosExX] = 0.0;
		GarageData[garageid][gPosExY] = 0.0;
		GarageData[garageid][gPosExZ] = 0.0;
		GarageData[garageid][gPosExA] = 0.0;
		GarageData[garageid][gExTime] = 0;
		GarageData[garageid][gExHouse] = 0;
		GarageData[garageid][gExBiz] = 0;
		GarageData[garageid][gExLocal] = 255;
		
		strpack(GarageData[garageid][PlayerOwner], "", MAX_PLAYER_NAME char);

		GarageData[garageid][gType] = gtype;

		AddGarageToFile(garageid, gtype, gtime);
		format(szString, sizeof(szString), "ลานจอดรถใหม่ถูกเพิ่มแล้ว [ไอดี:%d]", garageid);
		SendClientMessage(playerid, COLOR_GREEN, szString);

		Iter_Add(sv_garage, garageid);
	}
	return 1;
}

CMD:removegarage(playerid,params[])
{
	new garageid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if((garageid = Garage_Nearest(playerid)) != -1) {

		if (IsValidDynamicPickup(GarageData[garageid][gPickup]))
		    DestroyDynamicPickup(GarageData[garageid][gPickup]);


		format(szQuery, sizeof(szQuery), "DELETE FROM `garage` WHERE `gID` = %d",GarageData[garageid][gID]);
		mysql_tquery(dbCon, szQuery, "OnGarageRemove", "i", garageid);
		
		format(szString,sizeof(szString),"คุณได้ทำลายลานจอดรถไดนามิคไอดี: %d!",garageid);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
	}
	return 1;
}

CMD:garageenter(playerid,params[])
{
	new houseid, gtime, Float:px, Float:py, Float:pz, Float:pa;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"dD(-1)",houseid, gtime)) return SendSyntaxMessage(playerid, "/garageenter [garage id] [time]");
	if(!Iter_Contains(sv_garage, houseid)) return SendClientMessage(playerid, -1, "Invalid garage id.");

	new
		pint = GetPlayerInterior(playerid),
		pworld = GetPlayerVirtualWorld(playerid)
	;
	
	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, pa);

	format(XLQuery, sizeof(XLQuery), "UPDATE `garage` SET `gPosEnX`= %f,`gPosEnY`= %f,`gPosEnZ`= %f,`gPosEnA`= %f,`gEnTime`= %d,`gEnHouse`= %d,`gEnBiz`= %d,`gEnLocal`= %d,`gEnInt`= %d,`gEnWorld`= %d WHERE `gID`= %d", px, py, pz, pa, gtime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld, GarageData[houseid][gID]);
	mysql_tquery(dbCon, XLQuery, "OnGarageMoved", "iffffdddddd", houseid, px, py, pz, pa, gtime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld);
	//printf("%d enter", houseid);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางเข้าสำเร็จแล้ว");
	return 1;
}

CMD:garageexit(playerid,params[])
{
	new houseid, gtime, Float:px, Float:py, Float:pz, Float:pa;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"dD(-1)",houseid, gtime)) return SendSyntaxMessage(playerid, "/garageexit [garage id] [time]");
	if(!Iter_Contains(sv_garage, houseid)) return SendClientMessage(playerid, -1, "Invalid garage id.");

	new
		pint = GetPlayerInterior(playerid),
		pworld = GetPlayerVirtualWorld(playerid)
	;

	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, pa);

	format(XLQuery, sizeof(XLQuery), "UPDATE `garage` SET `gPosExX`= %f,`gPosExY`= %f,`gPosExZ`= %f,`gPosExA`= %f,`gExTime`= %d,`gExHouse`= %d,`gExBiz`= %d,`gExLocal`= %d,`gExInt`= %d,`gExWorld`= %d WHERE `gID`= %d", px, py, pz, pa, gtime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld, GarageData[houseid][gID]);
	mysql_tquery(dbCon, XLQuery, "OnGarageExitMoved", "iffffdddddd", houseid, px, py, pz, pa, gtime, HouseEntered[playerid], BizEntered[playerid], playerData[playerid][pLocal], pint, pworld);
    //printf("%d exit", houseid);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางออกสำเร็จแล้ว");
	return 1;
}

CMD:editgarage(playerid, params[])
{
	new text[128], type, houseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/editgarage [names] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 1-Type(เลือก 1 หากคุณต้องการเปิดโรงจอดรถ), 2-PickupID, 3-PickupType, 4.Owner");
	}
	if((houseid = Garage_Nearest(playerid)) != -1) {

		new input = strval(text);
		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `garage` SET `gType` = %d WHERE `gID` = %d", input, GarageData[houseid][gID]);
			mysql_query(dbCon, szQuery);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
		else if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `garage` SET `gPickupid` = %d WHERE `gID` = %d", input, GarageData[houseid][gID]);
			mysql_query(dbCon, szQuery);
			GarageData[houseid][gPickupid] = input;
			Garage_Refresh(houseid);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
		else if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `garage` SET `gPickuptype` = %d WHERE `gID` = %d", input, GarageData[houseid][gID]);
			mysql_query(dbCon, szQuery);
			GarageData[houseid][gPickuptype] = input;
			Garage_Refresh(houseid);
			SendClientMessage(playerid, COLOR_GRAD1, "แก้ไขสำเร็จ");
		}
		else if(type == 4)
		{
			new clean_name[24];
			mysql_escape_string(text,clean_name);

			format(szQuery, sizeof(szQuery), "UPDATE `garage` SET `garage_player1` = '%s' WHERE `gID` = %d", clean_name, GarageData[houseid][gID]);
			mysql_query(dbCon, szQuery);

			strpack(GarageData[houseid][PlayerOwner], text, MAX_PLAYER_NAME char);
		
			SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนดให้ %s เป็นเจ้าของโรงจอดรถเรียบร้อยแล้ว", text);
		}
	}
	return 1;
}

CMD:gotogarage(playerid, params[])
{
	new id, str[256];

	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",id)) return SendSyntaxMessage(playerid, "/gotogarage [garage id]");
	if(!Iter_Contains(sv_garage, id)) return SendClientMessage(playerid, -1, "Invalid garage id.");

	SetPlayerPosEx(playerid,GarageData[id][gPosEnX],GarageData[id][gPosEnY],GarageData[id][gPosEnZ],GarageData[id][gEnTime]);
	SetPlayerFacingAngle(playerid, GarageData[id][gPosEnA]);

	SetPlayerInterior(playerid,GarageData[id][gEnInt]);
	SetPlayerVirtualWorld(playerid,GarageData[id][gEnWorld]);
	HouseEntered[playerid] = GarageData[id][gEnHouse];
	BizEntered[playerid] = GarageData[id][gEnBiz];

	playerData[playerid][pInterior] = GarageData[id][gEnInt];
	playerData[playerid][pWorld] = GarageData[id][gEnWorld];
	playerData[playerid][pLocal] = GarageData[id][gEnLocal];

	if(HouseEntered[playerid] != -1)
	{
		strunpack(str, HouseInfo[HouseEntered[playerid]][hradioURL]);
		if(HouseInfo[HouseEntered[playerid]][hradioOn]) PlayAudioStreamForPlayer(playerid, str);
		else StopAudioStreamForPlayer(playerid);
	}
	else if(BizEntered[playerid] != -1)
	{
		strunpack(str, BizInfo[BizEntered[playerid]][bradioURL]);
		if(BizInfo[BizEntered[playerid]][bradioOn]) PlayAudioStreamForPlayer(playerid, str);
		else StopAudioStreamForPlayer(playerid);
	}
	else StopAudioStreamForPlayer(playerid);

	return 1;
}
///////////////

CMD:makehouse(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new houseid, buylevel, price, houseinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"dds[256]", buylevel, price, houseinfo)) return SendSyntaxMessage(playerid, "/makehouse [buylevel] [ราคา] [info]");

	if((houseid = Iter_Free(sv_houses)) != -1) {

		GetPlayerPos(playerid, x, y, z);
		HouseInfo[houseid][hEntranceX] = x;
		HouseInfo[houseid][hEntranceY] = y;
		HouseInfo[houseid][hEntranceZ] = z;
		HouseInfo[houseid][hExitX] = 0.0;
		HouseInfo[houseid][hExitY] = 0.0;
		HouseInfo[houseid][hExitZ] = 0.0;
		HouseInfo[houseid][hCheckPosX] = 0.0000;
		HouseInfo[houseid][hCheckPosY] = 0.0000;
		HouseInfo[houseid][hCheckPosZ] = 0.0000;
		HouseInfo[houseid][hPrice] = price;
		HouseInfo[houseid][hOwned] = 0;
		HouseInfo[houseid][hLocked] = 1;
		HouseInfo[houseid][hRentprice] = 0;
		HouseInfo[houseid][hRentable] = 0;
		HouseInfo[houseid][hInterior] = 0;
		HouseInfo[houseid][hWorld] = 0;
		HouseInfo[houseid][hCash] = 0;
		HouseInfo[houseid][hSwitch] = 0;
		HouseInfo[houseid][hSwitchStatus] = 0;
		HouseInfo[houseid][hSubid]=-1;
		
		HouseInfo[houseid][hEntranceInt] = 0;
		HouseInfo[houseid][hEntranceWorld] = 0;
	
		if(HouseEntered[playerid] != -1) {
			new temp_house = HouseEntered[playerid];
		    HouseInfo[houseid][hSubid] = temp_house;
		    HouseInfo[houseid][hEntranceInt] = HouseInfo[temp_house][hInterior];
		    HouseInfo[houseid][hEntranceWorld] = HouseInfo[temp_house][hWorld];
		}
	
		DestroyDynamicArea(HouseInfo[houseid][hAreaID][0]);
		HouseInfo[houseid][hAreaID][0] = CreateDynamicSphere(HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], 3.0, HouseInfo[houseid][hEntranceWorld], HouseInfo[houseid][hEntranceInt]); // The house exterior.	
		Streamer_SetIntData(STREAMER_TYPE_AREA, HouseInfo[houseid][hAreaID][0], E_STREAMER_EXTRA_ID, houseid);

		//HouseInfo[houseid][hRadio] = 0;
		HouseInfo[houseid][hLevelbuy] = buylevel;
		format(HouseInfo[houseid][hAddress], 256, houseinfo);
		format(HouseInfo[houseid][hOwner], 256, "The State");

		format(szString, sizeof(szString), ""EMBED_YELLOW"%s\nราคา: $%d\nเลเวล: %d", GetHouseAddress(houseid, false), price, buylevel);
		HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		//HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(x, y, z, 3, 0, 0, -1, 3.5);

		new clean_info[256];
    	mysql_escape_string(houseinfo,clean_info);
		AddHouseToFile(houseid, price, clean_info, x, y, z);
		format(szString, sizeof(szString), "บ้านหลังใหม่ถูกเพิ่มแล้ว [ราคา: %d ข้อมูลบ้าน: %s]", price, houseinfo);
		SendClientMessage(playerid, COLOR_GREEN, szString);

		Iter_Add(sv_houses, houseid);
	}
	return 1;
}

CMD:removehouse(playerid,params[])
{
	new houseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if((houseid = GetClosestHouseID(playerid)) != -1) {

	    if(HouseInfo[houseid][hOwned]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถทำลายบ้านที่มีเจ้าของได้โปรดใช้ /asellhouse");

		DestroyDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel]);

		format(szString,sizeof(szString),"คุณได้ทำลายบ้านไดนามิคไอดี: %d!",HouseInfo[houseid][hID]);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
		
		format(szQuery, sizeof(szQuery), "DELETE FROM `houses` WHERE `id` = %d",HouseInfo[houseid][hID]);
		mysql_tquery(dbCon, szQuery, "OnHouseRemove", "i", houseid);
	}
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	new houseid;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/asellhouse [houseid]");
	
	houseid = GetHouseSID(houseid);
	
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid house ID.");
	if(!HouseInfo[houseid][hOwned]) return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่มีใครเป็นเจ้าของบ้านหลังนี้");

	foreach(new i : Player)
	{
	    if(playerData[i][pHouseKey] == houseid)
	    {
	        playerData[i][pHouseKey] = -1;
			format(szString, sizeof(szString), "ผู้ดูแล %s ได้ขายบ้านของคุณให้กับตลาด คุณเป็นผู้ไร้ที่อยู่อาศัย", ReturnPlayerName(playerid));
			SendClientMessage(i, -1, szString);
	        break;
	    }
	}

/*	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `Character` = '%s'", -1, HouseInfo[houseid][hOwner]);
	mysql_query(dbCon, szQuery);*/

	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d", -1, houseid);
	mysql_query(dbCon, szQuery);

	format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `rentprice` = %d, `rentable` = %d, `cash` = %d, `checkx` = %f, `checky` = %f, `checkz` = %f WHERE `id` = %d", "The State", 0, 1, 0, 0, 0, 0.0, 0.0, 0.0, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnAdminSellHouse", "i", houseid);
	return 1;
}

CMD:houseenter(playerid,params[])
{
	new houseid, Float:px, Float:py, Float:pz;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/houseenter [house id]");
	
	houseid = GetHouseSID(houseid);
	
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, -1, "Invalid house id.");

	GetPlayerPos(playerid, px, py, pz);

	if(IsValidDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel])) DestroyDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:HouseInfo[houseid][hLabel]);
	//DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);

	if(!HouseInfo[houseid][hOwned]) {
		format(szString, sizeof(szString), ""EMBED_YELLOW"%s\nราคา: $%d\nเลเวล: %d", HouseInfo[houseid][hAddress], HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
		HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, px, py, pz, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	}

	format(XLQuery, sizeof(XLQuery), "UPDATE `houses` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", px, py, pz, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, XLQuery, "OnHouseMoved", "ifffdd", houseid, px, py, pz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางเข้าของบ้านสำเร็จแล้ว");
	
	
	return 1;
}

CMD:houseexit(playerid,params[])
{
	new houseid, interior, world, Float:px, Float:py, Float:pz;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/houseexit [house id]");
	houseid = GetHouseSID(houseid);
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, -1, "Invalid house id.");
	interior = GetPlayerInterior(playerid);
	world = HOUSE_WORLD + HouseInfo[houseid][hID];
	GetPlayerPos(playerid, px, py, pz);
	HouseInfo[houseid][hSwitchStatus]=0;
	format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d, `world` = %d WHERE `id` = %d", px, py, pz, interior, world, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnHouseExitMoved", "iiifff", houseid, interior, world, px, py, pz);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขทางออกของบ้านสำเร็จแล้ว");
	return 1;
}

CMD:edithouse(playerid, params[])
{
	new text[128], type, houseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/edithouse [names] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 1-Price,2-Level,3-Info,4-World,5-Owner Name");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 6-Bareswitch, 7-Type (0-House,1-Complex)");
	}
	if((houseid = GetClosestHouseID(playerid)) != -1) {

		new input = strval(text);
		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `price` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hPrice] = input;
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		else if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `levelbuy` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hLevelbuy] = input;
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		else if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `info` = '%s' WHERE `id` = %d", text, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			format(HouseInfo[houseid][hAddress], 128, "%s", text);
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		else if(type == 4)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `world` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hWorld] = input;
		}
		else if(type == 5)
		{
			new clean_name[MAX_PLAYER_NAME];
			mysql_escape_string(text,clean_name);

			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `owner` = '%s' WHERE `id` = %d", clean_name, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);

			format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, "%s", text);
		}

		else if(type == 6)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `switch` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);

			HouseInfo[houseid][hSwitch] = input;
			
			SendClientMessageEx(playerid, COLOR_GRAD1, "คุณได้แก้ไขบ้านให้%s Bareswitch", (input) ? ("มี") : ("ไม่มี"));
		}

		else if(type == 7)
		{
			switch(input) {
			    case 0: // House
				{
					format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `type` = 0 WHERE `id` = %d", HouseInfo[houseid][hID]);
					mysql_query(dbCon, szQuery);

					HouseInfo[houseid][hType] = 0;
					
					SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขให้เป็นประเภท: บ้าน");
					
					if (IsValidDynamicPickup(HouseInfo[houseid][hPickup]))
					    DestroyDynamicPickup(HouseInfo[houseid][hPickup]);

				}
			    case 1: // Complex
				{
					format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `type` = 1 WHERE `id` = %d", HouseInfo[houseid][hID]);
					mysql_query(dbCon, szQuery);

					HouseInfo[houseid][hType] = 1;
					
					SendClientMessage(playerid, COLOR_GRAD1, "คุณได้แก้ไขให้เป็นประเภท: อพาร์ทเม้นท์คอมเพล็กซ์");
					
					HouseInfo[houseid][hPickup] = CreateDynamicPickup(1314, 23, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], -1, -1);
				}
			}
		}
	}
	return 1;
}

CMD:gotograffiti(playerid, params[])
{
	new graffid;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",graffid)) return SendSyntaxMessage(playerid, "/gotograffiti [id]");

	if(graffid < 1 || graffid > 100) return SendSyntaxMessage(playerid, "/gotograffiti [id]");

	graffid--;

	SetPlayerPos(playerid, graff_Info[graffid][Xpos], graff_Info[graffid][Ypos], graff_Info[graffid][Zpos]);

	return 1;
}

CMD:gotohouse(playerid, params[])
{
	new houseid;

	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/gotohouse [house id]");
	houseid = GetHouseSID(houseid);
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, -1, "Invalid house id.");
	SetPlayerPos(playerid, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ]);

	if(HouseInfo[houseid][hSubid] != -1) {
		HouseEntered[playerid] = HouseInfo[houseid][hSubid];
		SetPlayerInterior(playerid, HouseInfo[houseid][hEntranceInt]);
		SetPlayerVirtualWorld(playerid, HouseInfo[houseid][hEntranceWorld]);
		playerData[playerid][pInterior] = HouseInfo[houseid][hEntranceInt];
		playerData[playerid][pWorld] = HouseInfo[houseid][hEntranceWorld];
		playerData[playerid][pLocal] = HouseInfo[houseid][hSubid] + LOCAL_HOUSE;
	}
	else {
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		playerData[playerid][pInterior] = 0;
		playerData[playerid][pWorld] = 0;
		HouseEntered[playerid] = -1;
		playerData[playerid][pLocal] = 255;
	}
	BizEntered[playerid] = -1;
	return 1;
}

CMD:gotowarehouse(playerid, params[])
{
	new warehouseid;

	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",warehouseid)) return SendSyntaxMessage(playerid, "/gotowarehouse [warehouse id]");
	if(!Iter_Contains(sv_warehouse, warehouseid)) return SendClientMessage(playerid, -1, "Invalid warehouse id.");

	SetPlayerPos(playerid, WareHouseInfo[warehouseid][whX], WareHouseInfo[warehouseid][whY], WareHouseInfo[warehouseid][whZ]);

	SetPlayerInterior(playerid, WareHouseInfo[warehouseid][whInt]);
	SetPlayerVirtualWorld(playerid, WareHouseInfo[warehouseid][whWorld]);
	playerData[playerid][pInterior] = WareHouseInfo[warehouseid][whInt];
	playerData[playerid][pWorld] = WareHouseInfo[warehouseid][whWorld];
	playerData[playerid][pLocal] = 255;
	HouseEntered[playerid] = -1;
	BizEntered[playerid] = -1;
	return 1;
}

CMD:editwarehouse(playerid, params[])
{
	new text[128], type, warehouseid = -1;

	if(playerData[playerid][pAdmin] < 1337)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"dds[256]",warehouseid,type,text) && type != 6) {
		SendSyntaxMessage(playerid, "/editwarehouse [warehouse id] [names] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Available names: 1-player1, 2-player2, 3-stock, 4-maxstock, 5-type, 6-position");

		if(Iter_Contains(sv_warehouse, warehouseid)) {
			new warehousetemp[MAX_PLAYER_NAME+1];
			strunpack(warehousetemp, WareHouseInfo[warehouseid][whPlayer1]);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Player 1: %s", warehousetemp);
			strunpack(warehousetemp, WareHouseInfo[warehouseid][whPlayer2]);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Player 2: %s", warehousetemp);
		}
	}

	if(!Iter_Contains(sv_warehouse, warehouseid)) return SendClientMessage(playerid, -1, "Invalid warehouse id.");

	new input = strval(text);

	if(type == 1)
	{
		new clean_name[24];
		mysql_escape_string(text,clean_name);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_player1` = '%s' WHERE `fw_id` = %d", clean_name, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		strpack(WareHouseInfo[warehouseid][whPlayer1], text, MAX_PLAYER_NAME char);
	
		SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนด #1 ให้ %s ใช้งาน Warehouse", text);
	}
	else if(type == 2)
	{
		new clean_name[24];
		mysql_escape_string(text,clean_name);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_player2` = '%s' WHERE `fw_id` = %d", clean_name, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		strpack(WareHouseInfo[warehouseid][whPlayer2], text, MAX_PLAYER_NAME char);
		SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนด #2 ให้ %s ใช้งาน Warehouse", text);
	}
	else if(type == 3)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_stock` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whStock] = input;
		SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนดจำนวนสินค้าใน Warehouse เป็น %d", WareHouseInfo[warehouseid][whStock]);
        Warehouse_Refresh(warehouseid);
	}
	else if(type == 4)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_maxstock` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whMaxstock] = input;
		SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนดจำนวนสูงสุดของสินค้าใน Warehouse เป็น %d", WareHouseInfo[warehouseid][whMaxstock]);
        Warehouse_Refresh(warehouseid);
	}
	else if(type == 5)
	{
		if(input < 1 || input > 2) return SendClientMessage(playerid, COLOR_GRAD2, "จำนวน 1-2 เท่านั้น");
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_type` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whType] = input;
        Warehouse_Refresh(warehouseid);
		SendClientMessageEx(playerid, COLOR_GRAD2, "คุณกำหนดประเภทของ Warehouse เป็น %s", WareHouseInfo[warehouseid][whType] == 1 ? ("Weapon") : ("Drug"));
	}
	else if(type == 6)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(IsValidDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]))
			DestroyDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]);

		WareHouseInfo[warehouseid][whX] = x;
		WareHouseInfo[warehouseid][whY] = y;
		WareHouseInfo[warehouseid][whZ] = z;

		WareHouseInfo[warehouseid][whWorld] = GetPlayerVirtualWorld(playerid);
		WareHouseInfo[warehouseid][whInt] = GetPlayerInterior(playerid);

		Warehouse_Refresh(warehouseid);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET fw_x = %f, fw_y = %f, fw_z = %f, fw_world = %d, fw_int = %d WHERE `fw_id` = %d", x, y, z, WareHouseInfo[warehouseid][whWorld], WareHouseInfo[warehouseid][whInt], WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		SendClientMessage(playerid, COLOR_GRAD2, "คุณกำหนดตำแหน่งใหม่ของ Warehouse เรียบร้อยแล้ว");
	}

	return 1;
}

CMD:serverhouses(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `houses`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Dynamic Houses");
	return 1;
}

/*CMD:gb(playerid, params[])
{
	grantbuild[playerid]=HouseEntered[playerid];
	return 1;
}*/

/*CMD:refreshfurniture(playerid, params[])
{
	new data[furnitureE];

	if(HouseEntered[playerid] != -1) 
	{
		for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i != j; ++i)
		{
			if(!IsValidDynamicObject(i)) continue;
			
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			if(data[fType] == TYPE_HOUSE && data[fHouseID] == HouseEntered[playerid])
			{
				DestroyDynamicObject(i);
			}

			LoadHouseFurnitures(HouseEntered[playerid]);
		}
	}

	return 1;
}*/

public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    //printf("Player %d selected object %d", playerid, objectid);

    //SetPlayerPosEx(playerid, fX, fY, fZ-295);
    //CreateDynamicObject(modelid, fX, fY, fZ-300, 0.000, 0.000, 0.000, 0, GetPlayerInterior(playerid), -1, 200.0);
/*	printf("CreateDynamicObject(%d, %f, %f, %f);", modelid, fX, fY, fZ-300);
	DestroyDynamicObject(objectid);*/

    return 1;
}

IsAddHouseFurniture(houseid, current)
{
	new furniture = 75;

	if(Iter_Contains(sv_houses, houseid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `Character` = '%s'", HouseInfo[houseid][hOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(donaterank) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}

	if(current < furniture) return true;

	return false;
}

IsAddBizFurniture(bizid, current)
{
	new furniture = 75;

	if(Iter_Contains(sv_business, bizid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `Character` = '%s'", BizInfo[bizid][bOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(donaterank) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}

	if(current < furniture) return true;

	return false;
}

GetMaximumBizFurniture(bizid)
{
	new furniture = 75;
	if(Iter_Contains(sv_business, bizid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `Character` = '%s'", BizInfo[bizid][bOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(donaterank) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}
	return furniture;
}

GetMaximumHouseFurniture(houseid)
{
	new furniture = 75;
	if(Iter_Contains(sv_houses, houseid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `Character` = '%s'", HouseInfo[houseid][hOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(donaterank) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}
	return furniture;
}

GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	// Created by Y_Less

	new Float:a;

	GetPlayerPos(playerid, x, y, a);

	if (GetPlayerVehicleID(playerid)) {
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	else GetPlayerFacingAngle(playerid, a);

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

forward ShowAmount(playerid, text[]);
public ShowAmount(playerid, text[])
{
	new rows, count = 0;
	cache_get_row_count(rows);
	if(rows)
	{
		while(count < rows) count++;
	}
	format(szString, sizeof(szString), "%s จำนวนทั้งหมด: %d", text, count);
	SendClientMessage(playerid, COLOR_GRAD2, szString);
	return 1;
}

forward TollUpdate();
public TollUpdate() // Needs to be called in the OnPlayerUpdate function
{
	for(new i = 0; i != MAX_TOLLS; ++i)
	{
		if(aTolls[i][E_tOpenTime] > 0)
		{
			aTolls[i][E_tOpenTime]--;
			if(aTolls[i][E_tOpenTime] == 1)
			{
				Toll_CloseToll(i);
			}
		}
	}
}

forward Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance);
public Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
 	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

forward GetUnixTime();
public GetUnixTime()
{
	new Year, Month, Day,Hour,Minute,Second;
	getdate(Year, Month, Day);
	gettime(Hour,Minute,Second);
	return mktime(Hour,Minute,Second,Day,Month,Year);
}


mktime(hour,minute,second,day,month,year)
{
	new timestamp2;

	timestamp2 = second + (minute * 60) + (hour * 3600);

	new days_of_month[12];

	if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) {
		days_of_month = {                         // Schaltjahr
			31,29,31,30,31,30,31,31,30,31,30,31
		};
	}
	else {
		days_of_month = {                         // keins
			31,28,31,30,31,30,31,31,30,31,30,31
		};
	}
	new days_this_year = 0;
	days_this_year = day;
	if(month > 1) {                               // No January Calculation, because its always the 0 past months
		for(new i=0; i!=month-1;++i) {
			days_this_year += days_of_month[i];
		}
	}
	timestamp2 += days_this_year * 86400;

	for(new j=1970;j!=year;++j) {
		timestamp2 += 31536000;
// Schaltjahr + 1 Tag
		if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )  timestamp2 += 86400;
	}

	return timestamp2;
}

Toll_CloseToll(TollID)
{
	if(TollID == RichmanToll)
	{
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
	}
	return 1;
}

Toll_OpenToll(TollID)
{
	if(TollID == RichmanToll)
	{
		aTolls[RichmanToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		aTolls[FlintToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		aTolls[LVToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		aTolls[BlueberryTollR][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		aTolls[BlueberryTollL][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
	}
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /opentoll on the same toll
{
	if(aTolls[TollID][E_tOpenTime] > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Bariera este deja deschisa. Treci pana nu se inchide!");
		return 0;
	}
	return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
	new L_i_tick = GetUnixTime();
	if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
	{
		new TollString[63];
		format(TollString, 63, "คุณจะต้องรออย่างน้อย %d วินาทีระหว่างการจ่ายค่าผ่านทางแต่ละครั้ง", TollDelayCop);
		SendClientMessage(playerid, COLOR_LIGHTRED, TollString);
		return 0;
	}
	L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
	return 1;
}

CMD:tolls(playerid, params[])
{
	//new faction = playerData[playerid][pFactionID];
	new option[11];

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "ฝ่ายหรือกลุ่มไม่ถูกต้อง");

    if(playerData[playerid][pFactionRank] > 13)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"s[11]",option))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "การควบคุมด่านใน San Adreas");
		SendClientMessage(playerid, COLOR_GREY, "lock/release - ล็อก/ปลดล็อก ด่านทั้งหมด");
		SendClientMessage(playerid, COLOR_GREY, "flint - ล็อก/ปลดล็อก ด่าน Flint County");
		SendClientMessage(playerid, COLOR_GREY, "richman - ล็อก/ปลดล็อก ด่าน Richman");
		SendClientMessage(playerid, COLOR_GREY, "lv - ล็อก/ปลดล็อก ด่าน LS-LV");
		SendClientMessage(playerid, COLOR_GREY, "blueberryr - ล็อก/ปลดล็อก ด่าน Blueberry(ขวา)");
		SendClientMessage(playerid, COLOR_GREY, "blueberryl - ล็อก/ปลดล็อก ด่าน Blueberry(ซ้าย)");
		return 1;
	}
	if(!Toll_TimePassedCops(playerid))
		return 1;

	if(!strcmp(option, "lock", true))
	{
		aTolls[FlintToll][E_tLocked] = 1;
		aTolls[RichmanToll][E_tLocked] = 1;
		aTolls[LVToll][E_tLocked] = 1;
		aTolls[BlueberryTollR][E_tLocked] = 1;
		aTolls[BlueberryTollL][E_tLocked] = 1;

		Toll_CloseToll(FlintToll);
		Toll_CloseToll(RichmanToll);
		Toll_CloseToll(LVToll);
		Toll_CloseToll(BlueberryTollR);
		Toll_CloseToll(BlueberryTollL);

		SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: %s %s ได้ปิดด่านกั้นทั้งหมด ! **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: %s %s ได้ปิดด่านกั้นทั้งหมด ! **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
	}
	else if(!strcmp(option, "release", true))
	{
		aTolls[FlintToll][E_tLocked] = 0;
		aTolls[RichmanToll][E_tLocked] = 0;
		aTolls[LVToll][E_tLocked] = 0;
		aTolls[BlueberryTollR][E_tLocked] = 0;
		aTolls[BlueberryTollL][E_tLocked] = 0;

		SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: %s %s ได้เปิดด่านกั้นทั้งหมด ! **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
        SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: %s %s ได้เปิดด่านกั้นทั้งหมด ! **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
	}
	else if(!strcmp(option, "flint", true))
	{
		if(aTolls[FlintToll][E_tLocked] == 0)
		{
			aTolls[FlintToll][E_tLocked] = 1;
			Toll_CloseToll(FlintToll);
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Flint County ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Flint County ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
		else
		{
			aTolls[FlintToll][E_tLocked] = 0;
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Flint County ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Flint County ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
	}
	else if(!strcmp(option, "richman", true))
	{
		if(aTolls[RichmanToll][E_tLocked] == 0)
		{
			aTolls[RichmanToll][E_tLocked] = 1;
			Toll_CloseToll(RichmanToll);
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Richman ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Richman ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
		else
		{
			aTolls[RichmanToll][E_tLocked] = 0;
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Richman ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Richman ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
	}
	else if(!strcmp(option, "lv", true))
	{
		if(aTolls[LVToll][E_tLocked] == 0)
		{
			aTolls[LVToll][E_tLocked] = 1;
			Toll_CloseToll(LVToll);

			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ LS-LV ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ LS-LV ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
		else
		{
			aTolls[LVToll][E_tLocked] = 0;
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ LS-LV ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ LS-LV ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
	}
	else if(!strcmp(option, "blueberryr", true))
	{
		if(aTolls[BlueberryTollR][E_tLocked] == 0)
		{
			aTolls[BlueberryTollR][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollR);
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ขวา) ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ขวา) ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
		else
		{
			aTolls[BlueberryTollR][E_tLocked] = 0;
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ขวา) ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
            SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ขวา) ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
	}
	else if(!strcmp(option, "blueberryl", true))
	{
		if(aTolls[BlueberryTollL][E_tLocked] == 0)//23914
		{
			aTolls[BlueberryTollL][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollL);
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ซ้าย) ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ซ้าย) ถูก \"ล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
		else
		{
			aTolls[BlueberryTollL][E_tLocked] = 0;
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ซ้าย) ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LSPDNEW, "** HQ Announcement: ด่านกั้นที่ Blueberry(ซ้าย) ถูก \"ปลดล็อก\" โดย %s %s **", Faction_GetRank(playerid), ReturnPlayerName(playerid));
		}
	}
	return 1;
}


CMD:opentoll(playerid, params[])
{
 	new L_i_TollID;
	if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 10.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
	{
		L_i_TollID = RichmanToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 10.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
	{
		L_i_TollID = FlintToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 10.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
	{
		L_i_TollID = LVToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 10.0, 604.37152, 346.88141, 17.92614)) // BlueberryR tolls
	{
		L_i_TollID = BlueberryTollR;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 10.0, -199.5153,260.3405,12.0781)) // BlueberryL tolls
	{
		L_i_TollID = BlueberryTollL;
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ใกล้ด่านกั้นพอ");
		return 1;
	}
	if(!Toll_TimePassedCivil(L_i_TollID, playerid))
		return 1;

    if(!playerData[playerid][pOnDuty])
	{
		if(aTolls[L_i_TollID][E_tLocked]) // If it's locked
		{
			SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s", L_sz_TollStringLocked);
			return 1;
		}
		if(playerData[playerid][pCash] < TollCost)
		{
			SendClientMessage(playerid, COLOR_RED, L_sz_TollStringNoMoney);
			return 1;
		}
		playerData[playerid][pCash] -= TollCost;
		SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s จ่าย %d$ ให้กับ Toll guard", ReturnPlayerName(playerid), TollCost);
	}
	SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s", L_sz_TollStringBye);
	SendClientMessage(playerid, COLOR_LIGHTRED, L_sz_TollStringHurryUp);
	Toll_OpenToll(L_i_TollID);
	return 1;
}

CMD:debugdead(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/debugdead [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	ResetPlayer(userid);
	ResetDamages(userid);
	isDeathmode{userid}=false;
	deathtime[userid]=0;
	isInjuredmode{userid}=false;
	ClearAnimations(userid);

	knotime[userid]=0;
	isKNOmode{userid}=false;
	SetPlayerHealth(userid, 50);

	return 1;
}

CMD:operation(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับหน่วยงานแพทย์เท่านั้น");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/operation [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นตัดการเชื่อมต่อหรือไม่ได้อยู่ใกล้คุณ");

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถดำเนินการตัวเองได้");

	if (!isInjuredmode{userid} || isDeathmode{userid})
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้รับบาดเจ็บหรือผู้เล่นนั้นตายแล้ว");

	ResetPlayer(userid);
	ResetDamages(userid);
	isDeathmode{userid}=false;
	deathtime[userid]=0;
	isInjuredmode{userid}=false;
	ClearAnimations(userid);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เสร็จสิ้นการดำเนินการกับ %s", ReturnRealName(playerid), ReturnRealName(userid));
	return 1;
}

CMD:putinambu(playerid, params[])
{
	new
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_TYPE_MEDIC)
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับหน่วยงานแพทย์เท่านั้น");

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/putinambu [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นตัดการเชื่อมต่อหรือไม่ได้อยู่ใกล้คุณ");

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถเคลื่อนย้ายตัวเองใส่รถพยาบาลได้");

	for(new i=0;i!=MAX_VEHICLES;i++) if (IsValidVehicle(i) && (GetPlayerVehicleID(playerid) == i || IsPlayerNearBoot(playerid, i, 3.0)))
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีที่ว่างสำหรับผู้ป่วย");

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s เคลื่อนย้ายตัว %s ไว้บน %s", ReturnRealName(playerid), ReturnRealName(userid), g_arrVehicleNames[GetVehicleModel(i) - 400]);

		TogglePlayerControllable(userid, 1);
		return 1;
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใกล้ท้ายหรือภายในยานพาหนะ");
	return 1;
}

GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

GetVehicleMaxSeats(vehicleid)
{
    new const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

CMD:checkhacker(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");


	new Player_Weapons[13], Player_Ammos[13], bool:success;

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[Check Weapon&Ammo SYSTEM]___________________________");

	foreach(new i : Player)
	{

		for(new wep = 1;wep <= 12;wep++)
		{
			GetPlayerWeaponData(i,wep,Player_Weapons[wep], Player_Ammos[wep]);

			if((Player_Weapons[wep] != 0 && playerData[i][pGuns][wep] != Player_Weapons[wep]) || playerData[i][pAmmo][wep] != Player_Ammos[wep])
			{
				format(szString, sizeof(szString), "[ID:%d]%s SERVER: %s(%d) | CLIENT: %s(%d)", i, ReturnRealName(i), ReturnWeaponName(playerData[i][pGuns][wep]), playerData[i][pAmmo][wep], ReturnWeaponName(Player_Weapons[wep]), Player_Ammos[wep]);
				SendClientMessage(playerid, COLOR_LIGHTRED, szString);
				success = true;
			}
			//printf("SERVER: %s(%d) | CLIENT: %s(%d)", ReturnWeaponName(playerData[playerid][pGuns][wep]), playerData[playerid][pAmmo][wep], ReturnWeaponName(Player_Weapons[wep]), Player_Ammos[wep]);
			
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบข้อมูลผู้เล่นที่เสกอาวุธหรือกระสุน");
	SendClientMessage(playerid, COLOR_WHITE, "ใช้ /resetweapons เพื่อให้อาวุธทั้งหมดตรงตามระบบ");
	return 1;
}

CMD:checkafk(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");


	new bool:success;

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[AFK SYSTEM]___________________________");

	new str[60];
	foreach(new i : Player)
	{
		if(IsAFK{i}) {
			format(str, sizeof(str), "[ID:%d]%s %d วินาที", i, ReturnRealName(i), AFKCount[i]);
			SendClientMessage(playerid, COLOR_LIGHTRED, str);
			success = true;
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบข้อมูลผู้เล่นที่ AFK");
	return 1;
}

CMD:checkmask(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");


	new bool:success, mname[MAX_MASK_NAME];

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[MASK SYSTEM]___________________________");

	foreach(new i : Player)
	{
		if(bf_get(player_bf[i], IS_MASKED)) {
			GetPVarString(i, "MaskedName", mname, MAX_MASK_NAME);
			format(szString, sizeof(szString), "[ID:%d]%s: %s", i, ReturnPlayerName(i), mname);
			SendClientMessage(playerid, COLOR_LIGHTRED, szString);
			success = true;
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบข้อมูลผู้เล่นที่ใส่ OOC Mask");
	return 1;
}

CMD:isafk(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");


	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/isafk [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(IsAFK{userid}) {
		format(szString, sizeof(szString), "[ID:%d] %s %d วินาที", userid, ReturnRealName(userid), AFKCount[userid]);
		SendClientMessage(playerid, COLOR_GRAD2, szString);
	}
	else {
        SendClientMessage(playerid, COLOR_GRAD2, "ผู้เล่นนั้นไม่ได้ AFK");
	}
	return 1;
}

CMD:resetweapons(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/resetweapons [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	ResetPlayerWeapons(userid);
	for (new i = 0; i < 13; i ++) GivePlayerWeapon(userid, playerData[userid][pGuns][i], playerData[userid][pAmmo][i]);

	return 1;
}

CMD:clearweapons(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/clearweapons [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	ResetWeapons(userid);

	Log_Write("logs/admin_action.txt", "[%s] [/clearweapons] %s clear weapon %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(userid));


	return 1;
}

CMD:clearsaveweapons(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/clearsaveweapons [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	FullResetPlayerWeapons(userid);

	Log_Write("logs/admin_action.txt", "[%s] [/clearsaveweapons] %s clear saving weapon %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(userid));


	return 1;
}

CMD:clearchat(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	for(new i = 0; i < 100; ++i)
	{
		SendClientMessageToAll(COLOR_WHITE, " ");
	}
	return 1;
}

CMD:saveall(playerid)
{
	if(playerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

    GlobalSaving();
    SendClientMessage(playerid, COLOR_WHITE, "คุณได้บันทึกข้อมูลทั้งหมดแล้ว");

	return 1;
}

CMD:cargo(playerid, params[]) {

	if(playerData[playerid][pJob] != JOB_TRUCKER && playerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ใช่ Trucker");


	new option[16], amount, id = -1;

	if (sscanf(params, "s[16]D(0)", option, amount)) {

	    SendClientMessage(playerid, COLOR_GRAD3, "Available commands:");
	    SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo list "EMBED_WHITE"- แสดงรายการสินค้าที่บรรจุอยู่ในยานพาหนะที่ปลดล็อกอยู่ใกล้ ๆ");
	    SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo listpickup [ID] "EMBED_WHITE"- ถ้าคำสั่ง "EMBED_YELLOW"/cargo list"EMBED_WHITE" บัค ใช้ทางเลือกนี้; [ID] คือหมายเลขที่อยู่ในรายการ");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo place "EMBED_WHITE"- วางลังสินค้าที่ถืออยู่ไปที่ยานพาหนะใกล้ ๆ");
        //SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo fork "EMBED_WHITE"- ขนส่งสินค้าในยานพาหนะที่ใกล้ที่สุดเพื่อยกไปยังรถโฟล์คลิฟท์ของคุณ");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo putdown "EMBED_WHITE"- วางลังสินค้าที่ถืออยู่ลงพื้น");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo pickup "EMBED_WHITE"- หยิบลังสินค้าขึ้นมาจากพื้น");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo buy "EMBED_WHITE"- ช่วยให้คุณสามารถซื้อสินค้าจากอุตสาหกรรมได้");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/cargo sell "EMBED_WHITE"- ขายสินค้าให้กับอุตสาหกรรม / ธุรกิจ");
		return 1;
	}
	if(!strcmp(option, "list", true))
	{
	    new vehicleid = -1;

	    if(!IsPlayerInAnyVehicle(playerid)) vehicleid = Vehicle_Nearest(playerid);
		else vehicleid = GetPlayerVehicleID(playerid);

		if(IsVehicleTrailer(vehicleid)) return SendClientMessage(playerid, COLOR_YELLOW, "ใช้คำสั่ง:"EMBED_WHITE" /trailer cargo");

		if(vehicleid >= 0 && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid) || !IsTrunkVehicle(vehicleid)))
		{
		    new count, str[512];

			for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
			{
				format(str, 512, "%s{000000}%02d\t{E5FF00}%s\t%d %s\n", str, i + 1, g_arrIndItemNames[i], CoreVehicles[vehicleid][vehicleCrate][i], ReturnCargoUnit(i));
				count++;
			}
			if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Vehicle Cargo", "{E5FF00}ไม่มีสินค้าที่บรรจุในยานพาหนะคันนี้", "Close", "");
			else Dialog_Show(playerid, VehicleCargoStorage, DIALOG_STYLE_TABLIST, "Vehicle Cargo", str, "Pick Up", "Close");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "ไม่พบยานพาหนะที่"EMBED_YELLOW"ปลดล็อก"EMBED_WHITE"กระโปรงหลังรถ");
	}
	else if(!strcmp(option, "listpickup", true))
	{
		if(amount > 0)
		{
		    amount--;

			if(carryCrate[playerid] == -1) {

				new vehicleid = Vehicle_Nearest(playerid);

				if(IsVehicleTrailer(vehicleid)) return SendClientMessage(playerid, COLOR_YELLOW, "ใช้คำสั่ง:"EMBED_WHITE" /trailer cargo");

				if(vehicleid >= 0 && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid) || !IsTrunkVehicle(vehicleid)) && IsPlayerNearBoot(playerid, vehicleid))
				{
	                if(IsVehicleCargo(amount) == -1) {
						if(CoreVehicles[vehicleid][vehicleCrate][amount])
						{
						    CoreVehicles[vehicleid][vehicleCrate][amount]--;
						    UpdateVehicleObject(vehicleid);

						    carryCrate[playerid] = amount;
							ApplyAnimation(playerid, "CARRY","liftup105", 4.1, 0, 0, 0, 0, 0, 1);
							SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(amount), "strongboxes", true) ? 1 : 0));
							return 1;
						}
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "ค่าไม่ถูกต้อง");
	}
	else if(!strcmp(option, "place", true))
	{
    	if(carryCrate[playerid] != -1) {


		    new vid = Vehicle_Nearest(playerid);

			if(vid && (GetTrunkStatus(vid) || IsVehicleTrunkBroken(vid) || !IsTrunkVehicle(vid)) && IsPlayerNearBoot(playerid, vid))
			{
				if(IsVehicleTransport(vid, carryCrate[playerid]))
				{
					if(CountVehicleSlot(vid) + GetCargoSlot(carryCrate[playerid]) <= GetVehicleCargoSlot(GetVehicleModel(vid)))
					{
						CoreVehicles[vid][vehicleCrate][carryCrate[playerid]]++;
						UpdateVehicleObject(vid);

						ApplyAnimation(playerid, "CARRY","putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
						RemovePlayerAttachedObject(playerid, FREESLOT9);
						carryCrate[playerid] = -1;

						new targetid = INVALID_PLAYER_ID;
					    if ((targetid = GetVehicleDriver(vid)) != INVALID_PLAYER_ID)
					    {
					        new vehicleid = GetPlayerVehicleID(targetid);
					        if(IsTrucker(vehicleid))
					        {
						        new model = GetVehicleModel(vehicleid);
						        new trailerid = GetVehicleTrailer(vehicleid);
								if(GetVehicleCargoLoad((!trailerid) ? vid : trailerid) != -1 && !IsVehicleCargoSkill(model, playerData[targetid][pJobRank])) RemovePlayerFromVehicle(targetid), SendClientMessage(targetid, COLOR_WHITE, "ทักษะของคุณมีไม่เพียงพอสำหรับการขนส่งสินค้าบนยานพาหนะคันนี้");
							}
						}

					}
					else SendClientMessage(playerid, COLOR_WHITE, "ไม่สามารถบรรจุสินค้าได้มากกว่านี้แล้ว");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "ยานพาหนะของคุณไม่สามารถขนส่งสินค้าชนิดนี้ได้");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "ไม่พบยานพาหนะที่"EMBED_YELLOW"ปลดล็อก"EMBED_WHITE"กระโปรงหลังรถรอบ ๆ ตัวคุณ");
		}
    	else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ได้ถือลังไม้อยู่");
	}
	/*else if(!strcmp(option, "fork", true))
	{

	}*/
	else if(!strcmp(option, "putdown", true))
	{
    	if(carryCrate[playerid] != -1) {

			new cid=-1, count;

			for(new i = 0; i < MAX_CRATE; i++) {
				if(CrateInfo[i][cOn] && CrateInfo[i][cOwned] == playerData[playerid][pID]) count++;
				if(!CrateInfo[i][cOn] && cid == -1) cid = i;
			}

			if(cid != -1 && count <= 2)
			{
		     	ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		      	SetTimerEx("PutdownCrate", 900, 0, "iii", playerid, cid, carryCrate[playerid]);
	    	    carryCrate[playerid] = -1;
    	    }
    	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถวางลังไม้ได้ในขณะนี้");
    	}
    	else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ได้ถือลังไม้อยู่");
	}
	else if(!strcmp(option, "pickup", true))
	{
    	if(carryCrate[playerid] == -1) {

			new bool:success;
			for(new i = 0; i < MAX_CRATE; i++) {
				if(CrateInfo[i][cOn]) {
					if(IsPlayerInRangeOfPoint(playerid,3.0,CrateInfo[i][cX],CrateInfo[i][cY],CrateInfo[i][cZ]))
					{
					   	ApplyAnimation(playerid, "CARRY","liftup", 4.1, 0, 0, 0, 0, 0, 1);
						SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(CrateInfo[i][cID]), "ลังเหล็ก", true) ? 1 : 0));
						carryCrate[playerid] = CrateInfo[i][cID];
						DestroyDynamicObject(CrateInfo[i][cObject]);
						DestroyDynamic3DTextLabel(CrateInfo[i][clabel]);
                        CrateInfo[i][cOn] = 0;
	                    success = true;
					    break;
				    }
				}
			}

			if(!success) SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอะไรอยู่ที่นั้น..");
    	}
    	else SendClientMessage(playerid, COLOR_WHITE, "คุณกำลังถือลังไม้อยู่");
	}
	else if(!strcmp(option, "buy", true))
	{
		if ((id = Industry_Nearest(playerid, 5.0)) != -1 && !IndustryData[StorageData[id][in_industryid]][in_close])
		{
		    new type = -1;
			if((type = IsVehicleCargo(StorageData[id][in_item])) != -1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

				    if(type != 2) {
					    if (amount <= 0) {

							SendClientMessage(playerid, -1, "คุณต้องระบุจำนวนของสินค้าใช้ {A4D247}/cargo buy [จำนวน]");

							switch(type)
							{
							    case 0: //Loose
							    {
									SendClientMessage(playerid, -1, "Dump trailer ความจุ: {E5FF00}30 ตัน");
									SendClientMessage(playerid, -1, "Flatbed ความจุ:  {E5FF00}16 ตัน");
							    }
							    case 1: //Liquids
							    {
									SendClientMessage(playerid, -1, "Tanker ความจุ: {E5FF00}40 ลูกบาศก์เมตร");
							    }
							}
					        return 1;
					    }
				    }
				    else amount = 1;

				    new vehicleid = GetPlayerVehicleID(playerid);

					if(IsVehicleTransport(vehicleid, StorageData[id][in_item]))
					{
					    if(IsVehicleCargoSkill(GetVehicleModel(vehicleid), playerData[playerid][pJobRank])) {
							if(!StorageData[id][in_trading_type]/* && IndustryData[StorageData[id][in_industryid]][in_type] != 1*/){ // for sale and not secondary

	                            if(playerData[playerid][pCash] >= StorageData[id][in_price] * amount) {

	                                new trailerid = GetVehicleTrailer(vehicleid);

									if(CountVehicleSlot((!trailerid) ?  vehicleid : trailerid) + (GetCargoSlot(StorageData[id][in_item]) * amount) <= GetVehicleCargoSlot(GetVehicleModel((!trailerid) ?  vehicleid : trailerid)))
									{
									  	if(trailerid)
									  	{
											if (!GetTrunkStatus(trailerid))
											{
									         	SendClientMessage(playerid, COLOR_WHITE, "รถพ่วงล็อกอยู่");
									         	return 1;
											}
									 	}
									    if(type == 2) {
											CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleCrate][StorageData[id][in_item]]++;
											UpdateVehicleObject((!trailerid) ?  vehicleid : trailerid);

										    StorageData[id][in_stock]--;
				                            UpdateStorage(id);

				                            playerData[playerid][pCash]-=StorageData[id][in_price];
									    }
									    else
									    {

									        new cargo_invehicle = -1;
									        if((cargo_invehicle = GetVehicleCargoLoad((!trailerid) ?  vehicleid : trailerid)) == -1 || StorageData[id][in_item] == cargo_invehicle)
									        {

										        if(!CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleIsCargoLoad])
										        {
												    StorageData[id][in_stock] -= amount;
						                            UpdateStorage(id);

						                            playerData[playerid][pCash]-=StorageData[id][in_price] * amount;

													CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleIsCargoLoad] = amount;
													CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleCargoTime] = amount * 2;
													CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleCargoStorage] = id;
													CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleCargoPlayer] = playerid;
													CoreVehicles[(!trailerid) ?  vehicleid : trailerid][vehicleCargoAction] = 0;

													GameTextForPlayer(playerid, "~r~Cargo is being (un)loaded,~n~~b~Please wait...", 1000, 3);
												}
												else SendClientMessage(playerid, COLOR_WHITE, "รถบรรทุกกำลังบรรจุสินค้าอยู่ในขณะนี้");
											}
											else SendClientMessage(playerid, COLOR_WHITE, "ไม่สามารถขนส่งสินค้าต่างชนิดกันได้");
										}
									}
									else SendClientMessage(playerid, COLOR_WHITE, "ไม่สามารถขนส่งสินค้าได้มากกว่านี้แล้ว");
	                            }
	                          	else SendClientMessage(playerid, COLOR_WHITE, "คุณมีเงินไม่เพียงพอ");
	                        }
	                        else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถซื้ออะไรในอุตสาหกรรมนี้ได้");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "ทักษะของคุณมีไม่เพียงพอสำหรับการขนส่งสินค้าบนยานพาหนะคันนี้");
					}
					else SendClientMessage(playerid, -1, "ยานพาหนะของคุณไม่สามารถขนส่งสินค้าชนิดนี้ได้");
				}
				else SendClientMessage(playerid, -1, "คุณต้องอยู่ในยานพาหนะเพื่อซื้อสินค้าชนิดนี้");
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(carryCrate[playerid] == -1) {
                        if(!StorageData[id][in_trading_type] /*&& IndustryData[StorageData[id][in_industryid]][in_type] != 1*/){ // for sale and not secondary
							if(StorageData[id][in_stock])
							{
	                            if(playerData[playerid][pCash] >= StorageData[id][in_price]) {
		                            StorageData[id][in_stock]--;
		                            UpdateStorage(id);

	                                carryCrate[playerid] = StorageData[id][in_item];

		                            playerData[playerid][pCash]-=StorageData[id][in_price];

		                            ApplyAnimation(playerid, "CARRY","liftup", 4.1, 0, 0, 0, 0, 0, 1);

									SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(StorageData[id][in_item]), "ลังเหล็ก", true) ? 1 : 0));
	                            }
	                          	else SendClientMessage(playerid, COLOR_WHITE, "คุณมีเงินไม่เพียงพอ");
                          	}
                          	else SendClientMessage(playerid, COLOR_WHITE, "อุตสาหกรรมนี้ว่างเปล่า");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถซื้ออะไรในอุตสาหกรรมนี้ได้");
					}
					else SendClientMessage(playerid, COLOR_WHITE, "คุณกำลังถือลังไม้อยู่");
				}
				else SendClientMessage(playerid, -1, "คุณต้องซื้อสินค้านี้ด้วยการเดินเท้า");
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอุตสาหกรรมที่นี่");
	}
	else if(!strcmp(option, "sell", true))
	{
		if ((id = nearBiz_var[playerid]) != -1) {

			new type = -1;

			new cargotype = GetProductCargo(BizInfo[id][bType]);

			if((type = IsVehicleCargo(cargotype)) != -1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

					if(type != 2) {
						if (amount <= 0) {

							SendClientMessage(playerid, -1, "คุณต้องระบุจำนวนของสินค้าใช้ {A4D247}/cargo sell [จำนวน]");
						 	return 1;
						}
					}
					else amount = 1;

					if(BizInfo[id][bPriceProd] && BizInfo[id][bTill] >= BizInfo[id][bPriceProd] * amount)
					{
					    new vehicleid = GetPlayerVehicleID(playerid);
	                    new trailerid = GetVehicleTrailer(vehicleid);
						if(trailerid)
						{
							if (!GetTrunkStatus(trailerid))
							{
								SendClientMessage(playerid, COLOR_WHITE, "รถพ่วงล็อกอยู่");
								return 1;
							}
							vehicleid = trailerid;
						}


						if(CoreVehicles[vehicleid][vehicleCrate][cargotype] >= amount && amount > 0) {
						    if(BizInfo[id][bPriceProd]) {
								if(GetBusinessCargoCanBuy(id)) {
									if(type == 2) {
										CoreVehicles[vehicleid][vehicleCrate][cargotype]--;
										UpdateVehicleObject(vehicleid);

										BizInfo[id][bProducts] += GetProductPerCargo(BizInfo[id][bType]);
										BizInfo[id][bTill]-=BizInfo[id][bPriceProd];

										UpdateBizInfo(id);

										playerData[playerid][pCash]+=BizInfo[id][bPriceProd];
									}
									else
									{
										if(!CoreVehicles[vehicleid][vehicleIsCargoLoad])
										{
											CoreVehicles[vehicleid][vehicleIsCargoLoad] = amount;
											CoreVehicles[vehicleid][vehicleCargoTime] = amount * 2;
											CoreVehicles[vehicleid][vehicleCargoStorage] = id;
											CoreVehicles[vehicleid][vehicleCargoPlayer] = playerid;
											CoreVehicles[vehicleid][vehicleCargoAction] = 1;
											CoreVehicles[vehicleid][vehicleCargoType] = 1;

											GameTextForPlayer(playerid, "~r~Cargo is being (un)loaded,~n~~b~Please wait...", 1000, 3);
										}
										else SendClientMessage(playerid, COLOR_WHITE, "รถบรรทุกกำลังถ่ายสินค้าอยู่ในขณะนี้");
									}
								}
								else SendClientMessage(playerid, COLOR_WHITE, "จำนวนสินค้าเกินความต้องการของธุรกิจนี้");
							}
							else SendClientMessage(playerid, COLOR_WHITE, "ธุรกิจนี้ไม่รับสินค้าใด ๆ อีกแล้ว");
	                   	}
	                   	else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถขายสินค้าชนิดนี้ได้");

					}
					else SendClientMessage(playerid, COLOR_WHITE, "จำนวนมากเกินกว่าที่ธุรกิจนี้จะรับซื้อ");
				}
				else SendClientMessage(playerid, -1, "คุณต้องอยู่ในยานพาหนะเพื่อขายสินค้าชนิดนี้");
			}
			else
			{
				if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {
				    if(BizInfo[id][bPriceProd] && BizInfo[id][bTill] >= BizInfo[id][bPriceProd]) {
					    if(cargotype == carryCrate[playerid]) {
							if(GetBusinessCargoCanBuy(id)) {
								BizInfo[id][bProducts] += GetProductPerCargo(BizInfo[id][bType]);
								carryCrate[playerid] = -1;
								playerData[playerid][pCash]+=BizInfo[id][bPriceProd];
								BizInfo[id][bTill]-=BizInfo[id][bPriceProd];
								ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
								SetTimerEx("PlaceCrate", 900, 0, "i", playerid);
							} else SendClientMessage(playerid, COLOR_WHITE, "ธุรกิจนี้เต็มแล้ว");
						} else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถขายสินค้าชนิดนี้ได้");
     				} else SendClientMessage(playerid, COLOR_WHITE, "ธุรกิจนี้ไม่รับซื้อสินค้า");
				} else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ได้ถือลังไม้อยู่");
			}
		}

		else if ((id = Industry_Nearest(playerid, 5.0)) != -1 && !IndustryData[StorageData[id][in_industryid]][in_close])
		{
		    new type = -1;
			if((type = IsVehicleCargo(StorageData[id][in_item])) != -1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

				    if(type != 2) {
					    if (amount <= 0) {

							SendClientMessage(playerid, -1, "คุณต้องระบุจำนวนของสินค้าใช้ {A4D247}/cargo sell [จำนวน]");
					        return 1;
					    }
				    }
				    else amount = 1;

				    new vehicleid = GetPlayerVehicleID(playerid);
                    new trailerid = GetVehicleTrailer(vehicleid);
					if(trailerid)
					{
						if (!GetTrunkStatus(trailerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "รถพ่วงล็อกอยู่");
							return 1;
						}
						vehicleid = trailerid;
					}

					//if(StorageData[id][in_trading_type] || StorageData[id][in_item] == GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid)){ // want and same product
					if(StorageData[id][in_item] == GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid)){ // want and same product

						if(CoreVehicles[vehicleid][vehicleCrate][StorageData[id][in_item]] >= amount)
						{
							if(StorageData[id][in_stock] + amount <= StorageData[id][in_maximum])
							{
								if(type == 2) {
									CoreVehicles[vehicleid][vehicleCrate][StorageData[id][in_item]]--;
									UpdateVehicleObject(vehicleid);

									StorageData[id][in_stock]++;
									UpdateStorage(id);

									playerData[playerid][pCash]+=StorageData[id][in_price];
								}
								else
								{
									if(!CoreVehicles[vehicleid][vehicleIsCargoLoad])
									{
										StorageData[id][in_stock] += amount;
										UpdateStorage(id);

										CoreVehicles[vehicleid][vehicleIsCargoLoad] = amount;
										CoreVehicles[vehicleid][vehicleCargoTime] = amount * 2;
										CoreVehicles[vehicleid][vehicleCargoStorage] = id;
										CoreVehicles[vehicleid][vehicleCargoPlayer] = playerid;
										CoreVehicles[vehicleid][vehicleCargoAction] = 1;
										CoreVehicles[vehicleid][vehicleCargoType] = 0;

										GameTextForPlayer(playerid, "~r~Cargo is being (un)loaded,~n~~b~Please wait...", 1000, 3);
									}
									else SendClientMessage(playerid, COLOR_WHITE, "รถบรรทุกกำลังถ่ายสินค้าอยู่ในขณะนี้");
								}
							}
							else SendClientMessage(playerid, COLOR_WHITE, "อุตสาหกรรมนี้เต็มแล้ว");

						}
						else SendClientMessage(playerid, COLOR_WHITE, "จำนวนสินค้าไม่ถูกต้อง");
                   	}
                   	else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถขายสินค้าชนิดนี้ได้");

				}
				else SendClientMessage(playerid, -1, "คุณต้องอยู่ในยานพาหนะเพื่อขายสินค้าชนิดนี้");
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {
						//printf("StorageData[id][in_trading_type] %d && StorageData[id][in_item] %d == carryCrate[playerid] %d", StorageData[id][in_trading_type],StorageData[id][in_item],carryCrate[playerid]);
						if(StorageData[id][in_item] == carryCrate[playerid]){ // want and same product
							if(StorageData[id][in_stock] < StorageData[id][in_maximum])
							{
		                      	StorageData[id][in_stock]++;
		                       	UpdateStorage(id);

	                          	carryCrate[playerid] = -1;
		                      	playerData[playerid][pCash]+=StorageData[id][in_price];

						     	ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
						      	SetTimerEx("PlaceCrate", 900, 0, "i", playerid);

                          	}
                          	else SendClientMessage(playerid, COLOR_WHITE, "อุตสาหกรรมนี้เต็มแล้ว");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถขายสินค้าชนิดนี้ได้");
					}
					else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ได้ถือลังไม้อยู่");
				}
				else SendClientMessage(playerid, -1, "คุณต้องขายสินค้านี้บนพื้น");
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอุตสาหกรรมที่นี่");
	}
	return 1;
}

CMD:trailer(playerid, params[])
{
	new option[8], vehicleid, trailerid;

	if (sscanf(params, "s[8]", option))
	{
	    SendClientMessage(playerid, COLOR_GRAD3, "Available commands:");
	    SendClientMessage(playerid, -1, ""EMBED_YELLOW"/trailer lock "EMBED_WHITE"- ล็อก/ปลดล็อก รถพ่วงที่ติดอยู่กับยานพาหนะของคุณ");
	    SendClientMessage(playerid, -1, ""EMBED_YELLOW"/trailer detach "EMBED_WHITE"- ถอดรถพ่วงออกจากยานพาหนะของคุณ");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/trailer lights "EMBED_WHITE"- เปิด/ปิด หลอดไฟของรถพ่วง");
        SendClientMessage(playerid, -1, ""EMBED_YELLOW"/trailer cargo "EMBED_WHITE"- แสดงอะไรก็ตามที่บรรจุอยู่ในรถพ่วง");
        return 1;
	}

	if ((vehicleid = GetPlayerVehicleID(playerid)) && (trailerid = GetVehicleTrailer(vehicleid)))
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่คนขับ");

		if(!strcmp(option, "lock", true))
		{
		    new str[128];
			if (GetTrunkStatus(trailerid))
			{
			    format(str, sizeof(str), "~r~%s Locked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
			    GameTextForPlayer(playerid, str, 2000, 4);
				SetTrunkStatus(trailerid, false);
			}
			else
			{
				format(str, sizeof(str), "~g~%s Unlocked", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
    			GameTextForPlayer(playerid, str, 2000, 4);
				SetTrunkStatus(trailerid, true);
			}
		}
		else if(!strcmp(option, "detach", true))
		{
		    DetachTrailerFromVehicle(vehicleid);
		}
		else if(!strcmp(option, "lights", true))
		{
			switch (GetLightStatus(trailerid))
			{
			    case false:
			    {
			        SetLightStatus(trailerid, true);
			        GameTextForPlayer(playerid, "~g~Trailer Lights On", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(trailerid, false);
				    GameTextForPlayer(playerid, "~r~Trailer Lights Off", 2000, 4);
				}
			}
		}
		else if(!strcmp(option, "cargo", true))
		{
			if (GetTrunkStatus(trailerid))
			{
			    new count, str[512];

				for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[trailerid][vehicleCrate][i])
				{
					format(str, 512, "%s{000000}%02d\t{E5FF00}%s\t%d %s\n", str, i + 1, g_arrIndItemNames[i], CoreVehicles[trailerid][vehicleCrate][i], ReturnCargoUnit(i));
					count++;
				}
				if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trailer Cargo", "{E5FF00}ไม่มีสินค้าที่บรรจุในรถพ่วงนี้", "Close", "");
				else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Trailer Cargo", str, "Close", "");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "รถพ่วงล็อกอยู่");
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "คุณต้องอยู่บนยานพาหนะที่มีรถพ่วงติดอยู่");

	return 1;
}

GetVehicleCargoLoad(vehicleid)
{
	for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i]) return i;
	return -1;
}

IsVehicleCargoSkill(modelid, skill)
{
	switch(modelid)
	{
	    case 600, 605, 543, 422, 478, 554: return true;
	    case 413, 459, 482: if(skill > 0) return true;
	    case 440, 498: if(skill > 1) return true;
	    case 499, 414, 578, 443, 428: if(skill > 2) return true;
	    case 456, 455: if(skill > 3) return true;
	    case 403, 514, 515: if(skill > 4) return true;
	}

	return false;
}

IsTrucker(vehicleid)
{
    if(!vehicleid) return false;

	switch(GetVehicleModel(vehicleid)) {
		case 600, 605, 543, 422, 478, 554, 413, 459, 482, 440, 498, 499, 414, 578, 443, 428, 456, 455, 403, 514, 515: return true;
	}
	return false;
}

IsVehicleTrailer(vehicleid)
{
	if(!vehicleid) return false;

	switch(GetVehicleModel(vehicleid)) {
		case 403, 514, 515: return true;
	}
	return false;
}


IsABoatModel(model)
{
	switch (model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

IsAPlaneModel(model)
{
	switch (model) {
		case 417, 425, 447, 460, 469, 476, 487, 488, 497, 511..513, 519, 520, 548, 553, 563, 577, 592, 593: return 1;
	}
	return 0;
}

IsACopCar(vehicleid)
{
    if(vehicleid != INVALID_VEHICLE_ID) {
		foreach(new i : sv_servercar)
		{
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && (FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_POLICE || FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_SASD)) return i;
		}
	}
	return -1;
}

IsAFDCar(vehicleid)
{
    if(vehicleid != INVALID_VEHICLE_ID) {
		foreach(new i : sv_servercar)
		{
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_MEDIC) return i;
		}
	}
	return -1;
}

IsAFactionCar(vehicleid, factionid)
{
    if(vehicleid != INVALID_VEHICLE_ID) {
		foreach(new i : sv_servercar)
		{
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] == factionid) return i;
		}
	}
	return -1;
}
/*

IsNearBoat(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		for(new c=0;c<MAX_VEHICLES;c++)
		{
			switch (GetVehicleModel(c)) {
				case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
				{
				    if(IsPlayerInRangeOfVehicle(playerid, c, 7.0)) return 1;
				}
			}
		}
	}
	return 0;
}*/

IsNearBoatID(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		for(new c=0;c<MAX_VEHICLES;c++)
		{
			switch (GetVehicleModel(c)) {
				case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
				{
				    if(IsPlayerInRangeOfVehicle(playerid, c, 7.0)) return c;
				}
			}
		}
	}
	return -1;
}

IsVehicleRental(vehicleid)
{
	for(new c=0;c<sizeof(CarRent);c++) if(vehicleid == CarRent[c]) return 1;
	return 0;
}

IsVehicleDMV(vehicleid)
{
	for(new c=0;c<sizeof(CarDMV);c++) if(vehicleid == CarDMV[c]) return 1;
	return 0;
}

GetVehicleRentalPrice(model)
{
	switch(model)
	{
	    case 492: return 2500;
	    case 422: return 3000;
	}
	return 0;
}

IsVehicleRented(vehicleid)
{
	foreach (new i : Player)
	{
		if(RentCarKey[i] == vehicleid) return 1;
	}
	return 0;
}

IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

IsAtBlackMarket(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 2520.3499,-1486.5232,23.9993)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 6, 2457.5876,-1953.9668,13.4013)) return 1;
	return 0;
}

IsAtPullMachine(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, 2221.9202,1603.9509,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.6489,1619.8030,1006.1794)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.6375,1617.8456,1006.1818)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.6665,1615.4670,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.7102,1613.5083,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2216.3066,1603.8116,1006.1819)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.2632,1603.9635,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2219.9624,1603.8823,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.5469,1593.6232,1006.1872)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.7212,1591.6628,1006.1860)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.6318,1589.3186,1006.1841)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2218.6702,1587.3612,1006.1827)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.2188,1608.8790,1006.1860)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.1372,1610.8438,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.1946,1612.9305,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.1143,1614.8889,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.2329,1616.8300,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2255.1089,1618.7874,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2268.5330,1606.6115,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2270.4907,1606.7588,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2272.5791,1606.6498,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2274.5386,1606.7114,1006.1797)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 11.0,1963.8254,1037.0972,992.4745) || IsPlayerInRangeOfPoint(playerid,11.0,1961.2341,1042.9020,992.4688) || IsPlayerInRangeOfPoint(playerid, 11.0,1956.9388,1047.3190,992.4688) || IsPlayerInRangeOfPoint(playerid,11.0,1963.8536,998.6488,992.4688)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 11.0,1961.3259,992.5931,992.4688) || IsPlayerInRangeOfPoint(playerid,11.0,1957.0258,988.2960,992.4688)) return 1;

	return 0;
}

IsVehicleRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistantaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistantaCar <= range) return 1;
    return 0;
}

IsABicycle(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
		case 481, 509, 510: return true;
	}
	return 0;
}

IsABike(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 471, 521, 522, 581, 586: return true;
	}
	return 0;
}

IsATaxi(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 420 || model == 438);
}


IsDonateCar(model)
{
	switch(model)
	{
	    case 481, 509:
	    {
	        return 1;
	    }
 	    case 477, 471:
	    {
	        return 2;
	    }
 	    case 429, 541, 521, 468:
	    {
	        return 3;
	    }
	}
	return false;
}

IsCopCar(model)
{
	switch(model)
	{
	    case 490, 497, 523, 528, 596, 597, 598, 599, 601: return 1;
	}
	return false;
}

IsMedicCar(model)
{
	switch(model)
	{
	    case 416: return 1;
	}
	return false;
}

ReturnCargoUnit(cargoid)
{
	new name[16], id = -1;
	id = IsVehicleCargo(cargoid);

	switch(id)
	{
	    case 0: format(name, 16, "ตัน");
	    case 1: format(name, 16, "ลูกบาศก์เมตร");
	    case 2: {
	        switch(cargoid)
	        {
	            case 4: format(name, 16, "ท่อน");
	            case 16: format(name, 16, "หม้อแปลง");
	            case 17: format(name, 16, "ยานพาหนะ");
	            case 22: format(name, 16, "พาเลท");
	        }
	    }
	    default: format(name, 16, "กล่อง");
	}
	return name;
}

ReturnCargoUnits(cargoid)
{
	new name[16];

	switch(cargoid)
	{
	    //scrap metal, cotton, cereal, malt, aggregate
		case 3, 5, 9, 25, 18: format(name, 16, "ตัน");
		//fuel, dyes
		case 13, 0: format(name, 16, "ลูกบาศก์เมตร");
		//transformer, vehicles, wood logs, bricks
		case 16: format(name, 16, "หม้อแปลง");
		case 17: format(name, 16, "ยานพาหนะ");
		case 4: format(name, 16, "ท่อน");
		case 22: format(name, 16, "พาเลท");
		//Milk
		case 6: format(name, 16, "ลิตร");
		//weapons, coins
	    case 19, 2: format(name, 16, "ลังเหล็ก");
		//other
	    default: format(name, 16, "ลัง");
	}
	return name;
}

Dialog:VehicleCargoStorage(playerid, response, listitem, inputtext[]) {
	if(response)
	{
	    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "คุณอยู่ในรถ!");

        if(carryCrate[playerid] == -1) {

			new count, cargoid, vehicleid = Vehicle_Nearest(playerid);

            if(IsVehicleTrailer(vehicleid)) vehicleid = GetVehicleTrailer(vehicleid);

			if(vehicleid >= 0 && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid) || !IsTrunkVehicle(vehicleid)) && IsPlayerNearBoot(playerid, vehicleid))
			{
				for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
				{
					if(listitem == count)
					{
						cargoid = i;
						break;
					}
					count++;
				}

                if(IsVehicleCargo(cargoid) == -1) {
					if(CoreVehicles[vehicleid][vehicleCrate][cargoid])
					{
					    CoreVehicles[vehicleid][vehicleCrate][cargoid]--;
					    UpdateVehicleObject(vehicleid);

					    carryCrate[playerid] = cargoid;
						ApplyAnimation(playerid, "CARRY","liftup105", 4.1, 0, 0, 0, 0, 0, 1);
						SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(cargoid), "ลังเหล็ก", true) ? 1 : 0));
					}
					else SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอะไรอยู่ที่นั้น..");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "คุณไม่สามารถหยิบลังสินค้าชนิดนี้ได้");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "ไม่พบยานพาหนะที่"EMBED_YELLOW"ปลดล็อก"EMBED_WHITE"กระโปรงหลังรถ");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "คุณกำลังถือลังไม้อยู่");
	}
	return 1;
}

forward  PlaceCrate(playerid);
public PlaceCrate(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, FREESLOT9);
}

forward PickupCrate(playerid, type);
public PickupCrate(playerid, type)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	if(type) SetPlayerAttachedObject(playerid, FREESLOT9, 964, 5, 0.626, 0.164999, 0.115999, -77.2, -16, -83.4 , 1.0000, 1.0000, 1.0000);
	else SetPlayerAttachedObject(playerid, FREESLOT9, 2912, 1, -0.019, 0.713999, -0.076, 0, 87.1, -9.4, 1.0000, 1.0000, 1.0000);
}

CMD:uncarry(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:carry(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

forward PutdownCrate(playerid, id, cargoid);
public PutdownCrate(playerid, id, cargoid)
{
	new cargo_name[32];

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, FREESLOT9);

	if(!CrateInfo[id][cOn])
	{

        GetPlayerPos(playerid, CrateInfo[id][cX], CrateInfo[id][cY], CrateInfo[id][cZ]);
        
		new objectid;

		GetXYInFrontOfPlayer(playerid, CrateInfo[id][cX], CrateInfo[id][cY], 1.5);

		CrateInfo[id][cOn] = 1;
		CrateInfo[id][cID] = cargoid;
		CrateInfo[id][cOwned] = playerData[playerid][pID];

		if(!strcmp(ReturnCargoUnits(cargoid), "ลังเหล็ก", true)) objectid = 964;
		else objectid = 2912;

		format(cargo_name, 32, "%s", g_arrIndItemNames[cargoid]);
		CrateInfo[id][clabel] = CreateDynamic3DTextLabel(cargo_name, 0xFFFFFFFF,CrateInfo[id][cX], CrateInfo[id][cY], CrateInfo[id][cZ], 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 50.0);
		CrateInfo[id][cObject] = CreateDynamicObject(objectid,CrateInfo[id][cX], CrateInfo[id][cY], CrateInfo[id][cZ] - 0.9,0.0000000,0.0000000,0.0000000);

		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		//success = true;
		return 1;
	}
	//if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถวางลังไม้ได้ในขณะนี้");
	return 0;
}

UpdateVehicleObject(vehicleid)
{
/*	for(new i=0;i<6;i++) if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]))
	{
	    DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
	}
*/
	new model = GetVehicleModel(vehicleid), count;
	switch(model) {
	    case 422: {
	        count = CountVehicleSlot(vehicleid);
			for(new i=0;i!=3;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
				    CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.769999, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.159999, -1.839998, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}
				}
			}
	    }
	    case 543, 605: {
	        count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=2;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.769999, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}

				}
			}

	       /*

			for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.769999, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
	    }
		case 600: {
		    count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=2;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.92, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.92, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}
				}

			}

			/*for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.92, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.92, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
		}
		case 530: {
		    count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=3;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.009999, 0.484999, 0.634999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}
				}

			}

			/*for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.009999, 0.484999, 0.634999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
		}
		case 478: {
			count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=4;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 3: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}
				}

			}
	/*
			for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 3) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
			}*/
		}
		case 554: {
            if(CoreVehicles[vehicleid][vehicleCrate][22])
            {
                //bricks
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

                CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.000000, -1.754998, 0.859999, 0.000000, 0.000000, 0.000000); //Object Model: 1685 |
            }
            else {
	      		count = CountVehicleSlot(vehicleid);

				for(new i=0;i!=4;i++)
				{
				    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
				    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}

					if(i < count) {
						CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

						switch(i) {
							case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.294999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 3: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.414999, -2.405007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
       						case 4: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -2.410007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
	                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
						}
					}

				}
	        	/*for(new i=0;i<count;i++) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
					if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.294999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 3) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 4) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.414999, -2.405007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 5) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -2.410007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				}*/
			}
		}
		case 578: { // DFT-30
            if(CoreVehicles[vehicleid][vehicleCrate][4]) { // wood logs

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(18609, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.205000, -5.895015, 0.839999, 0.000000, 0.000000, 3.900000);
            }
			else if(CoreVehicles[vehicleid][vehicleCrate][22]) { // bricks

				count = floatround(CountVehicleSlot(vehicleid) / 6.0);

				for(new i=0;i!=3;i++)
				{
				    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
				    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}

					if(i < count) {
						CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

						switch(i) {
							case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.000000, -0.269999, 0.459999, 0.000000, 0.000000, 0.000000);
							case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.000000, -2.044999, 0.459999, 0.000000, 0.000000, 0.000000);
							case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.000000, -3.820039, 0.459999, 0.000000, 0.000000, 0.000000);
	                        default: DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
						}
					}

				}

			}
			else if(CoreVehicles[vehicleid][vehicleCrate][16]) { // transformer

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3273, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, -0.000000, -0.404999, 0.799999, 0.000000, 90.449951, -90.449951); //Object Model: 3273 |
			}
		}
		case 443: { // Packer
            if(CoreVehicles[vehicleid][vehicleCrate][17] == 1) {
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.205000, -5.895015, 0.839999, 0.000000, 0.000000, 3.900000);
			}
			else
			{
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.000000, 0.344999, 1.819998, 15.074999, 0.000000, 0.000000); //Object Model: 3593 |  CAR DESTROY
				CoreVehicles[vehicleid][vehicleObj][1] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][1], vehicleid, -0.005000, -6.455012, 0.024998, 15.074999, 0.000000, 0.000000); //Object Model: 3593 |  CAR DESTROY
			}
		}
	}
}

IsVehicleTransport(vehicleid, cargoid)
{
   // new trailerid = GetVehicleTrailer(vehicleid);

	if(IsVehicleTrailer(vehicleid)) vehicleid = GetVehicleTrailer(vehicleid);

    new model = GetVehicleModel(vehicleid);

	switch(model)
	{


		case 435, 591: { // Article Trailer 1 & Article Trailer 2
			switch(cargoid)
			{
				//crates, bricks
				case 1, 20, 12, 7, 24, 23, 11, 14, 15, 8, 10, 22, 21: return true;
			}
		}
		case 584: { // Petrol Trailer
			switch(cargoid)
			{
				//fuel, milk, dyes
				case 13, 6, 0: return true;
			}
		}
		case 450: { // Dump Trailer
			switch(cargoid)
			{
				//scrap metal, cotton, cereal, malt, aggregate
				case 3, 5, 9, 25, 18: return true;
			}
		}

	    case 443: if(cargoid == 17) return true; // vehicle
	    case 578: {
			switch(cargoid)
			{
				//transformer, vehicles, wood logs, bricks
				case 16, 17, 4, 22: return true;
			}
	    }
	    case 428: {
			switch(cargoid)
			{
				//coins, weapons
				case 2, 19: return true;
			}
	    }
	    case 455: { // Flatbed
			switch(cargoid)
			{
				//scrap metal, cotton, cereal, malt, aggregate
				case 3, 5, 9, 25, 18: return true;
			}
	    }
	    case 456, 499, 414, 554: { // Yankee, Benson, Mule, Yosemite
			switch(cargoid)
			{
			    //crates, bricks
 				case 1, 20, 12, 7, 24, 23, 11, 14, 15, 8, 10, 22, 21: return true;
            }
	    }
		case 498, 440, 482, 459, 413, 478, 422, 543, 605, 600: { //
			switch(cargoid)
			{
			    //crates
 				case 1, 20, 12, 7, 24, 23, 11, 14, 15, 8, 10, 21: return true;
            }
		}
	}
	return false;
}


IsVehicleCargo(cargoid) // Loose Material 0 | Liquids 1 | Other 2
{
	switch(cargoid)
	{
	    //scrap metal, cotton, cereal, malt, aggregate
		case 3, 5, 9, 25, 18: return 0;
		//fuel, milk, dyes
		case 13, 6, 0: return 1;
		//transformer, vehicles, wood logs, bricks
		case 16, 17, 4, 22: return 2;
	}
	return -1;
}


GetVehicleCargoSlot(model)
{
	switch(model)
	{
		case 600, 543, 605, 443: return 2;
		case 422: return 3;
		case 478: return 4;
		case 554: return 6;
		case 413, 459, 482: return 10;
		case 440, 498: return 12;
		case 499, 428, 455: return 16;
		case 414, 578: return 18;
		case 456: return 24;
		case 435, 591: return 36;
		case 450: return 30;
		case 584: return 40;
	}
	return -1;
}

CountVehicleSlot(vehicleid)
{
	new count;
	for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
	{
	    if(i == 22) count += CoreVehicles[vehicleid][vehicleCrate][i] * 6;
	    else if(i == 4 || i == 16) count += CoreVehicles[vehicleid][vehicleCrate][i] * 18;
		else count += CoreVehicles[vehicleid][vehicleCrate][i];
	}
	return count;
}

GetCargoSlot(cargoid)
{
	if(cargoid == 22) return 6;
	else if(cargoid == 4 || cargoid == 16) return 18;
	return 1;
}

UpdateStorage(cargoid)
{
	if(!IndustryData[StorageData[cargoid][in_industryid]][in_close])
	{
		if(!IsValidDynamicPickup(StorageData[cargoid][in_pickup])) StorageData[cargoid][in_pickup] = CreateDynamicPickup(1318, 23, StorageData[cargoid][in_posx], StorageData[cargoid][in_posy], StorageData[cargoid][in_posz], 0, 0);
		if(!IsValidDynamic3DTextLabel(StorageData[cargoid][in_label])) {

			format(szString, 128, "[{E5FF00}%s"EMBED_WHITE"]\nความจุโกดัง: %d / %d\nราคา: %s / หน่วย", g_arrIndItemNames[StorageData[cargoid][in_item]], StorageData[cargoid][in_stock], StorageData[cargoid][in_maximum], FormatNumber(StorageData[cargoid][in_price]));
			StorageData[cargoid][in_label] = CreateDynamic3DTextLabel(szString, -1, StorageData[cargoid][in_posx], StorageData[cargoid][in_posy], StorageData[cargoid][in_posz], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            return 1;
		}
		format(szString, 128, "[{E5FF00}%s"EMBED_WHITE"]\nความจุโกดัง: %d / %d\nราคา: %s / หน่วย", g_arrIndItemNames[StorageData[cargoid][in_item]], StorageData[cargoid][in_stock], StorageData[cargoid][in_maximum], FormatNumber(StorageData[cargoid][in_price]));
        UpdateDynamic3DTextLabelText(StorageData[cargoid][in_label], -1, szString);

	}
	else
	{
		if(IsValidDynamic3DTextLabel(StorageData[cargoid][in_label])) DestroyDynamic3DTextLabel(StorageData[cargoid][in_label]);
		if(IsValidDynamicPickup(StorageData[cargoid][in_pickup])) DestroyDynamicPickup(StorageData[cargoid][in_pickup]);
	}

	return 1;
}

saveStorage(cargoid)
{
	format(szQuery, sizeof(szQuery), "UPDATE `industry` SET `stock` = '%d' WHERE `id` = %d", StorageData[cargoid][in_stock], StorageData[cargoid][in_id]);
	mysql_query(dbCon, szQuery);
}

saveWarehouse(warehouseid) {
	format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_stock` = '%d' WHERE `fw_id` = %d", WareHouseInfo[warehouseid][whStock], WareHouseInfo[warehouseid][whID]);
	mysql_query(dbCon, szQuery);
}

CMD:gunhack(playerid, params[])
{
	new playerb, gunid, ammo;

	if(playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /gunhack [ไอดีผู้เล่น] [gunid] [กระสุน]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	
	GivePlayerWeapon(playerb, gunid, ammo);
	return 1;
}

CMD:removegun(playerid, params[])
{
	new playerb, gunid;

	if(playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "ui", playerb, gunid))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /removegun [ไอดีผู้เล่น] [gunid]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	format(szString, sizeof(szString), " คุณลบ %s ของ %s", ReturnWeaponName(gunid),ReturnPlayerName(playerb));
	SendClientMessage(playerid, COLOR_WHITE, szString);
	format(szString, sizeof(szString), " ผู้ดูแล %s ได้ลบ %s ของคุณ", ReturnPlayerName(playerid), ReturnWeaponName(gunid));
	SendClientMessage(playerb, COLOR_WHITE, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/removegun] %s remove %s(%d) from %s", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(gunid), ReturnPlayerName(playerb));

	format(szQuery, sizeof(szQuery), "ลบ %s ของ %s", ReturnWeaponName(gunid),ReturnPlayerName(playerb));
	SQL_LogAdmin_Action(playerid, "/removegun", szQuery);

	if(gunid == playerData[playerid][pGun1]) {
		Log_Write("logs/admin_removegun.txt", "[%s] %s: %s(%d)", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun1]), playerData[playerid][pAmmo1]);
		playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;
	}
	if(gunid == playerData[playerid][pGun2]) {
		Log_Write("logs/admin_removegun.txt", "[%s] %s: %s(%d) [LC:%d]", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun2]), playerData[playerid][pAmmo2], playerData[playerid][pPLicense]);
		playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0, playerData[playerid][pPLicense] = 0;
	}
	if(gunid == playerData[playerid][pGun3]) {
		Log_Write("logs/admin_removegun.txt", "[%s] %s: %s(%d) [LC:%d]", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(playerData[playerid][pGun3]), playerData[playerid][pAmmo3], playerData[playerid][pSLicense]);
		playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0, playerData[playerid][pSLicense] = 0;
	}
	
	RemoveWeapon(playerb, gunid);
	return 1;
}

CMD:givegun(playerid, params[])
{
	new playerb, gunid, ammo;

	if(playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /givegun [ไอดีผู้เล่น] [gunid] [กระสุน]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(!IsPlayerConnected(playerb)) return SendClientMessage(playerid, COLOR_GREY, "Invalid player id.");
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");
	format(szString, sizeof(szString), " คุณให้ %s(%d) กับ %s", ReturnWeaponName(gunid), ammo,ReturnPlayerName(playerb));
	SendClientMessage(playerid, COLOR_WHITE, szString);
	format(szString, sizeof(szString), " ผู้ดูแล %s ได้ให้ %s(%d) กับคุณ", ReturnPlayerName(playerid), ReturnWeaponName(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/givegun] %s give %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(gunid), ammo, ReturnPlayerName(playerb));

	format(szQuery, sizeof(szQuery), "ให้ %s(%d) กับ %s", ReturnWeaponName(gunid), ammo,ReturnPlayerName(playerb));
	SQL_LogAdmin_Action(playerid, "/givegun", szQuery);

	GivePlayerWeaponEx(playerb, gunid, ammo);
	return 1;
}

CMD:spawngun(playerid, params[])
{
	new playerb, gunid, ammo, license;

	if(playerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "uiiD(0)", playerb, gunid, ammo, license))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /spawngun [ไอดีผู้เล่น] [gunid] [กระสุน] [license(0/1)]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "Invalid weapon id.");

	format(szString, sizeof(szString), " คุณให้ %s(%d) กับ %s", ReturnWeaponName(gunid), ammo,ReturnPlayerName(playerb));
	SendClientMessage(playerid, COLOR_WHITE, szString);
	format(szString, sizeof(szString), " ผู้ดูแล %s ได้ให้ %s(%d) กับคุณ", ReturnPlayerName(playerid), ReturnWeaponName(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/spawngun] %s give %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), ReturnWeaponName(gunid), ammo, ReturnPlayerName(playerb));

	format(szQuery, sizeof(szQuery), "ให้ %s(%d) กับ %s", ReturnWeaponName(gunid), ammo,ReturnPlayerName(playerb));
	SQL_LogAdmin_Action(playerid, "/spawngun", szQuery);

	new pfid = GivePlayerValidWeapon(playerb, gunid, ammo, license ? randomEx(100000,999999) : 0);

	if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) spawn %s(%d) to %s [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, ReturnPlayerName(playerb), pfid);
	else Log_Write("logs/weapon.txt", "[%s] %s (%s) spawn %s(%d) to %s [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(gunid), ammo, ReturnPlayerName(playerb), pfid);

	return 1;
}

CMD:tpda(playerid, params[])
{
	if(playerData[playerid][pJob] != JOB_TRUCKER && playerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ใช่ Trucker");


	Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}แสดง"EMBED_WHITE"อุตสาหกรรมทั้งหมด\n{B4B5B7}แสดง"EMBED_WHITE"ธุรกิจที่รับสินค้า\n{B4B5B7}แสดง"EMBED_WHITE"ข้อมูลเรือ", "Select", "Exit");
	return 1;
}

CMD:industry(playerid, params[])
{
	new i;

	if((i = Industry_Nearest(playerid)) != -1) {
		ShowIndustry(playerid, StorageData[i][in_industryid]);
	}
	/*if(playerData[playerid][pJob] != JOB_TRUCKER && playerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ใช่ Trucker");


	Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}แสดง"EMBED_WHITE"อุตสาหกรรมทั้งหมด\n{B4B5B7}แสดง"EMBED_WHITE"ธุรกิจที่รับสินค้า\n{B4B5B7}แสดง"EMBED_WHITE"ข้อมูลเรือ", "Select", "Exit");
	*/
	return 1;
}

Dialog:FactionEdit_Color(playerid, response, listitem, inputtext[])
{
	if(response) {

		new string[64], color;
		if (sscanf(inputtext, "x", color)) {
			format(string, sizeof(string), "รูปแบบของสีไม่ถูกต้อง\n\nFaction Color: {%06x}CODE\nRGBA 0xFFFFFFAA", FactionData[playerData[playerid][pFactionEdit]][factionColor] >>> 8);
			Dialog_Show(playerid, FactionEdit_Color, DIALOG_STYLE_INPUT, "Edit Color", string, "Change", "Back");
			return true;
		}

	    FactionData[playerData[playerid][pFactionEdit]][factionColor] = color;
	    Faction_Update(playerData[playerid][pFactionEdit]);

	    Faction_Save(playerData[playerid][pFactionEdit]);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับ {%06x}สี"EMBED_YELLOW" ของฝ่ายหรือกลุ่มไอดี: %d", ReturnPlayerName(playerid), color >>> 8, playerData[playerid][pFactionEdit]);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Name(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[128];

		if(isnull(inputtext) || strlen(inputtext) >= 64) {
			format(string, sizeof(string), "ความยาวของชื่อต้องมากกว่า 0 และไม่เกินที่ถูกกำหนดไว้\n\nFaction Name: %s", FactionData[playerData[playerid][pFactionEdit]][factionName]);
			Dialog_Show(playerid, FactionEdit_Name, DIALOG_STYLE_INPUT, "Edit Name", string, "Change", "Back");
			return true;
		}
		//mysql_escape_string(inputtext,clean_name);
		format(FactionData[playerData[playerid][pFactionEdit]][factionName], 64, inputtext);
		Faction_Save(playerData[playerid][pFactionEdit]);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Type(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1 && typeint > 7) {
			format(string, sizeof(string), "ประเภทที่ระบุไม่ถูกต้องอยู่ระหว่าง 1 ถึง 7\n\nFaction Type: %s\n\nเลือกหมายเลข 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: SASD | 7: SADOC", GetFactionTypeName(FactionData[playerData[playerid][pFactionEdit]][factionType]));
			Dialog_Show(playerid, FactionEdit_Type, DIALOG_STYLE_INPUT, "Edit Type", string, "Change", "Back");
			return true;
		}
	    FactionData[playerData[playerid][pFactionEdit]][factionType] = typeint;

	    Faction_Save(playerData[playerid][pFactionEdit]);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับประเภทของฝ่ายหรือกลุ่มไอดี: %d เป็น %s", ReturnPlayerName(playerid), playerData[playerid][pFactionEdit], GetFactionTypeName(typeint));
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Maxrank(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1 && typeint > 20) {
			format(string, sizeof(string), "ยศที่ระบุต้องอยู่ระหว่าง 1 ถึง 20\n\nFaction Max rank: %d\n\nเลือกยศระหว่าง 1-20", FactionData[playerData[playerid][pFactionEdit]][factionRanks]);
			Dialog_Show(playerid, FactionEdit_Maxrank, DIALOG_STYLE_INPUT, "Edit Max rank", string, "Change", "Back");
			return true;
		}
	    FactionData[playerData[playerid][pFactionEdit]][factionRanks] = typeint;
	    Faction_Save(playerData[playerid][pFactionEdit]);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับยศสูงสุดของฝ่ายหรือกลุ่มไอดี: %d เป็น %d", ReturnPlayerName(playerid), playerData[playerid][pFactionEdit], typeint);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Maxskin(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1 && typeint > 10) {
			format(string, sizeof(string), "ช่องสกินต้องอยู่ระหว่าง 1 ถึง %d\n\nFaction Max skin: %d\n\nเลือกสกินระหว่าง 1-%d", MAX_FACTION_TYPE_SKINS, FactionData[playerData[playerid][pFactionEdit]][factionSkins], MAX_FACTION_TYPE_SKINS);
			Dialog_Show(playerid, FactionEdit_Maxskin, DIALOG_STYLE_INPUT, "Edit Max skin", string, "Change", "Back");
			return true;
		}
	    FactionData[playerData[playerid][pFactionEdit]][factionSkins] = typeint;
	    Faction_Save(playerData[playerid][pFactionEdit]);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับสกินสูงสุดของฝ่ายหรือกลุ่มไอดี: %d เป็น %d", ReturnPlayerName(playerid), playerData[playerid][pFactionEdit], typeint);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Maxvehicle(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1) {
			format(string, sizeof(string), "จำนวนต้องไม่ต่ำกว่า 0\n\nFaction Max vehicle: %d", FactionData[playerData[playerid][pFactionEdit]][factionVehicle]);
			Dialog_Show(playerid, FactionEdit_Maxvehicle, DIALOG_STYLE_INPUT, "Edit Max vehicle", string, "Change", "Back");
			return true;
		}
	    FactionData[playerData[playerid][pFactionEdit]][factionVehicle] = typeint;
	    Faction_Save(playerData[playerid][pFactionEdit]);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับยานพาหนะสูงสุดของฝ่ายหรือกลุ่มไอดี: %d เป็น %d", ReturnPlayerName(playerid), playerData[playerid][pFactionEdit], typeint);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Plate(playerid, response, listitem, inputtext[])
{
	if(response) {

		new string[32];

		if(isnull(inputtext) || strlen(inputtext) >= 32) {
			format(string, sizeof(string), "ความยาวของเลขทะเบียนต้องมากกว่า 0 และไม่เกินที่ถูกกำหนดไว้\n\nป้ายทะเบียนปัจจุบัน : %s", FactionData[playerData[playerid][pFactionEdit]][factionPlate]);
			Dialog_Show(playerid, FactionEdit_Plate, DIALOG_STYLE_INPUT, "Edit Plate", string, "Change", "Back");
			return true;
		}

		format(FactionData[playerData[playerid][pFactionEdit]][factionPlate], 32, inputtext);
		Faction_Save(playerData[playerid][pFactionEdit]);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ได้ปรับป้ายทะเบียนรถสำหรับกลุ่มไอดี: %d เป็น %s", ReturnPlayerName(playerid), playerData[playerid][pFactionEdit], FactionData[playerData[playerid][pFactionEdit]][factionPlate]);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit(playerid, response, listitem, inputtext[])
{
	if(response) {

		new string[128],
			idfac = playerData[playerid][pFactionEdit];

		switch(listitem)
		{
			case 0: // Name
			{
				format(string, sizeof(string), "Faction Name: %s", FactionData[playerData[playerid][pFactionEdit]][factionName]);
				Dialog_Show(playerid, FactionEdit_Name, DIALOG_STYLE_INPUT, "Edit Name", string, "Change", "Back");
			}
			case 1: // Color
			{
				format(string, sizeof(string), "Faction Color: {%06x}ตัวอย่าง\nRGBA 0xFFFFFFAA", FactionData[playerData[playerid][pFactionEdit]][factionColor] >>> 8);
				Dialog_Show(playerid, FactionEdit_Color, DIALOG_STYLE_INPUT, "Edit Color", string, "Change", "Back");
			}
			case 2: // Type
			{
				format(string, sizeof(string), "Faction Type: %s\n\nเลือกหมายเลข 1: Police | 2: News | 3: Medical | 4: Government | 5: Gang | 6: SASD | 7: SADOC", GetFactionTypeName(FactionData[playerData[playerid][pFactionEdit]][factionType]));
				Dialog_Show(playerid, FactionEdit_Type, DIALOG_STYLE_INPUT, "Edit Type", string, "Change", "Back");
			}
			case 3: // Ranks
			{
				Faction_ShowRanks(playerid, playerData[playerid][pFactionEdit]);
				SetPVarInt(playerid, "EditFromView", 1);
			}
			case 4: // Max rank
			{
				format(string, sizeof(string), "Faction Max rank: %d\n\nเลือกระหว่าง 1-20", FactionData[playerData[playerid][pFactionEdit]][factionRanks]);
				Dialog_Show(playerid, FactionEdit_Maxrank, DIALOG_STYLE_INPUT, "Edit Max rank", string, "Change", "Back");
			}
			case 5: // Skins
			{
				Faction_ShowSkins(playerid, playerData[playerid][pFactionEdit]);
				SetPVarInt(playerid, "EditFromView", 1);
			}
			case 6: // Max skin
			{
				format(string, sizeof(string), "Faction Max skin: %d\n\nเลือกระหว่าง 1-%d", FactionData[playerData[playerid][pFactionEdit]][factionSkins], MAX_FACTION_TYPE_SKINS);
				Dialog_Show(playerid, FactionEdit_Maxskin, DIALOG_STYLE_INPUT, "Edit Max skin", string, "Change", "Back");
			}
			case 7: // Max Vehicle
			{
				format(string, sizeof(string), "Faction Max vehicle: %d", FactionData[playerData[playerid][pFactionEdit]][factionVehicle]);
				Dialog_Show(playerid, FactionEdit_Maxvehicle, DIALOG_STYLE_INPUT, "Edit Max vehicle", string, "Change", "Back");
			}
			case 8: // Plate
			{
				format(string, sizeof(string), "Plate ปัจจุบัน : %s", FactionData[idfac][factionPlate]);
				Dialog_Show(playerid, FactionEdit_Plate, DIALOG_STYLE_INPUT, "Edit Plate", string, "Change", "Back");
			
				printf("%s", FactionData[idfac][factionPlate]);
			}
		}
	}
	else
	{
	    playerData[playerid][pFactionEdit] = -1;
	}
}

GetFactionTypeName(type)
{
	new string[32] = "Unknown";

	switch(type)
	{
		case 1: format(string, 32, "Police");
		case 2: format(string, 32, "News");
		case 3: format(string, 32, "Medical");
		case 4: format(string, 32, "Government");
		case 5: format(string, 32, "Gang");
		case 6: format(string, 32, "SASD");
		case 7: format(string, 32, "SADOC");
	}
	return string;
}

ShowPlayerEditFaction(playerid)
{
	if(playerData[playerid][pFactionEdit] != -1 && FactionData[playerData[playerid][pFactionEdit]][factionExists])
	{
		new caption[128];
		format(caption, sizeof(caption), "Faction Edit: %s(%d)", FactionData[playerData[playerid][pFactionEdit]][factionName], playerData[playerid][pFactionEdit]);
		Dialog_Show(playerid, FactionEdit, DIALOG_STYLE_LIST, caption, "Name\nColor\nType\nRanks\nMax Rank\nSkins\nMax Skin\nMax Vehicle\nPlate", "Edit", "Exit");
	}
	return 1;
}

Dialog:AdvertiseDialog(playerid, response, listitem, inputtext[])
{
	if(response) {

		new menu[10], str[512];

		format(menu, 10, "menu%d", listitem);
		new i = GetPVarInt(playerid, menu);

		if(AdvertData[i][ad_id] != 0) {
			format(str, sizeof(str), "ID: %d\nAdvert: %s", AdvertData[i][ad_id], AdvertData[i][ad_text]);
			SetPVarInt(playerid, "contactAD", i);
			SetPVarInt(playerid, "contactID", AdvertData[i][ad_owner]);
		
			if(AdvertData[i][ad_type]) Dialog_Show(playerid, AdvertiseContact, DIALOG_STYLE_MSGBOX, "Viewing Advertisement", str, "Back", "");
			else Dialog_Show(playerid, AdvertiseContact, DIALOG_STYLE_MSGBOX, "Viewing Advertisement", str, "Back", "Okay");
		}
	}
	return 1;
}


Dialog:AdvertiseContact(playerid, response, listitem, inputtext[])
{
    if(response) {
		PC_EmulateCommand(playerid, "/ads");
    }
    else
    {
        new i = GetPVarInt(playerid, "contactAD");
        if(AdvertData[i][ad_id]) {
            if(IsPlayerConnected(AdvertData[i][ad_owner]) && AdvertData[i][ad_owner] != INVALID_PLAYER_ID && AdvertData[i][ad_owner] == GetPVarInt(playerid, "contactAD"))
            {
            	SendClientMessageEx(AdvertData[i][ad_owner], COLOR_GREEN, "%s สนใจโฆษณาของคุณ [PH: %d]", ReturnRealName(playerid), playerData[playerid][pPnumber]);
            }
        }
    }
    DeletePVar(playerid, "contactAD");
    DeletePVar(playerid, "contactID");
    return 1;
}


Dialog:AdvertPost(playerid, response, listitem, inputtext[])
{
    if(response) {

        new id = -1;
		if ((id = nearBiz_var[playerid]) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
			if(playerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {
					/*new players;

					foreach (new i : Player) if(bf_get(player_bf[playerid], IS_LOGGED)) players++;

					if(playerData[playerid][pADPoint] > 2) price = 1500;
					else if(playerData[playerid][pADPoint] > 4) price = 2000;
					else if(playerData[playerid][pADPoint] > 6) price = 2500;
					else price = 1000;

					price += players * 250;*/

					if(playerData[playerid][pCash] >= 1000) {

						new exists = -1;

						for(new i=0;i!=MAX_AD_QUEUE;i++) {
							if(!AdvertData[i][ad_id]) {
								exists = i;
								break;
							}
						}

						if(exists != -1 && (!CountPlayerAdvert(playerid) || playerData[playerid][pDonateRank])) {

							new
								adText[128];

							AdvertData[exists][ad_time] = 60 * (CountAdvert() + 1);

							mysql_escape_string(playerData[playerid][pAdvertiseText], adText);

							format(szQuery,sizeof(szQuery),"INSERT INTO advertisement (charid, text, time) VALUES('%d', '%s', '%d')", playerData[playerid][pID], adText, AdvertData[exists][ad_time]);
							mysql_query(dbCon, szQuery);

							new insertid = cache_insert_id();

							AdvertData[exists][ad_id] = insertid;
							AdvertData[exists][ad_owner] = playerid;
							format(AdvertData[exists][ad_text], 128, "%s", playerData[playerid][pAdvertiseText]);
							AdvertData[exists][ad_type] = 0;

							SendClientMessage(playerid, COLOR_WHITE, "โฆษณาของคุณอยู่ในคิวแล้ว (/ads)");

							SendAdminAlert(COLOR_YELLOW, "[ID:%d] %s ได้โฆษณาผ่าน /ad", playerid, ReturnPlayerName(playerid));

							playerData[playerid][pCash] -= 1000;
							playerData[playerid][pADPoint]++;

							if(playerData[playerid][pDonateRank]>1) adTick[playerid] = 30;
							else adTick[playerid] = 60;

							BizInfo[id][bProducts]--;
							BizInfo[id][bTill] += floatround(1000*0.7);
							UpdateBizInfo(id);

							Log_Write("logs/biz.txt", "[%s] %s: advert %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), id, BizInfo[id][bID]);
						} else SendClientMessage(playerid, COLOR_GRAD1, "คิวเต็มหรือโฆษณาของคุณอยู่ในคิวโปรดลองใหม่ภายหลัง");
					} else SendClientMessage(playerid, COLOR_GRAD1, "คุณมีเงินไม่พอที่จะทำสิ่งนี้");
				} else SendClientMessageEx(playerid, COLOR_GRAD1, "คุณต้องรอ %d วินาทีสำหรับการโพสต์โฆษณา", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีเบอร์โทรศัพท์มือถือดังนั้นคุณจะไม่สามารถส่งโฆณษาได้");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
    }
    DeletePVar(playerid, "AdvertPost");
    return 1;
}

Dialog:CompanyAdvertPost(playerid, response, listitem, inputtext[])
{
    if(response) {

        new id = -1;
		if ((id = nearBiz_var[playerid]) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
			if(playerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {
					/*new players;

					foreach (new i : Player) if(bf_get(player_bf[playerid], IS_LOGGED)) players++;
					price = 5000 + players * 500;*/

					if(playerData[playerid][pCash] >= 1500) {

						new exists = -1;

						for(new i=0;i!=MAX_AD_QUEUE;i++) {
							if(!AdvertData[i][ad_id]) {
								exists = i;
								break;
							}
						}

						if(exists != -1 && (!CountPlayerAdvert(playerid) || playerData[playerid][pDonateRank])) {

							new
								adText[128];

							AdvertData[exists][ad_time] = 60 * (CountAdvert() + 1);

							mysql_escape_string(playerData[playerid][pAdvertiseText], adText);

							format(szQuery,sizeof(szQuery),"INSERT INTO advertisement (charid, text, time) VALUES('%d', '%s', '%d')", playerData[playerid][pID], adText, AdvertData[exists][ad_time]);
							mysql_query(dbCon, szQuery);

							new insertid = cache_insert_id();

							AdvertData[exists][ad_id] = insertid;
							AdvertData[exists][ad_owner] = playerid;
							format(AdvertData[exists][ad_text], 128, "%s", playerData[playerid][pAdvertiseText]);
							AdvertData[exists][ad_type] = 1;

							SendClientMessage(playerid, COLOR_WHITE, "โฆษณาของคุณอยู่ในคิวแล้ว (/ads)");

							SendAdminAlert(COLOR_YELLOW, "[ID:%d] %s ได้โฆษณาผ่าน /cad", playerid, ReturnPlayerName(playerid));

							playerData[playerid][pCash] -= 1500;
							playerData[playerid][pADPoint]++;

							if(playerData[playerid][pDonateRank]>1) adTick[playerid] = 30;
							else adTick[playerid] = 60;

							BizInfo[id][bProducts]--;
							BizInfo[id][bTill] += floatround(1500*0.7);
							UpdateBizInfo(id);

							Log_Write("logs/biz.txt", "[%s] %s: company advert %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), id, BizInfo[id][bID]);
						} else SendClientMessage(playerid, COLOR_GRAD1, "คิวเต็มหรือโฆษณาของคุณอยู่ในคิวโปรดลองใหม่ภายหลัง");
					} else SendClientMessage(playerid, COLOR_GRAD1, "คุณมีเงินไม่พอที่จะทำสิ่งนี้");
				} else SendClientMessageEx(playerid, COLOR_GRAD1, "คุณต้องรอ %d วินาทีสำหรับการโพสต์โฆษณา", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีเบอร์โทรศัพท์มือถือดังนั้นคุณจะไม่สามารถส่งโฆณษาได้");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
    }
    format(playerData[playerid][pAdvertiseText], 128, "");
    return 1;
}

Dialog:FactionsList(playerid, response, listitem, inputtext[])
{
	if(response) {

		new menu[10];
		//Navigate
		if(listitem != 0 && listitem != 11) {
			new str_biz[8];
			format(str_biz, 10, "menu%d", listitem);

			playerData[playerid][pFactionEdit] = GetPVarInt(playerid, str_biz);
			ShowPlayerEditFaction(playerid);
			return true;
		}

		new currentPage = GetPVarInt(playerid, "page");
		if(listitem==0) { 
			if(currentPage>1) currentPage--; 
		}
		else if(listitem == 11) currentPage++;
		
		new string[1024], count;
		format(string, sizeof(string), "%s{B4B5B7}หน้า %d"EMBED_WHITE"\n", string, (currentPage==1) ? 1 : currentPage-1);

		SetPVarInt(playerid, "page", currentPage);

		new skipitem = (currentPage-1) * 10;

		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {

			if(skipitem)
			{
				skipitem--;
				continue;
			}
			if(count == 10)
			{
				format(string, sizeof(string), "%s{B4B5B7}หน้า 2"EMBED_WHITE"\n", string);
				break;
			}
			format(menu, 10, "menu%d", ++count);
			SetPVarInt(playerid, menu, i);
			format(string, sizeof(string), "%s"EMBED_WHITE"Faction ({FFBF00}%i"EMBED_WHITE") | %s\n", string, i, FactionData[i][factionName]);

		}

		Dialog_Show(playerid, FactionsList, DIALOG_STYLE_LIST, "Factions List", string, "Edit", "Back");
	}
	return 1;
}

Dialog:TruckerPDA(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
		    case 0: {
				ShowAllIndustry(playerid);
		    }
		    case 1: {
				new string[1024], menu[10], count;

				format(string, sizeof(string), " \t \t \t \n");
				format(string, sizeof(string), "%s{A4D247}หน้า 1"EMBED_WHITE"\t\t\t\n", string);

				SetPVarInt(playerid, "page", 1);

				foreach(new i : sv_business)
				{
					if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i) && GetProductCargo(BizInfo[i][bType]) != -1)
					{
						if(count == 10)
						{
							format(string, sizeof(string), "%s{A4D247}หน้า 2"EMBED_WHITE"\t\t\t\n", string);
							break;
						}
						format(menu, 10, "menu%d", ++count);
						SetPVarInt(playerid, menu, i);
						format(string, sizeof(string), "%s%s\t%s / หน่วย\tต้องการ: %d %s\t%s\n", string, g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]), GetBusinessCargoCanBuy(i), ReturnCargoUnits(GetProductCargo(BizInfo[i][bType])), ClearGameTextColor(BizInfo[i][bInfo]));
					}

				}
				if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trucker PDA - ธุรกิจ", "ไม่มีธุรกิจไหนต้องการสินค้า", "Ok", "");
				else Dialog_Show(playerid, TruckerPDABusiness, DIALOG_STYLE_TABLIST_HEADERS, "Trucker PDA - ธุรกิจ", string, "Navigate", "Back");
		    }
		    case 2: {
				ShowCargoShip(playerid);
		    }
		}
	}
	return 1;
}

Dialog:TruckerPDADetail(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    ShowIndustry(playerid, listitem + 1);
	}
	else Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}แสดง"EMBED_WHITE"อุตสาหกรรมทั้งหมด\n{B4B5B7}แสดง"EMBED_WHITE"ธุรกิจที่รับสินค้า\n{B4B5B7}แสดง"EMBED_WHITE"ข้อมูลเรือ", "Select", "Exit");

	return 1;
}

Dialog:TruckerPDAProcess(playerid, response, listitem, inputtext[])
{
    new industryid = GetPVarInt(playerid, "IndustrySelected");
	if(response)
	{
        new string[1500], menu[10], count;
		foreach(new i : sv_industry)
		{
		    if(StorageData[i][in_id] && StorageData[i][in_industryid] == industryid) {

		        format(menu, 10, "menu%d", count);
		        SetPVarInt(playerid, menu, i);

				format(string, sizeof(string), "%s{B4B5B7}โกดัง {A4D247}%s{B4B5B7} ("EMBED_WHITE"%s{B4B5B7}, "EMBED_WHITE"$%d{B4B5B7} / หน่วย, "EMBED_WHITE"%d{B4B5B7} / %d)\n", string, g_arrIndItemNames[StorageData[i][in_item]], (StorageData[i][in_trading_type]) ? ("ต้องการ"):("สำหรับขาย"), StorageData[i][in_price], StorageData[i][in_stock], StorageData[i][in_maximum]);
                count++;
			}
		}
		//printf("navigate %d", strlen(string));
		Dialog_Show(playerid, TruckerPDANavigate, DIALOG_STYLE_LIST, "Industry Navigation", string, "Navigate", "Back");
	}
	else {
	    if(!industryid) Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}แสดง"EMBED_WHITE"อุตสาหกรรมทั้งหมด\n{B4B5B7}แสดง"EMBED_WHITE"ธุรกิจที่รับสินค้า\n{B4B5B7}แสดง"EMBED_WHITE"ข้อมูลเรือ", "Select", "Exit");
	    else ShowAllIndustry(playerid);
	}
	return 1;
}

Dialog:TruckerPDABusiness(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new menu[10];
		//Navigate
		if(listitem != 0 && listitem != 11) {
			new str_biz[8];
			format(str_biz, 10, "menu%d", listitem);
			new bizid = GetPVarInt(playerid, str_biz);
			SetPlayerRaceCheckpointEx(playerid, 2, RCHECKPOINT_TRUCKER, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
			return true;
		}
		new currentPage = GetPVarInt(playerid, "page");

		if(listitem == 0) {
			if(currentPage>1) currentPage--; // Previous Page
		}
		else if(listitem == 11) currentPage++; // Next Page

		new string[1024], count;

		format(string, sizeof(string), " \t \t \t \n");
		format(string, sizeof(string), "%s{A4D247}หน้า %d"EMBED_WHITE"\t\t\t\n", string, (currentPage==1) ? 1 : currentPage-1);

		SetPVarInt(playerid, "page", currentPage);

		new skipitem = (currentPage-1) * 10;

		foreach(new i : sv_business)
		{
			if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i))
			{
				if(skipitem)
				{
					skipitem--;
					continue;
				}

				if(count == 10)
				{
					format(string, sizeof(string), "%s{A4D247}หน้า %d"EMBED_WHITE"\t\t\t\n", string, currentPage+1);
					break;
				}
				format(menu, 10, "menu%d", ++count);
				SetPVarInt(playerid, menu, i);
				format(string, sizeof(string), "%s%s\t%s / หน่วย\tต้องการ: %d %s\t%s\n", string, g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]), GetBusinessCargoCanBuy(i), ReturnCargoUnits(GetProductCargo(BizInfo[i][bType])), ClearGameTextColor(BizInfo[i][bInfo]));
			}
		}
		Dialog_Show(playerid, TruckerPDABusiness, DIALOG_STYLE_TABLIST_HEADERS, "Trucker PDA - ธุรกิจ", string, "Navigate", "Back");
	}
	else {
	    Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}แสดง"EMBED_WHITE"อุตสาหกรรมทั้งหมด\n{B4B5B7}แสดง"EMBED_WHITE"ธุรกิจที่รับสินค้า\n{B4B5B7}แสดง"EMBED_WHITE"ข้อมูลเรือ", "Select", "Exit");
	}
	return 1;
}

Dialog:TruckerPDANavigate(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new menu[10], storageid;
	    format(menu, 10, "menu%d", listitem);
	    storageid = GetPVarInt(playerid, menu);

		SetPlayerRaceCheckpointEx(playerid, 2, RCHECKPOINT_TRUCKER, StorageData[storageid][in_posx], StorageData[storageid][in_posy], StorageData[storageid][in_posz]);
	}
	else {

		new industryid = GetPVarInt(playerid, "IndustrySelected");

		if(industryid) ShowIndustry(playerid, GetPVarInt(playerid, "IndustrySelected"));
		else ShowCargoShip(playerid);
	}
	return 1;
}

SetPlayerHealthEx(playerid, Float:hp)
{
	if(hp <= 30) SetPlayerWeaponSkill(playerid, NORMAL_SKILL);
 	else if(hp <= 40) SetPlayerWeaponSkill(playerid, MEDIUM_SKILL);
	else SetPlayerWeaponSkill(playerid, FULL_SKILL);

	playerData[playerid][pHealth] = hp;
	return SetPlayerHealth(playerid, hp);
}

SetPlayerRaceCheckpointEx(playerid, cptype, missiontype, Float:X, Float:Y, Float:Z)
{
	switch(missiontype)
	{
	    case RCHECKPOINT_TRUCKER: SendClientMessage(playerid, COLOR_WHITE, "การนำทาง! (หากไม่มีเช็คพ้อยใช้ /updatemission)");
	    case RCHECKPOINT_TRUCKERJOB: SendClientMessage(playerid, COLOR_WHITE, "ตามเช็คพ้อยไปยังสำนักงานขนส่งรถบรรทุก (หากไม่มีเช็คพ้อยใช้ /updatemission)");
	}

	// Checkpoint Mission
    playerData[playerid][pCP_Type] = missiontype;
    playerData[playerid][pCP_X] = X;
    playerData[playerid][pCP_Y] = Y;
    playerData[playerid][pCP_Z] = Z;

	SetPlayerRaceCheckpoint(playerid, cptype, X, Y, Z, 0.0, 0.0, 0.0, 3.5);
	return 1;
}

SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:distance, status, value = -1)
{
	gPlayerCheckpointX[playerid]=x;
	gPlayerCheckpointY[playerid]=y;
	gPlayerCheckpointZ[playerid]=z;

 	gPlayerCheckpointValue[playerid]=value;
    gPlayerCheckpointStatus[playerid]=status;

    SetPlayerCheckpoint(playerid, x, y, z, distance);
	return 1;
}

CMD:updatemission(playerid)
{
	new bool:debugger;
	if(gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE)
	{
	    switch(gPlayerCheckpointStatus[playerid])
	    {
	        case CHECKPOINT_FARMER: {
	            SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 5.0);
                debugger = true;
			}
	        case CHECKPOINT_GOFISHING: {
	            SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 30.0);
                debugger = true;
			}
	    }
	}

	if(playerData[playerid][pCP_Type] != -1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "เช็คพ้อยถูกปรับปรุงใหม่! (หากยังไม่เห็นอะไร พยายามใช้ /removecp และ /updatemission)");
	    SetPlayerRaceCheckpoint(playerid, 2, playerData[playerid][pCP_X], playerData[playerid][pCP_Y], playerData[playerid][pCP_Z], 0.0, 0.0, 0.0, 3.5);
        debugger = true;
	}

	if(!debugger) SendClientMessage(playerid, COLOR_WHITE, "ไม่มีเช็คพ้อยสำหรับรถบรรทุกให้อัพเดท");

	return 1;
}

CMD:removecp(playerid)
{
    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
	return 1;
}


ShowIndustry(playerid, industryid)
{
	static string[900];
	format(string, sizeof(string),
	""EMBED_WHITE"ยินดีต้อนรับสู่ {A4D247}%s"EMBED_WHITE"!\n\nปัจจุบันอุตสาหกรรมนี้ %s\n\n{A4D247}สำหรับขาย:\n{B4B5B7}สินค้า\t\tราคา\tการผลิต/ชั่วโมง\tมีสินค้าในสต๊อก(ขนาดสต๊อก)\n",
	g_arrIndustryNames[industryid],
	(IndustryData[industryid][in_close]) ? ("{CD324D}ปิด") : ("เปิด{A4D247}"));

	foreach(new i : sv_industry) if(StorageData[i][in_id] && !StorageData[i][in_trading_type] && StorageData[i][in_industryid] == industryid) //For Sale
	{
	    new type = IndustryData[industryid][in_type];

		if(type == 2) continue;

		if(type == 0)
	    {
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s$%d\t+%d\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) - (CE_CountVowel(g_arrIndItemNames[StorageData[i][in_item]])) <= 9) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
		}
		else
		{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s$%d\t+%d {B4B5B7}ต่อทรัพยากร"EMBED_WHITE"\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) - (CE_CountVowel(g_arrIndItemNames[StorageData[i][in_item]])) <= 9 ? ("\t\t"):("\t")),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	    }
	}

	format(string, sizeof(string),
	"%s\n{A4D247}ต้องการ:\n{B4B5B7}สินค้า\t\tราคา\tการผลิต/ชั่วโมง\tมีสินค้าในสต๊อก(ขนาดสต๊อก)\n",
	string);

	foreach(new i : sv_industry) if(StorageData[i][in_id] && StorageData[i][in_trading_type] && StorageData[i][in_industryid] == industryid) //Wanted
	{
	    new type = IndustryData[industryid][in_type];

	    if(type == 0)
	    {
			format(string, sizeof(string), "%s{B4B5B7}นี่เป็นอุตสาหกรรมหลักและไม่จำเป็นต้องมีทรัพยากรใด ๆ", string);
			break;
		}
		else
		{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s$%d\t-%d {B4B5B7}หน่วย"EMBED_WHITE"\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) - (CE_CountVowel(g_arrIndItemNames[StorageData[i][in_item]])) <= 9) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	    }
	}
	SetPVarInt(playerid, "IndustrySelected", industryid);
	// printf("%d", strlen(string));
    Dialog_Show(playerid, TruckerPDAProcess, DIALOG_STYLE_MSGBOX, g_arrIndustryNames[industryid], string, "Proceed", "Exit" );
}

ShowCargoShip(playerid)
{
	new string[1500];
	format(string, sizeof(string),
	""EMBED_WHITE"ยินดีต้อนรับสู่ {A4D247}The Ship"EMBED_WHITE"!\n\nปัจจุบันอุตสาหกรรมนี้ %s"EMBED_WHITE"\n\nเวลาต่อไปนี้เป็นการประมาณซึ่งไม่แน่นอน!\n\n",
	(IndustryData[0][in_close]) ? ("{CD324D}ไม่อยู่ท่าเรือ") : ("{A4D247}เทียบท่า"));

	new gShipHour, gShipMinute, gShipSecond;

	if(IndustryData[0][in_close])
	{
	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);

	    format(string, sizeof(string), "%sเรือจะมาถึงเมื่อ:\t%02d:%02d:%02d\n\n", string, gShipHour, gShipMinute, gShipSecond);
	}
	else
	{
	    TimestampToTime(gShipTime, gShipHour, gShipMinute, gShipSecond);

	    format(string, sizeof(string), "%sเรือมาถึงเมื่อ:\t%02d:%02d:%02d\n", string, gShipHour, gShipMinute, gShipSecond);

        TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);
		format(string, sizeof(string), "%sเรือออกเดินทางเมื่อ:\t%02d:%02d:%02d\n", string, gShipHour, gShipMinute, gShipSecond);

	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
	    format(string, sizeof(string), "%sจะมาถึงในครั้งถัดไปเมื่อ:\t%02d:%02d:%02d\n\n", string, gShipHour, gShipMinute, gShipSecond);
	}


	format(string, sizeof(string), "%s{A4D247}สำหรับขาย:\n{B4B5B7}The Ship ไม่ขายอะไรทั้งนั้น มันรับซื้อสินค้าจาก San Andreas เท่านั้น\n", string);


	format(string, sizeof(string),
	"%s\n{A4D247}ต้องการ:\n{B4B5B7}สินค้า\t\tราคา\t\tมีสินค้าในสต๊อก(ขนาดสต๊อก)\n",
	string);

	foreach(new i : sv_industry) if(StorageData[i][in_id] && StorageData[i][in_trading_type] && StorageData[i][in_industryid] == 0) //Wanted
	{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s$%d\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) < 13) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	}
	SetPVarInt(playerid, "IndustrySelected", 0);
	////printf("Ship %d", strlen(string));
    Dialog_Show(playerid, TruckerPDAProcess, DIALOG_STYLE_MSGBOX, "The Ship", string, "Proceed", "Exit" );
	return 1;
}

ShowAllIndustry(playerid)
{
    new string[1900];
	for(new i=1;i!=sizeof(g_arrIndustryNames);i++) format(string, sizeof(string), "%s%s {B4B5B7}(%s,%s)\n", string, g_arrIndustryNames[i], GetIndustryType(i), (IndustryData[i][in_close]) ? ("{CD324D}ปิด{B4B5B7}") : ("{A4D247}เปิด{B4B5B7}"));
	Dialog_Show(playerid, TruckerPDADetail, DIALOG_STYLE_LIST, "Trucker PDA - ธุรกิจ", string, "Select", "Back");
}

GetIndustryType(id)
{
	new type[16];

	switch(IndustryData[id][in_type])
	{
	    case 0: format(type, 16, "หลัก");
	    case 1: format(type, 16, "รอง");
	    case 2: format(type, 16, "พิเศษ");
	}
	return type;
}

/*GetIndustryStatus(industryid)
{
	return "open";
}*/


/*IsVehicleRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistanceaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistanceaCar <= range) return 1;
    return 0;
}*/

IsJobSide(jobid)
{
	if(jobid == JOB_NONE || jobid == JOB_MECHANIC) return 1;
	return 0;
}

 ReturnJobName(playerid, jobid)
{
	new name[32];

	switch(jobid)
	{
	    case JOB_NONE: format(name, 32, "None");
	    case JOB_FARMER: format(name, 32, "Farmer");
	    case JOB_TRUCKER: {
			switch(playerData[playerid][pJobRank])
			{
			    case 0: format(name, 32, "Courier Trainee");
			    case 1: format(name, 32, "Courier");
			    case 2: format(name, 32, "Professional Courier");
			    case 3: format(name, 32, "Trucker Trainee");
			    case 4: format(name, 32, "Trucker");
			    case 5: format(name, 32, "Professional Trucker");
			}
	    }
	    case JOB_MECHANIC: format(name, 32, "Car Mechanic");
	    case JOB_TAXI: format(name, 32, "Taxi Driver");
	    case JOB_WPDEALER: format(name, 32, "Weapon Dealer");
	    case JOB_SUPPLIER: format(name, 32, "Weapon Supplier");
		case JOB_BARTENDER: format(name, 32, "Bartender");
		case JOB_POLICE: format(name, 32, "Police Job");

	    default: format(name, 32, "ว่างงาน");
	}
	return name;
}

/*CMD:editship(playerid)
{
	return EditObject(playerid, gMainShipObjectId);
}*/

/*CMD:shipcoord(playerid)
{
	new
		Float:x,
		Float:y,
		Float:z,
		Float:rx,
		Float:ry,
		Float:rz
	;

	GetObjectPos(gMainShipObjectId, x, y, z);
	GetObjectRot(gMainShipObjectId, rx, ry, rz);
    printf("%f, %f, %f, %f, %f, %f", x, y, z, rx, ry, rz);
    return 1;
}*/


// CARGO SHIP

forward StartMovingTimer();
public StartMovingTimer()
{
	MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 2, // slower for the first route
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
}

//-------------------------------------------------

public OnDynamicObjectMoved(objectid)
{
	if(objectid == gShipRamp1)
	{
	    if(gShipDeparture) {

			StartMovingTimer();

            /*new gShipHour, gShipMinute, gShipSecond;
	        TimestampToTime(gShipTime, gShipHour, gShipMinute, gShipSecond);
			format(szString, sizeof(szString), "Arrival: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);*/
			SetDynamicObjectMaterialText(gShipTextLine1, 0, "OCEAN DOCKS SHIP", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);
   			SetDynamicObjectMaterialText(gShipTextLine2, 0, "", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

			IndustryData[0][in_close] = 1;
			foreach(new i : sv_industry) if(StorageData[i][in_industryid] == 0) UpdateStorage(i);
			
			//printf("Ship move");
		}
		else
		{
			IndustryData[0][in_close] = 0;
			foreach(new i : sv_industry) if(StorageData[i][in_industryid] == 0)
			{
			    StorageData[i][in_stock]=0;
				UpdateStorage(i);
			}
		}
	}
	return 1;
}


public OnObjectMoved(objectid)
{
	if(objectid == gMainShipObjectId) {
	/*if(gShipCurrentPoint > 0 && !(gShipCurrentPoint % 2)) {
	    // play some seagulls audio every 5 points
		PlaySoundForPlayersInRange(6200, 200.0, gShipRoutePoints[gShipCurrentPoint][0],
						gShipRoutePoints[gShipCurrentPoint][1],
						gShipRoutePoints[gShipCurrentPoint][2]);
	}*/
    gShipCurrentPoint++;

    if(gShipCurrentPoint == NUM_SHIP_ROUTE_POINTS) {
		gShipCurrentPoint = 0;

   		MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 5, // slower for the last route
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
        return 1;
	}

	if(gShipCurrentPoint == 1) {

        gShipDeparture = false;
		MoveDynamicObject(gShipRamp1,2810.9445, -2387.2998, 12.6255, 0.01, -20.4000, 0.0000, -90.3000);
		MoveDynamicObject(gShipRamp2,2810.6875, -2436.9775, 12.6250, 0.01, -20.4000, 0.0000, -90.3000);

		//SetTimer("RampsClosed",2400000, 0);

	    gShipTime = gettime();
		

	 	new gShipHour, gShipMinute, gShipSecond;
	    TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);
		format(szString, sizeof(szString), "เรือออกเดินทางเมื่อ: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
		SetDynamicObjectMaterialText(gShipTextLine2, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 14, 1, 0xFFFFFFFF, 0, 1);

		//printf("Ship new start go in %2d:%2d", gShipHour, gShipMinute);
		
	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
		format(szString, sizeof(szString), "จะมาถึงในครั้งถัดไปเมื่อ: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
		SetDynamicObjectMaterialText(gShipTextLine3, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 14, 1, 0xFFFFFFFF, 0, 1);
		
		//printf("Ship come back in %2d:%2d", gShipHour, gShipMinute);
		return 1;
	}

	/*
    new tempdebug[256+1];
    format(tempdebug,256,"The ship is at route: %d", gShipCurrentPoint);
    SendClientMessageToAll(0xFFFFFFFF,tempdebug);*/

    MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 2,
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
	}
 	return 1;
}

forward RampsClosed();
public RampsClosed()
{
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, 2809.9849,-2391.3201,13.6282) || IsPlayerInRangeOfPoint(i, 30.0, 2810.5256,-2440.7012,13.6328))
	    {
	        SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
			SendClientMessage(i, COLOR_LIGHTRED, "ข้อควรระวัง! เรือกำลังจะออกเดินทางในอีก 40 วินาที ! สะพานจะปิดในอีก 20 วินาที !");
            SendClientMessage(i, COLOR_WHITE, "หากคุณตัดสินใจต้องการอยู่บนเรือ กรุณาอย่ากระโดดในขณะที่เรือกำลังเคลื่อนที่และมันอาจฆ่าคุณได้");
            SendClientMessage(i, COLOR_WHITE, "\"อย่านั่งบนยานพาหนะใด ๆ ในขณะที่เรือกำลังเคลื่อนตัว !\"");
            SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");

            GameTextForPlayer(i, "~r~attention!~n~~w~ship departs~n~in 40 seconds!", 5000, 1);
		}
	}
	SetTimer("RampsClosing",20000, 0);
}

forward RampsClosing();
public RampsClosing()
{
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, 2809.9849,-2391.3201,13.6282) || IsPlayerInRangeOfPoint(i, 30.0, 2810.5256,-2440.7012,13.6328))
	    {
	        SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
			SendClientMessage(i, COLOR_LIGHTRED, "ข้อควรระวัง! เรือกำลังจะออกเดินทางในอีก 20 วินาที ! สะพานได้ปิดลงแล้ว!");
            SendClientMessage(i, COLOR_WHITE, "หากคุณตัดสินใจต้องการอยู่บนเรือ กรุณาอย่ากระโดดในขณะที่เรือกำลังเคลื่อนที่และมันอาจฆ่าคุณได้");
            SendClientMessage(i, COLOR_WHITE, "\"อย่านั่งบนยานพาหนะใด ๆ ในขณะที่เรือกำลังเคลื่อนตัว !\"");
            SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
            GameTextForPlayer(i, "~r~attention!~n~~w~ship departs~n~in 20 seconds!", 5000, 1);
		}
	}
	gShipDeparture = true;
	MoveDynamicObject(gShipRamp1,2810.9445, -2387.2998, 12.6255-0.1, 0.01, 49.6999, 0.0000, -90.3000);
	MoveDynamicObject(gShipRamp2,2810.6875, -2436.9775, 12.6250-0.1, 0.01, 49.6999, 0.0000, -90.3000);

	//printf("Ship rams closed and ship will go in 20 sec");
	//StartMovingTimer();
}

PutPlayerSettingVehicle(playerid, model, price)
{
	if(playerData[playerid][pPCarkey] != 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณไม่สามารถ Spawn ยานพาหนะได้มากกว่านี้แล้ว");
	if(playerData[playerid][pCash] < price) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอที่จะซื้อ");
	if(playerData[playerid][pDonateRank] < IsDonateCar(model)) return SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับผู้เล่นระดับ VIP เท่านั้น");

	if(IsCopCar(model) && (GetFactionType(playerid) != FACTION_TYPE_POLICE || GetFactionType(playerid) != FACTION_TYPE_SASD)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ส่วนหนึ่งของ Faction ของพาหนะคันนี้");
    
	if(IsMedicCar(model) && GetFactionType(playerid) != FACTION_TYPE_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ส่วนหนึ่งของ Faction ของพาหนะคันนี้");

	new id = -1;

	if ((id = nearBiz_var[playerid]) != -1 && BizInfo[id][bType] == 4)
	{
        new Float:Vx, Float:Vy, Float:Vz, Float:Va, Float:xdist, Float:ydist, Float:zdist, Float:dist;

	    if(VDealerSelectCatalog[playerid] == 13)
	    {
			if(BizInfo[id][bBuyingBoatX] == 0 && BizInfo[id][bBuyingBoatY] == 0 && BizInfo[id][bBuyingBoatZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวแทนจำหน่ายยังไม่ได้ตั้งค่าตำแหน่งของยานพาหนะชนิดนี้");

            Vx = BizInfo[id][bBuyingBoatX];
            Vy = BizInfo[id][bBuyingBoatY];
            Vz = BizInfo[id][bBuyingBoatZ];
            Va = BizInfo[id][bBuyingBoatA];


	        dist = 6.5;
			xdist = 0.014912;
			ydist = 3.6;
			zdist = 0.004;
	    }
	    else if(VDealerSelectCatalog[playerid] == 0 || VDealerSelectCatalog[playerid] == 1)
	    {
			if(BizInfo[id][bBuyingAirX] == 0 && BizInfo[id][bBuyingAirY] == 0 && BizInfo[id][bBuyingAirZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวแทนจำหน่ายยังไม่ได้ตั้งค่าตำแหน่งของยานพาหนะชนิดนี้");

            Vx = BizInfo[id][bBuyingAirX];
            Vy = BizInfo[id][bBuyingAirY];
            Vz = BizInfo[id][bBuyingAirZ];
            Va = BizInfo[id][bBuyingAirA];

	        dist = 0;
			xdist = 0.003728;
			ydist = 1.8;
			zdist = 0.002;
	    }
	    else
		{
			if(BizInfo[id][bBuyingCarX] == 0 && BizInfo[id][bBuyingCarY] == 0 && BizInfo[id][bBuyingCarZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวแทนจำหน่ายยังไม่ได้ตั้งค่าตำแหน่งของยานพาหนะชนิดนี้");

            Vx = BizInfo[id][bBuyingCarX];
            Vy = BizInfo[id][bBuyingCarY];
            Vz = BizInfo[id][bBuyingCarZ];
            Va = BizInfo[id][bBuyingCarA];

			dist = 0;
			xdist = 0.003728;
			ydist = 1.8;
			zdist = 0.002;
		}

     	VDealerColor[playerid][0] = random(255);
       	VDealerColor[playerid][1] = random(255);

		VDealerVehicle[playerid] = CreateVehicle(model, Vx,Vy,Vz,Va, VDealerColor[playerid][0], VDealerColor[playerid][1], -1);

		if (VDealerVehicle[playerid] != INVALID_VEHICLE_ID)
		{
		    new compid;
			for(new i = 0; i != 14; i++)
			{
				compid = GetVehicleComponentInSlot(VDealerVehicle[playerid], i);
				if (compid != 0) RemoveVehicleComponent(VDealerVehicle[playerid], compid);
			}
		
		    VDealerBiz[playerid] = id;
		    VDealerSetting{playerid} = true;
		    PutPlayerInVehicle(playerid, VDealerVehicle[playerid], 0);

		    new Float:X, Float:Y, Float:Z, Float:vX, Float:vY, Float:vZ;

		    TogglePlayerControllable(playerid, 0);

            GetVehicleHood(VDealerVehicle[playerid], X, Y, Z);
			//GetPosInFrontOfVehicle(VDealerVehicle[playerid], X, Y, dist);
			GetVehiclePos(VDealerVehicle[playerid],vX,vY,vZ);

			//printf("%f %f %f", X, Y, Z);
			InterpolateCameraPos(playerid, BizInfo[id][bEntranceX], BizInfo[id][bEntranceY], BizInfo[id][bEntranceZ], X + (X * xdist),Y + ydist, Z + (Z * zdist) + dist, 1500, 1);
			InterpolateCameraLookAt(playerid, BizInfo[id][bEntranceX], BizInfo[id][bEntranceY], BizInfo[id][bEntranceZ], vX,vY,vZ, 1300, 1);

			ResetVehicle(VDealerVehicle[playerid]);
			VDealerLock[playerid]=0;
			VDealerImmob[playerid]=0;
			VDealerAlarm[playerid]=0;
			VDealerXM{playerid}=false;
			VDealerFaction{playerid}=false;
			VDealerPrice[playerid]=price;


			ShowPlayerDealercarDialog(playerid);
		}

    }
	return 1;
}

ShowPlayerDealercarDialog(playerid)
{
	new model = GetVehicleModel(VDealerVehicle[playerid]);
	new price = VDealerPrice[playerid];

	new string[64];
	format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));

	new string2[1300];
	format(string2, sizeof(string2), ""EMBED_YELLOW"ราคา:\t\t\t"EMBED_WHITE"%s\n"EMBED_YELLOW"ความเร็วสูงสุด:\t\t"EMBED_WHITE"%.2f\n"EMBED_YELLOW"ความแข็งแรงสูงสุด:\t\t"EMBED_WHITE"%.2f\n"EMBED_YELLOW"มวล:\t\t\t"EMBED_WHITE"%.2f\n\n"EMBED_YELLOW"ระบบขับเคลื่อน:\t\t"EMBED_WHITE"%s\n"EMBED_YELLOW"อัตราสิ้นเปลืองน้ำมันเชื้อเพลิง:\t"EMBED_WHITE"%s\n"EMBED_YELLOW"ความจุน้ำมันเชื้อเพลิง:\t\t"EMBED_WHITE"%.2f\n",
	FormatNumber(price), GetVehicleModelInfoAsFloat(model, "TransmissionData_fMaxVelocity"), VehicleData[model - 400][c_maxhp], GetVehicleModelInfoAsFloat(model, "fMass"), GetEngineDrive(model), GetVehicleConsumption(model), GetVehicleDataFuel(model));

	if(!VDealerFaction{playerid} || playerData[playerid][pFaction] == -1) {
	
		if(VDealerLock[playerid])
		{
		    new id = VDealerLock[playerid]-1;
			format(string2, sizeof(string2), "%s\n"EMBED_YELLOW"ระบบล็อค:\t\t{B4B5B7} ระดับ %d\t"EMBED_WHITE"%s", string2,
			VDealerLock[playerid] + 1, FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price]));

			switch(VDealerLock[playerid])
			{
			    case 1: {
			        format(string2, sizeof(string2), "%s\n\t{33AA33}+"EMBED_WHITE" 500 วินาทีสำหรับการป้องกัน\n\tการพยายามงัดแงะ\n\t{33AA33}+"EMBED_WHITE" การป้องกันที่แข็งแกร่งขึ้น\n\tการโจมตีทางกายภาพ - หมัดและอาวุธระยะประชิด", string2);
			    }
			    case 2: {
			        format(string2, sizeof(string2), "%s\n\t{33AA33}+"EMBED_WHITE" 750 วินาทีสำหรับการป้องกัน\n\tการพยายามงัดแงะ\n\t{33AA33}+"EMBED_WHITE" การป้องกันแบบพิเศษ - ที่ป้องกันดีกว่า 2 เท่า\n\tการโจมตีระยะประชิดทั้งหมด", string2);
			    }
			    case 3: {
			        format(string2, sizeof(string2), "%s\n\t{33AA33}+"EMBED_WHITE" 750 วินาทีสำหรับการป้องกัน\n\tการพยายามงัดแงะ\n\t{33AA33}+"EMBED_WHITE" การป้องกันแบบพิเศษ - ที่ป้องกันดีกว่า 2 เท่า\n\tการโจมตีระยะประชิดทั้งหมด\n\t{33AA33}+"EMBED_WHITE" การป้องกันแบบพิเศษ บล็อกการโจมตี\n\tทางกายภาพ - หมัด", string2);
			    }
			    case 4: {
			        format(string2, sizeof(string2), "%s\n\t{33AA33}+"EMBED_WHITE" 1,250 วินาทีสำหรับการป้องกัน\n\tการพยายามงัดแงะ\n\t{33AA33}+"EMBED_WHITE" การป้องกันแบบพิเศษ บล็อกการโจมตี\n\tทางกายภาพทุกประเภท", string2);
			    }
			}
		}
		if(VDealerAlarm[playerid])
		{
		    new id = VDealerAlarm[playerid]-1;
			format(string2, sizeof(string2), "%s\n"EMBED_YELLOW"สัญญาณเตือนภัย:\t{B4B5B7} ระดับ %d\t"EMBED_WHITE"%s", string2,
			VDealerAlarm[playerid], FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price]));

			switch(VDealerAlarm[playerid])
			{
			    case 1: {
			        format(string2, sizeof(string2), "%s\n\t{FF6347}+"EMBED_WHITE" สัญญาณเตือนภัยดัง", string2);
			    }
			    case 2: {
			        format(string2, sizeof(string2), "%s\n\t{FF6347}+"EMBED_WHITE" สัญญาณเตือนภัยดัง\n\t{FF6347}+"EMBED_WHITE" ยานพาหนะแจ้งเตือนไปยังเจ้าของเกี่ยวกับการบุกรุกที่อาจเกิดขึ้น", string2);
			    }
			    case 3: {
			        format(string2, sizeof(string2), "%s\n\t{FF6347}+"EMBED_WHITE" สัญญาณเตือนภัยดัง\n\t{FF6347}+"EMBED_WHITE" ยานพาหนะแจ้งเตือนไปยังเจ้าของเกี่ยวกับการบุกรุกที่อาจเกิดขึ้น\n\t{FF6347}+"EMBED_WHITE" ยานพาหนะแจ้งเตือนไปยังสถานีตำรวจในพื้นที่เกี่ยวกับ\n\tการบุกรุกที่อาจเกิดขึ้น", string2);
			    }
			    case 4: {
			        format(string2, sizeof(string2), "%s\n\t{FF6347}+"EMBED_WHITE" สัญญาณเตือนภัยดัง\n\t{FF6347}+"EMBED_WHITE" ยานพาหนะแจ้งเตือนไปยังเจ้าของเกี่ยวกับการบุกรุกที่อาจเกิดขึ้น\n\t{FF6347}+"EMBED_WHITE" ยานพาหนะแจ้งเตือนไปยังสถานีตำรวจในพื้นที่เกี่ยวกับ\n\tการบุกรุกที่อาจเกิดขึ้น\n\t{FF6347}+"EMBED_WHITE" สัญลักษณ์ยานพาหนะจะปรากฏบนเรดาร์\n\tของเจ้าหน้าที่ผู้บังคับใช้กฎหมาย", string2);
			    }
			}
		}

		if(VDealerImmob[playerid])
		{
		    new id = VDealerImmob[playerid]-1;
			format(string2, sizeof(string2), "%s\n"EMBED_YELLOW"อิมโมบิไลเซอร์:\t{B4B5B7} ระดับ %d\t"EMBED_WHITE"%s", string2,
			VDealerImmob[playerid], FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price]));

			format(string2, sizeof(string2), "%s\n\t"EMBED_YELLOW"+"EMBED_WHITE" ระบบอิมโมบิไลเซอร์ช่วยป้องกันไม่ให้\n\tเครื่องยนต์ในยานพาหนะของคุณทำงานกับ\n\tกุญแจที่ไม่ได้รับอนุญาต", string2);
		}

		if(VDealerXM{playerid}) format(string2, sizeof(string2), "%s\n"EMBED_YELLOW"XM-Radio:\t\t"EMBED_WHITE"$7,500", string2);

	}
	else {
	
	    format(string2, sizeof(string2), "%s\n"EMBED_YELLOW"ฝักฝ่าย:\t\t"EMBED_WHITE"%s", string2, Faction_GetName(playerid));
	}
	Dialog_Show(playerid, Dealercar, DIALOG_STYLE_MSGBOX, string, string2, "แก้ไข", "ชำระเงิน");
	return 1;
}

Dialog:Dealercar(playerid, response, listitem, inputtext[])
{
    new string[64];
	new model = GetVehicleModel(VDealerVehicle[playerid]);

	if (!response)
	{
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealercarConfirm, DIALOG_STYLE_MSGBOX, string, "คุณแน่ใจหรือที่จะซื้อยานพาหนะคันนี้ ?", "ซื้อ", "ยกเลิก");
	}
	else
	{
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	}
	return 1;
}

Dialog:DealerMenu(playerid, response, listitem, inputtext[])
{
    //new string2[128];
	if (response)
	{
	    //
	    switch(listitem)
	    {
	        case 0:
	        {
				//format(string2,sizeof(string2),"%sไม่มี\n%sสัญญาณเตือนภัยระดับ 1 - $5,000\n%sสัญญาณเตือนภัยระดับ 2 - $7,000\n%sสัญญาณเตือนภัยระดับ 3 - $10,000\n%sสัญญาณเตือนภัยระดับ 4 - $12,000");
				Dialog_Show(playerid, CarDealerAlarm, DIALOG_STYLE_LIST, "Alarm", "%sไม่มี\n%sสัญญาณเตือนภัยระดับ 1 - %s\n%sสัญญาณเตือนภัยระดับ 2 - %s\n%sสัญญาณเตือนภัยระดับ 3 - %s\n%sสัญญาณเตือนภัยระดับ 4 - %s", "ปรับแต่ง", "<< กลับ",
				(VDealerAlarm[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
				(VDealerAlarm[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]),
				(VDealerAlarm[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]),
				(VDealerAlarm[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]),
				(VDealerAlarm[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
	        }
	        case 1:
	        {
				//format(string2,sizeof(string2),"%sระบบล็อคระดับ - 1 $0\n%sระบบล็อคระดับ 2 - $5,000\n%sระบบล็อคระดับ 3 - $7,000\n%sLevel - 4 $10,000\n%sLevel - 5 $12,000");
				Dialog_Show(playerid, CarDealerLock, DIALOG_STYLE_LIST, "Lock", "%sระบบล็อคระดับ 1 - $0\n%sระบบล็อคระดับ 2 - %s\n%sระบบล็อคระดับ 3 - %s\n%sระบบล็อคระดับ 4 - %s\n%sระบบล็อคระดับ 5 - %s", "ปรับแต่ง", "<< กลับ",
				(VDealerLock[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
				(VDealerLock[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]),
				(VDealerLock[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]),
				(VDealerLock[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]),
				(VDealerLock[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
	        }
 	        case 2:
	        {
 				//format(string2,sizeof(string2),"%sไม่มี\n%sอิมโมบิไลเซอร์ระดับ  1 - $5,000\n%sอิมโมบิไลเซอร์ระดับ  2 - $10,000\n%sอิมโมบิไลเซอร์ระดับ  3 - $15,000\n%sอิมโมบิไลเซอร์ระดับ  4 - $20,000");
				Dialog_Show(playerid, CarDealerImmob, DIALOG_STYLE_LIST, "Immobiliser", "%sไม่มี\n%sอิมโมบิไลเซอร์ระดับ  1 - %s\n%sอิมโมบิไลเซอร์ระดับ  2 - %s\n%sอิมโมบิไลเซอร์ระดับ  3 - %s\n%sอิมโมบิไลเซอร์ระดับ  4 - %s", "ปรับแต่ง", "<< กลับ",
				(VDealerImmob[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
				(VDealerImmob[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]),
				(VDealerImmob[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]),
				(VDealerImmob[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]),
				(VDealerImmob[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
	        }
	        case 3:
	        {
	            ColorSelect[playerid] = -1;
	            ColorSelect2[playerid] = -1;
	            ShowPlayerColorSelection(playerid, 1);
	            ShowPlayerColorSelection2(playerid, 1);
	        }
	        case 4:
	        {
				new string[64];
				new model = GetVehicleModel(VDealerVehicle[playerid]);
				format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));

				if(playerData[playerid][pFaction] == -1 || playerData[playerid][pFactionRank] > 2) {
	                SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ผู้นำของ Faction");
	            	Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
					return 1;
				}
	            if(VDealerFaction{playerid}) VDealerFaction{playerid} = false;
	            else VDealerFaction{playerid} = true;
	            
	            Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	        }
	        case 5:
	        {
			    new string[64];
				new model = GetVehicleModel(VDealerVehicle[playerid]);
				format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));

				if(VDealerXM{playerid}) VDealerXM{playerid}=false;
				else VDealerXM{playerid}=true;

			    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	        }
	    }
	}
	else ShowPlayerDealercarDialog(playerid);
	return 1;
}

Dialog:CarDealerLock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerLock[playerid] = listitem;
		Dialog_Show(playerid, CarDealerLock, DIALOG_STYLE_LIST, "Lock", "%sระบบล็อคระดับ 1 - $0\n%sระบบล็อคระดับ 2 - %s\n%sระบบล็อคระดับ 3 - %s\n%sระบบล็อคระดับ 4 - %s\n%sระบบล็อคระดับ 5 - %s", "ปรับแต่ง", "<< กลับ",
		(VDealerLock[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
		(VDealerLock[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]),
		(VDealerLock[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]),
		(VDealerLock[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]),
		(VDealerLock[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	}
	return 1;
}

Dialog:CarDealerImmob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerImmob[playerid] = listitem;
		Dialog_Show(playerid, CarDealerImmob, DIALOG_STYLE_LIST, "Immobiliser", "%sไม่มี\n%sอิมโมบิไลเซอร์ระดับ  1 - %s\n%sอิมโมบิไลเซอร์ระดับ  2 - %s\n%sอิมโมบิไลเซอร์ระดับ  3 - %s\n%sอิมโมบิไลเซอร์ระดับ  4 - %s", "ปรับแต่ง", "<< กลับ",
		(VDealerImmob[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
		(VDealerImmob[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]),
		(VDealerImmob[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]),
		(VDealerImmob[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]),
		(VDealerImmob[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	}
}


Dialog:CarDealerAlarm(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerAlarm[playerid] = listitem;
		Dialog_Show(playerid, CarDealerAlarm, DIALOG_STYLE_LIST, "Alarm", "%sไม่มี\n%sสัญญาณเตือนภัยระดับ 1 - %s\n%sสัญญาณเตือนภัยระดับ 2 - %s\n%sสัญญาณเตือนภัยระดับ 3 - %s\n%sสัญญาณเตือนภัยระดับ 4 - %s", "ปรับแต่ง", "<< กลับ",
		(VDealerAlarm[playerid] == 0) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""),
		(VDealerAlarm[playerid] == 1) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]),
		(VDealerAlarm[playerid] == 2) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]),
		(VDealerAlarm[playerid] == 3) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]),
		(VDealerAlarm[playerid] == 4) ? ("{F7FE2E}>>"EMBED_WHITE" ") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "สัญญาณเตือนภัย\nระบบล็อค\nอิมโมบิไลเซอร์\nสี\n%s\n%s", "เพิ่มเติม", "<< กลับ", (VDealerFaction{playerid}) ? ("{F7FE2E}ฝักฝ่าย") : ("ฝักฝ่าย"), (VDealerXM{playerid}) ? ("{F7FE2E}ติดตั้ง XM-Radio") : ("ไม่ได้ติดตั้ง XM-Radio"));
	}
	return 1;
}

Dialog:DealercarConfirm(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        vehicleid = VDealerVehicle[playerid],
			bizid = VDealerBiz[playerid],
			model = GetVehicleModel(vehicleid),
			price = GetDealershipCountPrice(playerid),
			string[256]
		;

		if(price <= 0)
		{
		    ExitSettingVehicle(playerid);
		    SendClientMessage(playerid, COLOR_RED, "มีข้อผิดพลาดในการซื้อยานพาหนะโปรดติดต่อผู้ดูแลระบบ");
		    return 1;
		}

		if (bizid != -1 && BizInfo[bizid][bType] == 4)
		{
			if (playerData[playerid][pCash] < price)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอที่จะซื้อ");
				ShowPlayerDealercarDialog(playerid);
				return 1;
			}

			if(VDealerFaction{playerid}) {
			    new temp_faction = playerData[playerid][pFaction];
			    if(temp_faction == -1 || playerData[playerid][pFactionRank] > 2) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ผู้นำของ Faction");
					ShowPlayerDealercarDialog(playerid);
					return 1;
				}
				new count_vehicle=0;
				foreach(new i : sv_servercar) {
					if(vehicleVariables[i][vVehicleFaction] == temp_faction) {
		                count_vehicle++;
					}
				}

				if(count_vehicle >= FactionData[temp_faction][factionVehicle]) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะแฟคชั่นของคุณเต็มจำนวนสูงสุดแล้ว");
					ShowPlayerDealercarDialog(playerid);
					return 1;
				}

				new i = Iter_Free(sv_servercar);

				if(i != -1)
				{
					new
						queryString[255],
						Float: vPosX, Float:vPosY, Float:vPosZ, Float:vPosA
					; // x, y, z + z angle

					GetVehiclePos(vehicleid, vPosX, vPosY, vPosZ);
					GetVehicleZAngle(vehicleid, vPosA);

					format(queryString, sizeof(queryString), "INSERT INTO vehicles (vehicleModelID, vehiclePosX, vehiclePosY, vehiclePosZ, vehiclePosRotation) VALUES('%d', '%f', '%f', '%f', '%f')",model, vPosX, vPosY, vPosZ, vPosA);
					mysql_query(dbCon,queryString);

					new insertid = cache_insert_id();

					vehicleVariables[i][vVehicleID] = insertid;
					vehicleVariables[i][vVehicleModelID] = model;
					vehicleVariables[i][vVehiclePosition][0] = vPosX;
					vehicleVariables[i][vVehiclePosition][1] = vPosY;
					vehicleVariables[i][vVehiclePosition][2] = vPosZ;
					vehicleVariables[i][vVehicleRotation] = vPosA;
					vehicleVariables[i][vVehicleFaction] = temp_faction;
					vehicleVariables[i][vVehicleWorld]=GetPlayerVirtualWorld(playerid);
					vehicleVariables[i][vVehicleInterior]=GetPlayerInterior(playerid);
					vehicleVariables[i][vVehicleScriptID] = vehicleid;
					vehicleVariables[i][vVehicleColour][0] = VDealerColor[playerid][0];
					vehicleVariables[i][vVehicleColour][1] = VDealerColor[playerid][1];

					format(vehicleVariables[i][vVehiclePlate], 32, "%s", vehicleVariables[i][vVehiclePlate]);

					Iter_Add(sv_servercar, i);
					
		            ExitSettingVehicle(playerid);

					vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000);
					ResetVehicle(vehicleVariables[i][vVehicleScriptID]);
					LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
					SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);
					//SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[i][vVehicleFaction]][factionName]));
					SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);

					SetVehicleHealthEx(vehicleVariables[i][vVehicleScriptID], GetVehicleDataHealth(vehicleVariables[i][vVehicleModelID]));

                    PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);
                    
					systemVariables[vehicleCounts][0]++;
					
					playerData[playerid][pCash] -= price;

					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", playerData[playerid][pCash], playerData[playerid][pID]);
					mysql_query(dbCon, szQuery);
				}
			}
			else {
			
				if (GetNumberOwnerCar(playerid) >= 10)
			 	{
			 		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมียานพาหนะเต็มจำนวนสูงสุดแล้ว");
			 		ExitSettingVehicle(playerid);
			 		return 1;
				}

	            if(playerData[playerid][pPCarkey] != 9999) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คุณไม่สามารถ Spawn ยานพาหนะได้มากกว่านี้แล้ว");
	                ExitSettingVehicle(playerid);
	                return 1;
				}

				new i = -1;
				if((i = Iter_Free(sv_playercar)) != -1)
				{
					new
					    Float:pos[4], temp_xm=0
					;
					if(VDealerXM{playerid}) temp_xm = 1;
					GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
					GetVehicleZAngle(vehicleid, pos[3]);

			        CarData[i][carPos][0] = pos[0];
			        CarData[i][carPos][1] = pos[1];
			        CarData[i][carPos][2] = pos[2];
			        CarData[i][carPos][3] = pos[3];

		            CarData[i][carLock] = VDealerLock[playerid];
					CarData[i][carAlarm] = VDealerAlarm[playerid];
					CarData[i][carImmob] = VDealerImmob[playerid];
					CarData[i][carXM] = temp_xm;
					CarData[i][carOwner] = playerData[playerid][pID];
					CarData[i][carModel] = model;
					CarData[i][carBatteryL] = VehicleData[model - 400][c_battery];
					CarData[i][carEngineL] = VehicleData[model - 400][c_engine];

					CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(model);
	                CarData[i][carFuel] = CoreVehicles[vehicleid][vehFuel];
	                CarData[i][carHealth] = GetVehicleDataHealth(model);

	                CarData[i][carDupKey] = randomEx(1234567, 9999999);
	                CarData[i][carColor1] = VDealerColor[playerid][0];
	                CarData[i][carColor2] = VDealerColor[playerid][1];
	                CarData[i][carLocked] = 1;
	                CarData[i][carWorld] = 0;
	                CarData[i][carInt] = 0;
	                
	                for(new x = 0; x < 14; x++) CarData[i][carMods][x]=0;

					for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
					{
						CarData[i][carPackageWP][x]=0;
						CarData[i][carPackageAmmo][x]=0;
					}
					for(new x = 0; x != MAX_CAR_WEAPONS; x++)
					{
						CarData[i][carWeapon][x] = 0;
						CarData[i][carAmmo][x] = 0;
						CarData[i][carWeaponLicense][x] = 0;
					}

					format(string,sizeof(string),"INSERT INTO `cars` (`carModel`, `carOwner`, `carColor1`, `carColor2`, `carLock`, `carImmob`, `carAlarm`, `carXM`, `carDate`) VALUES (%d, %d, %d, %d, %d, %d, %d, %d, NOW())",
			            model,
					    playerData[playerid][pID],
					    VDealerColor[playerid][0],
					    VDealerColor[playerid][1],
						VDealerLock[playerid],
						VDealerImmob[playerid],
						VDealerAlarm[playerid],
						temp_xm);
					mysql_tquery(dbCon, string, "OnQueryBuyVehicle", "iddd", playerid, i, model, price);
				}
			}
		}
	}
	else
	{
		ExitSettingVehicle(playerid);
	}
	return 1;
}

GetEngineDrive(modelid)
{
	new string[24];
	if(GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'F') format(string, 32, "ขับเคลื่อนล้อหน้า");
	else if(GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'R') format(string, 32, "ขับเคลื่อนล้อหลัง");
	else format(string, 24, "ขับเคลื่อนสี่ล้อ");
	return string;
}

GetVehicleConsumption(modelid)
{
	new string[24], Float:consumption = GetVehicleDataFuelRate(modelid);
	format(string, 24, "%d MPG / %d KPL", floatround(consumption * 2.35214583), floatround(consumption));
	return string;
}

GetDealershipVehiclePrice(playerid)
{
	new str[64];

	new price = VDealerPrice[playerid], id;

    if(!VDealerFaction{playerid} || playerData[playerid][pFaction] == -1) {
    
		if(VDealerLock[playerid])
		{
		    id = VDealerLock[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price];
		}

		if(VDealerImmob[playerid])
		{
		    id = VDealerImmob[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price];
		}

		if(VDealerAlarm[playerid])
		{
		    id = VDealerAlarm[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price];
		}

		if(VDealerXM{playerid}) price += 7500;

	}
    if(playerData[playerid][pCash] < price) {
        format(str, sizeof(str), "{FF0000}%s", FormatNumber(price));
    }
    else
    {
         format(str, sizeof(str), "{33AA33}%s", FormatNumber(price));
    }

	return str;
}

GetDealershipCountPrice(playerid)
{
	new price = VDealerPrice[playerid], id;

    if(!VDealerFaction{playerid} || playerData[playerid][pFaction] == -1) {
    
		if(VDealerLock[playerid])
		{
		    id = VDealerLock[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price];
		}

		if(VDealerImmob[playerid])
		{
		    id = VDealerImmob[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price];
		}

		if(VDealerAlarm[playerid])
		{
		    id = VDealerAlarm[playerid]-1;
		    price += floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price];
		}

		if(VDealerXM{playerid}) price += 7500;
	}

	return price;
}

RandomVehiclePlate()
{
	const len = 7;
	new plate[len+1];
	for (new i = 0; i < len; i++)
	{
	 	/*if (i + 1 == hyphenpos)
		{
	    	plate[i] = '-';
	   		continue;
	    }*/
	    if (i > 0 && i < 4) // letter or number?
	    {
	     	plate[i] = 'A' + random(26);
	    }
	    else
	    { // number
	    	plate[i] = '0' + random(10);
	    }
	}
	return plate;
}

ExitSettingVehicle(playerid)
{
	if(VDealerSetting{playerid})
	{
	    VDealerSetting{playerid} = false;

		if (VDealerVehicle[playerid])
		    DestroyVehicle(VDealerVehicle[playerid]);

        TogglePlayerControllable(playerid, 1);
        VDealerColor[playerid][0] = -1;
        VDealerColor[playerid][1] = -1;
        VDealerBiz[playerid] = -1;

		VDealerLock[playerid]=0;
		VDealerImmob[playerid]=0;
		VDealerAlarm[playerid]=0;
		VDealerXM{playerid}=false;
		VDealerFaction{playerid}=false;
		
		SetCameraBehindPlayer(playerid);
	}
}

ShowPlayerColorSelection(playerid, page)
{
	new string[64], selecttype, selectstart;

    ColorSelectPage[playerid] = page;

	if(ColorSelect[playerid] >= 0)
	{
        for (new i = 0; i != sizeof(ColorMenuSelect); i ++)
        {
			if(ColorMenuSelect[i][1] == ColorSelect[playerid])
			{
			    if(!selectstart)
			    {
			        selectstart = i + (8 * (page-1));
			    }
				selecttype++;
			}
		}

		ColorSelectItem[playerid] = selecttype;
		ColorSelectPages[playerid] = floatround(floatdiv(ColorSelectItem[playerid], 8), floatround_ceil);

	}
	else
	{
        selectstart = 8 * (page-1);
		ColorSelectItem[playerid] = sizeof(ColorMenuInfo);
		ColorSelectPages[playerid] = floatround(floatdiv(ColorSelectItem[playerid], 8), floatround_ceil);
    }

	for(new i = 0 ; i < 8 ; i++ )
	{
		PlayerTextDrawHide(playerid, ColorSelection[playerid][i]);
	}
	PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectLeft[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectRight[playerid]);

	new start = (8 * (page-1));

	for (new i = start; i != start + 8 && i < ColorSelectItem[playerid]; i ++)
	{
	    if(ColorSelect[playerid] >= 0)
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i-start], g_arrSelectColors[ColorMenuSelect[selectstart+i-start][0]]);
	    	ColorSelectListener[playerid][i-start] = ColorMenuSelect[selectstart+i-start][0];

	    }
	    else
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i-start], g_arrSelectColors[ColorMenuInfo[selectstart+i-start][0]]);
		    ColorSelectListener[playerid][i-start] = i;

	    }
	    PlayerTextDrawShow(playerid, ColorSelection[playerid][i-start]);
	}

	if(ColorSelect[playerid] >= 0)
	{
		format(string, sizeof(string),"%s (%d/%d)", ColorMenuInfo[ColorSelect[playerid]][1], page, ColorSelectPages[playerid]);
		PlayerTextDrawColor(playerid,ColorSelectText[playerid], g_arrSelectColors[ColorMenuInfo[ColorSelect[playerid]][0]]);
		PlayerTextDrawSetString(playerid, ColorSelectText[playerid], string);
	}
	else
	{
	    PlayerTextDrawColor(playerid,ColorSelectText[playerid], -1);
		PlayerTextDrawSetString(playerid, ColorSelectText[playerid], "Primary Colors");
	}
	PlayerTextDrawShow(playerid, ColorSelectText[playerid]);


	if(page-1 != 0)
	{
		PlayerTextDrawShow(playerid, ColorSelectLeft[playerid]);
	}
	if(page+1 <= ColorSelectPages[playerid])
	{
		PlayerTextDrawShow(playerid, ColorSelectRight[playerid]);
	}

	ColorSelectShow{playerid} = true;

	SelectTextDraw(playerid, 0x585858FF);
	return 1;
}


ShowPlayerColorSelection2(playerid, page)
{
	new string[64], selecttype, selectstart;

    ColorSelectPage2[playerid] = page;

	if(ColorSelect2[playerid] >= 0)
	{
        for (new i = 0; i != sizeof(ColorMenuSelect); i ++)
        {
			if(ColorMenuSelect[i][1] == ColorSelect2[playerid])
			{
			    if(!selectstart)
			    {
			        selectstart = i + (8 * (page-1));
			    }
				selecttype++;
			}
		}

		ColorSelectItem2[playerid] = selecttype;
		ColorSelectPages2[playerid] = floatround(floatdiv(ColorSelectItem2[playerid], 8), floatround_ceil);

	}
	else
	{
        selectstart = 8 * (page-1);
		ColorSelectItem2[playerid] = sizeof(ColorMenuInfo);
		ColorSelectPages2[playerid] = floatround(floatdiv(ColorSelectItem2[playerid], 8), floatround_ceil);
    }

	for(new i = 0 ; i < 8 ; i++ )
	{
		PlayerTextDrawHide(playerid, ColorSelection2[playerid][i]);
	}
	PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectLeft2[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectRight2[playerid]);

	new start = (8 * (page-1));

	for (new i = start; i != start + 8 && i < ColorSelectItem2[playerid]; i ++)
	{
	    if(ColorSelect2[playerid] >= 0)
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i-start], g_arrSelectColors[ColorMenuSelect[selectstart+i-start][0]]);
	    	ColorSelectListener2[playerid][i-start] = ColorMenuSelect[selectstart+i-start][0];

	    }
	    else
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i-start], g_arrSelectColors[ColorMenuInfo[selectstart+i-start][0]]);
		    ColorSelectListener2[playerid][i-start] = i;

	    }
	    PlayerTextDrawShow(playerid, ColorSelection2[playerid][i-start]);
	}

	if(ColorSelect2[playerid] >= 0)
	{
		format(string, sizeof(string),"%s (%d/%d)", ColorMenuInfo[ColorSelect2[playerid]][1], page, ColorSelectPages2[playerid]);
		PlayerTextDrawColor(playerid,ColorSelectText2[playerid], g_arrSelectColors[ColorMenuInfo[ColorSelect2[playerid]][0]]);
		PlayerTextDrawSetString(playerid, ColorSelectText2[playerid], string);
	}
	else
	{
	    PlayerTextDrawColor(playerid,ColorSelectText2[playerid], -1);
		PlayerTextDrawSetString(playerid, ColorSelectText2[playerid], "Secondary Colors");
	}
	PlayerTextDrawShow(playerid, ColorSelectText2[playerid]);


	if(page-1 != 0)
	{
		PlayerTextDrawShow(playerid, ColorSelectLeft2[playerid]);
	}
	if(page+1 <= ColorSelectPages2[playerid])
	{
		PlayerTextDrawShow(playerid, ColorSelectRight2[playerid]);
	}

	ColorSelectShow2{playerid} = true;

	SelectTextDraw(playerid, 0x585858FF);
	return 1;
}

ClearColorSelect(playerid)
{
	if(ColorSelectShow{playerid} || ColorSelectShow2{playerid})
	{
		for(new i = 0 ; i < 8 ; i++ )
		{
			PlayerTextDrawHide(playerid, ColorSelection[playerid][i]);
			PlayerTextDrawHide(playerid, ColorSelection2[playerid][i]);
		}
		PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectLeft[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectRight[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectLeft2[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectRight2[playerid]);
		ColorSelectPage[playerid] = 1;
		ColorSelectPage2[playerid] = 1;

		ColorSelect[playerid] = -1;
		ColorSelect2[playerid] = -1;

		ColorSelectShow{playerid} = false;
		ColorSelectShow2{playerid} = false;

		if(VDealerSetting{playerid})
		{
		    ShowPlayerDealercarDialog(playerid);
		}
	}
	return 1;
}

SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

/*
CMD:findcolor(playerid, params[])
{
	new type[24], slot, colourf[24];

	if (sscanf(params, "ds[24]", slot, type))
 	{
	 	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /findcolor [ช่อง] [color]");
		return 1;
	}

	for(new i=0; i<256;i++)
	{
	    format(colourf, sizeof(colourf), "%06x", g_arrSelectColors[i] >>> 8);

	    if(!strcmp(colourf, type, true))
	    {
	        SendClientMessageEx(playerid, -1, "Slot %d", i);
	        printf("{%d, %d},", i, slot);
	        break;
	    }
	}
	return 1;
}*/


//248.200164, 354.422149
/*CMD:settextdraw(playerid, params[])
{
	new Float:csx;
	new Float:csy;

	if (sscanf(params, "ff", csx, csy))
 	{
	 	SendClientMessage(playerid, COLOR_YELLOW3, "การใช้: /setpos [x] [y]");
		return 1;
	}

	PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);

	PlayerTextDrawSetPos(playerid, ColorSelectText[playerid], csx, csy);
	PlayerTextDrawSetPos(playerid, ColorSelectText2[playerid], 260+csx, csy);

	PlayerTextDrawShow(playerid, ColorSelectText[playerid]);
	PlayerTextDrawShow(playerid, ColorSelectText2[playerid]);
	return 1;
}*/

CMD:vehname(playerid, params[]) {

		if(playerData[playerid][pAdmin] < 2)
		    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

		new
			rcount;

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_GREY, "No keyword specified.");

		if(strlen(params) < 3)
			return SendClientMessage(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(g_arrVehicleNames); v++) {
			if(strfind(g_arrVehicleNames[v], params, true) != -1) {

				if(rcount == 0)
					format(szString, sizeof(szString), "%s (ID %d)", g_arrVehicleNames[v], v+400);
				else
					format(szString, sizeof(szString), "%s | %s (ID %d)", szString, g_arrVehicleNames[v], v+400);

				rcount++;
			}
		}

		if(rcount == 0)
			SendClientMessage(playerid, COLOR_GREY, "No results found.");

		else
			if(strlen(szString) >= 128)
				SendClientMessage(playerid, COLOR_GREY, "Too many results found.");
			else
				SendClientMessage(playerid, COLOR_WHITE, szString);


		return 1;
}

initiateTutorial(playerid)
{
    ClearChatBox(playerid);
	playerData[playerid][pTutorialStep] = 1;
    SendClientMessage(playerid, COLOR_WHITE, " ยินดีต้อนรับเข้าสู่ Los Angeles Role Play!");
    SendClientMessage(playerid, COLOR_GRAD3, "บทเรียนวีดิทัศน์นี้จะแนะนำคุณสำหรับก้าวแรกบน LA-RP");
    SendClientMessage(playerid, COLOR_GRAD3, "ใช้ 'SPACE' และ 'LSHIFT' บนคีย์บอร์ดของคุณเพื่อเรียกดูหน้าต่าง ๆ");
    SendClientMessage(playerid, COLOR_GRAD3, "เราขอแนะนำให้คุณใช้เวลาอ่านมัน");

	SetPlayerCameraPos(playerid, 1541.1512,-2287.1345,91.9661);
	SetPlayerCameraLookAt(playerid, 1623.3582,-2288.0413,77.9914);

	return 1;
}



GetIDByName(const playername[])
{
    foreach (new i : Player)
	{
		if(SQL_IsLogged(i))
		{
			new pName[MAX_PLAYER_NAME];
			GetPlayerName(i, pName, sizeof(pName));
			if(strcmp(pName, playername, true, strlen(playername)) == 0)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

SetBusinessInterior(playerid, bizid, int)
{
	if(int == 0)
	{
		BizInfo[bizid][bExitX] = 0.0;
		BizInfo[bizid][bExitY] = 0.0;
		BizInfo[bizid][bExitZ] = 0.0;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "Business ID: %d - Description: None", bizid);
	}
	else if(int == 1)
	{
		BizInfo[bizid][bExitX] = -794.806030;
		BizInfo[bizid][bExitY] = 491.686004;
		BizInfo[bizid][bExitZ] = 1376.194946;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Marcos Bistro", bizid);
	}
	else if(int == 2)
	{
		BizInfo[bizid][bExitX] = 1212.019897;
		BizInfo[bizid][bExitY] = -28.663099;
		BizInfo[bizid][bExitZ] = 1001.089966;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Big Spread Ranch Strip Club", bizid);
	}
	else if(int == 3)
	{
		BizInfo[bizid][bExitX] = 366.923980;
		BizInfo[bizid][bExitY] = -72.929359;
		BizInfo[bizid][bExitZ] = 1001.507812;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "Business ID: %d - Description: Burger Shot", bizid);
	}
	else if(int == 4)
	{
		BizInfo[bizid][bExitX] = 365.672974;
		BizInfo[bizid][bExitY] = -10.713200;
		BizInfo[bizid][bExitZ] = 1001.869995;
		BizInfo[bizid][bInterior] = 9;
		format(szString, sizeof(szString), "Business ID: %d - Description: Cluckin Bell", bizid);
	}
	else if(int == 5)
	{
		BizInfo[bizid][bExitX] = 372.351990;
		BizInfo[bizid][bExitY] = -131.650986;
		BizInfo[bizid][bExitZ] = 1001.449951;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "Business ID: %d - Description: Well Stacked Pizza", bizid);
	}
	else if(int == 6)
	{
		BizInfo[bizid][bExitX] = 377.098999;
		BizInfo[bizid][bExitY] = -192.439987;
		BizInfo[bizid][bExitZ] = 1000.643982;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "Business ID: %d - Description: Rusty Brown Dohnuts", bizid);
	}
	else if(int == 7)
	{
		BizInfo[bizid][bExitX] = 460.099976;
		BizInfo[bizid][bExitY] = -88.428497;
		BizInfo[bizid][bExitZ] = 999.621948;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "Business ID: %d - Description: Jays Diner", bizid);
	}
	else if(int == 8)
	{
		BizInfo[bizid][bExitX] = 681.474976;
		BizInfo[bizid][bExitY] = -451.150970;
		BizInfo[bizid][bExitZ] = -25.616798;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Pump Truck Stop Diner", bizid);
	}
	else if(int == 9)
	{
		BizInfo[bizid][bExitX] = 476.068328;
		BizInfo[bizid][bExitY] = -14.893922;
		BizInfo[bizid][bExitZ] = 1003.695312;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "Business ID: %d - Description: Alhambra", bizid);
	}
	else if(int == 10)
	{
		BizInfo[bizid][bExitX] = 501.980988;
		BizInfo[bizid][bExitY] = -69.150200;
		BizInfo[bizid][bExitZ] = 998.834961;
		BizInfo[bizid][bInterior] = 11;
		format(szString, sizeof(szString), "Business ID: %d - Description: Mistys", bizid);

	}
	else if(int == 11)
	{
		BizInfo[bizid][bExitX] = -227.028000;
		BizInfo[bizid][bExitY] = 1401.229980;
		BizInfo[bizid][bExitZ] = 27.769798;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "Business ID: %d - Description: Lil' Probe Inn", bizid);
	}
	else if(int == 12)
	{
		BizInfo[bizid][bExitX] = 204.332993;
		BizInfo[bizid][bExitY] = -166.694992;
		BizInfo[bizid][bExitZ] = 1000.578979;
		BizInfo[bizid][bInterior] = 14;
		format(szString, sizeof(szString), "Business ID: %d - Description: EXcLusive", bizid);
	}
	else if(int == 13)
	{
		BizInfo[bizid][bExitX] = 207.737991;
		BizInfo[bizid][bExitY] = -109.019997;
		BizInfo[bizid][bExitZ] = 1005.269958;
		BizInfo[bizid][bInterior] = 15;
		format(szString, sizeof(szString), "Business ID: %d - Description: Binco", bizid);
	}
	else if(int == 14)
	{
		BizInfo[bizid][bExitX] = 207.054993;
		BizInfo[bizid][bExitY] = -138.804993;
		BizInfo[bizid][bExitZ] = 1003.519958;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: ProLaps", bizid);
	}
	else if(int == 15)
	{
		BizInfo[bizid][bExitX] = 203.778000;
		BizInfo[bizid][bExitY] = -48.492397;
		BizInfo[bizid][bExitZ] = 1001.799988;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: SubUrban", bizid);
	}
	else if(int == 16)
	{
		BizInfo[bizid][bExitX] = 226.293991;
		BizInfo[bizid][bExitY] = -7.431530;
		BizInfo[bizid][bExitZ] = 1002.259949;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "Business ID: %d - Description: Victim", bizid);
	}
	else if(int == 17)
	{
		BizInfo[bizid][bExitX] = 161.391006;
		BizInfo[bizid][bExitY] = -93.159156;
		BizInfo[bizid][bExitZ] = 1001.804687;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "Business ID: %d - Description: Zip", bizid);
	}
	else if(int == 18)
	{
		BizInfo[bizid][bExitX] = 1133.069946;
		BizInfo[bizid][bExitY] = -9.573059;
		BizInfo[bizid][bExitZ] = 1000.750000;
		BizInfo[bizid][bInterior] = 12;
		format(szString, sizeof(szString), "Business ID: %d - Description: Small Casino in Redsands West", bizid);
	}
	else if(int == 19)
	{
		BizInfo[bizid][bExitX] = 833.818970;
		BizInfo[bizid][bExitY] = 7.418000;
		BizInfo[bizid][bExitZ] = 1004.179993;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Off Track Betting", bizid);
	}
	else if(int == 20)
	{
		BizInfo[bizid][bExitX] = -100.325996;
		BizInfo[bizid][bExitY] = -22.816500;
		BizInfo[bizid][bExitZ] = 1000.741943;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Sex Shop", bizid);
	}
	else if(int == 21)
	{
		BizInfo[bizid][bExitX] = -2239.569824;
		BizInfo[bizid][bExitY] = 130.020996;
		BizInfo[bizid][bExitZ] = 1035.419922;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "Business ID: %d - Description: Zero's RC Shop", bizid);
	}
	else if(int == 22)
	{
		BizInfo[bizid][bExitX] = 286.148987;
		BizInfo[bizid][bExitY] = -40.644398;
		BizInfo[bizid][bExitZ] = 1001.569946;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Ammunation 1", bizid);
	}
	else if(int == 23)
	{
		BizInfo[bizid][bExitX] = 286.800995;
		BizInfo[bizid][bExitY] = -82.547600;
		BizInfo[bizid][bExitZ] = 1001.539978;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "Business ID: %d - Description: Ammunation 2", bizid);
	}
	else if(int == 24)
	{
		BizInfo[bizid][bExitX] = 296.919983;
		BizInfo[bizid][bExitY] = -108.071999;
		BizInfo[bizid][bExitZ] = 1001.569946;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "Business ID: %d - Description: Ammunation 3", bizid);
	}
	else if(int == 25)
	{
		BizInfo[bizid][bExitX] = 316.524994;
		BizInfo[bizid][bExitY] = -167.706985;
		BizInfo[bizid][bExitZ] = 999.661987;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "Business ID: %d - Description: Ammunation 4", bizid);
	}
	else if(int == 26)
	{
		BizInfo[bizid][bExitX] = -2637.449951;
		BizInfo[bizid][bExitY] = 1404.629883;
		BizInfo[bizid][bExitZ] = 906.457947;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Jizzys", bizid);
	}
	else if(int == 27)
	{
		BizInfo[bizid][bExitX] = -25.884499;
		BizInfo[bizid][bExitY] = -185.868988;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 1", bizid);
	}
	else if(int == 28)
	{
		BizInfo[bizid][bExitX] = 6.091180;
		BizInfo[bizid][bExitY] = -29.271898;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 2", bizid);
	}
	else if(int == 29)
	{
		BizInfo[bizid][bExitX] = -30.946699;
		BizInfo[bizid][bExitY] = -89.609596;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 3", bizid);
	}
	else if(int == 30)
	{
		BizInfo[bizid][bExitX] = -25.132599;
		BizInfo[bizid][bExitY] = -139.066986;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 16;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 4", bizid);
	}
	else if(int == 31)
	{
		BizInfo[bizid][bExitX] = -27.312300;
		BizInfo[bizid][bExitY] = -29.277599;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 5", bizid);
	}
	else if(int == 32)
	{
		BizInfo[bizid][bExitX] = -26.691599;
		BizInfo[bizid][bExitY] = -55.714897;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "Business ID: %d - Description: 24-7 6", bizid);
  	}
	else if(int == 33)
	{
		BizInfo[bizid][bExitX] = 1494.430053;
		BizInfo[bizid][bExitY] = 1305.63004;
		BizInfo[bizid][bExitZ] = 1093.290039;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Advertising/Phone Network", bizid);
  	}
	else if(int == 34)
	{
		BizInfo[bizid][bExitX] = 965.1851;
		BizInfo[bizid][bExitY] = -53.2832;
		BizInfo[bizid][bExitZ] = 1001.1246;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Bothel", bizid);
	}
	else if(int == 35)
	{
		BizInfo[bizid][bExitX] = 2018.0131;
		BizInfo[bizid][bExitY] = 1017.8541;
		BizInfo[bizid][bExitZ] = 996.8750;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "Business ID: %d - Description: Four Dragons Casino", bizid);
	}
	else if(int == 36)
	{
		BizInfo[bizid][bExitX] = 617.5380;
		BizInfo[bizid][bExitY] = -1.9900;
		BizInfo[bizid][bExitZ] = 1000.6829;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Bikers Garage", bizid);
	}
	else if(int == 37)
	{
		BizInfo[bizid][bExitX] = 772.112000;
		BizInfo[bizid][bExitY] = -3.898650;
		BizInfo[bizid][bExitZ] = 1000.687988;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "Business ID: %d - Description: Ganton Gym", bizid);
	}
	else if(int == 38) // Tattoo 1
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -8.469599;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "Business ID: %d - Description: Tattoo 1", bizid);
	}
	else if(int == 39) // Tattoo 2
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -43.652496;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Tattoo 2", bizid);
	}
	else if(int == 40) // Tattoo 3
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -26.453998;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 12;
		format(szString, sizeof(szString), "Business ID: %d - Description: Tattoo 3", bizid);
	}
	else if(int == 41)
	{
		BizInfo[bizid][bExitX] = 318.564972;
		BizInfo[bizid][bExitY] = 1118.209961;
		BizInfo[bizid][bExitZ] = 1083.979980;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "Business ID: %d - Description: Crack Den", bizid);
	}
	else if(int == 42)
	{
		BizInfo[bizid][bExitX] = -2240.468505;
		BizInfo[bizid][bExitY] = 137.060440;
		BizInfo[bizid][bExitZ] = 1035.414062;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "Business ID: %d - Description: Zero RC shop", bizid);
	}
	else if(int == 43)
	{
		BizInfo[bizid][bExitX] = 245.2307;
		BizInfo[bizid][bExitY] = 304.7632;
		BizInfo[bizid][bExitZ] = 999.1484;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "Business ID: %d - Description: Record Studio", bizid);
	}
	else if(int == 44)
	{
		BizInfo[bizid][bExitX] = 1506.24609375;
		BizInfo[bizid][bExitY] = -1815.40039062;
		BizInfo[bizid][bExitZ] = -43.72590637;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "Business ID: %d - Description: LS Court Room", bizid);
	}
	else if(int == 45)
	{
		BizInfo[bizid][bExitX] = 963.418762;
		BizInfo[bizid][bExitY] = 2108.292480;
		BizInfo[bizid][bExitZ] = 1011.030273;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Meat Factory", bizid);
	}
	else if(int == 46)
	{
		BizInfo[bizid][bExitX] = -2154.34155;
		BizInfo[bizid][bExitY] = 618.79169;
		BizInfo[bizid][bExitZ] = 1055.45166;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "Business ID: %d - Description: Betting Place", bizid);
	}
	else if(int == 47)
	{
		BizInfo[bizid][bExitX] = 418.6547;
		BizInfo[bizid][bExitY] = -83.6987;
		BizInfo[bizid][bExitZ] = 1001.8047;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Barber Shop", bizid);
	}
	else if(int == 48)
	{
		BizInfo[bizid][bExitX] = -2640.762939;
		BizInfo[bizid][bExitY] = 1406.682006;
		BizInfo[bizid][bExitZ] = 906.460937;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "Business ID: %d - Description: Pleasure Domes", bizid);
	}
	UpdateBizInfo(bizid);
	SendClientMessage(playerid, COLOR_GRAD2, szString);
	return 1;
}

forward CreateGuideMenus();
public CreateGuideMenus()
{
	Guide = CreateMenu("Los Santos Newspaper", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(Guide, 0, "Citizen info");
	AddMenuItem(Guide, 0, "Next page");
	AddMenuItem(Guide, 0, "How to call taxi");
	AddMenuItem(Guide, 0, "Bus routes");
	AddMenuItem(Guide, 0, "Where to live");
	AddMenuItem(Guide, 0, "Medic help");
	AddMenuItem(Guide, 0, "Police help");
	AddMenuItem(Guide, 0, "OOC: Forum link");

	GuideJob1 = CreateMenu("Los Santos Newspaper", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(GuideJob1, 0, "Employment and legal jobs");
	AddMenuItem(GuideJob1, 0, "Next page");
	AddMenuItem(GuideJob1, 0, "Farmer");

	GuideJob2 = CreateMenu("Los Santos Newspaper", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(GuideJob2, 0, "Employment and legal jobs");
	AddMenuItem(GuideJob2, 0, "Next page");
	AddMenuItem(GuideJob2, 0, "Car mechanic");
	AddMenuItem(GuideJob2, 0, "Trucker");
}

CMD:newspaper(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 1663.4677,-2332.1433,-2.6797))
	{
	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(Guide, playerid);
		return 1;
	}
	else SendClientMessage(playerid, COLOR_GREY,"** คุณไม่ได้อยู่ตรงหนังสือพิมพ์");

	return 1;
}

CMD:buycomp(playerid, params[])
{
	new compid = -1;

	for (new i = 0; i < MAX_ITEM_STORAGE; i ++)
	{
		if(StorageData[i][in_item]==23) {
			compid = i;
		}
	}
		
	if(playerData[playerid][pJob] != JOB_MECHANIC && playerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Car Mechanic");

	if(compid != -1 && !IsPlayerInRangeOfPoint(playerid, 5.0, StorageData[compid][in_posx], StorageData[compid][in_posy], StorageData[compid][in_posz]))
	{
		SetPlayerCheckpoint(playerid, StorageData[compid][in_posx], StorageData[compid][in_posy], StorageData[compid][in_posz], 4.0);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_COMP;

		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่โกดังขายชิ้นส่วน เราให้เครื่องหมายไว้ในแผนที่แล้ว");
		return 1;
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid), amount, tmp2[16];

		if (GetVehicleModel(vehicleid) != 525)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่บน Tow Truck");

	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่ที่นั่งคนขับของยานพาหนะ");

		if (sscanf(params, "dS()[16]", amount, tmp2)) {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณถูกจำกัดไว้ที่ 1-2,000");
		    SendClientMessage(playerid, COLOR_WHITE, "!! ในชิ้นส่วนแต่ละลังจะมีผลิตภันฑ์ 25 ชิ้น !!");
		    return 1;
		}

		new string[16], price = amount*StorageData[compid][in_price], slot = -1;
		if (!sscanf(tmp2, "s[16]", string)) {

	        if(strcmp(string,"yes",true) == 0)
			{
				if(amount <= 0) {
				    SendClientMessage(playerid, COLOR_LIGHTRED, "จำนวนไม่ถูกต้อง");
				    return 1;
				}
					
				if(playerData[playerid][pCash] <  price)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอที่จะซื้อ");

				if(StorageData[compid][in_stock] <  amount)
				    return SendClientMessage(playerid, COLOR_WHITE, "อุตสาหกรรมนี้มีไม่เพียงพอ");

                if((slot = Car_GetID(vehicleid)) != -1) {
                    if(CarData[slot][carComps]+(amount*25) < 50000)
                    {
						playerData[playerid][pCash] -= price;

	                    CarData[slot][carComps]+=amount*25;

						StorageData[compid][in_stock]-=amount;
						if(StorageData[compid][in_stock] < 0) StorageData[compid][in_stock] = 0;
			   			UpdateStorage(compid);

						SendClientMessageEx(playerid, COLOR_WHITE, "คุณซื้อสินค้า %d(%d ผลิตภันฑ์) ลังให้กับรถบรรทุกของคุณ", amount, amount*25);
					}
					else SendClientMessage(playerid, COLOR_WHITE, "ไม่สามารถซื้อได้มากกว่านี้แล้ว 1-2,000");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Cost: {E85050}%s", FormatNumber(price));
		SendClientMessageEx(playerid, COLOR_WHITE, "การใช้: /buycomp %d yes", amount);
	}
	return 1;
}

CMD:paintcar(playerid, params[])
{
	if(playerData[playerid][pJob] != JOB_MECHANIC && playerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Car Mechanic");

	new carid = -1;

    if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

        if(CarData[carid][carModel] != 525)
			return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่บน Towtruck");

        new color1, color2, userid, confirm[16];

		if (sscanf(params, "uddS()[16]", userid, color1, color2, confirm)) return SendSyntaxMessage(playerid, "/paintcar [ไอดีผู้เล่น/ชื่อบางส่วน] [color 1] [color 2]");

		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{ddS()[16]}", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			}
		}

		if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "สีของยานพาหนะ: 0-255");

		/*if(userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่สามารถเสนอบริการให้กับตัวเองได้!");*/

		if(tToAccept[userid] != OFFER_TYPE_NONE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นมีข้อเสนออยู่ในปัจจุบัน!");

		if (!IsPlayerNearPlayer(playerid, userid, 10.0))
		   return SendClientMessage(playerid, COLOR_GRAD1, "ผู้เล่นนั้นตัดการเชื่อมต่อหรือไม่ได้อยู่ใกล้คุณ");

		//if((pcarid = Car_GetID(GetPlayerVehicleID(userid))) == -1)
		if (!IsPlayerInAnyVehicle(userid))
		    return SendClientMessage(playerid, COLOR_GRAD1, "ผู้เล่นนั้นไม่ได้อยู่บนรถ");

      	if (!strcmp(confirm, "yes", true) && strlen(confirm))
		{
			if(CarData[carid][carComps] < 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมี Component ไม่เพียงพอสำหรับการเปลี่ยนสียานพาหนะ");

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: ข้อเสนอถูกส่ง");

			pToAccept[userid] = playerid;
			tToAccept[userid] = OFFER_TYPE_SERVICE;

			SetPVarInt(playerid, "color1", color1);
			SetPVarInt(playerid, "color2", color2);

			serviceComp[playerid] = 10;
			serviceTowtruck[playerid] = carid;
			serviceCustomer[playerid] = GetPlayerVehicleID(userid);
			serviced[playerid] = 5;

			format(szString, sizeof(szString), "%s has offered to service ~y~repaint the bodywork ~w~%s~n~~p~press ~g~Y~p~ to accept or ~r~N ~p~to deny.", ReturnRealName(pToAccept[userid]), g_arrVehicleNames[GetVehicleModel(GetPlayerVehicleID(userid)) - 400]);
			ShowPlayerFooter(userid, szString, -1);
		}
		else {
			SendClientMessage(playerid, COLOR_YELLOW, "บริการนี้ต้องใช้ Component ทั้งหมด 10 ชิ้น");
			SendSyntaxMessage(playerid, "/paintcar %d %d yes", color1, color2);
		}
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	return 1;
}


CMD:service(playerid, params[])
{

	if(playerData[playerid][pJob] != JOB_MECHANIC && playerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Car Mechanic");

	new
		userid, type, confirm[16], carid, pcarid;


    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่บน Towtruck");

    if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

        if(CarData[carid][carModel] != 525)
			return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่บน Towtruck");

		if (sscanf(params, "udS()[16]", userid, type, confirm))
		{
			SendSyntaxMessage(playerid, "/service [ไอดีผู้เล่น/ชื่อบางส่วน] [service]");
			SendClientMessage(playerid, COLOR_GRAD1, "Service 1:"EMBED_WHITE" เพิ่มเลือดรถ");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 2:"EMBED_WHITE" ซ่อมตัวถัง (( ความเสียหายที่มองเห็น ))");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 3:"EMBED_WHITE" เปลี่ยนแบตเตอรี่");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 4:"EMBED_WHITE" เปลี่ยนเครื่องยนต์");
			return 1;
		}
		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{dS()[16]}", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			}
		}

		if(tToAccept[userid] != OFFER_TYPE_NONE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นมีข้อเสนออยู่ในปัจจุบัน!");

		if (!IsPlayerNearPlayer(playerid, userid, 10.0))
		   return SendClientMessage(playerid, COLOR_GRAD1, "ผู้เล่นนั้นตัดการเชื่อมต่อหรือไม่ได้อยู่ใกล้คุณ");

		if((pcarid = GetPlayerVehicleID(userid)) == INVALID_VEHICLE_ID)
		    return SendClientMessage(playerid, COLOR_GRAD1, "ผู้เล่นนั้นไม่ได้อยู่บนรถ");


		if(type >= 1 && type <= 4)
		{
			new model=GetVehicleModel(pcarid), comp = 0, service_name[20];
			if(model != 0) {
				switch(type) {
					case 1: {
						new Float:vHealth = GetVehicleDataHealth(model);
						GetVehicleHealth(pcarid, CoreVehicles[pcarid][vehHealth]);
						
						if(vHealth < CoreVehicles[pcarid][vehHealth]) {
							vHealth = CoreVehicles[pcarid][vehHealth] - vHealth;
						}
						else {
							vHealth = vHealth - CoreVehicles[pcarid][vehHealth];
						}
						comp = floatround(vHealth / 50.0 * 2.0);
						format(service_name, sizeof(service_name), "repair vehicle");
					}
					case 2: {
						comp = floatround(float(GetRepairPrice(pcarid)) / 10.0, floatround_round);
						format(service_name, sizeof(service_name), "repair bodywork");
					}
					case 3: {
						new Float:max_battery = VehicleData[model - 400][c_battery]; // 341200 ใช้Component 24371

						comp = floatround(VehicleData[model - 400][c_price] / 2.50) + floatround(max_battery * 12.0);

						format(service_name, sizeof(service_name), "replace the battery");
					}
					case 4: {
						new Float:max_engine = VehicleData[model - 400][c_engine]; //486914

						comp = floatround(VehicleData[model - 400][c_price] / 1.75) + floatround(max_engine * 12.0);

						format(service_name, sizeof(service_name), "replace the engine");
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "ผู้เล่นนั้นไม่ได้อยู่บนรถ");

			if(comp <= 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถให้บริการนี้กับยานพาหนะปัจจุบันได้");

      		if (!strcmp(confirm, "yes", true) && strlen(confirm))
		    {
		        if(CarData[carid][carComps] < comp) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมี Component ไม่เพียงสำหรับการให้บริการ");

				SendClientMessage(playerid, COLOR_YELLOW, "SERVER: ข้อเสนอถูกส่ง");


				pToAccept[userid] = playerid;
				tToAccept[userid] = OFFER_TYPE_SERVICE;

				serviceComp[playerid] = comp;
				serviceTowtruck[playerid] = carid;
				serviceCustomer[playerid] = pcarid;
				serviced[playerid] = type;

				new str[145];		
				format(str, sizeof(str), "%s has offered to service ~y~%s ~w~%s~n~~p~press ~g~Y~p~ to accept or ~r~N ~p~to deny.", ReturnRealName(pToAccept[userid]), service_name, g_arrVehicleNames[model - 400]);
			 	ShowPlayerFooter(userid, str, -1);
		    }
			else {

				SendClientMessageEx(playerid, COLOR_YELLOW, "บริการนี้ต้องใช้ Component ทั้งหมด %d ชิ้น", comp);
				SendSyntaxMessage(playerid, "/service [ไอดีผู้เล่น/ชื่อบางส่วน] %d yes", type);
			}
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "บริการที่ใช้ได้ 1-4 เท่านั้น");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");


	return 1;
}

CMD:checkcomponents(playerid, params[])
{
	if(playerData[playerid][pJob] != JOB_MECHANIC && playerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Car Mechanic");

	new slot = -1, vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) != 525)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่บน Tow Truck");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่ที่นั่งคนขับของยานพาหนะ");

    if((slot = Car_GetID(vehicleid)) != -1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Components: %d", CarData[slot][carComps]);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
	return 1;
}

/*CMD:colorlist(playerid, params[])
{
	new id = -1;

	if ((playerData[playerid][pJob] == JOB_MECHANIC || playerData[playerid][pSideJob] == JOB_MECHANIC) || ((id = nearBiz_var[playerid]) != -1 && BizInfo[id][bType] == 4))
	{
	    new
			string[3344];

	    string = "";

		for(new i = 0; i < 256; i++)
		{
		    if(i > 0 && (i % 16) == 0)
		    {
		        format(string, sizeof(string), "%s\n{%06x}#%03d ", string, g_arrSelectColors[i] >>> 8, i);
			}
		    else
			{
				format(string, sizeof(string), "%s{%06x}#%03d ", string, g_arrSelectColors[i] >>> 8, i);
			}
		}
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "List of Color ID's:", string, "Close", "");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");


	return 1;
}*/

CMD:colorlist(playerid, params[])
{
	new id = -1;

	if ((playerData[playerid][pJob] == JOB_MECHANIC || playerData[playerid][pSideJob] == JOB_MECHANIC) || ((id = nearBiz_var[playerid]) != -1 && BizInfo[id][bType] == 4))
	{
	    static
			color_code[3344];

	    if (color_code[0] == EOS) {
			for(new i = 0; i < 256; i++)
			{
			    if(i > 0 && (i % 16) == 0) format(color_code, sizeof(color_code), "%s\n{%06x}#%03d", color_code, g_arrSelectColors[i] >>> 8, i);
			    else format(color_code, sizeof(color_code), "%s{%06x}#%03d ", color_code, g_arrSelectColors[i] >>> 8, i);
			}
		}
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "List of Color ID's:", color_code, "Close", "");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตัวแทนจำหน่ายยานพาหนะ");


	return 1;
}

CMD:detach(playerid)
{
    new vid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vid) != 525)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่บน Tow Truck");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่ที่นั่งคนขับของยานพาหนะ");

	new
	    trailerid = GetVehicleTrailer(vid);

    if (!trailerid)
	    return 1;

	DetachTrailerFromVehicle(vid);

	return 1;
}

CMD:leavesidejob(playerid)
{
	if(playerData[playerid][pSideJob] != 0)
	{
	    playerData[playerid][pSideJob]=0;
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณได้ออกจากอาชีพเสริมในปัจจุบันแล้ว");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาชีพเสริมในปัจจุบัน");

}

CMD:leavejob(playerid) {
	if(playerData[playerid][pJob])
	{
		if(playerData[playerid][pJob] != JOB_MECHANIC && playerData[playerid][pJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_GUIDE) {
			if(playerData[playerid][pDonateRank])
			{
				if(playerData[playerid][pContractTime])
				{
					playerData[playerid][pJob] = 0;
					playerData[playerid][pChar] = 0;
					playerData[playerid][pContractTime] = 0;
					return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* คุณได้ปฏิบัติตามสัญญา 1 ชั่วโมงแล้วและได้ออกจากงาน");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* คุณยังคงเหลืออีก 1 ชั่วโมงที่จะปฏิบัติตามและสิ้นสุดสัญญาของคุณ");
			}
			else
			{
				if(playerData[playerid][pContractTime] >= 5)
				{
					playerData[playerid][pJob] = 0;
					playerData[playerid][pChar] = 0;
					playerData[playerid][pContractTime] = 0;
					return SendClientMessage(playerid, COLOR_LIGHTBLUE, "* คุณได้ปฏิบัติตามสัญญา 5 ชั่วโมงแล้วและได้ออกจากงาน");
				}
				else
				{
					return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* คุณยังคงเหลืออีก %d ชั่วโมงที่จะปฏิบัติตามและสิ้นสุดสัญญาของคุณ", 5 - playerData[playerid][pContractTime]);
				}
			}
		} else {
			playerData[playerid][pJob]=0;
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, "   คุณได้ออกจากงานในปัจจุบันแล้ว");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีงานในปัจจุบัน");
}

CMD:jobswitch(playerid)
{
    if(IsJobSide(playerData[playerid][pJob])) {

        if(playerData[playerid][pJob] != JOB_NONE || playerData[playerid][pSideJob] != JOB_NONE)
        {
            new sidejob = playerData[playerid][pSideJob];

            playerData[playerid][pSideJob] = playerData[playerid][pJob];
            playerData[playerid][pJob] = sidejob;

            if(playerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "อาชีพหลักของคุณถูกตั้งเป็นอาชีพเสริม");
			else if(playerData[playerid][pJob] == JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "อาชีพหลักของคุณถูกแทนที่โดยอาชีพเสริม");
		}
        else
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องออกจากงานก่อน (/leavejob หรือ /leavesidejob)");
        }
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณสามารถสลับงานได้แค่ Taxi Driver, Guide หรือ Car Mechanic");
	return 1;
}

CMD:mechanicjob(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, 88.4620,-165.0116,2.5938)) {

        if(playerData[playerid][pSideJob] == JOB_MECHANIC || playerData[playerid][pJob] == JOB_MECHANIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณเป็นอาชีพ Mechanic อยู่แล้ว");

		if(playerData[playerid][pJob] == JOB_NONE)
		{
	        playerData[playerid][pJob] = JOB_MECHANIC;
	        ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Car Mechanic.~n~~w~/jobhelp.", 8000);

			if(playerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_GRAD6, "/jobswitch เพื่อทำให้มันเป็นอาชีพเสริม");
		}
		else
		{
		    if(playerData[playerid][pSideJob] == JOB_NONE)
		    {
		        playerData[playerid][pSideJob] = JOB_MECHANIC;
		        ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Car Mechanic.~n~~w~/jobhelp.", 8000);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องออกจากงานก่อน (/leavejob หรือ /leavesidejob)");
		    }
		}
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่จุดสมัครงาน");
}

CMD:farmerjob(playerid)
{
	if(playerData[playerid][pLevel] > 3)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "อาชีพนี้สำหรับเลเวล 1-3 เท่านั้น!!");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_TYPE_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "ขออภัย อาชีพนี้สำหรับประชาชน (ใครก็ตามที่ไม่ได้อยู่ในกลุ่มของทางการ)");

	if (IsPlayerInRangeOfPoint(playerid, 3.0, -382.5893,-1426.3422,26.2217)) {

	    if(playerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "   คุณมีอาชีพอยู่แล้ว พิมพ์ /leavejob เพื่อออกจากอาชีพ");

        playerData[playerid][pJob] = JOB_FARMER;
        //ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Farmer.~n~~w~/jobhelp.", 8000);
        SendClientMessage(playerid, COLOR_GRAD1, "ตอนนี้คุณเป็น Farmer แล้ว");
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่จุดสมัครงาน");
}

CMD:dealerjob(playerid)
{
	if(playerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "   คุณมีอาชีพอยู่แล้ว พิมพ์ /leavejob เพื่อออกจากอาชีพ");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_TYPE_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "ขออภัย อาชีพนี้สำหรับประชาชน (ใครก็ตามที่ไม่ได้อยู่ในกลุ่มของทางการ)");

	if (IsAtBlackMarket(playerid)) {

        playerData[playerid][pJob] = JOB_WPDEALER;
        ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~WEAPONS DEALER.~n~~w~/jobhelp.", 8000);
        //SendClientMessageEx(playerid, -1, "ตอนนี้คุณเป็น %s แล้ว", ReturnJobName(playerid, JOB_TRUCKER));
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตลาดมืด");
	}
	return 1;
}

CMD:supplierjob(playerid)
{
	if(playerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "   คุณมีอาชีพอยู่แล้ว พิมพ์ /leavejob เพื่อออกจากอาชีพ");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) == FACTION_TYPE_GANG) {
		if (IsAtBlackMarket(playerid)) {

	        playerData[playerid][pJob] = JOB_SUPPLIER;
	        ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~WEAPONS SUPPLIER.~n~~w~/jobhelp.", 8000);
	        //SendClientMessageEx(playerid, -1, "ตอนนี้คุณเป็น %s แล้ว", ReturnJobName(playerid, JOB_TRUCKER));
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตลาดมืด");
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "อาชีพนี้สำหรับสมาชิกแก๊งค์หรือองค์กรที่เป็นทางการเท่านั้น");
	return 1;
}

CMD:truckerjob(playerid)
{
	if(playerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "   คุณมีอาชีพอยู่แล้ว พิมพ์ /leavejob เพื่อออกจากอาชีพ");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_TYPE_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "ขออภัย อาชีพนี้สำหรับประชาชน (ใครก็ตามที่ไม่ได้อยู่ในกลุ่มของทางการ)");

	if (IsPlayerInRangeOfPoint(playerid, 3.0, -78.0338,-1136.1221,1.0781)) {

        playerData[playerid][pJob] = JOB_TRUCKER;
        //ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Farmer.~n~~w~/jobhelp.", 8000);
        SendClientMessageEx(playerid, -1, "ตอนนี้คุณเป็น %s แล้ว", ReturnJobName(playerid, JOB_TRUCKER));
		return 1;
	}
	else
	{
	    SetPlayerRaceCheckpointEx(playerid, 2, RCHECKPOINT_TRUCKERJOB, -78.0338,-1136.1221,1.0781);
	}
	return 1;
}

CMD:harvest(playerid)
{
	if(playerData[playerid][pJob] != JOB_FARMER)
	    return SendClientMessage(playerid, COLOR_GRAD2, "หนุ่มในเมืองไม่สามารถทำแบบนั้นได้!");

	if(playerData[playerid][pLevel] > 3)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "อาชีพนี้สำหรับเลเวล 1-3 เท่านั้น!!");


	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) != 532)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่บน Combine Harvester");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	 	return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้นั่งอยู่ที่นั่งคนขับของยานพาหนะ");

	if (IsPlayerInRangeOfPoint(playerid, 100.0, -377.8374,-1433.8853,25.7266)) {

		if(far_start[playerid]) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณได้เริ่มเก็บเกี่ยวไปแล้ว");

		far_place[playerid]=0;
		far_start[playerid]=1;
		far_veh[playerid]=vehicleid;

		SendClientMessage(playerid, COLOR_WHITE, "คุณได้เริ่มเก็บเกี่ยวผลผลิตให้เจ้าของฟาร์ม");

		StartHarvesting(playerid);
        return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 100.0, -53.5525,70.3079,4.0933)) {

		if(far_start[playerid]) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณได้เริ่มเก็บเกี่ยวไปแล้ว");

		far_place[playerid]=1;
		far_start[playerid]=1;
		far_veh[playerid]=vehicleid;

		SendClientMessage(playerid, COLOR_WHITE, "คุณได้เริ่มเก็บเกี่ยวผลผลิตให้เจ้าของฟาร์ม");

		StartHarvesting(playerid);
        return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ฟาร์ม");
}

CMD:stopharvest(playerid)
{
	if(far_start[playerid])
	{
		gPlayerCheckpointX[playerid]=0.0;
		gPlayerCheckpointY[playerid]=0.0;
		gPlayerCheckpointZ[playerid]=0.0;

		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

		far_start[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;

		return SendClientMessage(playerid, COLOR_WHITE, "คุณได้หยุดเก็บเกี่ยวผลผลิตจากฟาร์ม");
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "   คุณยังไม่ได้เริ่มทำการเก็บเกี่ยวผลผลิต");
}
// Libery Harvest
StartHarvesting(playerid)
{
    new rand;
	if(far_place[playerid])
	{
		rand = random(sizeof(BlueFarm));
		SetPlayerCheckpointEx(playerid, BlueFarm[rand][0],BlueFarm[rand][1],BlueFarm[rand][2], 5.0, CHECKPOINT_FARMER, rand);
	}
	else
	{
		rand = random(sizeof(FlintFarm));
		SetPlayerCheckpointEx(playerid, FlintFarm[rand][0],FlintFarm[rand][1],FlintFarm[rand][2], 5.0, CHECKPOINT_FARMER, rand);
	}
	return 1;
}
/*CMD:sound(playerid)
{
	return PlayerPlaySoundEx(playerid, 17803);
}*/

forward RandomVehiclePark(carid);
public RandomVehiclePark(carid)
{
	new
		Float:vehRandom[4]
	;

	new rand;
	
	if(CarData[carid][carModel] == 532) {

		rand = random(sizeof(gCombineSpawn));

		vehRandom[0]=gCombineSpawn[rand][0];
		vehRandom[1]=gCombineSpawn[rand][1];
		vehRandom[2]=gCombineSpawn[rand][2];
		vehRandom[3]=gCombineSpawn[rand][3];
	}
	else if(IsABoatModel(CarData[carid][carModel]))
	{
		rand = random(sizeof(gBoatSpawn));

		vehRandom[0]=gBoatSpawn[rand][0];
		vehRandom[1]=gBoatSpawn[rand][1];
		vehRandom[2]=gBoatSpawn[rand][2];
		vehRandom[3]=gBoatSpawn[rand][3];
	}
	else if(IsAPlaneModel(CarData[carid][carModel]))
	{
		rand = random(sizeof(gPlaneSpawn));

		vehRandom[0]=gPlaneSpawn[rand][0];
		vehRandom[1]=gPlaneSpawn[rand][1];
		vehRandom[2]=gPlaneSpawn[rand][2];
		vehRandom[3]=gPlaneSpawn[rand][3];
	}
	else {
		rand = random(sizeof(gVehicleSpawn));

		vehRandom[0]=gVehicleSpawn[rand][0];
		vehRandom[1]=gVehicleSpawn[rand][1];
		vehRandom[2]=gVehicleSpawn[rand][2];
		vehRandom[3]=gVehicleSpawn[rand][3];
	}

	CarData[carid][carPos][0]=vehRandom[0];
	CarData[carid][carPos][1]=vehRandom[1];
	CarData[carid][carPos][2]=vehRandom[2];
	CarData[carid][carPos][3]=vehRandom[3];
	
	/*format(string, sizeof(string), "UPDATE `cars` SET `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f' WHERE `carID` = '%d'",
		CarData[carid][carPos][0],
		CarData[carid][carPos][1],
		CarData[carid][carPos][2],
		CarData[carid][carPos][3],
		CarData[carid][carSID]
	);
	return mysql_tquery(dbCon, string);*/
	return 1;
}

TwoPointCompare(Float:radi, Float:ox, Float:oy, Float:oz, Float:x, Float:y, Float:z)
{
	new Float:tempposx, Float:tempposy, Float:tempposz;

	tempposx = (ox -x);
	tempposy = (oy -y);
	tempposz = (oz -z);

	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

alias:rollwindow("rw");
CMD:rollwindow(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "คุณต้องอยู่ในพาหนะเพื่อใช้สิ่งนี้ !");

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!IsDoorVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_GRAD2, "พาหนะนี้ไม่มีหน้าต่าง");

	new item[16];

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	  	if(sscanf(params, "s[32]", item)) {
	  	    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" TIP: เมื่อเป็นคนขับ คุณสามารถระบุหน้าต่างที่จะเปิดได้");
			SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE"/rollwindow [all/frontleft(fl)/frontright(fr)/rearleft(rl)/rearright(rr)]");
		}
		else
		{
			new wdriver, wpassenger, wbackleft, wbackright;
			GetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, wbackright);

			if(strcmp(item, "all", true) == 0)
			{
			    if(wdriver == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
				}
				else if(wdriver == VEHICLE_PARAMS_ON || wdriver == VEHICLE_PARAMS_UNSET)
				{
		    		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
				}
			}
			if(strcmp(item, "frontleft", true) == 0 || strcmp(item, "fl", true) == 0)
			{
			    if(wdriver == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, 1, wpassenger, wbackleft, wbackright);
				}
				else if(wdriver == VEHICLE_PARAMS_ON || wdriver == VEHICLE_PARAMS_UNSET)
				{
		    		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, 0, wpassenger, wbackleft, wbackright);
				}
			}
			if(strcmp(item, "frontright", true) == 0 || strcmp(item, "fr", true) == 0)
			{
			    if(wpassenger == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, 1, wbackleft, wbackright);
				}
				else if(wpassenger == VEHICLE_PARAMS_ON || wpassenger == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, 0, wbackleft, wbackright);
				}
			}
			if(strcmp(item, "rearleft", true) == 0 || strcmp(item, "rl", true) == 0)
			{
	      		if(wbackleft == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 1, wbackright);
				}
				else if(wbackleft == VEHICLE_PARAMS_ON || wbackleft == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 0, wbackright);
				}
			}
			if(strcmp(item, "rearright", true) == 0 || strcmp(item, "rr", true) == 0)
			{
			    if(wbackright == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 1);
				}
				else if(wbackright == VEHICLE_PARAMS_ON || wbackright == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 0);
				}
			}
		}
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new iSeat = GetPlayerVehicleSeat(playerid);
		new wdriver, wpassenger, wbackleft, wbackright;
		GetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, wbackright);

		if(iSeat == 128) return SendClientMessage(playerid, COLOR_LIGHTRED, "เกิดข้อผิดพลาดเกี่ยวกับหมายเลขที่นั่ง");

		if(iSeat == 1)
		{
			if(wpassenger == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, 1, wbackleft, wbackright);
			}
			else if(wpassenger == VEHICLE_PARAMS_ON || wpassenger == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, 0, wbackleft, wbackright);
			}
		}
		else if(iSeat == 2)
		{
			if(wbackleft == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 1, wbackright);
			}
			else if(wbackleft == VEHICLE_PARAMS_ON || wbackleft == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 0, wbackright);
			}
		}
		else if(iSeat == 3)
		{
			if(wbackright == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาขึ้น", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 1);
			}
			else if(wbackright == VEHICLE_PARAMS_ON || wbackright == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s เลื่อนหน้าต่างของเขาลง", ReturnRealName(playerid));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 0);
			}
		}
	}
	return 1;
}

CMD:opendoor(playerid, params[])
{
	new vehicleid = Vehicle_Nearest(playerid),
	item[16];

	if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "คุณต้องอยู่ในพาหนะเพื่อใช้สิ่งนี้ !");

	if (vehicleid != -1)
	{
	  	if(sscanf(params, "s[32]", item)) {
	  	    //SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" TIP: เมื่อเป็นคนขับ คุณสามารถระบุหน้าต่างที่จะเปิดได้");
			SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE"/opendoor [dr (driver) / pa (passenger) / bl (backleft) / br (backright)]");
		}
		else
		{
			if(strcmp(item, "driver", true) == 0 || strcmp(item, "dr", true) == 0)
			{
				SetVehicleParamsCarDoors(vehicleid, 1, -1, -1, -1);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s เปิดประตูรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
			}
			if(strcmp(item, "passenger", true) == 0 || strcmp(item, "pa", true) == 0)
			{
				SetVehicleParamsCarDoors(vehicleid, -1, 1, -1, -1);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s เปิดประตูรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);		
			}
			if(strcmp(item, "backleft", true) == 0 || strcmp(item, "bl", true) == 0)
			{
				SetVehicleParamsCarDoors(vehicleid, -1, -1, 1, -1);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s เปิดประตูรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
			}
			if(strcmp(item, "backright", true) == 0 || strcmp(item, "br", true) == 0)
			{
				SetVehicleParamsCarDoors(vehicleid, -1, -1, -1, 1);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s เปิดประตูรถ %s", ReturnRealName(playerid), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);		
			}
		}
	}

	return 1;
}

forward SetUnTazed(playerid);
public SetUnTazed(playerid)
{
	TazerCount[playerid]=0;
    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    bf_off(player_bf[playerid], IS_PLAYER_TAZER);
	SetPlayerDrunkLevel(playerid, 1000);
	TogglePlayerControllable(playerid, true);
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	new testtick = GetTickCount();
	new cammode = GetPlayerCameraMode(playerid);
	if(cammode == 7 || cammode == 8 || cammode == 53 || GetPlayerWeapon(playerid) <= 15)
	{
		new newkeys,plylr,plyup;
		GetPlayerKeys(playerid,newkeys,plyup,plylr);
		if(Holding(KEY_FIRE) || (GetTickCount()-playershottick[playerid]) <= SHOT_MS)
		{
			if(GetPlayerWeapon(playerid) <= 15)
			{
				new Float:VehSize[3],Float:VehPos[3];
				GetVehicleSize(GetVehicleModel(vehicleid),VehSize[0],VehSize[1],VehSize[2]);
				GetVehiclePos(vehicleid,VehPos[0],VehPos[1],VehPos[2]);
				if(IsPlayerInRangeOfPoint(playerid,VehSize[1],VehPos[0],VehPos[1],VehPos[2]))
				{
					new animidx = GetPlayerAnimationIndex(playerid);
					if(	animidx == 1136 || animidx == 1137 || animidx == 1138 || animidx == 1141 || //Fightstyle ...
						animidx == 17 || animidx == 18 || animidx == 19 || // Bat
						animidx == 749 || animidx == 750 || animidx == 751 || // Knife
						animidx == 1545 || animidx == 1546 || animidx == 1547 || // Sword
						animidx == 313 || animidx == 314 || animidx == 315 || // CSaw
						animidx == 423 || animidx == 424 || animidx == 425 || // Dildo
						animidx == 533) //Flowerattack
					{
						if(playerblock[playerid] == 0){playerblock[playerid] = 1;}
						else{return 1;}
					}
					else
					{
						playerblock[playerid] = 0;
						return 1;
					}
				}
				else{return 1;}

				OnEmptyVehicleDamage(vehicleid,playerid,(GetTickCount()-testtick));
			}
		}
		else if(playerblock[playerid] == 1){playerblock[playerid] = 0;}
	}
    return 1;
}

GetVehicleSize(modelID, &Float: size_X, &Float: size_Y, &Float: size_Z) // Author: RyDeR`
{
	static const
		Float: sizeData[212][3] =
		{
			{ 2.32, 5.11, 1.63 }, { 2.56, 5.82, 1.71 }, { 2.41, 5.80, 1.52 }, { 3.15, 9.22, 4.17 },
			{ 2.20, 5.80, 1.84 }, { 2.34, 6.00, 1.49 }, { 5.26, 11.59, 4.42 }, { 2.84, 8.96, 2.70 },
			{ 3.11, 10.68, 3.91 }, { 2.36, 8.18, 1.52 }, { 2.25, 5.01, 1.79 }, { 2.39, 5.78, 1.37 },
			{ 2.45, 7.30, 1.38 }, { 2.27, 5.88, 2.23 }, { 2.51, 7.07, 4.59 }, { 2.31, 5.51, 1.13 },
			{ 2.73, 8.01, 3.40 }, { 5.44, 23.27, 6.61 }, { 2.56, 5.67, 2.14 }, { 2.40, 6.21, 1.40 },
			{ 2.41, 5.90, 1.76 }, { 2.25, 6.38, 1.37 }, { 2.26, 5.38, 1.54 }, { 2.31, 4.84, 4.90 },
			{ 2.46, 3.85, 1.77 }, { 5.15, 18.62, 5.19 }, { 2.41, 5.90, 1.76 }, { 2.64, 8.19, 3.23 },
			{ 2.73, 6.28, 3.48 }, { 2.21, 5.17, 1.27 }, { 4.76, 16.89, 5.92 }, { 3.00, 12.21, 4.42 },
			{ 4.30, 9.17, 3.88 }, { 3.40, 10.00, 4.86 }, { 2.28, 4.57, 1.72 }, { 3.16, 13.52, 4.76 },
			{ 2.27, 5.51, 1.72 }, { 3.03, 11.76, 4.01 }, { 2.41, 5.82, 1.72 }, { 2.22, 5.28, 1.47 },
			{ 2.30, 5.55, 2.75 }, { 0.87, 1.40, 1.01 }, { 2.60, 6.67, 1.75 }, { 4.15, 20.04, 4.42 },
			{ 3.66, 6.01, 3.28 }, { 2.29, 5.86, 1.75 }, { 4.76, 17.02, 4.30 }, { 2.42, 14.80, 3.15 },
			{ 0.70, 2.19, 1.62 }, { 3.02, 9.02, 4.98 }, { 3.06, 13.51, 3.72 }, { 2.31, 5.46, 1.22 },
			{ 3.60, 14.56, 3.28 }, { 5.13, 13.77, 9.28 }, { 6.61, 19.04, 13.84 }, { 3.31, 9.69, 3.63 },
			{ 3.23, 9.52, 4.98 }, { 1.83, 2.60, 2.72 }, { 2.41, 6.13, 1.47 }, { 2.29, 5.71, 2.23 },
			{ 10.85, 13.55, 4.44 }, { 0.69, 2.46, 1.67 }, { 0.70, 2.19, 1.62 }, { 0.69, 2.42, 1.34 },
			{ 1.58, 1.54, 1.14 }, { 0.87, 1.40, 1.01 }, { 2.52, 6.17, 1.64 }, { 2.52, 6.36, 1.66 },
			{ 0.70, 2.23, 1.41 }, { 2.42, 14.80, 3.15 }, { 2.66, 5.48, 2.09 }, { 1.41, 2.00, 1.71 },
			{ 2.67, 9.34, 4.86 }, { 2.90, 5.40, 2.22 }, { 2.43, 6.03, 1.69 }, { 2.45, 5.78, 1.48 },
			{ 11.02, 11.28, 3.28 }, { 2.67, 5.92, 1.39 }, { 2.45, 5.57, 1.74 }, { 2.25, 6.15, 1.99 },
			{ 2.26, 5.26, 1.41 }, { 0.70, 1.87, 1.32 }, { 2.33, 5.69, 1.87 }, { 2.04, 6.19, 2.10 },
			{ 5.34, 26.20, 7.15 }, { 1.97, 4.07, 1.44 }, { 4.34, 7.84, 4.44 }, { 2.32, 15.03, 4.67 },
			{ 2.32, 12.60, 4.65 }, { 2.53, 5.69, 2.14 }, { 2.92, 6.92, 2.14 }, { 2.30, 6.32, 1.28 },
			{ 2.34, 6.17, 1.78 }, { 4.76, 17.82, 3.84 }, { 2.25, 6.48, 1.50 }, { 2.77, 5.44, 1.99 },
			{ 2.27, 4.75, 1.78 }, { 2.32, 15.03, 4.65 }, { 2.90, 6.59, 4.28 }, { 2.64, 7.19, 3.75 },
			{ 2.28, 5.01, 1.85 }, { 0.87, 1.40, 1.01 }, { 2.34, 5.96, 1.51 }, { 2.21, 6.13, 1.62 },
			{ 2.52, 6.03, 1.64 }, { 2.53, 5.69, 2.14 }, { 2.25, 5.21, 1.16 }, { 2.56, 6.59, 1.62 },
			{ 2.96, 8.05, 3.33 }, { 0.70, 1.89, 1.32 }, { 0.72, 1.74, 1.12 }, { 21.21, 21.19, 5.05 },
			{ 11.15, 6.15, 2.99 }, { 8.69, 9.00, 2.23 }, { 3.19, 10.06, 3.05 }, { 3.54, 9.94, 3.42 },
			{ 2.59, 6.23, 1.71 }, { 2.52, 6.32, 1.64 }, { 2.43, 6.00, 1.57 }, { 20.30, 19.29, 6.94 },
			{ 8.75, 14.31, 2.16 }, { 0.69, 2.46, 1.67 }, { 0.69, 2.46, 1.67 }, { 0.69, 2.47, 1.67 },
			{ 3.58, 8.84, 3.64 }, { 3.04, 6.46, 3.28 }, { 2.20, 5.40, 1.25 }, { 2.43, 5.71, 1.74 },
			{ 2.54, 5.55, 2.14 }, { 2.38, 5.63, 1.86 }, { 1.58, 4.23, 2.68 }, { 1.96, 3.70, 1.66 },
			{ 8.61, 11.39, 4.17 }, { 2.38, 5.42, 1.49 }, { 2.18, 6.26, 1.15 }, { 2.67, 5.48, 1.58 },
			{ 2.46, 6.42, 1.29 }, { 3.32, 18.43, 5.19 }, { 3.26, 16.59, 4.94 }, { 2.50, 3.86, 2.55 },
			{ 2.58, 6.07, 1.50 }, { 2.26, 4.94, 1.24 }, { 2.48, 6.40, 1.70 }, { 2.38, 5.73, 1.86 },
			{ 2.80, 12.85, 3.89 }, { 2.19, 4.80, 1.69 }, { 2.56, 5.86, 1.66 }, { 2.49, 5.84, 1.76 },
			{ 4.17, 24.42, 4.90 }, { 2.40, 5.53, 1.42 }, { 2.53, 5.88, 1.53 }, { 2.66, 6.71, 1.76 },
			{ 2.65, 6.71, 3.55 }, { 28.73, 23.48, 7.38 }, { 2.68, 6.17, 2.08 }, { 2.00, 5.13, 1.41 },
			{ 3.66, 6.36, 3.28 }, { 3.66, 6.26, 3.28 }, { 2.23, 5.25, 1.75 }, { 2.27, 5.48, 1.39 },
			{ 2.31, 5.40, 1.62 }, { 2.50, 5.80, 1.78 }, { 2.25, 5.30, 1.50 }, { 3.39, 18.62, 4.71 },
			{ 0.87, 1.40, 1.01 }, { 2.02, 4.82, 1.50 }, { 2.50, 6.46, 1.65 }, { 2.71, 6.63, 1.58 },
			{ 2.71, 4.61, 1.41 }, { 3.25, 18.43, 5.03 }, { 3.47, 21.06, 5.19 }, { 1.57, 2.32, 1.58 },
			{ 1.65, 2.34, 2.01 }, { 2.93, 7.38, 3.16 }, { 1.62, 3.84, 2.50 }, { 2.49, 5.82, 1.92 },
			{ 2.42, 6.36, 1.85 }, { 62.49, 61.43, 34.95 }, { 3.15, 11.78, 2.77 }, { 2.47, 6.21, 2.55 },
			{ 2.66, 5.76, 2.24 }, { 0.69, 2.46, 1.67 }, { 2.44, 7.21, 3.19 }, { 1.66, 3.66, 3.21 },
			{ 3.54, 15.90, 3.40 }, { 2.44, 6.53, 2.05 }, { 0.69, 2.79, 1.96 }, { 2.60, 5.76, 1.45 },
			{ 3.07, 8.61, 7.53 }, { 2.25, 5.09, 2.11 }, { 3.44, 18.39, 5.03 }, { 3.18, 13.63, 4.65 },
			{ 44.45, 57.56, 18.43 }, { 12.59, 13.55, 3.56 }, { 0.50, 0.92, 0.30 }, { 2.84, 13.47, 2.21 },
			{ 2.41, 5.90, 1.76 }, { 2.41, 5.90, 1.76 }, { 2.41, 5.78, 1.76 }, { 2.92, 6.15, 2.14 },
			{ 2.40, 6.05, 1.55 }, { 3.07, 6.96, 3.82 }, { 2.31, 5.53, 1.28 }, { 2.64, 6.07, 1.42 },
			{ 2.52, 6.17, 1.64 }, { 2.38, 5.73, 1.86 }, { 2.93, 3.38, 1.97 }, { 3.01, 3.25, 1.60 },
			{ 1.45, 4.65, 6.36 }, { 2.90, 6.59, 4.21 }, { 2.48, 1.42, 1.62 }, { 2.13, 3.16, 1.83 }
		}
	;
	if(400 <= modelID <= 611)
	{
		size_X = sizeData[modelID - 400][0];
		size_Y = sizeData[modelID - 400][1];
		size_Z = sizeData[modelID - 400][2];
		return 1;
	}
	return 0;
}

forward OnEmptyVehicleDamage(vehicleid,playerid,exems);
public OnEmptyVehicleDamage(vehicleid,playerid,exems)
{
	/*new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:vA;

	GetVehicleInside(vehicleid, fX, fY, fZ);

	if(!IsValidDynamicObject(TestObject[playerid])) {
	    GetVehicleZAngle(vehicleid, vA);
		//TestObject[playerid] = CreateDynamicObject(356, fX, fY, fZ + 0.1, 90.0, 270, vA+135);
		TestObject[playerid] = CreateDynamicObject(326, fX, fY, fZ, -100.0, -45, vA+135);
	    EditDynamicObject(playerid, TestObject[playerid]);
     	videdit[playerid] = vehicleid;
	}
	else {
		EditDynamicObject(playerid, TestObject[playerid]);
	}*/

	/*static
	    Float:offsetz
	;
	new
	    Float:offsetx,
	    Float:offsety
	;

	offsetx = 0.013783;
	offsety = -1.881438;
 	offsetz += 0.1;//0.1-0.4*/

	/*new Float:px, Float:py, Float:pz, Float:a;
	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, a);

	px += (0.5 * floatsin(-a, degrees));
	py += (0.5 * floatcos(-a, degrees));*/
	/*printf("%d", TestObject[playerid]);
	if(!IsValidDynamicObject(TestObject[playerid])) {
 	TestObject[playerid] = CreateDynamicObject(356, 0, 0, 0, 0, 0, 0);
	AttachDynamicObjectToVehicle(TestObject[playerid], vehicleid, offsetx, offsety, offsetz, 0, 0, 0);
	}
	else {

		new
		    Float:fX,
		    Float:fY,
		    Float:fZ;

		GetVehiclePos(vehicleid, fX, fY, fZ);

	    new Float:objX,Float:objY,Float:objZ;
	    GetDynamicObjectPos(TestObject[playerid],objX, objY, objZ);


	    printf("%f, %f, %f", fX, fY, fZ);
	    printf("%f, %f, %f", objX, objY, objZ);
	    printf("pos diff %f, %f, %f", fX - objX, fY - objY, fZ - objZ);
		AttachDynamicObjectToVehicle(TestObject[playerid], vehicleid, offsetx, offsety, offsetz, 0, 0, 0);
	}
	printf("%d %f %f %f", TestObject[playerid], offsetx, offsety, offsetz);*/

	if(CoreVehicles[vehicleid][vbreakin] && !CoreVehicles[vehicleid][vbreakdelay])
	{
    	if(IsPlayerNearDriverDoor(playerid, vehicleid) || IsABoatModel(GetVehicleModel(vehicleid))) {

            new id = Car_GetID(vehicleid);

            if(CarData[id][carLock] == 5) return 1;

			if(CoreVehicles[vehicleid][vbreakin] == 50 + floatround(CarData[id][carLock]*25))
			{
				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);


				if(CarData[id][carAlarm] == 2)
				{
				    alarm = 1;

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "ข้อความ: สัญญาณกันขโมย %s ของคุณดังขึ้น, ผู้ส่ง: สัญญาณเตือนภัยของยานพาหนะ (Unknown)",ReturnVehicleModelName(CarData[id][carModel]));
				}
				else if(CarData[id][carAlarm] == 3)
				{

					SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "สัญญาณเตือนภัยของยานพาหนะ: %s", GetPlayerLocation(playerid));
					SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "รายละเอียด: ระบบความปลอดภัยของ %s ดังขึ้น", g_arrVehicleNames[CarData[id][carModel] - 400]);

					SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "สัญญาณเตือนภัยของยานพาหนะ: %s", GetPlayerLocation(playerid));
					SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "รายละเอียด: ระบบความปลอดภัยของ %s ดังขึ้น", g_arrVehicleNames[CarData[id][carModel] - 400]);

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "ข้อความ: สัญญาณกันขโมย %s ของคุณดังขึ้น ผู้ส่ง: สัญญาณเตือนภัยของยานพาหนะ (Unknown)",ReturnVehicleModelName(CarData[id][carModel]));
				}
				else if(CarData[id][carAlarm] == 4)
				{
				    alarm = 1;
				    objective = 1;

					SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "สัญญาณเตือนภัยของยานพาหนะ: %s", GetPlayerLocation(playerid));
					SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "รายละเอียด: ระบบความปลอดภัยของ %s ดังขึ้น", g_arrVehicleNames[CarData[id][carModel] - 400]);
					SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "สัญญาณเตือนภัยของยานพาหนะ: %s", GetPlayerLocation(playerid));
					SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "รายละเอียด: ระบบความปลอดภัยของ %s ดังขึ้น", g_arrVehicleNames[CarData[id][carModel] - 400]);

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "ข้อความ: สัญญาณกันขโมย %s ของคุณดังขึ้น ผู้ส่ง: สัญญาณเตือนภัยของยานพาหนะ (Unknown)",ReturnVehicleModelName(CarData[id][carModel]));

				}
				else
				{
				    alarm = 1;
				}


				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			}

		 	if(IsValidDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel])) DestroyDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel]);

			if(CarData[id][carLock] == 2) CoreVehicles[vehicleid][vbreakdelay]=1;
			else if(CarData[id][carLock] == 3) CoreVehicles[vehicleid][vbreakdelay]=2;
			else if(CarData[id][carLock] == 4) CoreVehicles[vehicleid][vbreakdelay]=3;
			else CoreVehicles[vehicleid][vbreakdelay]=0;

			if(IsMelee(GetPlayerWeapon(playerid))) {
				CoreVehicles[vehicleid][vbreakin]-= 1 + random(3);
			}
			else {
				CoreVehicles[vehicleid][vbreakin]--;
			}

			if(CoreVehicles[vehicleid][vbreakin] <= 0)
			{
			    CoreVehicles[vehicleid][vbreakin] = 0;
			    CoreVehicles[vehicleid][vbreaktime] = 0;

				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, 0);

				CarData[id][carLocked] = false;
				Car_Save(id);
			}
			
			SetVehicleLabel(vehicleid, VLT_TYPE_BREAKIN, 3);
		/*numberss--;
		format(string, sizeof(string), "%d", numberss);

		if(IsValidDynamic3DTextLabel(OHMT)) DestroyDynamic3DTextLabel(OHMT);
	    OHMT = CreateDynamic3DTextLabel(string, 0xAFAFAFAA, -0.9, 0.8, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);*/

		}
	}
	return 1;
}

IsCharacterOnline(character)//Returns user ID
{

	foreach(new i : Player)
	{
		if(playerData[i][pID] == character)
		{
	    	return i;
	 	}
	}
	return -1;
}


//Fishing Job

CMD:gofishing(playerid, params[]) {

	new fishplace = strval(params);

	if (isnull(params) && (fishplace != 1 && fishplace != 2))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /gofishing [1(บนเรือ)/2(จากสะพาน)]");

	if(playerData[playerid][pFishes]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถเริ่มตกปลาใหม่ในขณะที่มีปลาอยู่เหลืออยู่กับตัวได้");

	if(FishingPlace[playerid] != -1 || gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมี เช็คพ้อย/ภารกิจ อยู่");


	if(fishplace == 1)
	{
	    new carid = -1;
		if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1 || (carid = Car_GetID(IsNearBoatID(playerid))) != -1)
		{
		    if(IsABoatModel(CarData[carid][carModel])) {
		 	    if(playerData[playerid][pFishes] > 1000) {
			        SendClientMessage(playerid, COLOR_GREEN, "ตกปลาพอแล้ว");
			        SendClientMessage(playerid, COLOR_GREEN, "/unloadfish หากคุณต้องการขายปลาของคุณ");
			    }

				//FishingPlace[playerid] = 3;

				new rand = random(sizeof(GoFishingPlace));
				SetPlayerCheckpointEx(playerid, GoFishingPlace[rand][0],GoFishingPlace[rand][1],GoFishingPlace[rand][2], 30.0, CHECKPOINT_GOFISHING, rand);
	            SendClientMessage(playerid, COLOR_GREEN, "ไปที่จุดตกปลาในมหาสมุทรและเริ่มตกปลา (/fish)");
			}
			else
			{
			     SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ ใน/ใกล้ เรือของคุณเพื่อใช้งาน");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ ใน/ใกล้ เรือของคุณเพื่อใช้งาน");
		}
	}
	else
	{
	    if(playerData[playerid][pFishes] > 1000) {
	        SendClientMessage(playerid, COLOR_GREEN, "ตกปลาพอแล้ว");
	        SendClientMessage(playerid, COLOR_GREEN, "/unloadfish หากคุณต้องการขายปลาของคุณ");
	    }

		if (!IsPlayerInRangeOfPoint(playerid, 30.0, 383.5097,-2087.5281,7.8359))
		{
			SetPlayerCheckpointEx(playerid, 383.5097,-2087.5281,7.8359, 30.0, CHECKPOINT_GOFISHING, 3);
            SendClientMessage(playerid, COLOR_GREEN, "ไปที่จุดตกปลาในมหาสมุทรและเริ่มตกปลา (/fish)");
		}
		else {

			if(!IsPlayerInAnyVehicle(playerid))
			{
				FishingPlace[playerid] = 4;
				SendClientMessage(playerid, COLOR_WHITE, "เริ่มตกปลาได้ที่นี่ (/fish) เมื่อเสร็จแล้วให้คุณ /stopfishing และ /unloadfish");
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "กรุณาตกปลาที่บนสะพานเท่านั้น, หากคุณต้องการตกบนเรือกรุณา /gofishing 1");
		}
	}

	return 1;
}

CMD:fish(playerid, params[]) { // playerData[playerid][pFishes] = 0;

	if(FishingPlace[playerid] != -1)
	{
    	if (FishingPlace[playerid] <= 2 && !IsPlayerInRangeOfPoint(playerid, 30.0, GoFishingPlace[FishingPlace[playerid]][0],GoFishingPlace[FishingPlace[playerid]][1],GoFishingPlace[FishingPlace[playerid]][2])) {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณตกปลาที่นี่ไม่ได้");
    	}

    	if (FishingPlace[playerid] == 4 && !IsPlayerInRangeOfPoint(playerid, 6.0, 383.5097,-2087.5281,7.8359)) {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณตกปลาที่นี่ไม่ได้ / หรือคุณต้องอยู่บนสะพานตกปลาเท่านั้น");
    	}

		if (FishingPlace[playerid] == 3) // Bugged
		{
			FishingPlace[playerid] = -1;
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณควรตกปลาบนสะพาน, ไม่ใช่ใต้สะพาน, กรุณา /gofishing เพื่อเริ่มต้นทำงานใหม่อีกครั้ง");
			return 1;
		}

		if(FishingPlace[playerid] <= 2 && IsPlayerInRangeOfPoint(playerid, 30.0, GoFishingPlace[FishingPlace[playerid]][0],GoFishingPlace[FishingPlace[playerid]][1],GoFishingPlace[FishingPlace[playerid]][2]))
		{
			new id = -1;
			if((id = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
			{
			    if(CarData[id][carOwner] != playerData[playerid][pID]) {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ ใน/ใกล้ เรือของคุณเพื่อใช้มัน");
			    }
			}
			else if((id = Car_GetID(IsNearBoatID(playerid))) != -1)
			{
			    if(CarData[id][carOwner] != playerData[playerid][pID]) {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ ใน/ใกล้ เรือของคุณเพื่อใช้มัน");
			    }
			}
		}

		if(fish_timer[playerid]==0)
		{
			new Fishcaught, Fishlbs;
            
            fish_timer[playerid] = 6;
            
			if(random(7) < 5)
			{
			    Fishcaught = random(5);

				if(FishingPlace[playerid] == 3) Fishlbs = ((Fishcaught+1)*10) + (1 + random(10));
				else Fishlbs = ((Fishcaught+1)*20) + (1 + random(10));

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s ม้วนสายคันขึ้นมาและพบว่าพวกเขาจับ%sได้", ReturnRealName(playerid), FishNames[Fishcaught]);
				SendClientMessageEx(playerid, COLOR_GREEN, "คุณจับ%s %d ปอนด์", FishNames[Fishcaught], Fishlbs);
			}
			else {
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณจับอะไรไม่ได้เลย");
			    return 1;
			}
			playerData[playerid][pFishes]+=Fishlbs;


			if(playerData[playerid][pFishes] > 4000 && FishingPlace[playerid] <= 2)
			{
				FishingPlace[playerid]=-1;

				SendClientMessage(playerid, COLOR_GREEN, "ตกปลาพอแล้ว");
				SendClientMessage(playerid, COLOR_GREEN, "/unloadfish หากคุณต้องการขายปลาของคุณ");
				return 1;
			}
			else if(playerData[playerid][pFishes] > 2500 && FishingPlace[playerid] == 4)
			{
			    FishingPlace[playerid]=-1;

				SendClientMessage(playerid, COLOR_GREEN, "ตกปลาพอแล้ว");
				SendClientMessage(playerid, COLOR_GREEN, "/unloadfish หากคุณต้องการขายปลาของคุณ");
				return 1;
			}

			if(FishingPlace[playerid] <= 2) {

				FishingBoat[playerid]+=Fishlbs;

				if(FishingBoat[playerid] > 1000) {
					new rand = random(sizeof(GoFishingPlace));
					SetPlayerCheckpointEx(playerid, GoFishingPlace[rand][0],GoFishingPlace[rand][1],GoFishingPlace[rand][2], 30.0, CHECKPOINT_GOFISHING, rand);
	                FishingBoat[playerid]=0;
	                FishingPlace[playerid]=-1;
	                SendClientMessage(playerid, COLOR_GREEN, "ไปตกปลาในสถานที่อื่น");
				}

			}
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีปลารอบ ๆ");
			SendClientMessage(playerid, COLOR_WHITE, "((โปรดรอ 6 วินาทีในแต่ละ /fish))");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ตกปลา");
	}

	return 1;
}


CMD:stopfishing(playerid, params[]) {
	if(FishingPlace[playerid] != -1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "คุณหยุดตกปลาแล้ว");
	    if(playerData[playerid][pFishes]) SendClientMessage(playerid, COLOR_GREEN, "/unloadfish หากคุณต้องการขายปลาของคุณ");
	    FishingPlace[playerid]=-1;
	}
	else SendClientMessage(playerid, COLOR_WHITE, "คุณยังไม่ได้ตกปลา");
	return 1;
}

CMD:unloadfish(playerid, params[]) {
    if(FishingPlace[playerid] != -1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "หยุดตกปลาก่อนเป็นอันดับแรก /stopfishing");

	if(playerData[playerid][pFishes])
	{
	    SendClientMessage(playerid, COLOR_GREEN, "สถานที่สำหรับขนส่งปลาและรับเงินถูกทำเครื่องหมายไว้บนแผนที่");
        SetPlayerCheckpointEx(playerid, 2475.2932,-2710.7759,3.1963, 2.0, CHECKPOINT_UNLOADFISHING);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีปลา");
	return 1;
}

CMD:myfish(playerid, params[]) {
	if(playerData[playerid][pFishes])
	{
	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	    SendClientMessageEx(playerid, COLOR_GREEN, "น้ำหนักปลา [%d] ปอนด์", playerData[playerid][pFishes]);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีปลา");
	return 1;
}

CMD:rentvehicle(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(IsVehicleRental(vehicleid))
    {
        if(RentCarKey[playerid] != vehicleid && !IsVehicleRented(vehicleid))
        {
			new cost = GetVehicleRentalPrice(GetVehicleModel(vehicleid));
			if(playerData[playerid][pCash] >= cost)
			{
		        /*if(RentCarKey[playerid] != 9999)
		        {
					SetVehicleToRespawn(RentCarKey[playerid]);
		            RentCarKey[playerid] = 9999;
		        }
				*/
			    RentCarKey[playerid] = GetPlayerVehicleID(playerid);
			    playerData[playerid][pCash] -= cost;
				SendClientMessage(playerid,COLOR_GREEN,"คุณได้เช่ายานพาหนะ (/unrentvehicle เพื่อเลิกเช่า)");
                SendClientMessage(playerid,COLOR_WHITE,"ข้อแนะ: คุณสามารถล็อกยานพาหนะที่เช่าด้วย /lock");
                SendClientMessage(playerid,COLOR_WHITE,"/engine เพื่อสตาร์ท");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่พอ !");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED,"ยานพาหนะคันนี้ถูกเช่าแล้ว");
    }
    else return GameTextForPlayer(playerid, "~r~you're not in any vehicle.", 5000, 1);
}

CMD:unrentvehicle(playerid)
{
	if(RentCarKey[playerid] != 9999)
 	{
 	    SetVehicleToRespawn(RentCarKey[playerid]);
        RentCarKey[playerid] = 9999;

        return SendClientMessage(playerid,COLOR_GREEN,"คุณได้คืนยานพาหนะ");
 	}
 	else return GameTextForPlayer(playerid, "~r~you're not in any vehicle.", 5000, 1);
}

IsPlayerFacingVehicle(playerid,vehicleid)
{
	new Float:pX,Float:pY,Float:pZ,Float:X,Float:Y,Float:Z,Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetVehiclePos(vehicleid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	new Float:russia;
	GetPlayerFacingAngle(playerid,russia);
	if(ang-russia<-130 || ang-russia>130) return 0;
	else return 1;
}

forward ResprayTime(playerid);
public ResprayTime(playerid) {
	if(GetPlayerWeapon(playerid) == 41 && Vehicle_Nearest(playerid) == Firehold[playerid]){
		if(!IsPlayerFacingVehicle(playerid, Firehold[playerid])){
			Firehold[playerid] = INVALID_VEHICLE_ID;
			KillTimer(resprayTimer[playerid]);
			resprayTimer[playerid]=-1;
		}
	}
	return 1;
}

SetPlayerThrowMeal(playerid)
{
	if(MealHolding[playerid] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9))
	{
	    MealHolding[playerid]=0;
	    RemovePlayerAttachedObject(playerid, FREESLOT9);
	    return 1;
	}
	return 0;
}

IsPlayerHoldMeal(playerid)
{
	if(MealHolding[playerid] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9))
	{
	    return 1;
	}
	return 0;
}


GetPlayerNearMeal(playerid)
{
	if (MealObject[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, MealDrop[MealObject[playerid]][mX],MealDrop[MealObject[playerid]][mY],MealDrop[MealObject[playerid]][mZ]))
	{
		return true;
	}
	/*for(new i = 0; i != sizeof(MealDrop); i++)
  	{
	    if (IsPlayerInRangeOfPoint(playerid, 2.5, MealDrop[i][mX],MealDrop[i][mY],MealDrop[i][mZ]))
	    {
			return i;
	    }
    }*/
    return false;
}

forward MealDestroy(mid);
public MealDestroy(mid)
{
	if(MealDrop[mid][mExist])
	{
		MealDrop[mid][mExist]=false;
      	MealDrop[mid][mX]=0.0;
       	MealDrop[mid][mY]=0.0;
       	MealDrop[mid][mZ]=0.0;
     	MealDrop[mid][mID]=0;
     	MealDrop[mid][mInt]=0;
     	MealDrop[mid][mWorld]=0;

	   	if(IsValidDynamicObject(MealDrop[mid][mObject])) DestroyDynamicObject(MealDrop[mid][mObject]);	
		KillTimer(MealDrop[mid][mTimer]);

		foreach (new i : Player)
		{
			if(MealObject[i] == mid)
			{
			    MealObject[i]=-1;
			    break;
			}
		}
     	return mid;
	}
  	return -1;
}

MealPlace(objectid, Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz, int, world)
{
	for(new i = 0; i != sizeof(MealDrop); i++)
  	{
  	    if(!MealDrop[i][mExist])
  	    {
            MealDrop[i][mExist] = true;
            MealDrop[i][mX]=x;
            MealDrop[i][mY]=y;
            MealDrop[i][mZ]=z;
            MealDrop[i][mID]=objectid;
            MealDrop[i][mInt]=int;
            MealDrop[i][mWorld]=world;
			MealDrop[i][mObject] = CreateDynamicObject(objectid,x,y,z,rx,ry,rz,world, int);
            MealDrop[i][mTimer] = SetTimerEx("MealDestroy", 600000, 0, "i", i);
	        return i;
  	    }
  	}
  	return -1;
}

SetPlayerMealHold(playerid, mealobject) {
	if(mealobject >= 2221 && mealobject <= 2223) SetPlayerAttachedObject(playerid,FREESLOT9, mealobject, 5,0.165000,0.100999,0.139999,-78.300018,-11.500016,20.599998,1.000000,1.000000,1.000000);
	else SetPlayerAttachedObject(playerid,FREESLOT9, mealobject, 5,0.212000,0.046999,0.371000,-106.700012,15.100011,2.399998,1.000000,1.000000,1.000000);
}

CMD:heal(playerid, params[])
{

	new id = -1;
	if ((id = HouseEntered[playerid]) != -1) {

		if(GetHouseItem(id, 1))
		{
		    if(playerData[playerid][pHealth] < 50) SetPlayerHealthEx(playerid, 50.0);
		 	/*if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
                SetPlayerHealthEx(playerid, 100.0 + playerData[playerid][pSHealth]);
		    } else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตู้เซฟของบ้าน");*/
 		}
 		else {
 		    SendClientMessage(playerid, COLOR_LIGHTRED, "บ้านหลังนี้ไม่มี Fridge");
 		}
 		return 1;
    }
	else if ((id = BizEntered[playerid]) != -1) {

		if(GetBusinessItem(id, 1))
		{
		    if(playerData[playerid][pHealth] < 50) SetPlayerHealthEx(playerid, 50.0);
 		}
 		else {
 		    SendClientMessage(playerid, COLOR_LIGHTRED, "บ้านหลังนี้ไม่มี Fridge");
 		}
 		return 1;
    }
	new type = GetFactionType(playerid);
 	if (type == FACTION_TYPE_POLICE)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.9730,30.8543,1019.1917) && playerData[playerid][pLocal] == 101 || IsPlayerInRangeOfPoint(playerid, 3.0, 1400.1931,-3.2171,1073.8362) && playerData[playerid][pLocal] == 104 || IsPlayerInRangeOfPoint(playerid, 3.0, 254.3041,77.2286,1003.6406) && playerData[playerid][pLocal] == 106) {

			if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
			SetPlayerArmour(playerid, 100.0);
	    	SetPlayerHealthEx(playerid, 100.0);

	    	SendClientMessage(playerid, COLOR_WHITE, "คุณเพิ่มเลือดตัวเองเต็ม 100 เปอร์เซ็นต์พร้อมกับชุดเกราะใหม่");
	    	return 1;
 	    }
 	    else return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
 	else if (type == FACTION_TYPE_SASD)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1385.8762,-21.8015,1001.1614) && playerData[playerid][pLocal] == 105) {
			if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
			SetPlayerArmour(playerid, 100.0);
	    	SetPlayerHealthEx(playerid, 100.0);

	    	SendClientMessage(playerid, COLOR_WHITE, "คุณเพิ่มเลือดตัวเองเต็ม 100 เปอร์เซ็นต์พร้อมกับชุดเกราะใหม่");
	    	return 1;
 	    }
 	    else return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
 	else if (type == FACTION_TYPE_SADOC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 254.3545,77.2077,1003.6406) && playerData[playerid][pLocal] == 107) {
			if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
			SetPlayerArmour(playerid, 100.0);
	    	SetPlayerHealthEx(playerid, 100.0);

	    	SendClientMessage(playerid, COLOR_WHITE, "คุณเพิ่มเลือดตัวเองเต็ม 100 เปอร์เซ็นต์พร้อมกับชุดเกราะใหม่");
	    	return 1;
 	    }
 	    else return SendClientMessage(playerid, COLOR_GRAD2, "   คุณไม่ได้อยู่ในห้องล็อกเกอร์ !");

 	}
	else if (type == FACTION_TYPE_MEDIC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 542.2574,218.4133,1019.9844) && playerData[playerid][pLocal] == 103) {
            if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
			SetPlayerArmour(playerid, 100.0);
	    	SetPlayerHealthEx(playerid, 100.0);
            SendClientMessage(playerid, COLOR_WHITE, "คุณเพิ่มเลือดตัวเองเต็ม 100 เปอร์เซ็นต์พร้อมกับชุดเกราะใหม่");
	    	SendClientMessage(playerid, COLOR_WHITE, "คุณหยิบอาหาร");
	    	return 1;
 	    }
 	    else {

 	        if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/heal [ไอดีผู้เล่น/ชื่อบางส่วน]");

			if(id == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]", maskid);
				if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}

			if(id == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถรักษาตัวเองได้");

			if (!IsPlayerNearPlayer(playerid, id, 3.0))
			    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");


			ResetPlayer(id);
			ResetDamages(id);
			isDeathmode{id}=false;
			deathtime[id]=0;
			isInjuredmode{id}=false;
			ClearAnimations(id);
				
			SetPlayerHealthEx(id, 100.0 + playerData[id][pSHealth]);
			
			SendClientMessage(playerid, COLOR_YELLOW2, "INFO: ผู้เล่นนั้นได้รับค่า HP เต็มจำนวนสูงสุดของเขา");
 	    }
	}

	return 1;
}

CMD:test_helpup(playerid)
{
	isKNOmode{playerid} = true;
	playerData[playerid][pInterior] = GetPlayerInterior(playerid);
	playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
	GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
	knotime[playerid] = 120;
	SetPlayerHealthEx(playerid, 25);

	return 1;
}

CMD:helpup(playerid, params[])
{
	new id = -1;

	if(sscanf(params,"u",id)) 
		return SendSyntaxMessage(playerid, "/helpup [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if (!isKNOmode{id})
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้หมดสติ");

	if(knotime[id] > 120)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องรอเวลาประมาณ 2 นาทีเพื่อที่จะช่วยเหลือผู้เล่น");

	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	//if(id == playerid) 
		//return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถช่วยเหลือตัวเองได้");

	if (!IsPlayerNearPlayer(playerid, id, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(!PlayerLabel[id][pLabelTime])
	{
		SetPlayerLabel(id, PLT_TYPE_KNOCKOUT, 20);
		playerData[id][pHelpup] = id;
		SendClientMessageEx(playerid, COLOR_GREEN2, "คุณได้เริ่มต้นทำการช่วยเหลือ %s จากการหมดสติ", ReturnRealName(id));
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นดังกล่าวได้ทุกทำการช่วยเหลืออยู่");

	return 1;
}

CMD:hpc(playerid, params[])
{
	new faction = GetFactionType(playerid), id, vehicle = GetPlayerVehicleID(playerid);
	if(faction != FACTION_TYPE_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้ใช้คำสั่งนี้");
	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/hpc [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(!IsAFDCar(vehicle)) return SendClientMessage(playerid, COLOR_WHITE, "คุณต้องอยู่ในยานพาหนะของ FD");

	new year, month, day;
	getdate(year, month, day);

	new pnumber_str[16];
	valstr(pnumber_str,playerData[id][pPnumber]);
		
	SendClientMessage(playerid, COLOR_YELLOW2,"HPC- การคำนวณข้อมูลที่มีประสิทธิภาพสูง");
	SendClientMessage(playerid, COLOR_WHITE, "FD SYSTEM MDC - SEARCH RESULT");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessage(playerid, COLOR_WHITE, "NAME SEARCH RESULT");
	SendClientMessage(playerid, COLOR_WHITE, "");
	SendClientMessageEx(playerid, COLOR_WHITE, "* ข้อมูล - %s", ReturnSiteDate());
	SendClientMessageEx(playerid, COLOR_WHITE, "ชื่อ-สกุล: %s อายุ: %d เบอร์: %s", ReturnNameEx(id), year - playerData[id][pBirthdate], playerData[id][pPnumber] ? (pnumber_str) : ("ไม่มี"));
//	SendClientMessageEx(playerid, COLOR_WHITE, "ที่อยู่ที่ลงทะเบียนไว้: %s", GetHouseLocation(id));

	new temp_address[128];
	if(CountPlayerOwnHouse(id) > 1) {
	
	    SendClientMessage(playerid, COLOR_WHITE, "ที่อยู่ที่ลงทะเบียนไว้:");
	    
		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
			if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnPlayerName(id), true))
			{
		   		if(HouseInfo[i][hSubid] != -1) format(temp_address, sizeof(temp_address), "%s", HouseInfo[HouseInfo[i][hSubid]][hAddress]);
				else format(temp_address, sizeof(temp_address), "%s", HouseInfo[i][hAddress]);

				SendClientMessageEx(playerid, COLOR_WHITE, "-> %s", temp_address);
			}
		}
	}
	else {
	    SendClientMessageEx(playerid, COLOR_WHITE, "ที่อยู่ที่ลงทะเบียนไว้: %s", GetHouseLocation(id));
	}
	
	return 1;
}

// *** PLACE COMMAND
CMD:takegun(playerid, params[]) // Gun ID: 29 - MP5. Is currently occupying your Primary slot.
{
    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

	new bool:success, id = -1;
	if ((id = HouseEntered[playerid]) != -1) {
		if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
			new slot;
		
			if (sscanf(params, "d", slot))
				return SendClientMessage(playerid, COLOR_WHITE, "/takegun slot_id (ไอดีในรายการ /check)");
		
			slot--;
		
			if(slot >= 0 && slot < MAX_HOUSE_WEAPONS) {
				if(HouseInfo[id][hWeapon][slot]) {
					new weapontaken = 0;			
					if((weapontaken = ExistWeaponSlot(playerid,HouseInfo[id][hWeapon][slot])) != 0) {
						SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken));
						return 1;
					}
			
					format(szString, sizeof(szString), "* %s ได้หยิบ %s ออกมาจากตู้เซฟของบ้าน", ReturnRealName(playerid), ReturnWeaponName(HouseInfo[id][hWeapon][slot]));
					SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
					SendClientMessage(playerid, COLOR_PURPLE, szString);
			
					GivePlayerValidWeapon(playerid, HouseInfo[id][hWeapon][slot], HouseInfo[id][hAmmo][slot], HouseInfo[id][hWeaponLicense][slot]);
			
					if(HouseInfo[id][hWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) take %s(%d) from house %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(HouseInfo[id][hWeapon][slot]), HouseInfo[id][hAmmo][slot], id, HouseInfo[id][hID], HouseInfo[id][hWeaponLicense][slot]);
					else Log_Write("logs/weapon.txt", "[%s] %s (%s) take %s(%d) from house %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(HouseInfo[id][hWeapon][slot]), HouseInfo[id][hAmmo][slot], id, HouseInfo[id][hID]);
			
					HouseInfo[id][hWeapon][slot]=0;
					HouseInfo[id][hAmmo][slot]=0;
					HouseInfo[id][hWeaponLicense][slot]=0;
			
					House_SavePackage(id);
			
					success = true;
			
					return 1;
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอะไรอยู่ที่นั้น..");
			}
			else return SendClientMessage(playerid, COLOR_WHITE, "ไม่มีอะไรอยู่ที่นั้น..");
		}
		else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตู้เซฟของบ้าน");
	}
	else
	{
		new vid = GetPlayerVehicleID(playerid);
		if(!vid) for(new i=0;i!=MAX_VEHICLES;i++) if (IsValidVehicle(i) && IsPlayerNearBoot(playerid, i) && (GetTrunkStatus(i) || IsVehicleTrunkBroken(i))) { vid = i; break; }

		new vehicle_fid = -1;
		if((GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) && vid && (vehicle_fid = IsACopCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] >= 596 && vehicleVariables[vehicle_fid][vVehicleModelID] <= 599 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427))
		{
			new slot;
			if (sscanf(params, "d", slot) || !slot)
				return SendClientMessage(playerid, COLOR_WHITE, "/takegun [SLOT ID (1/2/3/4/5)]");

			if(slot >= 1 && slot <= 5) {
			    new weaponid,ammo;

			    if(slot >= 4 && !playerData[playerid][pSwat]) return SendClientMessage(playerid, COLOR_LIGHTRED,"อาวุธช่องนี้สำหรับหน่วย SWAT เท่านั้น");

				switch(slot) {
			        case 1: weaponid = 25, ammo = 100;
			        case 2: weaponid = 29, ammo = 500;
			        case 3: weaponid = 31, ammo = 500;
			        case 4: weaponid = 27, ammo = 100;
			        case 5: weaponid = 34, ammo = 50;
			    }
				new weapontaken = 0;
				if((weapontaken = ExistWeaponSlot(playerid,weaponid)) == 0) {
					format(szString, sizeof(szString), "* %s ได้หยิบ %s ออกมาจาก %s", ReturnRealName(playerid), ReturnWeaponName(weaponid), g_arrVehicleNames[GetVehicleModel(vid) - 400]);
				 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
				 	SendClientMessage(playerid, COLOR_PURPLE, szString);

					GivePlayerWeaponEx(playerid, weaponid, ammo);
				    return 1;
				}
				return SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken)); //407 552 427 490 544
			}
		}

		else if((GetFactionType(playerid) == FACTION_TYPE_MEDIC) && vid && (vehicle_fid = IsAFDCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] == 407 || vehicleVariables[vehicle_fid][vVehicleModelID] == 552 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427 || vehicleVariables[vehicle_fid][vVehicleModelID] == 490 || vehicleVariables[vehicle_fid][vVehicleModelID] == 544))
		{
			new slot;
			if (sscanf(params, "d", slot) || !slot)
				return SendClientMessage(playerid, COLOR_WHITE, "/takegun [SLOT ID (1/2/3)]");

			if(slot >= 1 && slot <= 4) {
			    new weaponid,ammo;

				switch(slot) {
			        //case 1: weaponid = 25, ammo = 100;
			        case 1: weaponid = 5, ammo = 1;
			        case 2: weaponid = 6, ammo = 1;
			        case 3: weaponid = 9, ammo = 1;
			    }
				new weapontaken = 0;
				if((weapontaken = ExistWeaponSlot(playerid,weaponid)) == 0) {
					format(szString, sizeof(szString), "* %s ได้หยิบ %s ออกมาจาก %s", ReturnRealName(playerid), ReturnWeaponName(weaponid), g_arrVehicleNames[GetVehicleModel(vid) - 400]);
				 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
				 	SendClientMessage(playerid, COLOR_PURPLE, szString);

					GivePlayerWeaponEx(playerid, weaponid, ammo);
				    return 1;
				}
				return SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken));
			}
			else {
			    return SendClientMessage(playerid, COLOR_LIGHTRED,"ขออภัย ไม่พบอาวุธชนิดนี้");
			}
		}

		else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			foreach(new i : sv_playercar) if (IsPlayerNearBoot(playerid, CarData[i][carVehicle])) if(GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))
			{
				new slot;

				if (sscanf(params, "d", slot))
				    return SendClientMessage(playerid, COLOR_WHITE, "/takegun slot_id (ไอดีในรายการ /check)");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Error: สตาร์ทเครื่องยนต์");

                slot--;

				if(slot >= 0 && slot < MAX_CAR_WEAPONS && CarData[i][carWeapon][slot])
				{
					if (!CarPlace[i][slot][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						new weapontaken=0;
						if((weapontaken = ExistWeaponSlot(playerid,CarData[i][carWeapon][slot])) != 0) {
							SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][slot][cPobj]);

						format(szString, sizeof(szString), "* %s ได้หยิบ %s ออกมาจาก %s", ReturnRealName(playerid), ReturnWeaponName(CarData[i][carWeapon][slot]), g_arrVehicleNames[CarData[i][carModel] - 400]);
					 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
					 	SendClientMessage(playerid, COLOR_PURPLE, szString);

						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][slot], CarData[i][carAmmo][slot], CarData[i][carWeaponLicense][slot]);

						if(CarData[i][carWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) take %s(%d) from car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carSID], CarData[i][carWeaponLicense][slot]);
						else Log_Write("logs/weapon.txt", "[%s] %s (%s) take %s(%d) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carSID]);

						CarData[i][carWeapon][slot]=0;
						CarData[i][carAmmo][slot]=0;
						CarData[i][carWeaponLicense][slot]=0;
						Car_SavePlace(i);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED," ..คุณไม่ได้อยู่ใกล้อาวุธ! ต้องใกล้กว่านี้");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีอะไรอยู่ที่นั้น..");

				success = true;
				break;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new i = -1;

			if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

				new slot;

				if (sscanf(params, "d", slot))
				    return SendClientMessage(playerid, COLOR_WHITE, "/takegun slot_id (ไอดีในรายการ /check)");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Error: สตาร์ทเครื่องยนต์");

                slot--;
				if(slot >= 0 && slot < MAX_CAR_WEAPONS && CarData[i][carWeapon][slot])
				{
					if (CarPlace[i][slot][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						new weapontaken=0;
						if((weapontaken = ExistWeaponSlot(playerid,CarData[i][carWeapon][slot])) != 0) {
							SendClientMessageEx(playerid, -1, "อาวุธไอดี: %d - %s ได้ใช้ช่องอยู่ในปัจจุบัน", weapontaken, ReturnWeaponName(weapontaken));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][slot][cPobj]);

						format(szString, sizeof(szString), "* %s ได้หยิบ %s ออกมาจาก %s", ReturnRealName(playerid), ReturnWeaponName(CarData[i][carWeapon][slot]), g_arrVehicleNames[CarData[i][carModel] - 400]);
					 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
					 	SendClientMessage(playerid, COLOR_PURPLE, szString);
						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][slot], CarData[i][carAmmo][slot], CarData[i][carWeaponLicense][slot]);

                        if(CarData[i][carWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) take %s(%d) from car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carSID], CarData[i][carWeaponLicense][slot]);
                        else Log_Write("logs/weapon.txt", "[%s] %s (%s) take %s(%d) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carSID]);

						CarData[i][carWeapon][slot]=0;
						CarData[i][carAmmo][slot]=0;
						CarData[i][carWeaponLicense][slot]=0;
						Car_SavePlace(i);
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED," ..คุณไม่ได้อยู่ใกล้อาวุธ! ต้องใกล้กว่านี้");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีอะไรอยู่ที่นั้น..");

				success = true;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	return 1;
}

CMD:place(playerid, params[])
{
    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");

	new bool:success, id = -1;
	if ((id = HouseEntered[playerid]) != -1) {
		if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
	
			new weaponid;
	
			if (sscanf(params, "d", weaponid) || !weaponid)
				return SendClientMessage(playerid, COLOR_WHITE, "/place weapon_id (ไอดีในรายการ /weapons)");
	
	
			if (playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {
	
				new ammo, license, slot = -1;
	
				for(new x = 0; x != MAX_HOUSE_WEAPONS; x++) {
					if(!HouseInfo[id][hWeapon][x]) {
					
						if(playerData[playerid][pGun1] == weaponid)
						{
							ammo = playerData[playerid][pAmmo1];
	
							playerData[playerid][pGun1]=0;
							playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
							ammo = playerData[playerid][pAmmo2];
							license = playerData[playerid][pPLicense];
							playerData[playerid][pGun2]=0;
							playerData[playerid][pAmmo2]=0;
							playerData[playerid][pPLicense]=0;
						}
						else
						{
							ammo = playerData[playerid][pAmmo3];
							license = playerData[playerid][pSLicense];
							playerData[playerid][pGun3]=0;
							playerData[playerid][pAmmo3]=0;
							playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
	
						HouseInfo[id][hWeapon][x] = weaponid;
						HouseInfo[id][hAmmo][x] = ammo;
						HouseInfo[id][hWeaponLicense][x]=license;
						slot=x;
						break;
					}
				}
				if(slot == -1) return SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีที่ว่างเหลือในบ้านหลังนี้");
	
				if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) place %s(%d) to house %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, id, HouseInfo[id][hID], license);
				else Log_Write("logs/weapon.txt", "[%s] %s (%s) place %s(%d) to house %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, id, HouseInfo[id][hID]);
	
				House_SavePackage(id);
				SendClientMessageEx(playerid, COLOR_YELLOW,"คุณได้เก็บ %s ไว้ในบ้าน", ReturnWeaponName(weaponid));
				SendClientMessage(playerid, COLOR_LIGHTRED,"/takegun เพื่อหยิบปืนจาก รถ/บ้าน");
	
			} else return SendClientMessage(playerid, COLOR_LIGHTRED,"ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");
		} else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตู้เซฟของบ้าน");
		return 1;
	}
	else
	{

		new vid = GetPlayerVehicleID(playerid);
		if(!vid) for(new i=0;i!=MAX_VEHICLES;i++) if(IsValidVehicle(i) && IsPlayerNearBoot(playerid, i) && (GetTrunkStatus(i) || IsVehicleTrunkBroken(i))) { vid = i; break; }

		new vehicle_fid = -1;
		if((GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) && vid && (vehicle_fid = IsACopCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] >= 596 && vehicleVariables[vehicle_fid][vVehicleModelID] <= 599 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427))
		{
			new weaponid;
			if (sscanf(params, "d", weaponid) || !weaponid)
				return SendClientMessage(playerid, COLOR_WHITE, "/place [WEAPON ID (25/29/31/27/34)]");

			if(weaponid == 25 || weaponid == 29 || weaponid == 31 || weaponid == 27 || weaponid == 34) {
				for (new i = 0; i < 13; i ++) {
				    if (playerData[playerid][pGuns][i] == weaponid) {
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
					    SendClientMessageEx(playerid, COLOR_YELLOW,"คุณได้เก็บ %s ไว้ใน %s", ReturnWeaponName(weaponid), g_arrVehicleNames[vehicleVariables[vehicle_fid][vVehicleModelID]-400]);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีอาวุธชนิดนี้");
			}
			else {
			    return SendClientMessage(playerid, COLOR_LIGHTRED,"ขออภัย ไม่มีที่สำหรับอาวุธชนิดนี้");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			foreach(new i : sv_playercar) if (IsPlayerNearBoot(playerid, CarData[i][carVehicle])) if(GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))
			{
				new weaponid;

				if (sscanf(params, "d", weaponid) || !weaponid)
				    return SendClientMessage(playerid, COLOR_WHITE, "/place weapon_id (ไอดีในรายการ /weapons)");

				if (playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {

					new ammo, license, slot;


					if(!CarData[i][carWeapon][0])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
						    license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);

					    CarData[i][carWeapon][0] = weaponid;
					    CarData[i][carAmmo][0] = ammo;
					    CarData[i][carWeaponLicense][0]=license;
					    slot=0;
					}
					else if(!CarData[i][carWeapon][1])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
						    license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
					    CarData[i][carWeapon][1] = weaponid;
					    CarData[i][carAmmo][1] = ammo;
					    CarData[i][carWeaponLicense][1]=license;
					    slot=1;
					}
					else if(!CarData[i][carWeapon][2])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
						    license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
					    CarData[i][carWeapon][2] = weaponid;
					    CarData[i][carAmmo][2] = ammo;
					    CarData[i][carWeaponLicense][2]=license;
					    slot=2;
					}
					else if(!CarData[i][carWeapon][3])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
						    license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
                        CarData[i][carWeapon][3] = weaponid;
                        CarData[i][carAmmo][3] = ammo;
                        CarData[i][carWeaponLicense][3]=license;
                        slot=3;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีที่ว่างเหลือในรถคันนี้");

					if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) place %s(%d) to car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carSID], license);
					else Log_Write("logs/weapon.txt", "[%s] %s (%s) place %s(%d) to car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carSID]);

                    SendClientMessage(playerid, COLOR_LIGHTRED,"[ ! ] "EMBED_WHITE"คุณสามารถก{FF6347}ด Spac"EMBED_WHITE"e และเลื่อนกล้องไปรอบ ๆ");
					SendClientMessageEx(playerid, COLOR_YELLOW,"คุณได้เก็บ %s ไว้ใน %s", ReturnWeaponName(weaponid), g_arrVehicleNames[CarData[i][carModel] - 400]);
                    SendClientMessage(playerid, COLOR_LIGHTRED,"/takegun เพื่อหยิบปืนจาก รถ/บ้าน");

					new
						Float:fX,
						Float:fY,
						Float:fZ,
						Float:vA,
						Float:finalx,
						Float:finaly,
						Float:finalz,
						Float:finalrz;

					GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					CarPlace[i][slot][cPobj] = CreateDynamicObject(GetGunObjectID(weaponid), fX, fY, fZ + 0.1, 90.0, 270, vA+135);

					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ + 0.1, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=90.0;
					CarPlace[i][slot][cPry]=270.0;
					CarPlace[i][slot][cPrz]=finalrz;
					CarPlace[i][slot][cPType]=0;

						//TestObject[playerid] = CreateDynamicObject(326, fX, fY, fZ, -100.0, -45, vA+135);
					EditDynamicObject(playerid, CarPlace[i][slot][cPobj]);

					PlayerPlaceSlot[playerid]=slot;
					PlayerPlaceCar[playerid]=i;

				} else return SendClientMessage(playerid, COLOR_LIGHTRED,"ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");

				success = true;
				break;
			}
			if(!success) return SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: คุณยืนด้วยเท้าและไม่ได้อยู่ใกล้จุดเปิดที่จัดเก็บของยานพาหนะ");
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new i = -1;

			if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

				new weaponid;

				if (sscanf(params, "d", weaponid) || !weaponid)
				    return SendClientMessage(playerid, COLOR_WHITE, "/place weapon_id (ไอดีในรายการ /weapons)");

				if (playerData[playerid][pGun1] == weaponid || playerData[playerid][pGun2] == weaponid || playerData[playerid][pGun3] == weaponid) {

					new ammo, license, slot;

					if(!CarData[i][carWeapon][0])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
	                        license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);

					    CarData[i][carWeapon][0] = weaponid;
					    CarData[i][carAmmo][0] = ammo;
					    CarData[i][carWeaponLicense][0]=license;
					    slot=0;
					}
					else if(!CarData[i][carWeapon][1])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
	                        license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
					    CarData[i][carWeapon][1] = weaponid;
					    CarData[i][carAmmo][1] = ammo;
					    CarData[i][carWeaponLicense][1]=license;
					    slot=1;
					}
					else if(!CarData[i][carWeapon][2])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
	                        license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
					    CarData[i][carWeapon][2] = weaponid;
					    CarData[i][carAmmo][2] = ammo;
					    CarData[i][carWeaponLicense][2]=license;
					    slot=2;
					}
					else if(!CarData[i][carWeapon][3])
					{
						if(playerData[playerid][pGun1] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo1];
						    playerData[playerid][pGun1]=0;
						    playerData[playerid][pAmmo1]=0;
						}
						else if(playerData[playerid][pGun2] == weaponid)
						{
						    ammo = playerData[playerid][pAmmo2];
	                        license = playerData[playerid][pPLicense];
						    playerData[playerid][pGun2]=0;
						    playerData[playerid][pAmmo2]=0;
						    playerData[playerid][pPLicense]=0;
						}
						else
						{
						    ammo = playerData[playerid][pAmmo3];
						    license = playerData[playerid][pSLicense];
						    playerData[playerid][pGun3]=0;
						    playerData[playerid][pAmmo3]=0;
						    playerData[playerid][pSLicense]=0;
						}
						new temp_holdweapon = GetPlayerWeapon(playerid);
						RemoveWeapon(playerid, weaponid);
						if(temp_holdweapon == weaponid) SetPlayerArmedWeapon(playerid, 0);
						else SetPlayerArmedWeapon(playerid, temp_holdweapon);
						
                        CarData[i][carWeapon][3] = weaponid;
                        CarData[i][carAmmo][3] = ammo;
                        CarData[i][carWeaponLicense][3]=license;
                        slot=3;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่มีที่ว่างเหลือในรถคันนี้");

					if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) place %s(%d) to car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carSID], license);
					else Log_Write("logs/weapon.txt", "[%s] %s (%s) place %s(%d) to car %d (SID:%d) [%d]", ReturnDate(), ReturnPlayerName(playerid), playerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carSID]);

                    SendClientMessage(playerid, COLOR_LIGHTRED,"[ ! ] "EMBED_WHITE"คุณสามารถก{FF6347}ด "EMBED_WHITE"W และเลื่อนกล้องไปรอบ ๆ");
					SendClientMessageEx(playerid, COLOR_YELLOW,"คุณได้เก็บ %s ไว้ใน %s", ReturnWeaponName(weaponid), g_arrVehicleNames[CarData[i][carModel] - 400]);
                    SendClientMessage(playerid, COLOR_LIGHTRED,"/takegun เพื่อหยิบปืนจาก รถ/บ้าน");

					new
						Float:fX,
						Float:fY,
						Float:fZ,
						Float:vA,
						Float:finalx,
						Float:finaly,
						Float:finalz,
						Float:finalrz;

					GetVehicleInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					CarPlace[i][slot][cPobj] = CreateDynamicObject(GetGunObjectID(weaponid), fX, fY, fZ, -100.0, -45, vA+135);

					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=-100.0;
					CarPlace[i][slot][cPry]=-45.0;
					CarPlace[i][slot][cPrz]=finalrz;
					CarPlace[i][slot][cPType]=1;

					EditDynamicObject(playerid, CarPlace[i][slot][cPobj]);

					PlayerPlaceSlot[playerid]=slot;
					PlayerPlaceCar[playerid]=i;

				} else return SendClientMessage(playerid, COLOR_LIGHTRED,"ขออภัย เฉพาะอาวุธที่อยู่ใน /stats ของคุณเท่านั้น");

				success = true;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่พบยานพาหนะที่สามารถเก็บอาวุธได้...");
			}
		}
		else {
		    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่พบยานพาหนะที่สามารถเก็บอาวุธได้...");
		}
	}
	return 1;
}

CMD:check(playerid, params[])
{
    if(playerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณต้องมีเลเวล 2 ขึ้นไป");


	new bool:success, id = -1;

	if ((id = HouseEntered[playerid]) != -1) {
		if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
	
			new string[512];
	
			for(new x = 0; x != MAX_HOUSE_WEAPONS; x++) {
				if(HouseInfo[id][hWeapon][x] != 0) {
					if(IsMelee(HouseInfo[id][hWeapon][x])) {
						format(string, sizeof(string), "%s(%d)%s\n", string, x+1, ReturnWeaponName(HouseInfo[id][hWeapon][x]));
					}
					else format(string, sizeof(string), "%s(%d)%s[Ammo:%d]\n", string, x+1, ReturnWeaponName(HouseInfo[id][hWeapon][x]), HouseInfo[id][hAmmo][x]);
				}
				else format(string, sizeof(string), "%s[EMPTY]\n", string);
			}
			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Weapon Storage", string, ">>", "");
			success = true;
			return 1;
		}
		else return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้อยู่ที่ตู้เซฟของบ้าน");
	}
	else
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new i : sv_playercar)
		{
			if(vehicleid == CarData[i][carVehicle]  || (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))))
		    {
		        new string[128];

				for(new x = 0; x != MAX_CAR_WEAPONS; x++) {
				   	if(CarData[i][carWeapon][x] != 0) {
				 		if(IsMelee(CarData[i][carWeapon][x])) {
							format(string, sizeof(string), "%s(%d)%s\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]));
						}
						else format(string, sizeof(string), "%s(%d)%s[Ammo:%d]\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]), CarData[i][carAmmo][x]);
					}
					else format(string, sizeof(string), "%s[EMPTY]\n", string);
				}
		        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Weapon Storage", string, ">>", "");
	            success = true;
				return 1;
			}
		//	else return SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: คุณไม่ได้อยู่ใกล้ที่จัดเก็บของยานพาหนะ");
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะ");
	return 1;
}

CMD:vehpackage(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");

	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			ShowVehicleWeapons(playerid, i);
			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
	return 1;
}

GetVehicleAttachCroods(vehicleid, Float:oPosX, Float:oPosY, Float:oPosZ, Float:oPosRZ, &Float:AttachX, &Float:AttachY, &Float:AttachZ, &Float:AttachRZ)
{
	new Float:Pos[3], Float:vPosX, Float:vPosY, Float:vPosZ, Float:vPosA;

	GetVehiclePos(vehicleid, vPosX, vPosY, vPosZ);
	GetVehicleZAngle(vehicleid, vPosA);

	Pos[0] = oPosX-vPosX;
	Pos[1] = oPosY-vPosY;
	Pos[2] = oPosZ-vPosZ;
	AttachRZ = oPosRZ-vPosA;

	AttachZ = Pos[2];
	AttachX = Pos[0]*floatcos(vPosA, degrees)+Pos[1]*floatsin(vPosA, degrees);
	AttachY = -Pos[0]*floatsin(vPosA, degrees)+Pos[1]*floatcos(vPosA, degrees);
	return 1;
}

// XM Radio

/*ShowHouseBoomBoxStations(houseid, playerid) {
	new string[256];

	for(new i = 0; i != sizeof(xmGenres); ++i)
	{
		format(string, sizeof(string), "%s%s\n", string, xmGenres[i]);
	}
	format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
	Dialog_Show(playerid, xmGenresDialog, DIALOG_STYLE_LIST, "หมวดหมู่:", string, "เลือก", "<< กลับ");
	return 1;
}*/

ShowBoomBoxStations(playerid) {
	new string[256];

	for(new i = 0; i != sizeof(xmGenres); ++i)
	{
		format(string, sizeof(string), "%s%s\n", string, xmGenres[i]);
	}
	format(string, sizeof(string), "%sCustom Station\n", string);

	format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
	Dialog_Show(playerid, xmGenresDialog, DIALOG_STYLE_LIST, "หมวดหมู่:", string, "เลือก", "<< กลับ");
	return 1;
}

CMD:setstation(playerid, params[])
{
	new id=-1;
	if (IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), carid = -1;

		if((carid = Car_GetID(vehicleid)) != -1) {

			if (!GetEngineStatus(vehicleid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Error: สตาร์ทเครื่องยนต์");

			if(CarData[carid][carXM] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะของคุณไม่ได้ติดตั้ง XM-Radio Radio");

			ShowBoomBoxStations(playerid);
			return 1;
		}
		else
		{
			foreach(new i : sv_servercar) {
				if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && (FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_POLICE || FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_SASD || FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_TYPE_MEDIC)) {
					ShowBoomBoxStations(playerid);
				}
			}
		}
	}
	else if((id = Boombox_Nearest(playerid, 5.0)) != INVALID_PLAYER_ID)
	{
		if(grantboombox[playerid] == id || id == playerid) {
			ShowBoomBoxStations(playerid);
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้เปลี่ยนสถานี Boombox");
		}
	}
	else
	{
		if ((id = HouseEntered[playerid]) != -1 && GetHouseItem(id, 2)) {

			if(!strcmp(HouseInfo[id][hOwner], ReturnPlayerName(playerid), true))
			{
                ShowBoomBoxStations(playerid);
			}
			else {
			    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้เปลี่ยนสถานีวิทยุ");
			}
		}
		else if ((id = BizEntered[playerid]) != -1 && GetBusinessItem(id, 2)) {

			if(!strcmp(BizInfo[id][bOwner], ReturnPlayerName(playerid), true))
			{
                ShowBoomBoxStations(playerid);
			}
			else {
			    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้เปลี่ยนสถานีวิทยุ");
			}
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "บ้าน/ธุรกิจนี้ไม่มีวิทยุ");
		}
	}
	return 1;
}

/*StartMusicInVehicle(vehicle, url[])
{
	if(CoreVehicles[vehicle][vradioOn])
	{
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);

                SendClientMessageEx(i, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), CoreVehicles[vehicle][vradioStation]);
				SendClientMessageEx(i, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", CoreVehicles[vehicle][vradioStation]);

			}
		}
	}
	return 1;
}*/

StopCarBoomBox(carid)
{
	if(CoreVehicles[carid][vradioOn])
	{
		CoreVehicles[carid][vradioOn] = false;

		foreach(new i : Player)
		{
			if(GetPlayerVehicleID(i) == carid)
			{
				StopAudioStreamForPlayer(i);
                SendClientMessage(i, COLOR_LIGHTRED, "วิทยุถูกปิด");
			}
		}
	}
	return 1;
}

Dialog:xmCustomDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new name[64], query[128], boomboxid=-1;
	    format(name, 64, "Custom Station");
		if (IsPlayerInAnyVehicle(playerid))
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			CoreVehicles[vehicleid][vradioOn] = true;
			format(CoreVehicles[vehicleid][vradioURL], 256, "%s", inputtext);

			foreach(new x : Player)
			{
				if(GetPlayerVehicleID(x) == vehicleid)
				{
					StopAudioStreamForPlayer(x);
					PlayAudioStreamForPlayer(x, inputtext);

					SendClientMessageEx(x, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
					SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
				}
			}

			format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
			SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);

		}
		else if((boomboxid = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID) {

			if(grantboombox[playerid] == boomboxid || boomboxid == playerid) {

				BoomboxData[boomboxid][boomboxOn]=true;
				strpack(BoomboxData[boomboxid][boomboxURL], inputtext, 128 char);

				SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

				foreach(new x : Player)
				{
					if(Boombox_Nearest(x) == boomboxid)
					{
						StopAudioStreamForPlayer(x);
						PlayAudioStreamForPlayer(x, inputtext, BoomboxData[boomboxid][boomboxPos][0], BoomboxData[boomboxid][boomboxPos][1], BoomboxData[boomboxid][boomboxPos][2], 30, 1);
						SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
					}
				}
				format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
				SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้เปลี่ยนสถานี Boombox");
		}
		else
		{
			new house = HouseEntered[playerid];
			if(house != -1)
			{
				HouseInfo[house][hradioOn] = true;

				strpack(HouseInfo[house][hradioURL], inputtext, 256 char);
				
				SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

				foreach(new x : Player)
				{
					if(HouseEntered[x] == house)
					{
						StopAudioStreamForPlayer(x);
						PlayAudioStreamForPlayer(x, inputtext);
						SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
					}
				}

				format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
				SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
			}

			house = BizEntered[playerid];
			if(house != -1)
			{
				BizInfo[house][bradioOn] = true;
				
				strpack(BizInfo[house][bradioURL], inputtext, 256 char);
				
				SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

				foreach(new x : Player)
				{
					if(BizEntered[x] == house)
					{
						StopAudioStreamForPlayer(x);
						PlayAudioStreamForPlayer(x, inputtext);
						SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
					}
				}

				format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
				SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
			}
		}
	}
}

Dialog:xmGenresDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - เพื่อปิด", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
				else if(BizEntered[playerid] != -1)
				{
				    StopBizBoomBox(BizEntered[playerid]);
				}

			}

	 	    return 1;
	   	}
    	else if(!strcmp(inputtext, "Custom Station", true))
	 	{

            Dialog_Show(playerid, xmCustomDialog, DIALOG_STYLE_INPUT, "Custom Station:", "กรอก URL ที่ต้องการใช้", "เลือก", "<< กลับ");
	 	    return 1;
	   	}
	    new category = listitem;

		SetPVarInt(playerid, "GenresSelected", category);

		new string[256];

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				format(string, sizeof(string), "%s%s\n", string, xmSubGenres[i][subname]);
			}
		}
		format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
		Dialog_Show(playerid, xmSubGenresDialog, DIALOG_STYLE_LIST, "หมวดหมู่ย่อย:", string, "เลือก", "<< กลับ");
	}
	return 1;
}

Dialog:xmSubGenresDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - เพื่อปิด", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
				else if(BizEntered[playerid] != -1)
				{
				    StopBizBoomBox(BizEntered[playerid]);
				}
			}
	 	    return 1;
	   	}

		new string[1280], category = GetPVarInt(playerid, "GenresSelected"), count;

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				if(listitem == count)
				{
					SetPVarInt(playerid, "SubGenresIndex", i);
					break;
				}
				count++;
			}
		}

		SetPVarInt(playerid, "SubGenresSelected", listitem);

	    new
			xmstation,
			query[128];

		format(query, sizeof(query), "SELECT * FROM `radio_station` WHERE `genres_id` = %d AND `subgenres_id` = %d", category, listitem);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(xmstation);

		if (xmstation) {

		    new id, name[32];

			for (new i = 0; i < xmstation; i ++)
			{
			    cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "station_name", name);
			    format(string, sizeof(string), "%sไอดี:%d - %s\n", string, id, name);
			}
		}
		format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
		Dialog_Show(playerid, xmSetStationDialog, DIALOG_STYLE_LIST, "สถานี:", string, "เลือก", "<< กลับ");
	}
	else
	{
		ShowBoomBoxStations(playerid);
		DeletePVar(playerid, "GenresSelected");
	}
	return 1;
}


Dialog:xmSetStationDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - เพื่อปิด", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
				else if(BizEntered[playerid] != -1)
				{
				    StopBizBoomBox(BizEntered[playerid]);
				}
			}
	 	    return 1;
	   	}

	    new genres = GetPVarInt(playerid, "GenresSelected"), subgenres = GetPVarInt(playerid, "SubGenresSelected"), string[1280];

	    new
			xmstation,
			query[128],
			count;

		format(query, sizeof(query), "SELECT * FROM `radio_station` WHERE `genres_id` = %d AND `subgenres_id` = %d", genres, subgenres);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(xmstation);

		if (xmstation) {

		    new id, name[32], url[256];

			for (new i = 0; i < xmstation; i ++)
			{
			    cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "station_name", name);
				cache_get_value_name(i, "station_url", url);

			    if(count == listitem)
			    {
			        new boomboxid=-1;
			        if (IsPlayerInAnyVehicle(playerid))
			        {
			            new vehicleid = GetPlayerVehicleID(playerid);
				        CoreVehicles[vehicleid][vradioOn] = true;
				        format(CoreVehicles[vehicleid][vradioURL], 256, "%s", url);

						foreach(new x : Player)
						{
							if(GetPlayerVehicleID(x) == vehicleid)
							{
								StopAudioStreamForPlayer(x);
								PlayAudioStreamForPlayer(x, url);

				                SendClientMessageEx(x, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
								SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
							}
						}

						format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
					 	SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);

					}
					else if((boomboxid = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID) {

						if(grantboombox[playerid] == boomboxid || boomboxid == playerid) {

	                        BoomboxData[boomboxid][boomboxOn]=true;
						//	format(BoomboxData[playerid][boomboxURL], 256, "%s", url);
							strpack(BoomboxData[boomboxid][boomboxURL], url, 128 char);

							SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

	                        foreach(new x : Player)
							{
								if(Boombox_Nearest(x) == boomboxid)
								{
									StopAudioStreamForPlayer(x);
									PlayAudioStreamForPlayer(x, url, BoomboxData[boomboxid][boomboxPos][0], BoomboxData[boomboxid][boomboxPos][1], BoomboxData[boomboxid][boomboxPos][2], 30, 1);
									SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
								}
							}
							format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
							SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้เปลี่ยนสถานี Boombox");
					}
			        else
			        {
			            new house = HouseEntered[playerid];
						if(house != -1)
						{
					        HouseInfo[house][hradioOn] = true;
					        
					        strpack(HouseInfo[house][hradioURL], url, 256 char);
					        
					        SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

                            foreach(new x : Player)
							{
								if(HouseEntered[x] == house)
								{
									StopAudioStreamForPlayer(x);
									PlayAudioStreamForPlayer(x, url);
									SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
								}
							}

							format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
						 	SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
						}

			            house = BizEntered[playerid];
						if(house != -1)
						{
					        BizInfo[house][bradioOn] = true;
             				strpack(BizInfo[house][bradioURL], url, 256 char);
					        SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);

                            foreach(new x : Player)
							{
								if(BizEntered[x] == house)
								{
									StopAudioStreamForPlayer(x);
									PlayAudioStreamForPlayer(x, url);
									SendClientMessageEx(x, COLOR_LIGHTRED, "วิทยุเปลี่ยนเป็นสถานี %s", name);
								}
							}

							format(query, sizeof(query), "%s ได้ปรับวิทยุไปยัง %s", ReturnRealName(playerid), name);
						 	SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
						}
					}
			    }
			    format(string, sizeof(string), "%sไอดี:%d - %s\n", string, id, name);

			    count++;
			}
		}
		format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
		Dialog_Show(playerid, xmSetStationDialog, DIALOG_STYLE_LIST, "สถานี:", string, "เลือก", "<< กลับ");
	}
	else
	{
	    new category = GetPVarInt(playerid, "GenresSelected");

		new string[256];

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				format(string, sizeof(string), "%s%s\n", string, xmSubGenres[i][subname]);
			}
		}
		format(string, sizeof(string), "%s"EMBED_YELLOW"OFF - เพื่อปิด\n", string);
		Dialog_Show(playerid, xmSubGenresDialog, DIALOG_STYLE_LIST, "หมวดหมู่ย่อย:", string, "เลือก", "<< กลับ");
	}
	return 1;
}

// Fuel

CMD:fill(playerid, params[]) {
	if (IsPlayerInAnyVehicle(playerid)) {
		new id;
		if ((id = Biz_Nearest(playerid, 20.0)) != -1 && BizInfo[id][bType] == 1) {
		    new string[256], vehicleid = GetPlayerVehicleID(playerid);
		    new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
		    new Float:fueladd = maxfuel - CoreVehicles[vehicleid][vehFuel];

			if(BizInfo[id][bProducts] > floatround(fueladd, floatround_ceil)) {	
				format(string, sizeof(string), ""EMBED_WHITE"ประเภทเชื้อเพลิง:"EMBED_YELLOW"%s\n\t"EMBED_WHITE"เชื้อเพลิงในปัจจุบัน:"EMBED_YELLOW"%.6f"EMBED_WHITE"/"EMBED_YELLOW"%.6f"EMBED_WHITE"( สูงสุด )\n\tจำนวนที่เพิ่ม:"EMBED_YELLOW"%.6f\n\t"EMBED_WHITE"ราคา:"EMBED_YELLOW"%s", (BizInfo[id][bsubType]) ? ("ดีเซล") : ("เบนซิน"), CoreVehicles[vehicleid][vehFuel], maxfuel, fueladd, FormatNumber(floatround(fueladd*float(BizInfo[id][bPriceProducts][0]), floatround_ceil)));
				Dialog_Show(playerid, FuelRefill, DIALOG_STYLE_MSGBOX, "ซื้อน้ำมันเชื้อเพลิง:", string, "จ่าย", "ยกเลิก");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "น้ำมันในปั้มนี้ไม่พอจ่าย!");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ปั้มน้ำมัน!");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในยานพาหนะ");
	return 1;
}

Dialog:FuelRefill(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (IsPlayerInAnyVehicle(playerid)) {
			new id=-1 , vehicleid = GetPlayerVehicleID(playerid);
			if ((id = Biz_Nearest(playerid, 20.0)) != -1 && BizInfo[id][bType] == 1) {
				if(!VehicleLabel[vehicleid][vLabelTime]) {
				    new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
				    new Float:fueladd = maxfuel - CoreVehicles[vehicleid][vehFuel];
					new price = floatround(fueladd*float(BizInfo[id][bPriceProducts][0]), floatround_ceil);
				    if(playerData[playerid][pCash] >= price) {
					    new time = 10, timecal = floatround(fueladd, floatround_ceil);
						if(BizInfo[id][bProducts] > timecal) {
							BizInfo[id][bProducts]-=timecal;
							if(timecal >= 10) time = (timecal*2) - (5 * (timecal/5));
							SetVehicleLabel(vehicleid, VLT_TYPE_REFILL, time);
							CoreVehicles[vehicleid][vOwnerID] = playerid;
							SendClientMessageEx(playerid, COLOR_GREEN, "SERVER: การดำเนินการนี้จะต้องใช้เวลา %d วินาที ปริมาณ:%.6f", time, fueladd);
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "น้ำมันในปั้มนี้ไม่พอจ่าย!");
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอ!");
				} else SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะปัจจุบันได้เริ่มดำเนินการแล้ว");
			} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ปั้มน้ำมัน!");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ปั้มน้ำมัน!");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	new targetid, reason[128];
	if(sscanf(params,"us[128]",targetid,reason)) return SendSyntaxMessage(playerid, "/kick [ไอดีผู้เล่น/ชื่อบางส่วน] [reason]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	format(XLQuery, sizeof(XLQuery), "INSERT INTO `logs_kick` (`IP`, `Character`, `KickedBy`, `Reason`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', '%s', %d, %d)", ReturnIP(targetid), ReturnPlayerName(targetid), ReturnPlayerName(playerid), reason, playerData[targetid][pID], playerData[targetid][pUserid]);
	mysql_query(dbCon, XLQuery);
	//printf("%s", strlen(XLQuery));

	format(szString, sizeof(szString), "AdmCmd: %s ได้เตะ %s สาเหตุ: %s", ReturnPlayerName(playerid), ReturnPlayerName(targetid), reason);
	SendClientMessageToAll(COLOR_YELLOW, szString);

    Log_Write("logs/admin_action.txt", "[%s] [/kick] %s has kicked %s reason %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid), reason);

	format(szString, sizeof(szString), "เตะ %s สาเหตุ %s", ReturnPlayerName(targetid), reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	KickEx(targetid);
	return 1;
}

CMD:idlekick(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	new targetid;
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/idlekick [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	format(XLQuery, sizeof(XLQuery), "INSERT INTO `logs_idlekick` (`IP`, `Character`, `KickedBy`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', %d, %d)", ReturnIP(targetid), ReturnPlayerName(targetid), ReturnPlayerName(playerid), playerData[targetid][pID], playerData[targetid][pUserid]);
	mysql_query(dbCon, XLQuery);

	format(szString, sizeof(szString), "AdmCmd: %s ได้เตะ %s สาเหตุ: AFK/Idle", ReturnPlayerName(playerid), ReturnPlayerName(targetid));
	SendAdminAlert(COLOR_YELLOW, szString);
	SendClientMessage(targetid, COLOR_YELLOW, szString);

    Log_Write("logs/admin_action.txt", "[%s] [/idlekick] %s has kicked %s reason AFK/Idle", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid));

	format(szString, sizeof(szString), "เตะ %s สาเหตุ AFK/Idle", ReturnPlayerName(targetid));
    SQL_LogAdmin_Action(playerid, "IG", szString);

	KickEx(targetid);
	return 1;
}

CMD:ban(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	new targetid, reason[128], ip[16];
	if(sscanf(params,"us[128]",targetid,reason)) return SendSyntaxMessage(playerid, "/ban [ไอดีผู้เล่น/ชื่อบางส่วน] [reason]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	format(ip, 16, "%s", ReturnIP(targetid));

	mysql_format(dbCon, XLQuery, sizeof(XLQuery), "INSERT INTO `bans` (`character_id`, `name`, `bannedby`, `reason`, `playerIP`) VALUES (%d, '%s', '%s', '%e', '%s')", playerData[targetid][pID], ReturnPlayerName(targetid), ReturnPlayerName(playerid), reason, ip);
	mysql_query(dbCon, XLQuery);

	mysql_format(dbCon, XLQuery, sizeof(XLQuery), "INSERT INTO `logs_ban` (`Character`, `BannedBy`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%e', '%s', %d, %d)", ReturnPlayerName(targetid), ReturnPlayerName(playerid), reason, ip, playerData[targetid][pID], playerData[targetid][pUserid]);
	mysql_query(dbCon, XLQuery);

	format(szString, sizeof(szString), "AdmCmd: %s ได้แบน %s สาเหตุ: %s", ReturnPlayerName(playerid), ReturnPlayerName(targetid), reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/ban] %s has banned %s reason %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid), reason);

	format(szString, sizeof(szString), "แบน %s สาเหตุ %s", ReturnPlayerName(targetid), reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

    KickEx(targetid);
	return 1;
}

CMD:timeban(playerid, params[])
{
    if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	new targetid, reason[128], ip[16], htime;
	if(sscanf(params,"uds[128]",targetid,htime,reason)) return SendSyntaxMessage(playerid, "/timeban [ไอดีผู้เล่น/ชื่อบางส่วน] [time(in hours)] [reason]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	format(ip, 16, "%s", ReturnIP(targetid));
	//format(date, 36, "%s", ReturnSiteDate());

	format(XLQuery, sizeof(XLQuery), "INSERT INTO `bans` (`character_id`, `name`,`bannedby`,`reason`,`playerIP`,`perm`,`expire`) VALUES (%d, '%s', '%s', '%s', '%s', 0,DATE_ADD(NOW(),INTERVAL %d HOUR))", playerData[targetid][pID], ReturnPlayerName(targetid), ReturnPlayerName(playerid), reason, ip, htime);
	mysql_query(dbCon, XLQuery);

	format(XLQuery, sizeof(XLQuery), "INSERT INTO `logs_ban` (`Character`, `BannedBy`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', '%s', %d, %d)", ReturnPlayerName(targetid), ReturnPlayerName(playerid), reason, ip, playerData[targetid][pID], playerData[targetid][pUserid]);
	mysql_query(dbCon, XLQuery);

	format(szString, sizeof(szString), "AdmCmd: %s ได้แบน %s จำนวน %d ชั่วโมง สาเหตุ: %s", ReturnPlayerName(playerid), ReturnPlayerName(targetid), htime, reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/timeban] %s has banned %s %d hours reason %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid), htime, reason);

	format(szString, sizeof(szString), "แบน %s %d วัน สาเหตุ %s", ReturnPlayerName(targetid), htime, reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

    KickEx(targetid);
	return 1;
}

CMD:unban(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[24]",name)) return SendSyntaxMessage(playerid, "/unban [Firstname_Lastname]");

	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ถูกปลดแบนโดยผู้ดูแล %s", name, ReturnPlayerName(playerid));

	format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `name` = '%s'", name);
	mysql_tquery(dbCon, szQuery, "OnQueryFinished", "dd", playerid, THREAD_UNBAN);

	Log_Write("logs/admin_action.txt", "[%s] [/unban] %s has unbanned %s", ReturnDate(), ReturnPlayerName(playerid), name);

	SetPVarString(playerid, "unban_name", name);

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if(!IsIPAddress(params)) return SendSyntaxMessage(playerid, "/unbanip [IP address]");
	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ถูกปลดแบนโดยผู้ดูแล %s", params, ReturnPlayerName(playerid));

	format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `playerIP` = '%s'", params);
	mysql_tquery(dbCon, szQuery, "OnQueryFinished", "dd", playerid, THREAD_UNBAN);

	Log_Write("logs/admin_action.txt", "[%s] [/unban] %s has unbanned ip %s", ReturnDate(), ReturnPlayerName(playerid), params);

	format(szString, sizeof(szString), "ปลดแบนไอพี %s", params);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	return 1;
}


/*CMD:blacklist(playerid, params[])
{
	new
		type[24],
		data[24],
		string[64];

    if (playerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "s[24]s[128]S()", type, data, string))
 	{
	 	SendSyntaxMessage(playerid, "/blacklist [name] [parameter]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:"EMBED_WHITE" ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    new name[32], reason[64], targetid = INVALID_PLAYER_ID;

		foreach (new i : Player) if (!strcmp(playerData[i][pUsername], data) || !strcmp(ReturnRealName(i), data, true)) {
            targetid = i;
            break;
		}

	    if (sscanf(string, "s[32]", reason))
	        return SendSyntaxMessage(playerid, "/blacklist ban %s [reason]", data);


		Blacklist_Add("0.0.0.0", data, playerData[targetid][pUsername], "Blacklist (/blacklist)");

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: คุณได้แบน \"%s\" สำเร็จแล้ว", params);
	    SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s ได้แบน \"%s\"", ReturnRealName(playerid), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has banned \"%s\".", ReturnDate(), ReturnRealName(playerid), params);

		KickEx(targetid);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return ErrorMsg(playerid, "ที่อยู่ IP ที่คุณป้อนไม่ถูกต้องตามรูปแบบ");

		Blacklist_Add(params, "", playerData[playerid][pUsername], "IP Ban (/blacklist)");

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: คุณได้แบนไอพี \"%s\" สำเร็จแล้ว", params);
	    SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s ได้แบนไอพี \"%s\"", ReturnRealName(playerid), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has banned IP \"%s\".", ReturnDate(), ReturnRealName(playerid), params);

		foreach (new i : Player) if (!strcmp(playerData[i][pIP], params)) {
		    KickEx(i);
		}
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return ErrorMsg(playerid, "ที่อยู่ IP ที่คุณป้อนไม่ถูกต้องตามรูปแบบ");

		Blacklist_RemoveIP(params);

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: คุณได้ปลดแบนไอพี \"%s\" สำเร็จแล้ว", params);
	    SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ได้ปลดแบนไอพี \"%s\"", ReturnRealName(playerid), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has unbanned IP \"%s\".", ReturnDate(), ReturnRealName(playerid), params);
	}
	return 1;
}*/

/*IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}*/

CMD:getip(playerid, params[])
{
	new
	    userid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/getip [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "ที่อยู่ไอพีของ %s คือ %s", ReturnPlayerName(userid), playerData[userid][pIP]);
	return 1;
}
/*
Blacklist_Add(ip[], username[], banner[], reason[])
{
	new
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	new
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	new
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}*/

/*CharacterUpdate(playerid,numb,key[][][])
{
    new modifs[512];
    for(new i=0; i<numb;i++)
    {
        if(i!=0) format(modifs,sizeof(modifs),"%s, ", modifs);
        if(IsNumeric(key[i][1])) format(modifs,sizeof(modifs),"%s%s=%s", modifs, key[i][0], key[i][1]);
        else format(modifs,sizeof(modifs),"%s%s = \"%s\"", modifs, key[i][0], key[i][1]);
    }
    format(XLQuery,sizeof(XLQuery),"UPDATE characters SET %s WHERE ID=%d",modifs,playerData[playerid][pID]);
	mysql_query(dbCon, XLQuery);
	printf(XLQuery);
}*/


/*MySQLUpdate(table[],numb,key[][][], where[])
{
    new modifs[512];
    for(new i=0; i<numb;i++)
    {
        if(i!=0) format(modifs,sizeof(modifs),"%s, ", modifs);
        if(IsNumeric(key[i][1])) format(modifs,sizeof(modifs),"%s%s=%s", modifs, key[i][0], key[i][1]);
        else format(modifs,sizeof(modifs),"%s%s = \"%s\"", modifs, key[i][0], key[i][1]);
    }
    format(XLQuery,sizeof(XLQuery),"UPDATE %s SET %s WHERE %s",table,modifs,where);
	mysql_query(dbCon, XLQuery);
}
*/

forward HttpVerifyRequest(index, response_code, data[]);
public HttpVerifyRequest(index, response_code, data[])
{
    if(response_code == 200)
    {
	    SendClientMessageEx(index, COLOR_YELLOW, "เราได้ส่งอีเมลการยืนยันบัญชีไปที่ %s เรียบร้อยแล้ว", data);
		SendClientMessage(index, COLOR_YELLOW, "อาจใช้เวลา 2-3 นาทีโปรดตรวจสอบให้แน่ใจว่ามันไม่ได้อยู่ในอีเมลขยะ");
		//printf("Email Result: %s !", data);
    }
    else
    {
	    SendClientMessage(index, COLOR_LIGHTRED, "การส่งอีเมลมีปัญหาโปรดติดต่อผู้ดูแลระบบ");
        //printf("%s: Sending Verify e-mail Failed !", ReturnPlayerName(index));
    }
    KickEx(index);
}

ReturnDonateRank(rank) {
	new drank[20];
	switch(rank) {
		case 1: drank = "Bronze user";
		case 2: drank = "Silver user";
		case 3: drank = "Gold user";
		default: drank = "None";
	}
	return drank;
}

CMD:setdonaterank(playerid, params[])
{
	new targetid, viplevel, viptime;

	if(playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "uiI(30)", targetid, viplevel, viptime)) return SendSyntaxMessage(playerid, "/setdonaterank [ไอดีผู้เล่น/ชื่อบางส่วน] [level(1-3)] [day]");
	if(viplevel == 0)
	{

	    playerData[targetid][pDonateRank] = 0;
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ได้ลบล้างสถานะผู้บริจาคของ %s", ReturnPlayerName(playerid), ReturnPlayerName(targetid));
		Log_Write("logs/admin_action.txt", "[%s] [/setdonaterank] %s has delete donate rank's %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid));
		SendClientMessageEx(targetid, COLOR_YELLOW, "%s ได้ลบสถานะผู้บริจาคของคุณ", ReturnPlayerName(playerid));

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `DonateRank` = 0 WHERE `ID` = %d", playerData[targetid][pID]);
		mysql_query(dbCon, szQuery);

		return 1;
	}
	if(viplevel < 0 || viplevel > 3) return SendClientMessage(playerid, COLOR_GRAD2, "   เลเวลต้องไม่ต่ำกว่า 0 หรือมากกว่า 3 !");

	playerData[targetid][pDonateRank] = viplevel;
	playerData[targetid][pDonateUnix] = gettime() + (viptime * 86400);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ได้ให้สถานะผู้บริจาค %s กับ %s จำนวน %d วัน", ReturnPlayerName(playerid), ReturnDonateRank(viplevel), ReturnPlayerName(targetid), viptime);
	Log_Write("logs/admin_action.txt", "[%s] [/setdonaterank] %s has set donate rank's %s to %d for %d day(s)", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid), viplevel, viptime);


	/*new cts, ctm, cth, ctd, ctmo, cty, expired[24];
	TimestampToDate(playerData[targetid][pDonateUnix], cty, ctmo, ctd, cth, ctm, cts);
	format(expired, 24, "%04d-%02d-%02d %02d:%02d:%02d", cty, ctmo, ctd, cth, ctm, cts);*/
	SendClientMessageEx(targetid, COLOR_YELLOW, "%s ได้ให้สถานะผู้บริจาค %s กับคุณ", ReturnPlayerName(playerid), ReturnDonateRank(viplevel));

	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `DonateRank` = %d, `DonateExpired` = DATE_ADD(NOW(), INTERVAL 1 MONTH) WHERE `ID` = %d", viplevel, playerData[targetid][pID]);
	mysql_query(dbCon, szQuery);

	format(szQuery, sizeof(szQuery), "ให้สถานะผู้บริจาค %s กับ %s จำนวน %d วัน", ReturnDonateRank(viplevel), ReturnPlayerName(targetid), viptime);
	SQL_LogAdmin_Action(playerid, "/setdonaterank", szQuery);

	return 1;
}

CMD:exitcar(playerid) {
	if (IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	return 1;
}

CMD:flipveh(playerid, params[]) {

	new vehicleid;

    if (playerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/flipveh [vehicleid]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "   ไอดียานพาหนะไม่ถูกต้อง");


    new Float:angle;
    GetVehicleZAngle(vehicleid, angle);
    SetVehicleZAngle(vehicleid, angle);

    return 1;
}

CMD:licenses(playerid, params[])
{
	new emote[128], userid;

	if (sscanf(params, "uS()[128]", userid, emote))
	    return SendSyntaxMessage(playerid, "/licenses [ไอดีผู้เล่น/ชื่อบางส่วน] (optional: emote)");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(userid == playerid || userid == INVALID_PLAYER_ID) {

		SendClientMessage(userid, COLOR_GREEN, "______Los Santos ID______");
		SendClientMessageEx(userid, COLOR_WHITE, "Name : %s", ReturnNameEx(playerid));

		if(playerData[playerid][pCarLic]) SendClientMessage(userid, COLOR_WHITE, "Driving License: Yes");
		else SendClientMessage(userid, COLOR_LIGHTRED, "Driving License: No");

		SendClientMessageEx(userid, COLOR_WHITE, "Driver Warnings: %d", playerData[playerid][pDW]);

		if(playerData[playerid][pPCarkey] != 9999) SendClientMessageEx(userid, COLOR_WHITE, "Vehicle Registered: [%s]", CarData[playerData[playerid][pPCarkey]][carPlate]);
		else SendClientMessage(userid, COLOR_LIGHTRED, "Vehicle Registered: [None]");

		if(playerData[playerid][pWepLic]) SendClientMessageEx(userid, COLOR_WHITE, "Weapon License: Yes%s", playerData[playerid][pCCWLic] ? (" (CCW)") : (""));
		else SendClientMessage(userid, COLOR_LIGHTRED, "Weapon License: No");
		if(playerData[playerid][pFlyLic]) SendClientMessage(userid, COLOR_WHITE, "Flying License: Yes");
		else SendClientMessage(userid, COLOR_LIGHTRED, "Flying License: No");
		if(playerData[playerid][pMedicLic]) SendClientMessage(userid, COLOR_WHITE, "Medical License: Yes");
		else SendClientMessage(userid, COLOR_LIGHTRED, "Medical License: No");
		if(playerData[playerid][pJob] == JOB_TRUCKER) SendClientMessage(userid, COLOR_WHITE, "Trucker License: Yes");
		else SendClientMessage(userid, COLOR_LIGHTRED, "Trucker License: No");

		SendClientMessage(userid, COLOR_GREEN, "_________________________");

		if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s มองดูไปที่ ID Card ของเขา", ReturnRealName(playerid));
		else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnRealName(playerid), emote);

		return 1;
	}

	SendClientMessage(userid, COLOR_GREEN, "______Los Santos ID______");
	SendClientMessageEx(userid, COLOR_WHITE, "Name : %s", ReturnNameEx(playerid));

	if(playerData[playerid][pCarLic]) SendClientMessage(userid, COLOR_WHITE, "Driving License: Yes");
	else SendClientMessage(userid, COLOR_LIGHTRED, "Driving License: No");

	SendClientMessageEx(userid, COLOR_WHITE, "Driver Warnings: %d", playerData[playerid][pDW]);

	if(playerData[playerid][pPCarkey] != 9999) SendClientMessageEx(userid, COLOR_WHITE, "Vehicle Registered: [%s]", CarData[playerData[playerid][pPCarkey]][carPlate]);
	else SendClientMessage(userid, COLOR_LIGHTRED, "Vehicle Registered: [None]");

	if(playerData[playerid][pWepLic]) SendClientMessageEx(userid, COLOR_WHITE, "Weapon License: Yes%s", playerData[playerid][pCCWLic] ? (" (CCW)") : (""));
	else SendClientMessage(userid, COLOR_LIGHTRED, "Weapon License: No");
	if(playerData[playerid][pFlyLic]) SendClientMessage(userid, COLOR_WHITE, "Flying License: Yes");
	else SendClientMessage(userid, COLOR_LIGHTRED, "Flying License: No");
	if(playerData[playerid][pMedicLic]) SendClientMessage(userid, COLOR_WHITE, "Medical License: Yes");
	else SendClientMessage(userid, COLOR_LIGHTRED, "Medical License: No");
	if(playerData[playerid][pJob] == JOB_TRUCKER) SendClientMessage(userid, COLOR_WHITE, "Trucker License: Yes");
	else SendClientMessage(userid, COLOR_LIGHTRED, "Trucker License: No");

	SendClientMessage(userid, COLOR_GREEN, "_________________________");

	if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s ได้ยื่น ID Card ของเขาให้กับ %s", ReturnRealName(playerid), ReturnRealName(userid));
	else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s %s", ReturnRealName(playerid), emote, ReturnRealName(userid));

	return 1;
}

CMD:warnlicense(playerid, params[])
{
	new emote[128], userid;

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD && GetFactionType(playerid) != FACTION_TYPE_SADOC)
		return SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ใช่ตำรวจ");

	if (sscanf(params, "uS()[128]", userid, emote))
	    return SendSyntaxMessage(playerid, "/warnlicense [ไอดีผู้เล่น/ชื่อบางส่วน] (optional: emote)");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถตักเตือนใบอนุญาตขับขี่กับตัวเองได้");

	if (playerData[userid][pDW] < 3) {

		playerData[userid][pDW] += 1;

		SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้กล่าวตักเตือนใบอนุญาตขับขี่ของ %s เป็นครั้งที่ %d (หากครบ 3 ครั้งจะถูกยึดใบอนุญาตขับขี่โดยทันที)", ReturnRealName(userid), playerData[userid][pDW]);
		SendClientMessageEx(userid, COLOR_GRAD1, "   คุณได้ถูกกล่าวตักเตือนใบอนุญาตขับขี่โดยเจ้าหน้าที่ %s โดยเป็นการตักเตือนครั้งที่ %d (หากครบ 3 ครั้งจะถูกยึดใบอนุญาตขับขี่โดยทันที)", ReturnRealName(playerid), playerData[userid][pDW]);

		if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s ได้กล่าวตักเตือนการขับรถของ %s", ReturnRealName(playerid), ReturnRealName(userid));
		else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s %s", ReturnRealName(playerid), emote, ReturnRealName(userid));
	
		return 1;
	}
	
	else if (playerData[userid][pDW] == 3) {

		playerData[userid][pDW] = 0;
		playerData[userid][pCarLic] = 0;

		SendClientMessageEx(playerid, COLOR_GRAD1, "   คุณได้ยึดใบอนุญาตขับขี่ของ %s เนื่องจากเป็นการตักเตือนครั้งที่ 3", ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_GRAD1, "   คุณได้ถูกยึดใบอนุญาตขับขี่โดยเจ้าหน้าที่ %s เนื่องจากเป็นการตักเตือนครั้งที่ 3", ReturnRealName(playerid));

		if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s ได้ยึดใบอนุญาตขับขี่ของ %s", ReturnRealName(playerid), ReturnRealName(userid));
		else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s %s", ReturnRealName(playerid), emote, ReturnRealName(userid));
	
		return 1;
	}

	return 1;
}

/*CMD:licenses(playerid, params[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "|____ ใบอนุณาต ____|");
	format(string, sizeof(string), "ชื่อ: %s", ReturnRealName(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "ใบขับขี่: %s", (playerData[playerid][pCarLic]) ? ("มี") : ("ไม่มี"));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new string[128], playerb;
	if(sscanf(params, "u", playerb)) return SendSyntaxMessage(playerid, "/showlicenses [ไอดีผู้เล่น]");

	SendClientMessage(playerb, COLOR_LIGHTBLUE, "|____ ใบอนุณาต ____|");
	format(string, sizeof(string), "ชื่อ: %s", ReturnRealName(playerid));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "ใบขับขี่: %s", (playerData[playerid][pCarLic]) ? ("มี") : ("ไม่มี"));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}*/


alias:report("re");
CMD:report(playerid, params[])
{
	if(systemVariables[reportSystem] == 0)
	{
	    if(isnull(params))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "การใช้: /report [ข้อความ]");
		}
		else {
		    if(playerData[playerid][pReport] >= 1)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "คุณได้รายงานไปยังผู้ดูแลแล้ว กรุณารอการตอบหลับสักครู่");
			}
			else {
			    if(strlen(params) >= 64) {
			        return SendClientMessage(playerid, COLOR_GREY, "ข้อความของคุณยาวเกินไป กรุณาให้ต่ำกว่า 64 ตัวอักษร");
				}
				else {
					new pDialog[1900];
					strcpi(playerData[playerid][pReportMessage], params, 64);

					format(pDialog, sizeof(pDialog), "{FF6347}คำเตือ"EMBED_WHITE"น:\nคุณกำลังจะส่งให้กับผู้ดูแลระบบที่ออนไลน์ทั้งหมดรายงานต่อไปนี้: %s\n\n", params);
					strcat(pDialog, "- รายงานการกระทำที่ไม่ได้เกิดขึ้นในนขณะนี้ เป็นเรื่องยากมากสำหรับผู้ดูแลระบบที่ออนไลน์เพื่อจัดการกับปัญหาอย่างตรงจุด เนื่องจากหลักฐานไม่เป็นปัจจุบัน\nขอแนะนำให้ไปยังฟอรั่มและส่งรายงานในฟอรั่มพร้อมหลักฐานแทน\n\n- มันสำคัญมากที่ไม่ส่งรายงานเหล่านี้ในเกมแต่คุณจะได้รับการจัดการให้ดีขึ้นจาก", sizeof(pDialog));
					strcat(pDialog, "ฟอรั่มเช่น ปัญหาดังกล่าวข้างบน หรือปัญหาการโดเนท ขอคืนเงินหลังจาก\nที่เซิร์ฟเวอร์ Rollbacks ขอปลดแบนและอื่น ๆ ถ้าคุณคิดว่าคุณกำลังถูก Deathmatch ให้ลองพิจารณาถามบุคคลที่ฆ่าด้วยเหตุผลเป็นอันดับแรก\n\n- คุณควรจะได้รับการ Teleport, Unfreeze, Slap หรือที่คล้ายคลึงกัน คุณจะต้องระบุเหตุผล โดยทั่วไปแล้วคุณจะต้องอธิบายในรายงานของคุณ\n- กรุณาอย่าสแปมรายงานของคุณ ต้องอดทนและผู้ดูแลระบบจะช่วยคุณโดยเร็วที่สุดเท่าที่จะเป็นไปได้\n", sizeof(pDialog));
					strcat(pDialog, "คุณไม่ควรพยายามที่จะทำลายหรือเลิกเล่นบทบาทสมมุติของผู้เล่นอื่นเว้นแต่คุณจะได้รับความช่วยเหลือที่ผู้ดูแลระบบให้/ผู้เล่นอื่นทำให้คุณไม่สบายใจบทบาทเกี่ยวกับเพศ", sizeof(pDialog));
					Dialog_Show(playerid, ReportConfirm, DIALOG_STYLE_MSGBOX, "คุณแน่ใจที่จะส่งรายงานไปผู้ดูแลระบบแล้วหรือ?", pDialog, "Proceed", "Don't Send");
				}
			}
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_WHITE, "ระบบการแจ้งรายงานถูกปิดในขณะนี้ กรุณาแจ้งอีกครั้งในภายหลัง");
	}
	return 1;
}

CMD:spec(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1 || playerData[playerid][pTester] >= 1) {
        new
            userID;

		if(sscanf(params, "u", userID)) {
		    return SendSyntaxMessage(playerid, "/spec [ไอดีผู้เล่น/ชื่อบางส่วน]");
		}
		else if(!IsPlayerConnected(userID)) {
		    return SendClientMessage(playerid, COLOR_GREY, "The specified player is not connected, or has not authenticated.");
		}
		else {
			if(playerData[playerid][pSpectating] == INVALID_PLAYER_ID) { // Will only save pos/etc if they're NOT spectating. This will stop the annoying death/pos/int/VW/crash bugs everyone's experiencing...
				GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
				playerData[playerid][pInterior] = GetPlayerInterior(playerid);
				playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    }
		    playerData[playerid][pSpectating] = userID;
		    TogglePlayerSpectating(playerid, true);

			SetPlayerInterior(playerid, GetPlayerInterior(userID));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));

		    if(IsPlayerInAnyVehicle(userID)) {
		        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userID));
		    }
		    else {
				PlayerSpectatePlayer(playerid, userID);
			}

			if(playerData[playerid][pTutorialStep]) {
				SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นอยู่ในบทเรียน");
			}

		}
	}
	return 1;
}

CMD:interior(playerid) return SendClientMessageEx(playerid, COLOR_GENANNOUNCE, "Interior ในปัจจุบัน: %d", GetPlayerInterior(playerid));

CMD:setint(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1) {
        new
            userID, intid;

		if(sscanf(params, "ud", userID, intid)) {
		    return SendSyntaxMessage(playerid, "/setint [ไอดีผู้เล่น/ชื่อบางส่วน] [Interiorid]");
		}
		else if(IsPlayerConnected(userID)) {
			SetPlayerInterior(userID,intid);
			playerData[userID][pInterior] = intid;
			SendClientMessageEx(userID, COLOR_GRAD1, " Interior: %d", intid);
		}
	}
	return 1;
}

CMD:setvw(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 1) {
        new
            userID, world;

		if(sscanf(params, "ud", userID, world)) {
		    return SendSyntaxMessage(playerid, "/setvw [ไอดีผู้เล่น/ชื่อบางส่วน] [Virtualworldid]");
		}
		else if(IsPlayerConnected(userID)) {
			SetPlayerVirtualWorld(userID,world);
			playerData[userID][pWorld] = world;
			SendClientMessageEx(userID, COLOR_GRAD1, " VirtulWorld: %d", world);
		}
	}
	return 1;
}

// Vehnames

/*CMD:vehnames(playerid, params[]) {
	if(playerData[playerid][pAdmin] >= 1)
	{
		new
			tool[16];

		if(sscanf(params, "s[16] ", tool))
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE:/vehnames [tool]");
		    SendClientMessage(playerid, COLOR_GREY, "Tools: List, Accept, Disregard");
		}
		else
		{
		    if(strcmp(tool, "list", true) == 0 || strcmp(tool, "l", true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");

		        new
					string[4096],
					vehCount,
					vehicleid;

		        foreach (new  i: Player)
				{
					vehicleid = playerData[i][pVehicleID];
		            if(playerData[i][pRequestVehicle] >= 1)
					{
						vehicleid = playerData[i][pVehicleID];

		                format(string, sizeof(string), "[ACTIVE]"EMBED_WHITE" %s {FF6347}[%d] {FFFF91}: %s (( ยานพาหนะไอดี : %d ))", ReturnRealName(i), i, playerData[i][pRVehicleMessage], vehicleid);
		                SendClientMessage(playerid, COLOR_YELLOW3, string);
		                vehCount++;
		            }
		        }

		        format(string, sizeof(string), "ACTIVE VEHNAMES: %d (ใช้ /vehnames accept เพื่อยืนยัน)", vehCount);
		        SendClientMessage(playerid, COLOR_WHITE, string);

				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else if(strcmp(tool, "accept", true) == 0 || strcmp(tool, "a", true) == 0)
		    {
		        new
					userID;

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/vehnames accept [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
		            if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
		            {
		                if(playerData[userID][pRequestVehicle] >= 1)
						{
		                    new

								string[128],
								vehicleid;

							vehicleid = playerData[userID][pVehicleID];

		                    format(string, sizeof(string), "%s ยืนยันคำขอเปลี่ยนชื่อรุ่นยานพาหนะของ %s (%s)", ReturnPlayerName(playerid), ReturnPlayerName(userID), playerData[userID][pRVehicleMessage]);
		                    SendAdminAlert(COLOR_REPORT, string);

							format(CarData[vehicleid][carName], 64, playerData[userID][pRVehicleMessage]);
							CarData[vehicleid][carActive] = 1;
							Car_Save(vehicleid);

		                    playerData[userID][pRequestVehicle] = 0;
		                    format(playerData[userID][pRVehicleMessage], 64, "(null)");

							if(playerData[playerid][pAdmin] >= 1)
							{
		                    	format(string, sizeof(string), "คำขอของคุณได้รับการยอมรับโดย %s", ReturnPlayerName(playerid));
                                SendClientMessage(userID, COLOR_REPORT, string);
							}
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นไม่ได้ส่งคำขอเข้ามา");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "disregard", true) == 0 || strcmp(tool, "d", true) == 0)
			{
		        new
					userID,
					string[128];

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/vehnames disregard [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
					{
		                if(playerData[userID][pRequestVehicle] != 0) {

		                    playerData[userID][pRequestVehicle] = 0;
		                    format(playerData[userID][pRVehicleMessage], 64, "(null)");

		                    format(string, sizeof(string), "คุณปฏิเสธคำขอของ %s", ReturnPlayerName(userID));
		                    SendClientMessage(playerid, COLOR_WHITE, string);
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นไม่ได้รายงานเข้ามา");
		                }
		            }
		        }
		    }
		    else
			{
			    SendClientMessage(playerid, COLOR_GREY, "USAGE:/vehnames [tool]");
			    SendClientMessage(playerid, COLOR_GREY, "TOOLS: List, Accept, Disregard");
		    }
		}
	}

	return 1;
}*/

CMD:reports(playerid, params[]) {
	if(playerData[playerid][pAdmin] >= 1)
	{
		new
			tool[16];

		if(sscanf(params, "s[16] ", tool))
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE:/reports [tool]");
		    SendClientMessage(playerid, COLOR_GREY, "Tools: List, Accept, Disregard, Status");
		}
		else
		{
		    if(strcmp(tool, "list", true) == 0 || strcmp(tool, "l", true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");

		        new
					string[128],
					reportCount;

		        foreach (new  i: Player)
				{
		            if(playerData[i][pReport] >= 1)
					{
		                format(string, sizeof(string), "[ACTIVE]"EMBED_WHITE" %s {FF6347}[%d] {FFFF91}: %s", ReturnRealName(i), i, playerData[i][pReportMessage]);
		                SendClientMessage(playerid, COLOR_REPORT, string);
		                reportCount++;
		            }
		        }

		        format(string, sizeof(string), "ACTIVE REPORTS: %d (ใช้ /reports accept เพื่อยืนยัน)", reportCount);
		        SendClientMessage(playerid, COLOR_WHITE, string);

				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else if(strcmp(tool, "accept", true) == 0 || strcmp(tool, "a", true) == 0)
		    {
		        new
					userID;

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/reports accept [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
		            if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
		            {
		                if(playerData[userID][pReport] >= 1)
						{
		                    new

								string[128];

		                    /*format(string, sizeof(string), "คุณยืนยันรายงานของ %s (%s)", ReturnPlayerName(userID), playerData[userID][pReportMessage]);
		                    SendClientMessage(playerid, COLOR_WHITE, string);*/

		                    format(string, sizeof(string), "%s ยืนยันรายงานของ %s (%s)", ReturnPlayerName(playerid), ReturnPlayerName(userID), playerData[userID][pReportMessage]);
		                    SendAdminAlert(COLOR_REPORT, string);

		                    playerData[userID][pReport] = 0;
		                    format(playerData[userID][pReportMessage], 64, "(null)");

							if(playerData[playerid][pAdmin] >= 1)
							{
		                    	format(string, sizeof(string), "ขอบคุณสำหรับรายงาน! ผู้ดูแล %s ได้ยืนยันรายงานของคุณแล้ว", ReturnPlayerName(playerid));
                                SendClientMessage(userID, COLOR_REPORT, string);
							}
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นไม่ได้รายงานเข้ามา");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "disregard", true) == 0 || strcmp(tool, "d", true) == 0)
			{
		        new
					userID,
					string[128];

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/reports disregard [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
					{
		                if(playerData[userID][pReport] != 0) {

		                    playerData[userID][pReport] = 0;
		                    format(playerData[userID][pReportMessage], 64, "(null)");

		                    format(string, sizeof(string), "คุณปฏิเสธรายงานของ %s", ReturnPlayerName(userID));
		                    SendClientMessage(playerid, COLOR_WHITE, string);
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นไม่ได้รายงานเข้ามา");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "status", true) == 0 || strcmp(tool, "s", true) == 0)
			{
		        if(playerData[playerid][pAdmin] >= 4)
				{
			        if(systemVariables[reportSystem] == 0)
					{
			            systemVariables[reportSystem] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "คุณได้ยกเลิกระบบ Report");
			            SendClientMessageToAll(COLOR_REPORT, "ระบบ Report ถูกยกเลิก");
			        }
			        else
					{
			            systemVariables[reportSystem] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "คุณเปิดใช้ระบบ Report");
			            SendClientMessageToAll(COLOR_REPORT, "ระบบ Report ถูกเปิดใช้อีกครั้ง");
			        }
		        }
		        else
				{
					return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่ในระดับ Lead Administrator หรือมากกว่าเพื่อใช้ฟังชั่นนี้");
				}
 		    }
		    else
			{
			    SendClientMessage(playerid, COLOR_GREY, "USAGE:/reports [tool]");
			    SendClientMessage(playerid, COLOR_GREY, "TOOLS: List, Accept, Disregard, Status");
		    }
		}
	}

	return 1;
}

CMD:helpme(playerid, params[])
{
	if(systemVariables[helpmeSystem] == 0)
	{
	    if(isnull(params))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "การใช้: /helpme [ข้อความ]");
		}
		else {
		    if(playerData[playerid][pHelpme] >= 1)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "คุณได้ส่งการขอความช่วยเหลือแล้ว โปรดรอตอบกลับ...");
			}
			else {
			    if(strlen(params) >= 64) {
			        return SendClientMessage(playerid, COLOR_GREY, "ข้อความของคุณยาวเกินไป กรุณาให้ตำกว่า 64 ตัวอักษร");
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำขอความช่วยเหลือของคุณได้ถูกส่งไปยังผู้ดูแลทุกคนที่ออนไลน์");

					strcpi(playerData[playerid][pHelpmeMessage], params, 64);
				    playerData[playerid][pHelpme] = 1;

					SendGeneralAlert(COLOR_HELPME, "มีความช่วยเหลือใหม่เข้ามาพิมพ์ '/helpmes list' เพื่อดู");
				}
			}
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_WHITE, "ระบบการขอความช่วยเหลือถูกปิดในขณะนี้ กรุณาแจ้งอีกครั้งในภายหลัง");
	}
	return 1;
}

CMD:helpmes(playerid, params[]) {
	if(playerData[playerid][pAdmin] >= 1 || playerData[playerid][pTester])
	{
		new
			tool[16];

		if(sscanf(params, "s[16] ", tool))
		{
		    SendClientMessage(playerid, COLOR_GREY, "USAGE:/helpmes [tool]");
		    SendClientMessage(playerid, COLOR_GREY, "Tools: list, accept, disregard, status");
		}
		else
		{
		    if(strcmp(tool, "list", true) == 0 || strcmp(tool, "l", true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");

		        new
					string[128],
					reportCount;

		        foreach (new  i: Player)
				{
		            if(playerData[i][pHelpme] >= 1)
					{
		                format(string, sizeof(string), "[ACTIVE]"EMBED_WHITE" %s {FF6347}[%d] {FFFF91}: %s", ReturnRealName(i), i, playerData[i][pHelpmeMessage]);
		                SendClientMessage(playerid, COLOR_HELPME, string);
		                reportCount++;
		            }
		        }

		        format(string, sizeof(string), "ACTIVE REPORTS: %d (ใช้ /helpmes accept เพื่อยืนยัน)", reportCount);
		        SendClientMessage(playerid, COLOR_WHITE, string);

				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else if(strcmp(tool, "accept", true) == 0 || strcmp(tool, "a", true) == 0)
		    {
		        new
					userID;

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/helpmes accept [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
		            {
		                if(playerData[userID][pHelpme] >= 1)
						{
		                    new
								string[128];

		                    format(string, sizeof(string), "%s ยืนยันคำขอความช่วยเหลือของ %s (%s)", ReturnPlayerName(playerid), ReturnPlayerName(userID), playerData[userID][pHelpmeMessage]);
		                    SendGeneralAlert(COLOR_HELPME, string);

		                    playerData[userID][pHelpme] = 0;
		                    format(playerData[userID][pHelpmeMessage], 64, "(null)");

							if(playerData[playerid][pAdmin] >= 1)
							{
		                    	format(string, sizeof(string), "ขอบคุณสำหรับความไว้ใจ! ผู้ดูแล %s ได้ยืนยันคำขอความช่วยเหลือคุณแล้ว", ReturnRealName(playerid));
							}
							else if(playerData[playerid][pTester]) {
								format(string, sizeof(string), "ขอบคุณสำหรับความไว้ใจ! ผู้ช่วย %s ได้ยืนยันคำขอความช่วยเหลือคุณแล้ว", ReturnRealName(playerid));
							}
							SendClientMessage(userID, COLOR_HELPME, string);

		                    SetPVarInt(playerid, "aR", 1);
		                    SetPVarInt(playerid, "aRf", userID);

		                    Dialog_Show(playerid, ReportDialog, DIALOG_STYLE_LIST, "Report System", "Teleport\nSpectate\nTake no action", "Select", "Exit");
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "That player doesn't have an active report.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "disregard", true) == 0 || strcmp(tool, "d", true) == 0)
			{
		        new
					userID,
					string[128];

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USAGE:/helpmes disregard [ไอดีผู้เล่น/ชื่อบางส่วน]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");
		            }
		            else
					{
		                if(playerData[userID][pHelpme] != 0) {

		                    playerData[userID][pHelpme] = 0;
		                    format(playerData[userID][pHelpmeMessage], 64, "(null)");

		                    format(string, sizeof(string), "คุณปฏิเสธการขอความช่วยเหลือของ %s", ReturnPlayerName(userID));
		                    SendClientMessage(playerid, COLOR_WHITE, string);
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "That player doesn't have an active report.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "status", true) == 0 || strcmp(tool, "s", true) == 0)
			{
		        if(playerData[playerid][pAdmin] >= 4)
				{
			        if(systemVariables[helpmeSystem] == 0)
					{
			            systemVariables[helpmeSystem] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "คุณได้ยกเลิกระบบ Helpme");
			            SendClientMessageToAll(COLOR_HELPME, "ระบบ Report ถูกยกเลิก");
			        }
			        else
					{
			            systemVariables[helpmeSystem] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "คุณเปิดใช้ระบบ Helpme");
			            SendClientMessageToAll(COLOR_HELPME, "ระบบ Report ถูกเปิดใช้อีกครั้ง");
			        }
		        }
		        else
				{
					return SendClientMessage(playerid, COLOR_GREY, "You need to be a Lead Administrator or above to use this command.");
				}
 		    }
		    else
			{
			    SendClientMessage(playerid, COLOR_GREY, "USAGE:/helpmes [tool]");
			    SendClientMessage(playerid, COLOR_GREY, "TOOLS: List, Accept, Disregard, Status");
		    }
		}
	}

	return 1;
}

SQL_LogAdmin_Action(adminid, const key[], const log[])
{
	new query[512];
	format(query,sizeof(query),"INSERT INTO logs_admin_action (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[adminid][pID], key, log);
	mysql_query(dbCon, query);

}

/*SQL_LogCommand(playerid, key[], log[])
{
	new query[512];

	new clean_log[128];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_command (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}*/
/*
SQL_LogChat(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_chat (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}
*/
SQL_LogPay(playerid, const key[], const log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_pay (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}

/*
SQL_LogCheat(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_cheat (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}*/

SQL_LogMask(playerid, const key[], const log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_mask (admin,action_key,action_log) VALUES (%d,'%s','%s')",playerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);
}

/*strtok(const string[])
{
	new length = strlen(string), index;
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}*/

CMD:cuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD && GetFactionType(playerid) != FACTION_TYPE_SADOC)
		return SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ใช่ ตำรวจ");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cuff [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นไม่ได้ Online !");
		}
	}

    if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_GREY, "   คุณไม่สามารถใส่กุญแจมือตัวเองได้!");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ !");

    if (!bf_get(player_bf[playerid], IS_PLAYER_TAZER) && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นต้องอยู่ในสถานะที่ไม่ได้ขัดขืน");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นต้องไม่อยู่บนยานพาหนะ");

    if (bf_get(player_bf[userid],PLAYER_CUFFED))
        return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นถูกใส่กุญแจมือแล้ว");

	new
	    string[64];

    bf_on(player_bf[userid],PLAYER_CUFFED);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
    SetPlayerAttachedObject(userid, FREESLOT9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);

	format(string, sizeof(string), "You've been ~r~cuffed~w~ by %s.", ReturnRealName(playerid));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ได้จับข้อมือคู่นั้นของ %s อย่างรัดกุมพร้อมใส่กุญแจมือ", ReturnRealName(playerid), ReturnRealName(userid));
    return 1;
}

CMD:uncuff(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD && GetFactionType(playerid) != FACTION_TYPE_SADOC)
		return SendClientMessage(playerid, COLOR_GREY, "   คุณไม่ใช่ ตำรวจ");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/uncuff [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นไม่ได้ Online !");
		}
	}

    if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_GREY, "   คุณไม่สามารถปลดกุญแจมือตัวเองได้");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ !");

    if (!bf_get(player_bf[userid],PLAYER_CUFFED))
        return SendClientMessage(playerid, COLOR_GREY, "   ผู้เล่นนั้นไม่ได้ถูกใส่กุญแจมือ");

	new
	    string[64];

    bf_off(player_bf[userid],PLAYER_CUFFED);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(userid, FREESLOT9);

	format(string, sizeof(string), "You've been ~g~uncuffed~w~ by %s.", ReturnRealName(playerid));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s แก้กุญแจมือให้กับข้อมือของ %s", ReturnRealName(playerid), ReturnRealName(userid));
    return 1;
}

CMD:anim(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"____________อนิเมชั่นตัวละคร____________");
	SendClientMessage(playerid, COLOR_WHITE,"[นั่ง/นอน] /sit /chairsit /groundsit /seat /sleep /lean");
	SendClientMessage(playerid, COLOR_WHITE,"[สัญญาณมือ] /gsign /salute");
	SendClientMessage(playerid, COLOR_WHITE,"[การสื่อสาร] /greet /taxiL /taxiR");
    SendClientMessage(playerid, COLOR_WHITE,"[การสื่อสาร] /fuckyou /wave /kiss /no");
    SendClientMessage(playerid, COLOR_WHITE,"[กริยาทางกายภาพ] /bat /punch /taunt /facepalm /aim /slapass");
    SendClientMessage(playerid, COLOR_WHITE,"[กริยาทางกายภาพ] /hide /crawl /crack /think /sipdrink /sipdrink2");
    SendClientMessage(playerid, COLOR_WHITE,"[อารมณ์] /cry /injured /panic");
	SendClientMessage(playerid, COLOR_WHITE,"[ยานพาหนะ] /opendoor_right /opendoor_left");
	SendClientMessage(playerid, COLOR_WHITE,"[การเดิน] /sneak /jog");
    SendClientMessage(playerid, COLOR_GREEN,"_____________________________________________");

    GameTextForPlayer(playerid, "TO STOP ANIMATION TYPE ~r~/STOPANIM OR PRESS ~r~ENTER.", 3000, 4);

	new str[3500];
    strcat(str, "/fall | /fallback | /injured | /akick | /push | /lowbodypush | /handsup | /bomb | /drunk | /getarrested | /laugh | /sup\n");
    strcat(str, "/basket | /headbutt | /medic | /spray | /robman | /taichi | /lookout | /kiss | /cellin | /cellout | /crossarms | /lay\n");
	strcat(str, "/deal | /crack | /groundsit | /chat  | /dance | /fucku | /strip | /hide | /vomit | /chairsit | /reload\n");
    strcat(str, "/koface | /kostomach | /rollfall | /bat | /die | /joint | /bed | /lranim | /fixcar | /fixcarout\n");
    strcat(str, "/lifejump | /exhaust | /leftslap | /carlock | /hoodfrisked | /lightcig | /tapcig | /box | /lay2 | /chant | /fuckyou| /fuckyou2\n");
    strcat(str, "/shouting | /knife | /cop | /elbow | /kneekick | /airkick | /gkick | /punch | /gpunch | /fstance | /lowthrow | /highthrow | /aim\n");
    strcat(str, "/pee | /lean | /run | /poli | /surrender | /sit | /breathless | /seat | /rap | /cross | /jiggy | /gsign\n");
    strcat(str, "/sleep | /smoke | /pee | /chora | /relax | /crabs | /stop | /wash | /mourn | /fuck | /tosteal | /crawl\n");
    strcat(str, "/followme | /greet | /still | /hitch | /palmbitch | /cpranim | /giftgiving | /slap2 | /pump | /cheer\n");
    strcat(str, "/dj | /foodeat | /wave | /slapass | /dealer | /dealstance | /inbedright | /inbedleft\n");
	strcat(str, "/wank | /bj | /getup | /follow | /stand | /slapped | /yes | /celebrate | /win | /checkout\n");
	strcat(str, "/thankyou | /invite1 | /scratch | /nod | /cry | /carsmoke | /benddown | /facepalm | /angry\n");
	strcat(str, "/cockgun | /bar | /liftup | /putdown | /camera | /think | /handstand | /panicjump\n");
    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "ท่าทางอื่น ๆ", str, "โอ", "เค");
	return 1;
}

AnimationCheck(playerid)
{
	return (isDeathmode{playerid} || bf_get(player_bf[playerid], IS_PLAYER_TAZER) || bf_get(player_bf[playerid], PLAYER_CUFFED));
}

CMD:greet(playerid, params[])
{
	new targetid, type;
	if(sscanf(params,"dd",targetid,type)) {
		SendSyntaxMessage(playerid, "/greet [ไอดีผู้เล่น/ชื่อบางส่วน] [style]");
		SendClientMessage(playerid, COLOR_YELLOW3, "[1] Kiss [2] Handshake [3] Handshake [4] Handshake [5] Handshake");
		SendClientMessage(playerid, COLOR_YELLOW3, "[6] Handshake [7] Handshake [8] Handshake [9] Handshake [10] Handshake");
		return 1;
	}

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่สามารถทักทายตัวเองได้");

	if(type > 10 || type < 1) return SendClientMessage(playerid, COLOR_WHITE, "มีแค่ 1-10!");
	if (!IsPlayerNearPlayer(playerid, targetid, 2.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	SetPVarInt(playerid, "SentGreet", 1);
	SetPVarInt(playerid, "GreetType", type);
	SetPVarInt(targetid, "GreetFrom", playerid);
	SetPVarInt(targetid, "GettingGreet", 1);

	SendClientMessageEx(playerid, COLOR_WHITE, "* คุณต้องการทักทาย %s", ReturnRealName(targetid));
	SendClientMessageEx(targetid, COLOR_WHITE, "(ID: %d)%s อยากจะเริ่มทักทายกับคุณ(/acceptshake playerID)", playerid,ReturnRealName(playerid));
	return 1;
}

CMD:acceptshake(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SendClientMessage(playerid, COLOR_GREY, "{FF6142}USAGE:"EMBED_WHITE" /acceptshake [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(GetPVarInt(playerid, "GettingGreet") == 0) return SendClientMessage(playerid, COLOR_GREY, "ไม่มีใครต้องการทักทายคุณ");
	if(GetPVarInt(playerid, "GreetFrom") != targetid) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้ถูกร้องขอการทักทายจากผู้เล่นนี้");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(targetid == playerid) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่สามารถทักทายตัวเองได้");


	if (!IsPlayerNearPlayer(playerid, targetid, 1.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถทักทายได้ในขณะนี้");
    if (AnimationCheck(targetid)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนี้ไม่สามารถทักทายคุณได้ในขณะนี้");

	new type = GetPVarInt(targetid, "GreetType");

	ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	playerData[playerid][pAnimation] = 0;

	ApplyAnimationEx(targetid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	SetPlayerSpecialAction(targetid, SPECIAL_ACTION_NONE);
	playerData[targetid][pAnimation] = 0;

	SetPlayerFacePlayer(playerid, targetid);
	SetPlayerFacePlayer(targetid, playerid);


	if(type == 1)
	{
		ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
		ApplyAnimation(targetid, "KISSING", "Playa_Kiss_02", 2.0, 0, 0, 1, 0, 0);
	}
	else if(type == 2)
	{
		ApplyAnimation(playerid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkfa_swt", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 3)
	{
		ApplyAnimation(playerid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkba", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 4)
	{
		ApplyAnimation(playerid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkca", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 5)
	{
		ApplyAnimation(playerid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkcb", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 6)
	{
		ApplyAnimation(playerid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkda", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 7)
	{
		ApplyAnimation(playerid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkea", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 8)
	{
		ApplyAnimation(playerid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkfa", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 9)
	{
		ApplyAnimation(playerid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","hndshkaa", 2.0, 0, 0, 0, 0, 0);
	}
	else if(type == 10)
	{
		ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
		ApplyAnimation(targetid,"GANGS","prtial_hndshk_biz_01", 2.0, 0, 0, 0, 0, 0);
	}
	DeletePVar(GetPVarInt(playerid, "GreetFrom"), "SentGreet");
	DeletePVar(GetPVarInt(playerid, "GreetFrom"), "GreetType");
	DeletePVar(playerid, "GreetFrom");
	DeletePVar(playerid, "GettingGreet");
	return 1;
}

CMD:stopanim(playerid)
{
	if(bf_get(player_bf[playerid], PLAYER_CUFFED)) {
		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
    	return 1;
    }
    
    if (AnimationCheck(playerid))
        return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถหยุด Animation ได้ในขณะนี้");

	if ((playerData[playerid][pAnimation] || GetPlayerCameraMode(playerid) == 55) && GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) {
		playerData[playerid][pAnimation] = 0;
		ClearAnimations(playerid);
		return 1;
	}

	if(playerData[playerid][pAnimation]) {
		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		playerData[playerid][pAnimation] = 0;
	}
	return 1;
}
alias:stopanim("sa");

CMD:no(playerid, params[])
{
    if (AnimationCheck(playerid))
        return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");

    ApplyAnimation(playerid, "PED","endchat_02", 4.1, 0, 0, 0, 0, 0);
   	return 1;
}
alias:no("ไม่");

CMD:punch(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    ApplyAnimation(playerid, "RIOT", "RIOT_PUNCHES", 4.1, 0, 1, 1, 0, 0, 0);
    return 1;
}
alias:punch("ต่อย", "ชก");

CMD:crawl(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    ApplyAnimation(playerid, "PED", "CAR_CRAWLOUTRHS", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}
alias:crawl("คลาน");

CMD:sipdrink(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    ApplyAnimation(playerid, "BAR", "DNK_STNDM_LOOP", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:sipdrink2(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    ApplyAnimation(playerid, "BAR", "DNK_STNDF_LOOP", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:surrender(playerid,params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimationCheck(playerid))
	{
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
  		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
}
alias:surrender("ยอม", "มอบตัว");
	
CMD:sit(playerid,params[])
{
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid, "/sit [1-5]");

	playerData[playerid][pAnimation] = 1;

    switch(anim){
		case 1: ApplyAnimation(playerid,"BEACH","bather",4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"BEACH","ParkSit_W_loop",4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1, 0, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1, 0, 1, 1, 1, 1, 1);
		case 6: ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1, 1);
		default: {
			return SendSyntaxMessage(playerid, "/sit [1-5]");
		}
	}
	return 1;
}
alias:sit("นั่ง");

CMD:sleep(playerid,params[])
{
	new anim;
	
	if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/sleep [1-2]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1: ApplyAnimation(playerid,"CRACK","crckdeth4",4.1, 0, 1, 1, 1, 1, 1); 
		case 2: ApplyAnimation(playerid,"CRACK","crckidle2",4.1, 0, 1, 1, 1, 1, 1); 
		default: {
			return SendSyntaxMessage(playerid,"/sleep [1-2]");
		}
	}
	return 1;
}

CMD:salute(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    playerData[playerid][pAnimation] = 1;

    ApplyAnimation(playerid, "GHANDS", "GSIGN5LH", 4.1, false, false, false, false, 0, false);
    return 1;
}

CMD:cheer(playerid,params[])
{
	new anim;

	if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/cheer [1-8]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1: ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1, 0, 1, 1, 1, 1, 1); 
		case 2: ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1, 0, 1, 1, 1, 1, 1); 
		case 3: ApplyAnimation(playerid,"ON_LOOKERS","shout_in",4.1, 0, 1, 1, 1, 1, 1); 
		case 4: ApplyAnimation(playerid,"RIOT","RIOT_ANGRY_B",4.1, 0, 1, 1, 1, 1, 1); 
		case 5: ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1, 0, 1, 1, 1, 1, 1); 
		case 6: ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1, 0, 1, 1, 1, 1, 1); 
		case 7: ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1, 0, 1, 1, 1, 1, 1); 
		case 8: ApplyAnimation(playerid,"OTB","wtchrace_win",4.1, 0, 1, 1, 1, 1, 1); 
		default: {
			return SendSyntaxMessage(playerid,"/cheer [1-8]");
		}
	}
	return 1;
}	
alias:cheer("เชียร์");
	
CMD:dj(playerid,params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/dj [1-4]");
	playerData[playerid][pAnimation] = 1;
    switch(anim){
		case 1: ApplyAnimation(playerid,"SCRATCHING","scdldlp",4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"SCRATCHING","scdlulp",4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"SCRATCHING","scdrdlp",4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"SCRATCHING","scdrulp",4.1, 0, 1, 1, 1, 1, 1);
		default: {
			return SendSyntaxMessage(playerid,"/dj [1-4]");
		}
	}
	return 1;
}
	
CMD:breathless(playerid,params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/breathless [1-2]");
	playerData[playerid][pAnimation] = 1;
    switch(anim){
		case 1: ApplyAnimation(playerid,"PED","IDLE_tired",4.1, 1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"FAT","IDLE_tired",4.1, 1, 1, 1, 1, 1, 1);
        default: {
			return SendSyntaxMessage(playerid,"/breathless [1-2]");
		}
	}
	return 1;
}
	
CMD:poli(playerid,params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/poli [1-2]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1:ApplyAnimation(playerid,"POLICE","CopTraf_Come",4.1, 0, 1, 1, 1, 1, 1);
		case 2:ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1, 0, 1, 1, 1, 1, 1);
		default: {
			return SendSyntaxMessage(playerid,"/poli [1-2]");
		}
	}
	return 1;
}
	
CMD:seat(playerid,params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/seat [1-7]");
	if(anim < 1 || anim > 7) return SendSyntaxMessage(playerid,"/seat [1-7]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1: ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1, 0, 0, 0, 1, 0, 0);
		case 2: ApplyAnimation(playerid,"CRIB","PED_Console_Loop",4.1, 0, 0, 0, 1, 0, 0);
		case 3: ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1, 0, 0, 0, 1, 0, 0);
		case 4: ApplyAnimation(playerid,"MISC","SEAT_LR",4.1, 0, 0, 0, 1, 0, 0);
		case 5: ApplyAnimation(playerid,"MISC","Seat_talk_01",4.1, 0, 0, 0, 1, 0, 0);
		case 6: ApplyAnimation(playerid,"MISC","Seat_talk_02",4.1, 0, 0, 0, 1, 0, 0);
		case 7: ApplyAnimation(playerid,"ped","SEAT_down",4.1, 0, 0, 0, 1, 0, 0);
	}
	return 1;
}
	
CMD:dance(playerid,params[]){
    new dancestyle;
    if(sscanf(params, "d", dancestyle)) return SendSyntaxMessage(playerid,"/dance [1-3]");
	playerData[playerid][pAnimation] = 1;
	switch(dancestyle){
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
		case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
   	return 1;
}
	
CMD:cross(playerid,params[]){
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/cross [1-5]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop",4.1, 0, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1, 0, 1, 1, 1, 1, 1);
		default: return SendSyntaxMessage(playerid,"/cross [1-5]");
	}
	return 1;
}
	
CMD:jiggy(playerid,params[])
{
    new anim;
    if(sscanf(params, "d", anim)) return SendSyntaxMessage(playerid,"/jiggy [1-10]");
	playerData[playerid][pAnimation] = 1;
	switch(anim){
		case 1: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1, 1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1, 1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1, 1, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1, 1, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1, 1, 1, 1, 1, 1, 1);
		case 6: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1, 1, 1, 1, 1, 1, 1);
		case 7: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1, 1, 1, 1, 1, 1, 1);
		case 8: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1, 1, 1, 1, 1, 1, 1);
		case 9: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1, 1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1, 1, 1, 1, 1, 1, 1);
		default: return SendSyntaxMessage(playerid,"/jiggy [1-10]");
	}
	return 1;
}
	
CMD:rap(playerid,params[]){
    new rapstyle;
    if(sscanf(params, "d", rapstyle)) return SendSyntaxMessage(playerid,"/rap [1-3]");
	playerData[playerid][pAnimation] = 1;
	switch(rapstyle){
		case 1: ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.1, 1, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.1, 1, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.1, 1, 1, 1, 1, 1, 1);
		default: return SendSyntaxMessage(playerid,"/rap [1-3]");
	}
   	return 1;
}
	
CMD:gsign(playerid,params[]){
    new gesture;
    if(sscanf(params, "d", gesture)) return SendSyntaxMessage(playerid,"/gsign [1-15]");
	playerData[playerid][pAnimation] = 1;
	switch(gesture){
		case 1: ApplyAnimation(playerid,"GHANDS","gsign1",4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"GHANDS","gsign2",4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1, 0, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation(playerid,"GHANDS","gsign3",4.1, 0, 1, 1, 1, 1, 1);
		case 6: ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1, 0, 1, 1, 1, 1, 1);
		case 7: ApplyAnimation(playerid,"GHANDS","gsign4",4.1, 0, 1, 1, 1, 1, 1);
		case 8: ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1, 0, 1, 1, 1, 1, 1);
		case 9: ApplyAnimation(playerid,"GHANDS","gsign5",4.1, 0, 1, 1, 1, 1, 1);
		case 10: ApplyAnimation(playerid,"GHANDS","gsign5",4.1, 0, 1, 1, 1, 1, 1);
		case 11: ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1, 0, 1, 1, 1, 1, 1);
		case 12: ApplyAnimation(playerid,"GANGS","Invite_No",4.1, 0, 1, 1, 1, 1, 1);
		case 13: ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1, 0, 1, 1, 1, 1, 1);
		case 14: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1, 0, 1, 1, 1, 1, 1);
		case 15: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1, 0, 1, 1, 1, 1, 1);
		default: return SendSyntaxMessage(playerid,"/gsign [1-15]");
	}
	return 1;
}
	
CMD:smoke(playerid,params[]){
    new gesture;
    if(sscanf(params, "d", gesture)) return SendSyntaxMessage(playerid,"/smoke [1-2]");
	playerData[playerid][pAnimation] = 1;
	switch(gesture){
		case 1: ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1, 0, 1, 1, 1, 1, 1);
		default: return SendSyntaxMessage(playerid,"/smoke [1-2]");
	}
	return 1; 
}
	
CMD:chora(playerid,params[]) { ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_watch",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:relax(playerid,params[]) { ApplyAnimation(playerid, "CRACK", "crckidle1",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:crabs(playerid,params[]) { ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:stop(playerid,params[]) { ApplyAnimation(playerid,"PED","endchat_01",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:wash(playerid,params[]) { ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1, 0, 0, 0, 0, 0, 0); return 1; }
CMD:mourn(playerid,params[]) { ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:followme(playerid,params[]) { ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:still(playerid,params[]) { ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop", 4.1, 0, 1, 1, 1, 1, 1);ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:hitch(playerid,params[]) { ApplyAnimation(playerid,"MISC","Hiker_Pose", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:palmbitch(playerid,params[]) { ApplyAnimation(playerid,"MISC","bitchslap",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:cpranim(playerid,params[]) { ApplyAnimation(playerid,"MEDIC","CPR",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:giftgiving(playerid,params[]) { ApplyAnimation(playerid,"KISSING","gift_give",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:slap2(playerid,params[]) { ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.1, 0, 1, 1, 0, 0, 1); return 1; }

CMD:taxiL(playerid) {
	ApplyAnimation(playerid,"MISC","Hiker_Pose_L",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:taxiR(playerid) {
	ApplyAnimation(playerid,"MISC","Hiker_Pose",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}


CMD:handstand(playerid) {
	ApplyAnimation(playerid,"DAM_JUMP","DAM_Dive_Loop",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:panicjump(playerid) {
	ApplyAnimation(playerid,"DODGE","Crush_Jump",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:drunk(playerid,params[]) { 
	ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1, 1, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1; 
}
CMD:pump(playerid,params[]) { ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 1, 1, 0, 1, 1); return 1; }
CMD:tosteal(playerid,params[]) { ApplyAnimation(playerid,"ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:laugh(playerid,params[]) { ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:lookout(playerid,params[])  { 
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.1, 0, 1, 1, 0, 0, 1); 
	return 1; 
}
CMD:robman(playerid,params[]) { ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:hide(playerid,params[]) { 
	ApplyAnimation(playerid, "ped", "cower",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1; 
}
CMD:vomit(playerid,params[]) { ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:crack(playerid,params[]) { 
	new choice;
	if(sscanf(params, "d", choice))
	{
		SendSyntaxMessage(playerid, "/crack [1-3]");
		return 1;
	}
	playerData[playerid][pAnimation] = 1;
	switch(choice) {
		case 1: ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid, "CRACK","crckidle3", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid, "CRACK","crckidle4", 4.1, 0, 1, 1, 1, 1, 1);
	}
	return 1;
}
CMD:fuck(playerid,params[]) { ApplyAnimation(playerid,"PED","fucku",4.1, 0, 1, 1, 1, 1, 1); return 1; }
CMD:taichi(playerid,params[]) { 
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop", 4.1, 1, 1, 1, 1, 1, 1); 
	return 1; 
}
CMD:kiss(playerid,params[]) { ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.1, 0, 1, 1, 0, 1, 1); return 1; }

CMD:handsup(playerid, params[])//19 1:00 pm , 4/27/2012
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "ROB_BANK","SHP_HandsUp_Scr",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}
CMD:cellin(playerid, params[])// 20 1:01 pm, 4/27/2012
{
	if(AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
	playerData[playerid][pAnimation] = 1;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}
CMD:cellout(playerid, params[])//21 1:02 pm , 4/27/2012
{
	if(AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
	playerData[playerid][pAnimation] = 1;
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}
CMD:bomb(playerid, params[])//23 4/27/2012
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.1, 1, 1, 1, 1, 1, 1); // Place Bomb
	return 1;
}
CMD:getarrested(playerid, params[])//24 4/27/2012
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"ped", "ARRESTgun", 4.1, 0, 1, 1, 1, 1, 1); // Gun Arrest
	return 1;
}
CMD:crossarms(playerid, params[])//28
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 1, 1); // Arms crossed
	return 1;
}

CMD:lay(playerid, params[])//29
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"BEACH", "bather",4.1, 0, 1, 1, 1, 1, 1); // Lay down
	return 1;
}

CMD:foodeat(playerid, params[])//32
{
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 1, 1, 1, 1, 1); // Eat Burger
	return 1;
}

CMD:wave(playerid, params[])//33
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 1, 1, 1, 1, 1); // Wave
	return 1;
}

CMD:slapass(playerid, params[])//34
{
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.1, 0, 1, 1, 0, 0, 1); // Ass Slapping
 	return 1;
}

CMD:dealer(playerid, params[])//35
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 1, 1, 1); // Deal Drugs
	return 1;
}

CMD:groundsit(playerid, params[])//38
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.1, 0, 1, 1, 1, 1, 1); // Sit
	return 1;
}

CMD:chat(playerid, params[])//39
{
	new num;
	if(sscanf(params, "i", num)) return SendSyntaxMessage(playerid, "/chat [1-2]");
	if(num > 2 || num < 1) { SendSyntaxMessage(playerid, "/chat [1-2]"); }
	playerData[playerid][pAnimation] = 1;
	if(num == 1) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1, 1, 1, 1, 1, 1, 1); }
	else { ApplyAnimation(playerid,"MISC","Idle_Chat_02",4.1, 1, 1, 1, 1, 1, 1); }
    return 1;
}

CMD:fucku(playerid, params[])//40
{
	ApplyAnimation(playerid,"PED","fucku",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:chairsit(playerid, params[])//42
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","SEAT_idle",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:fall(playerid, params[])//43
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","KO_skid_front",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:fallback(playerid, params[])//44
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "PED","FLOOR_hit_f", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:injured(playerid, params[])//46
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "SWEET", "Sweet_injuredloop", 4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:sup(playerid, params[])//47
{
	new number;
	if(sscanf(params, "i", number)) return SendSyntaxMessage(playerid, "/sup [1-3]");
	if(number < 1 || number > 3) { SendSyntaxMessage(playerid, "/sup [1-3]"); }
	playerData[playerid][pAnimation] = 1;
	if(number == 1) { ApplyAnimation(playerid,"GANGS","hndshkba",4.1, 0, 1, 1, 1, 1, 1); }
	if(number == 2) { ApplyAnimation(playerid,"GANGS","hndshkda",4.1, 0, 1, 1, 1, 1, 1); }
    if(number == 3) { ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1, 0, 1, 1, 1, 1, 1); }
   	return 1;
}

CMD:push(playerid, params[])// 49
{
	ApplyAnimation(playerid,"GANGS","shake_cara",4.1, 0, 1, 1, 0, 1, 1);
    return 1;
}

CMD:akick(playerid, params)// 50
{
	ApplyAnimation(playerid,"POLICE","Door_Kick",4.1, 0, 1, 1, 0, 1, 1);
    return 1;
}

CMD:lowbodypush(playerid, params[])// 51
{
	ApplyAnimation(playerid,"GANGS","shake_carSH",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:spray(playerid, params[])// 52
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:headbutt(playerid, params[])//53
{
	ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:medic(playerid, params[])//54
{
	ApplyAnimation(playerid,"MEDIC","CPR",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:koface(playerid, params[])//55
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","KO_shot_face",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:kostomach(playerid, params[])//56
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","KO_shot_stom",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:lifejump(playerid, params[])//57
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","EV_dive",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:exhaust(playerid, params[])//58
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","IDLE_tired",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:leftslap(playerid, params[])//59
{
	ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:rollfall(playerid, params[])//60
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","BIKE_fallR",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:carlock(playerid, params[])//61
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:hoodfrisked(playerid, params[])//66
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:lightcig(playerid, params[])//67
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:tapcig(playerid, params[])//68
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"SMOKING","M_smk_tap",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:bat(playerid, params[])//69
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1, 1, 1, 1, 1, 1, 1);
    return 1;
}

CMD:box(playerid, params[])//70
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:lay2(playerid, params[])//71
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:chant(playerid, params[])//72
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:fuckyou(playerid, params[])//73
{
	if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"RIOT","RIOT_FUKU",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:fuckyou2(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    playerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "RIOT", "RIOT_FUKU", 4.0, 0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:fixcar(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    playerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "CAR", "FIXN_CAR_LOOP", 4.1, 0, 0, 0, 1, 0, 0);
    return 1;
}

CMD:fixcarout(playerid, params[])
{
    if (AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
    playerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "CAR", "FIXN_CAR_OUT", 4.1, 0, 0, 0, 0, 0, 0);
    return 1;
}

CMD:shouting(playerid, params[])//74
{
	ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:cop(playerid,params[])//75
{
	ApplyAnimation(playerid,"SWORD","sword_block",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:elbow(playerid, params[])//76
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:kneekick(playerid, params[])//77
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:fstance(playerid, params[])//78
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:gpunch(playerid, params[])//79
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:airkick(playerid, params[])//80
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:gkick(playerid, params[])//81
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:lowthrow(playerid, params[])//82
{
	ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1, 0, 1, 1, 0, 0, 1);
    return 1;
}

CMD:highthrow(playerid, params[])//83
{
	ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:dealstance(playerid, params[])//84
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:pee(playerid, params[])//85
{
	if(AnimationCheck(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
	playerData[playerid][pAnimation] = 1;
	SetPlayerSpecialAction(playerid, 68);
    return 1;
}

CMD:knife(playerid, params[])//86
{
	new nbr;
	if(sscanf(params, "i", nbr)) return SendSyntaxMessage(playerid, "/knife [1-4]");
    if(nbr < 1 || nbr > 4) return SendSyntaxMessage(playerid, "/knife [1-4]"); 
	playerData[playerid][pAnimation] = 1;
	switch(nbr)
	{ 
		case 1: { ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1, 0, 1, 1, 1, 1, 1); }
		case 2: { ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1, 0, 1, 1, 1, 1, 1); }
		case 3: { ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1, 0, 1, 1, 1, 1, 1); }
		case 4: { ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1, 0, 1, 1, 1, 1, 1); }
	}
	return 1;
}

CMD:basket(playerid, params[])//87
{
	new ddr;
	if (sscanf(params, "i", ddr)) return SendSyntaxMessage(playerid, "/basket [1-6]");
    if(ddr < 1 || ddr > 6) return SendSyntaxMessage(playerid, "/basket [1-6]"); 
    playerData[playerid][pAnimation] = 1;
	switch(ddr)
	{
		case 1: { ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1, 0, 1, 1, 1, 1, 1); }
		case 2: { ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1, 0, 1, 1, 1, 1, 1); }
		case 3: { ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.1, 0, 1, 1, 1, 1, 1); }
		case 4: { ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1, 0, 1, 1, 1, 1, 1); }
		case 5: { ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1, 1, 1, 1, 1, 1, 1); }
		case 6: { ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1, 0, 1, 1, 0, 1, 1); }
	}
   	return 1;
}

CMD:reload(playerid, params[])//88
{
	new result[128];
	if(sscanf(params, "s[24]", result)) return SendSyntaxMessage(playerid, "/reload [deagle/smg/ak/m4]");
    if(strcmp(result,"deagle", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"COLT45","colt45_reload",4.1, 0, 1, 1, 1, 1, 1);
    }
    else if(strcmp(result,"smg", true) == 0)
    {
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 1, 1);
    }
	else if(strcmp(result,"ak", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 1, 1);
    }
	else if(strcmp(result,"m4", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 1, 1);
    }
   	else { SendSyntaxMessage(playerid, "/reload [deagle/smg/ak/m4]"); }
   	return 1;
}

CMD:aim(playerid, params[])//90
{
	new lmb;
	if(sscanf(params, "i", lmb)) return SendSyntaxMessage(playerid, "/aim [1-3]");
	playerData[playerid][pAnimation] = 1;
	if(lmb == 1) { ApplyAnimation(playerid,"PED","gang_gunstand",4.1, 0, 1, 1, 1, 1, 1); }
    if(lmb == 2) { ApplyAnimation(playerid,"PED","Driveby_L",4.1, 0, 1, 1, 1, 1, 1); }
    if(lmb == 3) { ApplyAnimation(playerid,"PED","Driveby_R",4.1, 0, 1, 1, 1, 1, 1); }
    else { SendSyntaxMessage(playerid, "/aim [1-3]"); }
    return 1;
}

CMD:lean(playerid, params[])//91
{
	new mj;
	if(sscanf(params, "i", mj)) return SendSyntaxMessage(playerid, "/lean [1-2]");
	if(mj < 1 || mj > 2) { SendSyntaxMessage(playerid, "/lean [1-2]"); }
    playerData[playerid][pAnimation] = 1;
	if(mj == 1) { ApplyAnimation(playerid,"GANGS","leanIDLE",4.1, 0, 1, 1, 1, 1, 1); }
	if(mj == 2) { ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.1, 0, 1, 1, 1, 1, 1); }
   	return 1;
}

CMD:strip(playerid, params[])//93
{
	new kj;
    if(sscanf(params, "i", kj)) return SendSyntaxMessage(playerid, "/strip [1-7]");
	if(kj < 1 || kj > 7) { SendSyntaxMessage(playerid, "/strip [1-7]"); }
	playerData[playerid][pAnimation] = 1;
	if(kj == 1) { ApplyAnimation(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1, 1 ); }
	if(kj == 2) { ApplyAnimation(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1, 1 ); }
    if(kj == 3) { ApplyAnimation(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1, 1 ); }
    if(kj == 4) { ApplyAnimation(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1, 1 ); }
    if(kj == 5) { ApplyAnimation(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1, 1 ); }
    if(kj == 6) { ApplyAnimation(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1, 1 ); }
    if(kj == 7) { ApplyAnimation(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1, 1 ); }
 	return 1;
}

CMD:inbedright(playerid, params[])//94
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:inbedleft(playerid, params[])//95
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1, 0, 1, 1, 1, 1, 1);
    return 1;
}

CMD:wank(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/wank [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"PAULNMAC","wank_in",4.1, 0, 1, 1, 1, 1, 1);
	}
	if(strcmp(choice, "2", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:bj(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/bj [1-4]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1, 0, 1, 1, 1, 1, 1);
	}
	if(strcmp(choice, "2", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1, 0, 1, 1, 1, 1, 1);
	}
	if(strcmp(choice, "3", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1, 0, 1, 1, 1, 1, 1);
	}
	if(strcmp(choice, "4", true) == 0)
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1, 1, 0, 0, 1, 1, 1);

	}
	return 1;
}

CMD:stand(playerid, params[])
{
	playerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop", 4.1, 0, 1, 1, 1, 1, 1);
	return 1;
}

CMD:follow(playerid, params[])
{
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
    return 1;
}

CMD:getup(playerid, params[])
{
	ApplyAnimation(playerid,"PED","getup",4.1, 0, 1, 1, 0, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:slapped(playerid, params[])
{
	ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.1, 0, 1, 1, 0, 0, 1);
	playerData[playerid][pAnimation] = 1;
    return 1;
}

CMD:win(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/win [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"CASINO","cards_win", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"CASINO","Roulette_win", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}

CMD:celebrate(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/celebrate [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"benchpress","gym_bp_celebrate", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}

CMD:yes(playerid, params[])
{
	ApplyAnimation(playerid,"CLOTHES","CLO_Buy", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:deal(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/deal [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"DEALER","DRUGS_BUY", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}

CMD:thankyou(playerid, params[])
{
	ApplyAnimation(playerid,"FOOD","SHP_Thank", 4.1, 0, 1, 1, 0, 0, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:invite1(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/invite1 [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1, 0, 1, 1, 0, 0, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"GANGS","Invite_No",4.1, 0, 1, 1, 0, 0, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}

CMD:scratch(playerid, params[])
{
	ApplyAnimation(playerid,"MISC","Scratchballs_01", 4.1, 0, 1, 1, 0, 0, 1);
	playerData[playerid][pAnimation] = 1;
    return 1;
}
CMD:checkout(playerid, params[])
{
	ApplyAnimation(playerid, "GRAFFITI", "graffiti_Chkout", 4.1, 0, 1, 1, 0, 0, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:nod(playerid, params[])
{
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:think(playerid, params[])
{
	ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:cry(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/cry [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}
CMD:bed(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/bed [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "3", true) == 0)
	{
		ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "4", true) == 0)
	{
		ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}
CMD:carsmoke(playerid, params[])
{
	ApplyAnimation(playerid,"PED","Smoke_in_car", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:angry(playerid, params[])
{
	ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:benddown(playerid, params[])
{
	ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 1, 1, 0, 0, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:facepalm(playerid, params[])
{
	ApplyAnimation(playerid, "MISC", "plyr_shkhead", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:cockgun(playerid, params[])
{
	ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

/*CMD:bar(playerid, params[])
{
	new choice;
	if(sscanf(params, "d", choice))
	{
		SendSyntaxMessage(playerid, "/bar [1-12]");
		return 1;
	}
	playerData[playerid][pAnimation] = 1;
	switch(choice) {
		case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid, "BAR","Barcustom_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid, "BAR","Barcustom_order", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "BAR","BARman_idle", 4.1, 0, 1, 1, 1, 1, 1);
		case 5: ApplyAnimation(playerid, "BAR","Barserve_bottle", 4.1, 0, 1, 1, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "BAR","Barserve_give", 4.1, 0, 1, 1, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "BAR","Barserve_glass", 4.1, 0, 1, 1, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "BAR","Barserve_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 9: ApplyAnimation(playerid, "BAR","Barserve_loop", 4.1, 1, 1, 1, 1, 1, 1);
		case 10: ApplyAnimation(playerid, "BAR","Barserve_order", 4.1, 0, 1, 1, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "BAR","dnk_stndF_loop", 4.1, 0, 1, 1, 1, 1, 1);
		case 12: ApplyAnimation(playerid, "BAR","dnk_stndM_loop", 4.1, 0, 1, 1, 1, 1, 1);
	}
	return 1;
}*/

CMD:camera(playerid, params[])
{
	new choice;
	if(sscanf(params, "d", choice))
	{
		SendSyntaxMessage(playerid, "/camera [1-10]");
		return 1;
	}
	playerData[playerid][pAnimation] = 1;
	switch(choice) {
		case 1: ApplyAnimation(playerid,  "CAMERA","camcrch_cmon", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,  "CAMERA","camcrch_to_camstnd", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,  "CAMERA","camstnd_cmon", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,  "CAMERA","camstnd_idleloop", 4.1, 1, 0, 0, 1, 1, 1);
		case 5: ApplyAnimation(playerid,  "CAMERA","camstnd_lkabt", 4.1, 0, 1, 1, 1, 1, 1);
		case 6: ApplyAnimation(playerid,  "CAMERA","piccrch_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 7: ApplyAnimation(playerid,  "CAMERA","piccrch_take", 4.1, 0, 1, 1, 1, 1, 1);
		case 8: ApplyAnimation(playerid,  "CAMERA","picstnd_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 9: ApplyAnimation(playerid, "CAMERA","picstnd_out", 4.1, 0, 1, 1, 1, 1, 1);
		case 10: ApplyAnimation(playerid, "CAMERA","picstnd_take", 4.1, 0, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:panic(playerid, params[])
{
	new choice;
	if(sscanf(params, "d", choice))
	{
		SendSyntaxMessage(playerid, "/panic [1-4]");
		return 1;
	}
	playerData[playerid][pAnimation] = 1;
	switch(choice) {
		case 1: ApplyAnimation(playerid,"ON_LOOKERS","panic_cower", 4.1, 0, 1, 1, 1, 1, 1);
		case 2: ApplyAnimation(playerid,"ON_LOOKERS","panic_hide", 4.1, 0, 1, 1, 1, 1, 1);
		case 3: ApplyAnimation(playerid,"ON_LOOKERS","panic_in", 4.1, 0, 1, 1, 1, 1, 1);
		case 4: ApplyAnimation(playerid,"ON_LOOKERS","panic_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:liftup(playerid, params[])
{
	ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:putdown(playerid, params[])
{
	ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:joint(playerid, params[])
{
	ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1, 0, 1, 1, 1, 1, 1);
	playerData[playerid][pAnimation] = 1;
	return 1;
}
CMD:die(playerid, params[])
{
	new choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendSyntaxMessage(playerid, "/die [1-2]");
		return 1;
	}
	if(strcmp(choice, "1", true) == 0)
	{
		ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	if(strcmp(choice, "2", true) == 0)
	{
		ApplyAnimation(playerid, "PARACHUTE", "FALL_skyDive_DIE", 4.1, 0, 1, 1, 1, 1, 1);
		playerData[playerid][pAnimation] = 1;
	}
	return 1;
}

CMD:lranim(playerid, params[])
{
	if(IsInLowRider(playerid))
	{
		new choice;
		if(sscanf(params, "i", choice))
		{
			SendSyntaxMessage(playerid, "/lranim");
			SendClientMessage(playerid, COLOR_GRAD2, "ตัวเลือกที่มี: 0-36");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "  คุณต้องไม่ใช่คนขับรถ!");
		    return 1;
		}
		playerData[playerid][pAnimation] = 1;
		switch(choice)
		{
		    case 0:
		    {
				ApplyAnimation(playerid, "LOWRIDER", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 1:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_bdbnce", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 2:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_hair", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 3:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_hurry", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 4:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_idleloop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 5:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_idle_to_l0", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 6:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l0_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 7:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l0_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 8:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l0_to_l1", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 9:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l12_to_l0", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 10:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l1_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 11:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l1_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 12:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l1_to_l2", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 13:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l2_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 14:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l2_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 15:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l2_to_l3", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 16:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l345_to_l1", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 17:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l3_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 18:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l3_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 19:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l3_to_l4", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 20:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l4_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 21:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l4_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 22:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l4_to_l5", 4.0, 0, 0, 0, 1, 0, 1);
		    }
		    case 23:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l5_bnce", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 24:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "lrgirl_l5_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 25:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 26:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkB", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 27:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkC", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 28:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkD", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 29:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkF", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 30:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkG", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 31:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "prtial_gngtlkH", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 32:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "RAP_A_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 33:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "RAP_B_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 34:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "RAP_C_Loop", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 35:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "Sit_relaxed", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		    case 36:
		    {
		        ApplyAnimation(playerid, "LOWRIDER", "Tap_hand", 4.0, 1, 0, 0, 0, 0, 1);
		    }
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, " คุณต้องอยู่ในรถยนต์ประเภท Lowrider เพื่อใช้คำสั่งนี้!");
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1)
	    return 0;

	/*new
	    string[512];*/

	switch (BizInfo[bizid][bType])
	{
	    case 3:
	    {
			/*format(string, sizeof(string), "Gas Can - %s\nBoombox - %s\nBaseball Bat - %s\nFlowers - %s\nCane - %s\nCamera - %s\nOOC Mask - %s\nDrink - %s\nCigarettes - %s\nRadio - มีหลายราคา",
				FormatNumber(BizInfo[bizid][bPriceProducts][0]),
				FormatNumber(BizInfo[bizid][bPriceProducts][1]),
				FormatNumber(BizInfo[bizid][bPriceProducts][2]),
				FormatNumber(BizInfo[bizid][bPriceProducts][3]),
				FormatNumber(BizInfo[bizid][bPriceProducts][4]),
				FormatNumber(BizInfo[bizid][bPriceProducts][5]),
				FormatNumber(BizInfo[bizid][bPriceProducts][6]),
				FormatNumber(BizInfo[bizid][bPriceProducts][7]),
				FormatNumber(BizInfo[bizid][bPriceProducts][8]),
				FormatNumber(BizInfo[bizid][bPriceProducts][9])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BizInfo[bizid][bInfo], string, "Purchase", "Cancel");*/

			MenuStore_AddItem(playerid, 1, 1650, "Gas Can", BizInfo[bizid][bPriceProducts][0], "If you ran out of fuel and no gas station is nearby, a gas can sure comes in handy. Contains 3 gallons.", 100.0, _, _, 0.0, 0.0, 180.0); 
			MenuStore_AddItem(playerid, 2, 2226, "Boombox", BizInfo[bizid][bPriceProducts][1], "Radio and play the recording are often used to turn on loud volume.", 100.0, _, _, 0.0, 0.0, 180.0); 
			MenuStore_AddItem(playerid, 3, 336, "Baseball Bat", BizInfo[bizid][bPriceProducts][2], "Firm baseball bat which will suit both beginners and professional baseball players.", 100.0, _, _, 0.0, 90.0, 0.0, 1.5); 
			MenuStore_AddItem(playerid, 4, 325, "Flowers", BizInfo[bizid][bPriceProducts][3], "Boquet of beautiful flowers of your choice. Works for upset wives, mom's birthday or grandma's funeral.", 100.0, _, _, -100.0, 25.0, 0.0, 1.5); 
			MenuStore_AddItem(playerid, 5, 326, "Cane", BizInfo[bizid][bPriceProducts][4], "If you're tired of limping or just want to look like a true pimp, you definitely need to buy this.", 100.0); 
			MenuStore_AddItem(playerid, 6, 367, "Camera", BizInfo[bizid][bPriceProducts][5], "Disposable camera to capture the important moments forever.", 100.0, _, _, -25.0, 0.0, 60.0); 
			MenuStore_AddItem(playerid, 7, 11704, "OOC Mask", BizInfo[bizid][bPriceProducts][6], "(( Hides your nametag and name in chat. This is purely OOC and provides no IC face coverage.))", 100.0); 
			MenuStore_AddItem(playerid, 8, 19823, "Drink", BizInfo[bizid][bPriceProducts][7], "Choose from a variety of drinks to refresh your body and mind.", 100.0); 
			MenuStore_AddItem(playerid, 9, 19896, "Cigarettes", BizInfo[bizid][bPriceProducts][8], "A pack of 17 Cancer Stick cigarettes for the less fond of their health.", 100.0, _, _, 90.0, 0.0, 180.0); 
			MenuStore_AddItem(playerid, 10, 19942, "Radio - Standard", BizInfo[bizid][bPriceProducts][9], "Short-wave radio hold up three channels.", 100.0, _, _, 0.0, 0.0, 160.0); 
			MenuStore_AddItem(playerid, 11, 19942, "Radio - Advance", floatround(BizInfo[bizid][bPriceProducts][9]*1.3), "Short-wave radio hold up five channels.", 100.0, _, _, 0.0, 0.0, 160.0); 
			MenuStore_AddItem(playerid, 12, 19942, "Radio - Super", floatround(BizInfo[bizid][bPriceProducts][9]*1.5), "Short-wave radio hold up eight channels.", 100.0, _, _, 0.0, 0.0, 160.0); 
			MenuStore_Show(playerid, Store_Shop, BizInfo[bizid][bInfo]); 
		}
	}
	return 1;
}

CMD:myitems(playerid) {
    ShowPlayerWeapons(playerid, playerid);
	ShowPlayerDrugs(playerid, playerid);
	return 1;
}


Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);
	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);
	BoomboxData[playerid][boomboxPlaced] = true;
    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, 0, 0);

	return 1;
}

Boombox_Nearest(playerid, Float:dist = 30.0)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && IsPlayerInRangeOfPoint(playerid, dist, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		foreach (new i : Player) if (Boombox_Nearest(i) == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxOn] = false;

	}
	return 1;
}

CMD:boombox(playerid,params[])
{
	new
	    name[16], giveplayerid;

	if (sscanf(params, "s[16]U(65535)", name, giveplayerid))
 	{
		SendSyntaxMessage(playerid, "/boombox [place/take/grant/adjust]");
		return 1;
	}

	if (!strcmp(name, "place", true))
	{
	    if (!playerData[playerid][pBoombox])
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มี Boombox");

	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendClientMessage(playerid, COLOR_GRAD3, "คุณได้วาง Boombox แล้ว");

		if (IsPlayerInAnyVehicle(playerid) || GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0 || Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถวาง Boombox ในพื้นที่นี้ได้");

		Boombox_Place(playerid);

		SendClientMessage(playerid, COLOR_GREEN, "[SERVER] ใช้ /setstation ใกล้ ๆ กล่องเสียง");
		SendClientMessage(playerid, COLOR_GREEN, "[SERVER] ใช้ /boombox take เพื่อเก็บมันจากพื้น");
	}
	else if (!strcmp(name, "take", true))
	{
		if(Boombox_Nearest(playerid, 5.0) == playerid)
		{
            Boombox_Destroy(playerid);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "[SERVER] ขออภัย คุณไม่ได้อยู่ใกล้ Boombox ของคุณ");
		}
	}
	/*else if (!strcmp(name, "give", true))
	{
	    new userid = INVALID_PLAYER_ID;

		if (!playerData[playerid][pBoombox])
	   		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มี Boombox");

		if (sscanf(params, "s[16]u", name, userid))
	 	{
			SendSyntaxMessage(playerid, "/boombox give [ID]");
			return 1;
		}

		if (userid == INVALID_PLAYER_ID && GetPlayerMaskID(userid) == INVALID_PLAYER_ID)
	         	return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นที่ระบุไม่ได้เชื่อมต่อกับเซิร์ฟเวอร์");

		if(userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่สามารถให้กับตัวเองได้!");



	}*/
	else if (!strcmp(name, "grant", true))
	{
		//new giveplayerid = INVALID_PLAYER_ID;

		if (sscanf(params, "{s[16]}u", giveplayerid))
	 	{
			SendSyntaxMessage(playerid, "/boombox grant [ID]");
			return 1;
		}

		if(giveplayerid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "{s[16]}s[24]", maskid);
			if((giveplayerid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่พบผู้เล่นนั้นอยู่ใกล้คุณ!");
			}
		}

		if (!IsPlayerNearPlayer(playerid, giveplayerid, 5.0))
			return SendClientMessage(playerid, COLOR_GRAD1, "   ไม่พบผู้เล่นนั้นอยู่ใกล้คุณ!");

		if (giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถใช้กับตัวเองได้!");

		if(grantboombox[giveplayerid]==playerid) {
		    grantboombox[giveplayerid]=INVALID_PLAYER_ID;
			SendClientMessageEx(playerid, COLOR_WHITE, "คุณไม่อนุญาตให้ %s เปลี่ยนสถานีวิทยุแล้ว", ReturnRealName(giveplayerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s ไม่อนุญาตให้คุณเปลี่ยนสถานีวิทยุแล้ว", ReturnRealName(playerid));
		}
		else
		{
			grantboombox[giveplayerid]=playerid;
			SendClientMessageEx(playerid, COLOR_WHITE, "คุณอนุญาตให้ %s เปลี่ยนสถานีวิทยุของคุณ", ReturnRealName(giveplayerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s อนุญาตให้คุณเปลี่ยนสถานีวิทยุของเขา", ReturnRealName(playerid));
			SendClientMessage(giveplayerid, COLOR_GREEN, "คำแนะนำ: ใช้ /setstation");
		}
	}
	else if (!strcmp(name, "adjust", true))
	{
		if(Boombox_Nearest(playerid, 5.0) == playerid)
		{
			SetPVarInt(playerid, "BoomboxAdjust", 1);
			EditDynamicObject(playerid, BoomboxData[playerid][boomboxObject]);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "[SERVER] ขออภัย คุณไม่ได้อยู่ใกล้ Boombox ของคุณ");
		}
	}

	return 1;
}

CMD:gascan(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่บนรถ");

	new vehicleid = GetPlayerVehicleID(playerid);
	//if((vehicleid = GetPlayerVehicleID(playerid)) != -1) {
	if(playerData[playerid][pGasCan] >= 3) {
	    if (!GetLockStatus(vehicleid)) {
			new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
			if(CoreVehicles[vehicleid][vehFuel] < maxfuel) {

				playerData[playerid][pGasCan] -= 3;
				CoreVehicles[vehicleid][vehFuel] += 3.0;

				SendClientMessage(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}น้ำมันจำนวน 3 ถังได้ถูกเติมเข้ายานพาหนะของคุณ");

				if(CoreVehicles[vehicleid][vehFuel] > maxfuel) {
				    CoreVehicles[vehicleid][vehFuel] = maxfuel;
				}
			} else SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถเติมน้ำมันได้มากกว่านี้แล้ว");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "Error: "EMBED_WHITE"ยานพาหนะล็อก");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มี Gas Can / หรือคุณมี Gas Can น้อยกว่า 3");
	//} else SendClientMessage(playerid, COLOR_LIGHTRED, " ..ไม่มียานพาหนะอยู่ใกล้คุณ");
	return 1;
}


/*CMD:pitem(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่บนพื้น");

	if(playerData[playerid][pCigarettes]) {
		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) {

			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบบุหรี่ออกมาพร้อมจุดมัน", ReturnRealName(playerid));
			playerData[playerid][pCigarettes]--;

		} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีบุหรี่");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีบุหรี่");
	return 1;
}*/

CMD:bdrink(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่บนพื้น");
    if(!playerData[playerid][pDrink]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีเครื่องดื่ม");

	new
	    name[16];

	if (sscanf(params, "s[16]", name))
 	{
		SendSyntaxMessage(playerid, "/bdrink [sprunk/beer/wine]");
		return 1;
	}

	if (!strcmp(name, "sprunk", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		playerData[playerid][pDrink]--;
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบเครื่องดื่มของเขา", ReturnRealName(playerid));
	}
	else if (!strcmp(name, "beer", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
		playerData[playerid][pDrink]--;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบเครื่องดื่มของเขา", ReturnRealName(playerid));
	}
	else if (!strcmp(name, "wine", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
		playerData[playerid][pDrink]--;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบเครื่องดื่มของเขา", ReturnRealName(playerid));
	}
	return 1;
}

CMD:adminname(playerid, params[]) {
    if(playerData[playerid][pAdmin] >= 4) {
        new
            userID,
            playerNameString[MAX_PLAYER_NAME],
			clean_admin[MAX_PLAYER_NAME];

        if(sscanf(params, "us[24]", userID, playerNameString)) {
            return SendSyntaxMessage(playerid, "/adminname [ไอดีผู้เล่น/ชื่อบางส่วน] [adminname]");
        }
        else {
            if(!IsPlayerConnected(userID))
				return SendClientMessage(playerid, COLOR_GREY, "The specified player ID is either not connected or has not authenticated.");

            if(playerData[userID][pAdmin]) {
                if(playerData[userID][pAdmin] > playerData[playerid][pAdmin]) {
                    return SendClientMessage(playerid, COLOR_GREY, "คุณไม่สามารถเปลี่ยนชื่อผู้ดูแลระบบที่มียศสูงกว่าได้");
                }
                else {
                    new
                        messageString[128];

                    format(messageString, sizeof(messageString), "คุณได้เปลี่ยนชื่อผู้ดูแล %s เป็น %s", ReturnRealName(userID), playerNameString);
                    SendClientMessage(playerid, COLOR_WHITE, messageString);

                    format(messageString, sizeof(messageString), "%s ได้เปลี่ยนชื่อผู้ดูแลของคุณเป็น %s", ReturnRealName(playerid), playerNameString);
                    SendClientMessage(userID, COLOR_WHITE, messageString);

					mysql_escape_string(playerNameString,clean_admin);
				    format(playerData[userID][pAdminName], MAX_PLAYER_NAME, clean_admin);
					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `AdminName` = '%s' WHERE `ID` = %d", clean_admin, playerData[userID][pID]);
					mysql_query(dbCon, szQuery);

                    return 1;
                }
            }
            else {
                return SendClientMessage(playerid, COLOR_GREY, "คุณไม่สามารถเปลี่ยนชื่อผู้ดูแลกับผู้เล่นได้");
            }
        }
	}
	return 1;
}

CMD:lastad(playerid) {

	//if (nearBiz_var[playerid] != -1)
	//{
	new menu[10], str[256], count;

	format(str, sizeof(str), "#\tAdvert\tAirs In\n");

	for(new i = MAX_AD_QUEUE - 1; i >= 0; --i)
	{
		if(AdvertData[i][ad_id] != 0) {
			if (strlen(AdvertData[i][ad_text]) > 28) format(str, sizeof(str), "%s%d\t%.28s...\t~%ds\n", str, count+1, AdvertData[i][ad_text], AdvertData[i][ad_time]);
			else format(str, sizeof(str), "%s%d\t%s\t~%ds\n", str, count+1, AdvertData[i][ad_text], AdvertData[i][ad_time]);
	
			format(menu, 10, "menu%d", count);
			SetPVarInt(playerid, menu, i);
			count++;
		}
	}

	Dialog_Show(playerid, AdvertiseDialog, DIALOG_STYLE_TABLIST_HEADERS, "View Advertisements", str, "Okay", "");
	//}
	//else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");

	return 1;
}

CMD:ads(playerid) {

	if (nearBiz_var[playerid] != -1)
	{
		new menu[10], str[256], count;
	
		format(str, sizeof(str), "#\tAdvert\tAirs In\n");
	
		for(new i = MAX_AD_QUEUE - 1; i >= 0; --i)
		{
			if(AdvertData[i][ad_id] != 0) {
				if (strlen(AdvertData[i][ad_text]) > 28) format(str, sizeof(str), "%s%d\t%.28s...\t~%ds\n", str, count+1, AdvertData[i][ad_text], AdvertData[i][ad_time]);
				else format(str, sizeof(str), "%s%d\t%s\t~%ds\n", str, count+1, AdvertData[i][ad_text], AdvertData[i][ad_time]);
		
				format(menu, 10, "menu%d", count);
				SetPVarInt(playerid, menu, i);
				count++;
			}
		}
	
		Dialog_Show(playerid, AdvertiseDialog, DIALOG_STYLE_TABLIST_HEADERS, "View Advertisements", str, "Okay", "");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");

	return 1;
}

CMD:ad(playerid, params[]) {

    if (!isnull(params)) {
        new id = -1;
		if ((id = nearBiz_var[playerid]) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
			if(playerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {

                	if(strlen(params) <= 128) {
						new string[256];

                        if(playerData[playerid][pCash] >= 1000) {
                            if(Advert_Free() != -1 && (!CountPlayerAdvert(playerid) || playerData[playerid][pDonateRank])) {
                                //SetPVarString(playerid,"AdvertPost", params);
								format(playerData[playerid][pAdvertiseText], 128, params);
								format(string, sizeof(string), "โฆษณา: %s\n\nค่าโฆษณา: $1,000", params);
								Dialog_Show(playerid, AdvertPost, DIALOG_STYLE_MSGBOX, "Post Advertisement", string, "Post", "Cancel");
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GRAD1, "คิวเต็มหรือโฆษณาของคุณอยู่ในคิวโปรดลองใหม่ภายหลัง");
							}
						}
						else SendClientMessage(playerid, COLOR_GRAD1, "คุณมีเงินไม่พอที่จะทำสิ่งนี้");
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "ตัวอักษรต้องไม่เกิน 128 ตัวอักษร");
				}
				else {
					return SendClientMessageEx(playerid, COLOR_GRAD1, "คุณต้องรอ %d วินาทีสำหรับการโพสต์โฆษณา", adTick[playerid]);
				}
			}
			else {
				return SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีเบอร์โทรศัพท์มือถือดังนั้นคุณจะไม่สามารถส่งโฆณษาได้");
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");

	}
	else SendSyntaxMessage(playerid, "/ad [ad-text]");

	return 1;
}

CMD:cad(playerid, params[]) {

    if (!isnull(params)) {
		new id = -1;
		if ((id = nearBiz_var[playerid]) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}

			if(playerData[playerid][pPnumber]) {
			    if(!adTick[playerid]) {

					if(strlen(params) <= 128) {

						new string[256];

                        if(playerData[playerid][pCash] >= 1500) {
							if(Advert_Free() != -1 && (!CountPlayerAdvert(playerid) || playerData[playerid][pDonateRank])) {
								format(playerData[playerid][pAdvertiseText], 128, params);
								format(string, sizeof(string), "โฆษณา: %s\n\nค่าโฆษณา: $1,500", params);
								Dialog_Show(playerid, CompanyAdvertPost, DIALOG_STYLE_MSGBOX, "Post Advertisement", string, "Post", "Cancel");
							}
							else
							{
								SendClientMessage(playerid, COLOR_GRAD1, "คิวเต็มหรือโฆษณาของคุณอยู่ในคิวโปรดลองใหม่ภายหลัง");
							}
						} else SendClientMessage(playerid, COLOR_GRAD1, "คุณมีเงินไม่พอที่จะทำสิ่งนี้");
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "ตัวอักษรต้องไม่เกิน 128 ตัวอักษร");
			    } else SendClientMessageEx(playerid, COLOR_GRAD1, "คุณต้องรอ %d วินาทีสำหรับการโพสต์โฆษณา", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีเบอร์โทรศัพท์มือถือดังนั้นคุณจะไม่สามารถส่งโฆณษาได้");
		} else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: "EMBED_WHITE"คุณต้องอยู่ในพื้นที่สำหรับโฆษณาเพื่อทำการโพสต์โฆษณา");
	} else SendSyntaxMessage(playerid, "/cad [company-text]");
	return 1;
}

/*
CMD:callsign(playerid, params[])
{
    if(GetFactionType(playerid) != FACTION_TYPE_POLICE) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");

    new vehicleid = GetPlayerVehicleID(playerid), string[32];

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้อยู่ในยานพาหนะ");
	if(!IsACopCar(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจะต้องอยู่ในรถลาดตระเวนของตำรวจ!");

	if(CoreVehicles[vehicleid][vehSign])
	{
 		Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
	    CoreVehicles[vehicleid][vehSign] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "สัญญาณเรียกขานถูกลบ");
	    return 1;
	}

	if(sscanf(params, "s[32]", string)) return SendSyntaxMessage(playerid, "/callsign [ข้อความ]");

	CoreVehicles[vehicleid][vehSignText] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 50.0, 0, 1);
	Attach3DTextLabelToVehicle(CoreVehicles[vehicleid][vehSignText], vehicleid, -0.7, -1.9, -0.3);
	CoreVehicles[vehicleid][vehSign] = 1;

	return 1;
}
*/

CMD:carsign(playerid,params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), factiontype = GetFactionType(playerid);
	if(factiontype == FACTION_TYPE_POLICE || factiontype == FACTION_TYPE_MEDIC || factiontype == FACTION_TYPE_SASD)
	//if(IsACopCar(vehicleid) || IsAFDCar(vehicleid))
	{
		if(IsACopCar(vehicleid) || IsAFDCar(vehicleid))
		//if(factiontype == FACTION_TYPE_POLICE || factiontype == FACTION_TYPE_MEDIC || factiontype == FACTION_TYPE_SASD)
		{
			if(isnull(params)) return SendSyntaxMessage(playerid,"/carsign [ข้อความ]");
			if(!CoreVehicles[vehicleid][vehSign])
			{
				new string[128];
				format(string,sizeof(string), "%s",params);

				CoreVehicles[vehicleid][vehSignText] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 50.0, 0, 1);
				Attach3DTextLabelToVehicle(CoreVehicles[vehicleid][vehSignText], vehicleid, -0.7, -1.9, -0.3);
				CoreVehicles[vehicleid][vehSign] = true;
				
				SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /remove_carsign - "EMBED_WHITE" หากใช้งานเสร็จ");
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องเป็นเจ้าหน้าที่รัฐบาล / อยู่ในพาหนะของรัฐบาลเท่านั้น");
	}
	//else
	//{
	else
	{
		if((Car_GetID(GetPlayerVehicleID(playerid))) != -1)
		{
			if (playerData[playerid][pAdverts] >= 1)
			{
				if(isnull(params)) return SendClientMessageEx(playerid, COLOR_LIGHTRED, "การใช้:/carsign [คำโฆษณา] "EMBED_WHITE"คุณเหลือป้ายโฆษณาจำนวน %d ป้าย", playerData[playerid][pAdverts]);
				if(!CoreVehicles[vehicleid][vehSign])
				{
					new string[128];
					//format(string,sizeof(string), "%s",params);

					if (strlen(params) > 32) {

						format(string,sizeof(string), "%.28s\n%s",params, params[28]);

						CoreVehicles[vehicleid][vehSignText] = Create3DTextLabel(string, 0x00D900FF, 0.0, 0.0, 0.0, 50.0, 0, 1);
						Attach3DTextLabelToVehicle(CoreVehicles[vehicleid][vehSignText], vehicleid, -0.7, -1.9, -0.3);
						CoreVehicles[vehicleid][vehSign] = true;
					}
					else {

						format(string,sizeof(string), "%s",params);

						CoreVehicles[vehicleid][vehSignText] = Create3DTextLabel(string, 0x00D900FF, 0.0, 0.0, 0.0, 50.0, 0, 1);
						Attach3DTextLabelToVehicle(CoreVehicles[vehicleid][vehSignText], vehicleid, -0.7, -1.9, -0.3);
						CoreVehicles[vehicleid][vehSign] = true;
					}
					
					SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /remove_carsign - "EMBED_WHITE" หากใช้งานเสร็จ");
					playerData[playerid][pAdverts] -= 1;
				}
			}
			else
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: {FFFFFF}คุณไม่มีป้ายโฆษณาใด ๆ, คุณสามารถซื้อมันได้ที่ Mall");
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR: {FFFFFF}คำสั่งนี้สามารถใช้งานได้เฉพาะกับยานพาหนะส่วนตัวเท่านั้น");
	}
	return 1;
}

CMD:remove_carsign(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), factiontype = GetFactionType(playerid);
	if(factiontype == FACTION_TYPE_POLICE || factiontype == FACTION_TYPE_MEDIC || factiontype == FACTION_TYPE_SASD)
	{
		if(IsACopCar(vehicleid) || IsAFDCar(vehicleid))
		{
			if(CoreVehicles[vehicleid][vehSign])
			{
				Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
				CoreVehicles[vehicleid][vehSign] = false;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_RED, "คุณไม่มีสัญญาณเรียกขานบนยานพาหนะของคุณ");
		}
		else SendClientMessage(playerid, COLOR_RED, "คุณต้องอยู่ในยานพาหนะของหน่วยงาน");
	}
	else
	{
		if((Car_GetID(GetPlayerVehicleID(playerid))) != -1)
		{
			//if((Car_GetID(GetPlayerVehicleID(playerid))) != -1)
			//{
			if(CoreVehicles[vehicleid][vehSign])
			{
				Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
				CoreVehicles[vehicleid][vehSign] = false;
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_RED, "คุณไม่มีป้ายโฆษณาบนยานพาหนะของคุณ");
			//}
			//else return SendClientMessage(playerid, COLOR_RED, "คุณต้องอยู่บนรถส่วนตัวเท่านั้น");
		}
		else return SendClientMessage(playerid, COLOR_RED, "คุณต้องอยู่บนรถส่วนตัวเท่านั้น");
	}

	return 1;
}

CMD:cone(playerid, params[])
{
    new slot;
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if(sscanf(params,"d",slot))
	{
		SendSyntaxMessage(playerid, "/cone [slot(1-10)]");
		return 1;
	}
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid slot.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	slot--;
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "กรวยสล็อตนี้ได้ถูกใช้แล้ว");
	RoadBlocks[playerid][slot] = CreateDynamicObject(1238, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetPVarInt(playerid, "EditingRB", 1);
	SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]"EMBED_WHITE" ใช้งานกรวยจราจร");
	return 1;
}

CMD:disband(playerid, params[])
{
    new slot;
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/disband [slot(1-10)]");
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid slot.");
    slot--;
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "กรวยสล็อตนี้ได้ถูกใช้แล้ว");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "{9C4C42}[ ! ]"EMBED_WHITE" กรวยจราจร %s ถูกยกเลิก", slot);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:trolley_create(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_MEDIC) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
	
	new slot = -1;
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/trolley_create [type(1-2)]");
	
	if(slot == 1 || slot == 2) {
		new Float:customZ;
		if(slot == 1) {
			slot = TROLLEY_OBJECT;
			customZ = -0.5;
		}
		else if(slot == 2) {
			slot = TROLLEY_OBJECT_2;
			customZ = -1;
		}
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		GetXYInFrontOfPlayer(playerid, x, y, 1.5);
		new objectid = CreateDynamicObject(slot, x, y, z + customZ, 0.0, 0.0, a+180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		EditDynamicObject(playerid, objectid);
		SetPVarInt(playerid, "EditingTroll", 1);
		
		SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]"EMBED_WHITE" ใช้งานเตียงผู้ป่วย");
		
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, STREAMER_OBJECT_TROLLEY);
	}
	else return SendSyntaxMessage(playerid, "/trolley_create [type(1-2)]");
	
	return 1;
}

CMD:trolley_del(playerid, params[])
{
    new objectid;
	if((objectid = GetClosestTrolley(playerid)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบเตียงผู้ป่วยรอบ ๆ");
	DestroyDynamicObject(objectid);
	SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]"EMBED_WHITE" เตียงผู้ป่วยถูกยกเลิก");
	return 1;
}

// Ladders

CMD:ladders_create(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_MEDIC) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
	
	new slot = -1;
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/ladders_create [type(1-2)]");
	
	if(slot == 1 || slot == 2) {
		new Float:customZ;
		if(slot == 1) {
			slot = LADDERS_OBJECT;
			customZ = -0.5;
		}
		else if(slot == 2) {
			slot = LADDERS_OBJECT_2;
			customZ = -1;
		}
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		GetXYInFrontOfPlayer(playerid, x, y, 1.5);
		new objectid = CreateDynamicObject(slot, x, y, z + customZ, 0.0, 0.0, a+180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
		EditDynamicObject(playerid, objectid);
		SetPVarInt(playerid, "EditingLadders", 1);
		
		SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]"EMBED_WHITE" ใช้งานบันไดฉุกเฉิน");
		
		Streamer_SetIntData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, STREAMER_OBJECT_LADDERS);
	}
	else return SendSyntaxMessage(playerid, "/ladders_create [type(1-2)]");
	
	return 1;
}

CMD:ladders_del(playerid, params[])
{
    new objectid;
	if((objectid = GetClosestLadders(playerid)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบบันไดฉุกเฉินรอบ ๆ");
	DestroyDynamicObject(objectid);
	SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[ ! ]"EMBED_WHITE" บันไดฉุกเฉินถูกยกเลิก");
	return 1;
}

CMD:rb(playerid, params[])
{
	new slot, model;
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if(sscanf(params,"dd",slot,model))
	{
		SendSyntaxMessage(playerid, "/rb [slot(1-10)] [model-id]");
		SendClientMessage(playerid, COLOR_GRAD2, "|_______________RoadBlocks types_______________|");
		SendClientMessage(playerid, COLOR_GRAD3, "973,978,979,1422,1423,1424,1425,1427,1434,1459,19834");
		return 1;
	}
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");

	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid slot.");
	if(model != 973 && model != 978 && model != 979 && model != 1422 && model != 1423 && model != 1424 && model != 1425 && model != 1427 && model != 1434 && model != 1459 && model != 19834) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid model ID.");
    slot--;
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "สิ่งกีดขวางสล็อตนี้ได้ถูกใช้แล้ว");
	SendClientMessageEx(playerid, COLOR_WHITE, "สิ่งกีดขวาง #%d นำไปใช้สำเร็จแล้ว โปรดอย่าลืมลบมันด้วย", slot);
	RoadBlocks[playerid][slot] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetPVarInt(playerid, "EditingRB", 1);
	SendClientMessage(playerid, COLOR_WHITE, "คุณสามารถแก้ไขตำแหน่งของสิ่งกีดขวางได้");
	return 1;
}

CMD:rrb(playerid, params[])
{
	new slot;
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/rrb [slot(1-10)]");
	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid slot.");
    slot--;
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "สิ่งกีดขวางสล็อตนี้ยังไม่ได้ถูกใช้");
	SendClientMessageEx(playerid, COLOR_WHITE, "สิ่งกีดขวาง #%d ถูกลบสำเร็จแล้ว", slot);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:ajail(playerid, params[])
{
	new targetid, time, reason[128];
	if (playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	if(sscanf(params,"uds[128]",targetid, time, reason)) return SendSyntaxMessage(playerid, "/ajail [ไอดีผู้เล่น/ชื่อบางส่วน] [time] [reason]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[128]}", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	if(time <= 0) return SendClientMessage(playerid, COLOR_GRAD1, "เวลาต้องมากกว่า 0!");


	format(XLQuery, sizeof(XLQuery), "INSERT INTO `logs_jail` (`Character`, `JailedBy`, `Minutes`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%d', '%s', '%s', %d, %d)", ReturnPlayerName(targetid), ReturnPlayerName(playerid), time, reason, ReturnIP(targetid), playerData[targetid][pID], playerData[targetid][pUserid]);
	mysql_query(dbCon, XLQuery);

	format(szString, sizeof(szString), "AdmCmd: %s ได้ส่งคุกแอดมิน %s เป็นเวลา %d นาที สาเหตุ: %s", ReturnPlayerName(playerid), ReturnPlayerName(targetid), time, reason);
	SendClientMessageToAll(COLOR_YELLOW, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/ajail] %s has admin jail %s time %d minutes reason %s", ReturnDate(), ReturnPlayerName(playerid), ReturnPlayerName(targetid), time, reason);

	format(szString, sizeof(szString), "ส่งคุก %s เวลา %d นาที สาเหตุ %s", ReturnPlayerName(targetid), time, reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	playerData[targetid][pJailed] = 1;
	playerData[targetid][pJailTime] = time*60;
	SendClientMessage(targetid, COLOR_YELLOW, "คุณถูกขังอยู่ในคุกแอดมินเนื่องจากไม่เคารพกฏต่าง ๆ");
	SetPlayerPosEx(targetid, 2689.2698,2689.3066,22.9472);
	SetSpawnInfo(targetid, 1,  playerData[targetid][pModel] /*model*/, 2689.2698,2689.3066,22.9472, 1.0, -1, -1, -1, -1, -1, -1);

	return 1;
}

CMD:aunjail(playerid, params[])
{
	new targetid;
	if (playerData[playerid][pAdmin] < 1 && playerData[playerid][pTester] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ใช่ผู้ดูแลระบบ");
	if(sscanf(params,"u",targetid)) return SendSyntaxMessage(playerid, "/aunjail [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	playerData[targetid][pJailed] = 0;
	playerData[targetid][pJailTime] = 0;
    //PlayerTextDrawHide(targetid, jail_timeleft[pID]);
	SendClientMessage(targetid, COLOR_YELLOW, "คุณถูกปล่อยออกจากคุกแอดมิน !");

	format(szString, sizeof(szString), "ปล่อยออกจากคุก %s", ReturnPlayerName(targetid));
    SQL_LogAdmin_Action(playerid, "IG", szString);

	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ได้ถูกปล่อยออกจากคุก/เรือนจำโดยผู้ดูแลระบบ %s", ReturnPlayerName(targetid), ReturnRealName(playerid));
	SetPlayerSpawn(targetid);
	return 1;
}

// /taxi [accept / duty / fare / start / stop]
CMD:taxi(playerid, params[])
{
	new option[11], secoption, vehicle = GetPlayerVehicleID(playerid), msg[128];
	if(sscanf(params,"s[11]D(-1)", option, secoption))
	{
		SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /taxi [ตัวเลือก]");
		SendClientMessage(playerid, COLOR_GREY, "ตัวเลือก: | duty | fare | check | accept | start | stop");
		return 1;
	}
	if(!strcmp(option, "duty", true))
	{
	    if(playerData[playerid][pSideJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่ Taxi Driver");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับรถ");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่บน Taxi");

		if(TaxiDuty{playerid})
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: ตอนนี้คุณ Off-duty");
			TaxiDuty{playerid} = false;
			TaxiMade[playerid] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: ตอนนี้คุณ On duty");
			TaxiDuty{playerid} = true;
			TaxiMade[playerid] = 0;
		}
		SetPlayerToTeamColor(playerid);
	}
	else if(!strcmp(option, "start", true))
	{
	    if(playerData[playerid][pSideJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่ Taxi Driver");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับรถ");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใน Taxi/Cabbie");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "คุณจำเป็นต้อง On-Duty ก่อน");
		if(TaxiFare{playerid} == 0) return SendClientMessage(playerid, COLOR_GREY, "คุณยังไม่ได้ตั้งค่าโดยสาร");
		if(TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "คุณได้เริ่มงาน Taxi ไปแล้ว");
		SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: แท็กซี่ของคุณได้เริ่มให้บริการและมีผลกับผู้เล่นทุกคนในรถของคุณ");
		TaxiStart{playerid} = true;
	}
	else if(!strcmp(option, "fare", true))
	{
	    if(playerData[playerid][pSideJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่ Taxi Driver");

		new fare;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับรถ");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใน Taxi/Cabbie");
		if(sscanf(params,"{s[11]}d",fare)) return SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /taxi fare [จำนวน]");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "คุณจำเป็นต้อง On-Duty ก่อน");
		if(fare < 0 || fare > 25) return SendClientMessage(playerid, COLOR_YELLOW, "มีขีดจำกัดค่าโดยสาร ($0-$25)");
		if(TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "Taxi ของคุณต้องหยุดให้บริการก่อนตั้งค่าโดยสาร");
		format(msg, sizeof(msg), "[TAXI]: คุณได้เปลี่ยนค่าโดยสารรถแท็กซี่ของคุณเป็น $%d", fare);
		SendClientMessage(playerid, COLOR_YELLOW, msg);
		TaxiFare{playerid} = fare;
	}
	else if(!strcmp(option, "accept", true))
	{
	    if(playerData[playerid][pSideJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่ Taxi Driver");

		new targetid = INVALID_PLAYER_ID;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับรถ");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใน Taxi/Cabbie");
		if(sscanf(params,"{s[11]}k<masked>",targetid)) return SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /taxi accept [ไอดี/ชื่อบางส่วน]");

		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "คุณจำเป็นต้อง On-Duty ก่อน");
		if(GetPVarInt(targetid, "NeedTaxi") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนี้ไม่ต้องการแท็กซี่ในขณะนี้");

		SetPVarInt(targetid, "ResponseTaxi", GetPVarInt(targetid, "ResponseTaxi") + 1);

		switch(GetPVarInt(targetid, "ResponseTaxi")) {
			case 1: SendClientMessage(playerid, COLOR_WHITE, "คุณได้ตอบรับเป็นคนแรก!");
			case 2: SendClientMessage(playerid, COLOR_WHITE, "คุณได้ตอบรับเป็นคนที่สอง!");
			default: SendClientMessage(playerid, COLOR_WHITE, "คุณได้ตอบรับเป็นคนท้ายสุด");
		}

		GetPVarString(targetid, "CallTaxiLoc", msg, sizeof(msg));

		SendClientMessage(playerid, COLOR_GREEN, "|_________เรียกแท็กซี่_________|");
	
		if(bf_get(player_bf[targetid], IS_MASKED)) {
			new mname[MAX_MASK_NAME];
			GetPVarString(targetid, "MaskedName", mname, MAX_MASK_NAME);
			SendClientMessageEx(playerid, COLOR_WHITE, "ผู้โทร:(ID:%s) %s เบอร์: %d", mname, ReturnRealName(targetid), playerData[targetid][pPnumber]);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "ผู้โทร:(ID:%d) %s เบอร์: %d", targetid, ReturnRealName(targetid), playerData[targetid][pPnumber]);

		SendClientMessageEx(playerid, COLOR_WHITE, "จุดหมายปลายทาง: %s", msg);
	}
	else if(!strcmp(option, "stop", true))
	{
	    if(playerData[playerid][pSideJob] != JOB_TAXI && playerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "คุณไม่ใช่ Taxi Driver");

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับรถ");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใน Taxi/Cabbie");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "คุณจำเป็นต้อง On-Duty ก่อน");
		if(!TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "Taxi ของคุณยังไม่ได้เริ่มให้บริการ");
		SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: Taxi ของคุณได้หยุดให้บริการและค่าโดยสารถูกยกเลิก");

		TaxiStart{playerid} = false;
		TaxiMade[playerid] = 0;
		TaxiMoney[playerid] = 0;
	}
	else if(!strcmp(option, "check", true))
	{
		new targetid = INVALID_PLAYER_ID;
		if(sscanf(params,"{s[11]}k<masked>",targetid)) return SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /taxi check [ไอดีผู้เล่น/ชื่อบางส่วน]");

		if (targetid == INVALID_PLAYER_ID) {
			SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			return 1;
		}
		if(playerData[targetid][pSideJob] != JOB_TAXI && playerData[targetid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "ผู้เล่นนั้นไม่ใช่ Taxi Driver");
        if(!TaxiDuty{targetid} || TaxiFare{targetid} == 0) return SendClientMessage(playerid, COLOR_WHITE, "ผู้เล่นนั้นยังไม่ได้เริ่มงาน");
        SendClientMessageEx(playerid, COLOR_WHITE, "** ค่าโดยสารของแท็กซี่ %s คือ $%d ต่อวินาที **", ReturnRealName(targetid), TaxiFare{targetid});

	}
	return 1;
}

CMD:licenseexam(playerid, params[])
{
	    if(playerData[playerid][pCash] >= 5000) {

			new vehicleid = GetPlayerVehicleID(playerid);
			if(IsVehicleDMV(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {

	     		new model = GetVehicleModel(vehicleid);

	         	if (model == 516) {
	         	  	if(playerData[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีใบอนุณาตขับขี่อยู่แล้ว");
				 	SetPVarInt(playerid, "InDriveTest", 1);
				}
	        	else if(model == 438) {
	             	if(playerData[playerid][pJob] == JOB_TAXI || playerData[playerid][pSideJob] == JOB_TAXI) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้เป็น Taxi Driver อยู่แล้ว !");
                  	if(playerData[playerid][pJob] != JOB_NONE && playerData[playerid][pSideJob] != JOB_NONE) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องออกจากงานก่อน (/leavejob หรือ /leavesidejob)");

					SetPVarInt(playerid, "InDriveTest", 2);
	         	}
				SetEngineStatus(vehicleid, true);
				SendClientMessage(playerid, COLOR_LIGHTRED,"______________หลักเกณฑ์การขับขี่______________");
		      	SendClientMessage(playerid, COLOR_LIGHTRED,"1) ขับไปทางด้านขวาของถนน");
		      	SendClientMessage(playerid, COLOR_LIGHTRED,"2) อย่าขับรถเร็วเกินไป");
		     	SendClientMessage(playerid, COLOR_LIGHTRED,"3) เคารพคนขับรถคนอื่น ๆ บนท้องถนน");
		       	SendClientMessage(playerid, COLOR_WHITE,"เมื่อเริ่มเข้าจุดตรวจสอบและพอมาถึงจุดสุดท้ายในเวลาที่กำหนดเป็นอันจบการทดสอบ");
		       	SendClientMessage(playerid, COLOR_WHITE,"อย่าขับเร็วเกินไป คุณอาจประสบปัญหาบนท้องถนนหากคุณทำ");
				SetPVarInt(playerid, "LessonSeconds", 75);
				SetPlayerCheckpointEx(playerid, 1219.1036,-1569.8324,13.0955, 4.0, CHECKPOINT_CAREXAM, 1);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่บนยานพาหนะสำหรับสอบใบอนุณาตขับขี่");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอที่จะจ่ายมัน");


		return 1;
}

CMD:setstyle(playerid, params[])
{
	new option, secoption;
	if(sscanf(params,"dD(-1)", option, secoption)) return SendSyntaxMessage(playerid, "/setstyle (1 - Walk Style | 2 - Chat Style) | 3 - HUD Style)");

	if(option == 1)
	{
		if(playerData[playerid][pDonateRank] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับผู้บริจาคเท่านั้น");

		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 1 [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 1,2,3,4,5,6,7,8,9");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 10,11,12,13,14,15,16");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 17,18");
			return 1;
		}
		if(style < 1 || style > 18) return SendClientMessage(playerid, COLOR_WHITE, "ไอดี 1-18");

		playerData[playerid][pWalk] = style;
		SendClientMessageEx(playerid, COLOR_WHITE, "   คุณตั้งค่าสไตล์การเดินเป็น: %d", style);
		SendClientMessage(playerid, COLOR_GRAD1, "ใช้ /walk เพื่อเดิน");
	}
	else if(option == 2)
	{
		if(playerData[playerid][pDonateRank] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับผู้บริจาคเท่านั้น");

		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 2 [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Chat Styles: 0,1,2,3,4,5,6,7,8");
			return 1;
		}
		if(style < 0 || style > 8) return SendClientMessage(playerid, COLOR_WHITE, "ไอดี 0-8");

		playerData[playerid][pTalk] = style;
		SendClientMessageEx(playerid, COLOR_WHITE, "   คุณตั้งค่าสไตล์การแชทเป็น: %d", style);
	}
	else if(option == 3)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Hud Styles: 0,1,2");
			return 1;
		}
		if(style < 0 || style > 2) return SendClientMessage(playerid, COLOR_WHITE, "ไอดี 0-2");

		playerData[playerid][pHUDStyle] = style;

		switch(style) {
		    case 0: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.45, 1.05);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 3);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
		    case 1: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 16.000034, 180.0, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.320000, 1.604979);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
		    case 2: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 526.400329, 391.599761, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.540798, 2.535822);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], -2139062017);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
			/*case 3: {
				if(playerData[playerid][pDonateRank] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "สำหรับผู้บริจาค Gold Member เท่านั้น");
				PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.45, 1.05);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 3);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
				//CreateSpeedo(playerid);
			}*/
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "   คุณตั้งค่าสไตล์ HUD เป็น: %d", style);
	}
	return 1;
}

CMD:jog(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimationCheck(playerid))
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"PED","JOG_maleA",4.1,1,1,1,1,1);
  		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
}

CMD:sneak(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimationCheck(playerid))
	{
		playerData[playerid][pAnimation] = 1;
		ApplyAnimation(playerid,"PED","Player_Sneak",4.1,1,1,1,1,1);
  		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
}

CMD:opendoor_right(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimationCheck(playerid))
	{
		playerData[playerid][pAnimation] = 1;
		//ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,0,1,1);
		ApplyAnimation(playerid, "PED", "CAR_open_RHS", 4.1, 0, 1, 1, 0, 0, 0);
  		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
}

CMD:opendoor_left(playerid, params[])
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !AnimationCheck(playerid))
	{
		playerData[playerid][pAnimation] = 1;
		//ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,0,1,1);
		ApplyAnimation(playerid, "PED", "CAR_open_LHS", 4.1, 0, 1, 1, 0, 0, 0);
  		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "ไม่สามารถเล่น Animation ได้ในขณะนี้");
}

CMD:walk(playerid, params[])
{
	switch(playerData[playerid][pWalk])
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
		default: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
	}
	playerData[playerid][pAnimation] = 1;
	return 1;
}

ChatAnimation(playerid, length)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !playerData[playerid][pAnimation])
	{
		if(isDeathmode{playerid} || isInjuredmode{playerid} || isKNOmode{playerid} || IsPlayerInAnyVehicle(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return 1;

		new chatstyle = playerData[playerid][pTalk];
		playerData[playerid][pAnimation] = 1;
		if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,1,0,0,1,1); }
		else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,1,0,0,1,1); }
		else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,1,0,0,1,1); }
		else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.1,1,0,0,1,1);}
		else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,1,0,0,1,1);}
		else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,1,0,0,1,1);}
		else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,1,0,0,1,1);}
		else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,1,0,0,1,1);}
		else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,1,0,0,1,1);}
		SetTimerEx("StopChatting", floatround(length)*100, 0, "i", playerid);
	}
	return 1;
}

CheckFightStyle(playerid) {
	new styleid = FIGHT_STYLE_NORMAL;
	switch(playerData[playerid][pFightStyle])
	{
		case 0: styleid = FIGHT_STYLE_NORMAL;
		case 1: styleid = FIGHT_STYLE_BOXING;
		case 2: styleid = FIGHT_STYLE_KUNGFU;
		default: styleid = FIGHT_STYLE_NORMAL;
	}
	return SetPlayerFightingStyle(playerid, styleid);
}

CountAdvert() {
    new num = 0;
	for(new i=0;i!=MAX_AD_QUEUE;i++) if(AdvertData[i][ad_id]) num++;
	return num;
}

CountPlayerAdvert(playerid) {
    new num = 0;
	for(new i=0;i!=MAX_AD_QUEUE;i++) if(AdvertData[i][ad_id] && AdvertData[i][ad_owner] == playerid) num++;
	return num;
}

Advert_Free() {
	new exists = -1;
	for(new i=0;i!=MAX_AD_QUEUE;i++) {
		if(!AdvertData[i][ad_id]) {
			exists = i;
			break;
		}
	}
	return exists;
}

SetLastCaller(playerid, callnumber, const situation[])
{
    new call_str[64];
	for(new i = 0; i != MAX_EMERGENCY_CALL; i++)
	{
		if(CallInfo[i][callDateTime] == 0)
		{
			format(CallInfo[i][callSituation], 64, situation);

			GetPVarString(playerid, "CE_Loc", call_str, 32);
			format(CallInfo[i][callLocation], 32, call_str);

			GetPVarString(playerid, "CE_Type", call_str, 10);
			format(CallInfo[i][callType], 10, call_str);

			GetPVarString(playerid, "CE_Trace", call_str, 32);
			format(CallInfo[i][callTrace], 32, call_str);

			CallInfo[i][callDateTime] = gettime();
			CallInfo[i][callCaller] = playerid;
			CallInfo[i][callNumb] = callnumber;
			return i;
		}
	}
	new x = 0;
	format(CallInfo[x][callSituation], 64, situation);
	GetPVarString(playerid, "CE_Loc", call_str, 32);
	format(CallInfo[x][callLocation], 32, call_str);
	GetPVarString(playerid, "CE_Type", call_str, 10);
	format(CallInfo[x][callType], 10, call_str);
	GetPVarString(playerid, "CE_Trace", call_str, 32);
	format(CallInfo[x][callTrace], 32, call_str);
	CallInfo[x][callDateTime] = gettime();
	CallInfo[x][callCaller] = playerid;
	CallInfo[x][callNumb] = callnumber;
	
	SortDeepArray(CallInfo, callDateTime);
	
	return 0;
}

/*
SetLastCaller(playerid, callnumber, situation[])
{
	new call_str[64];
	for(new i = MAX_EMERGENCY_CALL - 1; i >= 0; --i)
	{
	    if(CallInfo[i][callDateTime] == 0)
	    {
			format(CallInfo[i][callSituation], 64, situation);

			GetPVarString(playerid, "CE_Loc", call_str, 32);
			format(CallInfo[i][callLocation], 32, call_str);

			GetPVarString(playerid, "CE_Type", call_str, 10);
			format(CallInfo[i][callType], 10, call_str);

			GetPVarString(playerid, "CE_Trace", call_str, 32);
			format(CallInfo[i][callTrace], 32, call_str);

			CallInfo[i][callDateTime] = gettime();
			CallInfo[i][callCaller] = playerid;
			CallInfo[i][callNumb] = callnumber;
			return i;
	    }
	}
	new i = MAX_EMERGENCY_CALL - 1, tempCall[MAX_EMERGENCY_CALL][EMERGENCY_CALL];
	format(CallInfo[i][callSituation], 64, situation);
	GetPVarString(playerid, "CE_Loc", call_str, 32);
	format(CallInfo[i][callLocation], 32, call_str);
	GetPVarString(playerid, "CE_Type", call_str, 10);
	format(CallInfo[i][callType], 10, call_str);
	GetPVarString(playerid, "CE_Trace", call_str, 32);
	format(CallInfo[i][callTrace], 32, call_str);
	CallInfo[i][callDateTime] = gettime();
	CallInfo[i][callCaller] = playerid;
	CallInfo[i][callNumb] = callnumber;
	
	for(new x = 0; x != MAX_EMERGENCY_CALL; ++x)
	{
		for(new e = 0; e != sizeof(tempCall); ++e)
	    	tempCall[x][EMERGENCY_CALL:e] = CallInfo[x][EMERGENCY_CALL:e];
	}
	SortDeepArray(tempCall, callDateTime);
	for(new x = 0; x != MAX_EMERGENCY_CALL; ++x)
	{
		for(new e = 0; e != sizeof(tempCall); ++e)
			CallInfo[x][EMERGENCY_CALL:e] = tempCall[x][EMERGENCY_CALL:e];
	}
	return i;
}*/

UnSetLastCaller(playerid)
{
	new bool:founds;
	for(new i = 0; i != MAX_EMERGENCY_CALL; i++) if(CallInfo[i][callCaller] == playerid) {
		CallInfo[i][callCaller] = INVALID_PLAYER_ID;
		CallInfo[i][callDateTime] = 0;
		CallInfo[i][callNumb] = 0;
		founds=true;
	}
	if(founds) {
		//SortLastCaller(playerid);
		SortDeepArray(CallInfo, callDateTime);
	}
	return 1;
}
/*
SortLastCaller(playerid) {

	new array[MAX_EMERGENCY_CALL][EMERGENCY_CALL];
	for(new i = 0; i != MAX_EMERGENCY_CALL; ++i)
	{
		array[i][callCaller] = CallInfo[i][callCaller];
		array[i][callDateTime] = CallInfo[i][callDateTime];
		strmid(array[i][callSituation], CallInfo[i][callSituation], 0, strlen(CallInfo[i][callSituation]), 128);
		strmid(array[i][callLocation], CallInfo[i][callLocation], 0, strlen(CallInfo[i][callLocation]), 64);
		strmid(array[i][callType], CallInfo[i][callType], 0, strlen(CallInfo[i][callType]), 64);
		strmid(array[i][callTrace], CallInfo[i][callTrace], 0, strlen(CallInfo[i][callTrace]), 64);
	}

	SortDeepArray(array, callDateTime);
	
	new temp_sort = MAX_EMERGENCY_CALL;
	for(new i = 0; i != MAX_EMERGENCY_CALL; ++i)
	{
		temp_sort--;
		CallInfo[i][callCaller] = array[temp_sort][callCaller];
		CallInfo[i][callDateTime] = array[temp_sort][callDateTime];
		strmid(CallInfo[i][callSituation], array[i][callSituation], 0, strlen(array[i][callSituation]), 128);
		strmid(CallInfo[i][callLocation], array[i][callLocation], 0, strlen(array[i][callLocation]), 64);
		strmid(CallInfo[i][callType], array[i][callType], 0, strlen(array[i][callType]), 64);
		strmid(CallInfo[i][callTrace], array[i][callTrace], 0, strlen(array[i][callTrace]), 64);
	}
}*/

SetLastArrest(playerid, suspect, time)
{

	new query[256];
	format(query,sizeof(query),"INSERT INTO arrestrecord (player,date,issuer,time) VALUES ('%s','%s','%s',%d)",ReturnPlayerName(playerid), ReturnDateTime(1), ReturnPlayerName(suspect),time);
	mysql_query(dbCon, query);
	
/*    new call_str[64];
	for(new i = 0; i != MAX_ARREST; i++)
	{
		if(!ArrestInfo[i][arrestTaken])
		{
			format(ArrestInfo[i][arrestDate], 64, "%s", ReturnDate());
			GetPVarString(playerid, "ArrestLocation", call_str, 64);
			format(ArrestInfo[i][arrestLocation], 64, "%s", call_str);
			ArrestInfo[i][arrestSuspect] = suspect;
			ArrestInfo[i][arrestOfficer] = playerid;
			ArrestInfo[i][arrestTime] = time;
			ArrestInfo[i][arrestTaken] = true;
			return 1;
		}
	}
	if(ToLastArrestSlot < 31)
	{
		format(ArrestInfo[ToLastArrestSlot][arrestDate], 64, "%s", ReturnDate());
		GetPVarString(playerid, "ArrestLocation", call_str, 64);
		format(ArrestInfo[ToLastArrestSlot][arrestLocation], 64, "%s", call_str);
		ArrestInfo[ToLastArrestSlot][arrestSuspect] = suspect;
		ArrestInfo[ToLastArrestSlot][arrestOfficer] = playerid;
		ArrestInfo[ToLastArrestSlot][arrestTime] = time;
		ArrestInfo[ToLastArrestSlot][arrestTaken] = true;
		ToLastArrestSlot++;
		if(ToLastArrestSlot == 30)
			ToLastArrestSlot = 0;
	}*/
	return 1;
}

CMD:elm(playerid, params[])
{
	if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD || GetFactionType(playerid) == FACTION_TYPE_MEDIC) {
		if(IsPlayerInAnyVehicle(playerid)) {
			new temp_vehicleid = GetPlayerVehicleID(playerid);
			if(IsACopCar(temp_vehicleid) && IsAFDCar(temp_vehicleid)) {
				
				if(CoreVehicles[ temp_vehicleid ][ vELMTimer ] != -1) {
					KillTimer(CoreVehicles[ temp_vehicleid ][ vELMTimer ]);
					CoreVehicles[ temp_vehicleid ][ vELMTimer ] = -1;
					
				
					UpdateVehicleDamageStatus(temp_vehicleid, CoreVehicles[temp_vehicleid][vehDamage][0], CoreVehicles[temp_vehicleid][vehDamage][1], CoreVehicles[temp_vehicleid][vehDamage][2], CoreVehicles[temp_vehicleid][vehDamage][3]);
					
					SetLightStatus(temp_vehicleid, GetEngineStatus(temp_vehicleid));
					GameTextForPlayer(playerid, "~g~Emergency Lights Off", 2000, 4);
				}
				else {
					if(GetLightStatus(temp_vehicleid)) {
					
						CoreVehicles[ temp_vehicleid ][ vELMTimer ] = SetTimerEx("OnLightFlash", 115, true, "i", temp_vehicleid);
						GameTextForPlayer(playerid, "~g~Emergency Lights On", 2000, 4);
					}
					else {
						SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องเปิดไฟของยานพาหนะก่อนใช้ /elm !");
					}
				}
				return 1;
			}
		}
	    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจะต้องอยู่ในพาหนะ!");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับ LSPD/FD/SASD เท่านั้น!");
	return 1;
}

CMD:mdc(playerid, params[])
{

	if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {
    	if(IsACopCar(GetPlayerVehicleID(playerid))) {
    	    new str[64];
			format(str, sizeof(str), "Police MDC System - Logged as: %s", ReturnNameEx(playerid));
			Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_LIST, str, "ค้นหาชื่อ\nเพิ่มข้อกล่าวหา\nค้นหาป้ายทะเบียน (ชื่อหรือไอดีผู้เล่น)\nค้นหาป้ายทะเบียน (หมายเลขป้ายทะเบียน)\nการโทรครั้งล่าสุด - 991\nการจับกุมครั้งล่าสุด\nGUI (Test)", "Enter", "Exit");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจะต้องอยู่ในรถลาดตระเวนของตำรวจ!");
	}
	else SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");

	return 1;
}

Dialog:DialogMDC(playerid, response, listitem, inputtext[]) {
	if(response) {
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาชื่อ", "ค้นหาชื่อ\n\nกรอกชื่อ\n\nรูปแบบ: Firstname_Lastname (( หรือใช้ไอดี ))", "Enter", "Exit");
			}
			case 1:
			{
				Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "Police MDC System - เพิ่มข้อกล่าวหา", "ส่งข้อมูล\n\nกรอกชื่อด้านล่างนี้:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Exit");
			}
			case 2:
			{
				Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "ค้นหาป้ายทะเบียน\n\nกรอกหมายเลขป้ายทะเบียน:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Exit");
			}
			case 3:
			{
				Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "ค้นหาป้ายทะเบียน\n\nกรอกข้อมูลป้ายทะเบียน:", "Enter", "Exit");
			}
			case 4:
			{
				new string[800], menu[10], count;
				for(new i = MAX_EMERGENCY_CALL - 1; i>=0; --i)
				{
					if(CallInfo[i][callDateTime] != 0)
					{
						format(string, sizeof(string), "%s\n%d: %s", string, CallInfo[i][callNumb], CallInfo[i][callSituation]);
						format(menu, 10, "menu%d", count);
						SetPVarInt(playerid, menu, i);
						count++;
					}
				}
				Dialog_Show(playerid, MDCLastCalls, DIALOG_STYLE_LIST, "Police MDC System - การโทรครั้งล่าสุด", string, "Enter", "Exit");
			}
			case 5:
			{
			    new rows, string[1500];

				mysql_query(dbCon, "SELECT `date`, `player` FROM `arrestrecord` ORDER BY `id` DESC LIMIT 20");

			    cache_get_row_count(rows);

			    if(rows) {
			    
			        new arrest_date[40], arrest_player[MAX_PLAYER_NAME+1];
			        
			        format(string, sizeof(string), "วันที่\tชื่อ");
			        
					for(new i=0; i !=rows; ++i)
					{
					    cache_get_value_name(i, "date", arrest_date);
					    cache_get_value_name(i, "player", arrest_player);
                        format(string, sizeof(string), "%s\n%sน.\t%s", string, arrest_date, RoleplayName(arrest_player));
					}
					Dialog_Show(playerid, MDCLastArrest, DIALOG_STYLE_TABLIST_HEADERS, "Police MDC System - การจับกุมครั้งล่าสุด", string, "Enter", "Exit");
				}
				else {
				    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Police MDC System - การจับกุมครั้งล่าสุด", "ไม่พบข้อมูลการจับกุมในปัจจุบัน...", "Exit", "");
				}
			}
			case 6: {
				PlayerMDC(playerid, true);
			}
		}
	}
	return 1;
}

Dialog:MDCLastArrest(playerid, response, listitem, inputtext[])
{
	if(response)
	{

		new rows, string[1500];

		mysql_query(dbCon, "SELECT * FROM `arrestrecord` ORDER BY `id` DESC LIMIT 20");

		cache_get_row_count(rows);

		if(rows) {

            new i = listitem;
			new arrest_time, mins, entryid, arrest_date[40], arrest_player[MAX_PLAYER_NAME+1], arrest_issuer[MAX_PLAYER_NAME+1];

            cache_get_value_int(i, "id", entryid);
            cache_get_value_int(i, "time", arrest_time);
			cache_get_value_name(i, "date", arrest_date);
			cache_get_value_name(i, "player", arrest_player);
			cache_get_value_name(i, "issuer", arrest_issuer);


			format(string, sizeof(string), "ARREST INFORMATION\n\nรายการ: #%d\n  ชื่อ: %s\n  เจ้าหน้าที่: %s\n   วันที่: %sน.\n   โทษห้องขัง: %s", entryid, RoleplayName(arrest_player), RoleplayName(arrest_issuer), arrest_date, ConvertTimeTH(arrest_time, mins));
			Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Police MDC System - ข้อมูลการจับกุม", string, "Exit", "");
		}
		
	}
}

Dialog:MDCLastCalls(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new menu[10], string[1024];

		format(menu, 10, "menu%d", listitem);
		new i = GetPVarInt(playerid, menu);
		
		SetPVarInt(playerid, "LastCallSlot", i);
		new diff_time = gettime() - CallInfo[i][callDateTime], mins, hours;
		format(string, sizeof(string), "%d-CALL INFORMATION - #%d\n\nประเภท: %s\n\nผู้โทร: %s\nเบอร์โทรศัพท์: %d\nสถานการณ์: %s\nตำแหน่ง: %s\nแกะรอย: %s\nเวลา: %sที่ผ่านมา", CallInfo[i][callNumb], i, CallInfo[i][callType], ReturnRealName(CallInfo[i][callCaller]), playerData[CallInfo[i][callCaller]][pPnumber], CallInfo[i][callSituation], CallInfo[i][callLocation], CallInfo[i][callTrace], ConvertTimeTH(diff_time, mins, hours));
		if(CallInfo[i][callNumb] == 991) Dialog_Show(playerid, MDCRespondCall, DIALOG_STYLE_MSGBOX, "Police MDC System - การโทรครั้งล่าสุด", string, "RESPOND", "Exit");
		else Dialog_Show(playerid, MDCRespondCall, DIALOG_STYLE_MSGBOX, "Police MDC System - การโทรครั้งล่าสุด", string, "Exit", "");
	}
}

Dialog:MDCRespondCall(playerid, response, listitem, inputtext[])
{
	if(response) {

		if(CallInfo[GetPVarInt(playerid, "LastCallSlot")][callNumb] == 991) {
		    SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "* %s %s ตอบรับการโทร 991 ครั้งล่าสุด #%d", Faction_GetRank(playerid), ReturnRealName(playerid), GetPVarInt(playerid, "LastCallSlot"));
		}
	}
	DeletePVar(playerid, "LastCallSlot");
}

Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	new string[1024], criminalrec[512];

	if(response)
	{
		new iPlayerID = INVALID_PLAYER_ID;

		if(sscanf(inputtext, "u", iPlayerID)) return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาชื่อ", "ค้นหาชื่อ\n\nกรอกชื่อ\n\nรูปแบบ: Firstname_Lastname (( หรือใช้ไอดี ))", "Enter", "Exit");
		if(iPlayerID == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาชื่อ", "ค้นหาชื่อ\n\nกรอกชื่อ\n\nรูปแบบ: Firstname_Lastname (( หรือใช้ไอดี ))\n\nไม่พบผู้เล่นนี้", "Enter", "Exit");
			}
		}
		new year, month, day;
		getdate(year, month, day);

		new pnumber_str[16];
		valstr(pnumber_str,playerData[iPlayerID][pPnumber]);
		
		new rows;
		
		format(szQuery, sizeof(szQuery), "SELECT * FROM `criminalrecords` WHERE `userid` = '%s' ORDER BY `id` DESC LIMIT 10", ReturnPlayerName(iPlayerID));
		mysql_query(dbCon, szQuery);

		cache_get_row_count(rows);

		if(rows) {

			new crim_date[40], crim_charge[128];

			for(new i=0; i !=rows; ++i)
			{
				cache_get_value_name(i, "date", crim_date);
				cache_get_value_name(i, "charge", crim_charge);
				
	          	format(criminalrec, sizeof(criminalrec), "%s: %s\n", crim_date, crim_charge, criminalrec);
			}
		}
		else {
			format(criminalrec, sizeof(criminalrec), "ไม่พบข้อหาที่สำคัญ");
		}

		format(string, sizeof(string), "NAME SEARCH RESULT\n\nชื่อ-สกุล: %s อายุ: %d\nเบอร์โทรศัพท์: %s\nใบอนุญาตขับขี่: %s\nใบอนุญาตอาวุธ: %s\n\nที่อยู่: %s\n%s\n\n\n", ReturnNameEx(iPlayerID), year - playerData[iPlayerID][pBirthdate], playerData[iPlayerID][pPnumber] ? (pnumber_str) : ("ไม่มี"), playerData[iPlayerID][pCarLic] ? ("มี") : ("ไม่มี"), playerData[iPlayerID][pWepLic] ? ("มี") : ("ไม่มี"), GetHouseLocation(iPlayerID), CountPlayerOwnHouse(iPlayerID) > 1 ? (" * บุคคลนี้มีที่อยู่หลายแห่ง") : (""));
		format(string, sizeof(string), "%sCRIMINAL RECORD\n\n%s\n\nตัดสินโทษคุก: %d\nตัดสินโทษเรือนจำ: %d\n\n", string, criminalrec, playerData[iPlayerID][pArrested], playerData[iPlayerID][pPrisoned]);

		SetPVarInt(playerid, "MDCPlayerID", iPlayerID);

		Dialog_Show(playerid, MDCResult2, DIALOG_STYLE_MSGBOX, "Police MDC System", string, "Print", "Cancel");
	}
	return 1;
}


Dialog:MDCResult2(playerid, response, listitem, inputtext[])
{
  if(response)
  {
	new iPlayerID = GetPVarInt(playerid, "MDCPlayerID");

    SendClientMessage(playerid, COLOR_WHITE,"Police MDC System - ค้นหาชื่อ");
    SendClientMessage(playerid, COLOR_WHITE,"");
    SendClientMessage(playerid, COLOR_WHITE,"NAME SEARCH RESULT");
    SendClientMessage(playerid, COLOR_WHITE,"");

    SendClientMessageEx(playerid, COLOR_WHITE, "ชื่อ-สกุล: %s", ReturnNameEx(iPlayerID));

	new pnumber_str[16];
	valstr(pnumber_str,playerData[iPlayerID][pPnumber]);

    SendClientMessageEx(playerid, COLOR_WHITE, "เบอร์โทรศัพท์: %s", playerData[iPlayerID][pPnumber] ? (pnumber_str) : ("ไม่มี"));
    SendClientMessageEx(playerid, COLOR_WHITE, "ใบอนุญาตขับขี่: %s", playerData[iPlayerID][pCarLic] ? ("มี") : ("ไม่มี"));
    //SendClientMessageEx(playerid, COLOR_WHITE, "ที่อยู่: %s", GetHouseLocation(iPlayerID));

	if(CountPlayerOwnHouse(iPlayerID) > 1) {

	    new temp_address[64];

	    SendClientMessage(playerid, COLOR_WHITE, "ที่อยู่ที่ลงทะเบียนไว้:");

		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
			if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnPlayerName(iPlayerID), true))
			{
		   		if(HouseInfo[i][hSubid] != -1) format(temp_address, sizeof(temp_address), "%s", HouseInfo[HouseInfo[i][hSubid]][hAddress]);
				else format(temp_address, sizeof(temp_address), "%s", HouseInfo[i][hAddress]);

				SendClientMessageEx(playerid, COLOR_WHITE, "-> %s", temp_address);
			}
		}
	}
	else {
	    SendClientMessageEx(playerid, COLOR_WHITE, "ที่อยู่ที่ลงทะเบียนไว้: %s", GetHouseLocation(iPlayerID));
	}
  }
  DeletePVar(playerid, "MDCPlayerID");
  return 1;
}

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new iPlayerID = INVALID_PLAYER_ID;
		if(sscanf(inputtext, "u", iPlayerID)) return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "Police MDC System - เพิ่มข้อกล่าวหา", "SUBMIT CHARGES\n\nกรอกชื่อด้านล่างนี้:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Exit");
		if(iPlayerID == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "Police MDC System - เพิ่มข้อกล่าวหา", "SUBMIT CHARGES\n\nกรอกชื่อด้านล่างนี้:\n\n(( Player ID / Firstname_Lastname ))\n\nไม่พบผู้เล่นนี้", "Enter", "Exit");
			}
		}

		SetPVarInt(playerid, "MDCPlayerID", iPlayerID);

		format(szString, sizeof(szString), "SUBMIT CHARGES\n\nยืนยันการแจ้งข้อกล่าวหา: %s\n\n(( อาชญากรรม ))", ReturnNameEx(iPlayerID));
		Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "Police MDC System - เพิ่มข้อกล่าวหา", szString, "Enter", "Exit");
	}
	return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new iPlayerID = GetPVarInt(playerid, "MDCPlayerID");

		new szCharge[128];
		if(sscanf(inputtext, "s[128]", szCharge))
		{
			format(szString, sizeof(szString), "SUBMIT CHARGES\n\nยืนยันการแจ้งข้อกล่าวหา: %s\n\n(( อาชญากรรม ))", ReturnNameEx(iPlayerID));
			Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "Police MDC System - เพิ่มข้อกล่าวหา", szString, "Enter", "Escape");
			return 1;
		}
		if(AddCriminalRecord(iPlayerID, szCharge, playerid))
		{
			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "[WANTED] ผู้ต้องหา: %s ผู้รายงาน: %s อาชญากรรม: %s", ReturnNameEx(iPlayerID), ReturnNameEx(playerid), szCharge);
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_RADIO, "[WANTED] ผู้ต้องหา: %s ผู้รายงาน: %s อาชญากรรม: %s", ReturnNameEx(iPlayerID), ReturnNameEx(playerid), szCharge);
			SendClientMessage(playerid, COLOR_WHITE, "แจ้งข้อหาไปยังผู้เล่นเรียบร้อยแล้ว");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "การแจ้งข้อหายังไม่ได้ถูกเพิ่ม");
		}
	}
	DeletePVar(playerid, "MDCPlayerID");
	return 1;
}

Dialog:MDCVehicleID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = INVALID_PLAYER_ID;
		if(sscanf(inputtext, "u", id)) return Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "PLATE SEARCH\n\nกรอกหมายเลขป้ายทะเบียน:\n\n(( Player ID / Firstname_Lastname ))", "Enter", "Exit");
		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "PLATE SEARCH\n\nกรอกหมายเลขป้ายทะเบียน:\n\n(( Player ID / Firstname_Lastname ))\n\nไม่พบผู้เล่นนี้", "Enter", "Exit");
			}
		}
		if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนั้นไม่ได้อยู่บนยานพาหนะ");

		new vehicleid = GetPlayerVehicleID(id), carid = -1;

        if((carid = Car_GetID(vehicleid)) != -1) {
        	format(szString, sizeof(szString), "PLATE SEARCH RESULT\n\nป้ายทะเบียน: %s\nพาหนะรุ่น: %s\nเจ้าของ: %s", CarData[carid][carPlate], g_arrVehicleNames[CarData[carid][carModel]-400], CarData[carid][carOwnerName]);
            SetPVarInt(playerid, "MDCVehicleID", carid);
			Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "Police MDC System - ค้นหาป้ายทะเบียน", szString, "Print", "Cancel");
		}
        else SendClientMessage(playerid, COLOR_GREY, "ผู้เล่นนี้อาจอยู่ในยานพาหนะสาธารณะ (Static)");
	}
	return 1;
}

Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new plate[64], carid = -1;
		if(sscanf(inputtext, "s[64]", plate)) return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "ค้นหาป้ายทะเบียน\n\nกรอกข้อมูลป้ายทะเบียน:", "Enter", "Exit");


		if((carid = FindVehicleByPlate(plate)) == -1 || CarData[carid][carPlateInvisible]) return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "Police MDC System - ค้นหาป้ายทะเบียน", "ค้นหาป้ายทะเบียน\n\nกรอกข้อมูลป้ายทะเบียน:\n\nไม่พบป้ายทะเบียนนี้ในฐานข้อมูล", "Enter", "Exit");

		format(szString, sizeof(szString), "PLATE SEARCH RESULT\n\nป้ายทะเบียน: %s\nพาหนะรุ่น: %s\nเจ้าของ: %s", CarData[carid][carPlate], g_arrVehicleNames[CarData[carid][carModel]-400], CarData[carid][carOwnerName]);

		if(CountVehicleTickets(CarData[carid][carOwnerName]))
	    {
			format(szString, sizeof(szString), "%s\nยานพาหนะคันนี้มีค่าปรับที่ยังไม่ได้จ่าย (/vehiclefines)", szString);
	    }
	    SetPVarInt(playerid, "MDCVehicleID", carid);
		Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "Police MDC System - ค้นหาป้ายทะเบียน", szString, "Print", "Cancel");
	}
	return 1;
}

Dialog:MDCResult3(playerid, response, listitem, inputtext[])
{

	if(response)
	{
		new carid = GetPVarInt(playerid, "MDCVehicleID");
		SendClientMessage(playerid, COLOR_WHITE,"PLATE SEARCH RESULT");
    	SendClientMessage(playerid, COLOR_WHITE,"");
    	SendClientMessageEx(playerid, COLOR_WHITE, "ป้ายทะเบียน: %s", CarData[carid][carPlate]);
    	SendClientMessageEx(playerid, COLOR_WHITE, "พาหนะรุ่น: %s", g_arrVehicleNames[CarData[carid][carModel]-400]);
    	SendClientMessageEx(playerid, COLOR_WHITE, "เจ้าของ: %s", CarData[carid][carOwnerName]);
	}
	GetPVarInt(playerid, "MDCVehicleID");
	return 1;
}

CountVehicleTickets(owner[])
{
	new name[MAX_PLAYER_NAME + 1];
	format(name, MAX_PLAYER_NAME, "%s", owner);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

    format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 1", name);
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}
/*
CountPlayerTickets(playerid)
{
    format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 0", ReturnNameEx(playerid));
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}
*/
CountTickets(playerid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s'", ReturnNameEx(playerid));
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

CountTicketsByName(owner[])
{
	new name[MAX_PLAYER_NAME + 1];
	format(name, MAX_PLAYER_NAME, "%s", owner);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s'", name);
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

/*PlaceVehicleTicket(carid, amount)
{
	for(new i = 0; i != MAX_CAR_TICKETS; i++)
	{
		if(CarData[carid][carTicket][i] == 0)
		{
			CarData[carid][carTicket][i] = amount;
			return 1;
		}
	}
	return 1;
}*/

FindVehicleByPlate(const plate[])
{
	foreach(new i : sv_playercar) {
		if(equal(plate,CarData[i][carPlate])) {
			return i;
		}
	}
	return -1;
}
//==================================Player Tickets==================================//

/*CountPlayerTickets(playerid)
{
	new count = 0;
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++) if(playerData[playerid][pTickets][i] != 0) count++;
	return count;
}

PlacePlayerTicket(playerid, amount)
{
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++)
	{
		if(playerData[playerid][pTickets][i] == 0)
		{
			playerData[playerid][pTickets][i] = amount;
			return 1;
		}
	}
	return 1;
}

AssignPlayerTickets(playerid, tickets[])
{
	new tmp[MAX_PLAYER_TICKETS][32];
	strexplode(tmp, tickets, "|");
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++)
	{
	    playerData[playerid][pTickets][i] = strval(tmp[i]);
	}
}

FormatPlayerTickets(playerid)
{
	new upstr[256];
	new tmp[64];
	for(new b=0;b!=MAX_PLAYER_TICKETS;b++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",playerData[playerid][pTickets][b]);
		else
			format(tmp,sizeof(tmp),"|%d",playerData[playerid][pTickets][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return upstr;
}*/

//==================================Player Tickets==================================//

AddCriminalRecord(playerid, szCharge[], iOfficer)
{
	if(strlen(szCharge) < 5)
	{
		SendClientMessage(iOfficer, COLOR_RED, "คุณต้องป้อนอักขระมากกว่า 5 ตัว");
		return 0;
	}
	else
	{
		format(XLQuery, sizeof(XLQuery),"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES('%s', '%s', '%s', '%s')", ReturnPlayerName(playerid), szCharge, ReturnDateTime(1), ReturnPlayerName(iOfficer));
		mysql_query(dbCon, XLQuery);
		return 1;
	}
}

CMD:arrest(playerid, params[])
{
	new id, cell, time, fine;

	if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {
		if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

		if(IsPlayerInRangeOfPoint(playerid, 6.0, 268.0125,82.7646,1001.0468)) { // LSPD
			if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/arrest [ไอดีผู้เล่น/ชื่อบางส่วน] [cell(1-3)] [time(minutes)] [fine]");
			if(id == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]{ddd}", maskid);
				if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถขังตัวเองได้");
			if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			if(cell < 1 || cell > 3) return SendClientMessage(playerid, COLOR_GRAD2, "ห้องขังต้องไม่ต่ำกว่า 1 หรือมากกว่า 3");
			if(fine < 0 || fine > 50000) return SendClientMessage(playerid, COLOR_GRAD2, "ค่าปรับต้องไม่เกิน $50,000 หรือต่ำกว่า $0");
			if(time < 1 || time > 240) return SendClientMessage(playerid, COLOR_GRAD2, "เวลาต้องไม่มากกว่า 240 นาทีหรือต่ำกว่า 1 นาที");
			if(playerData[id][pJailed] == 2 || playerData[id][pPrisonDept] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นได้ถูกจับแล้ว");

		    bf_off(player_bf[id],PLAYER_CUFFED);
		    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		    RemovePlayerAttachedObject(id, FREESLOT9);

			playerData[id][pCash] -= fine;
			FullResetPlayerWeapons(id);
			playerData[id][pJailTime2] = time * 60;
			PutPlayerInCell(id, cell);
			playerData[id][pJailed] = 2;
			playerData[id][pArrested] += 1;

			TurnOffPhone(id);

			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendClientMessageEx(id, COLOR_LIGHTRED, "[ ! ] จ่ายค่าปรับ $%d", fine, time);
			SendClientMessage(id, COLOR_LIGHTRED, "[ ! ] คำเตือน: คุณอยู่ในคุกดังนั้นโทรศัพท์ของคุณจึงถูกปิดและอย่าลืมเปิดเครื่องเมื่อออกจากคุก");

			SetPVarString(playerid, "ArrestLocation", "ห้องขัง");
			SetLastArrest(playerid, id, time);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 6.0, 268.9580,1353.6163,10.5859)) { // LSPD Vinewood
			if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/arrest [ไอดีผู้เล่น/ชื่อบางส่วน] [cell(1-3)] [time(minutes)] [fine]");
			if(id == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]{ddd}", maskid);
				if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถขังตัวเองได้");
			if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			if(cell < 1 || cell > 3) return SendClientMessage(playerid, COLOR_GRAD2, "ห้องขังต้องไม่ต่ำกว่า 1 หรือมากกว่า 3");
			if(fine < 0 || fine > 50000) return SendClientMessage(playerid, COLOR_GRAD2, "ค่าปรับต้องไม่เกิน $50,000 หรือต่ำกว่า $0");
			if(time < 1 || time > 240) return SendClientMessage(playerid, COLOR_GRAD2, "เวลาต้องไม่มากกว่า 240 นาทีหรือต่ำกว่า 1 นาที");
			if(playerData[id][pJailed] == 2 || playerData[id][pPrisonDept] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นได้ถูกจับแล้ว");

		    bf_off(player_bf[id],PLAYER_CUFFED);
		    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		    RemovePlayerAttachedObject(id, FREESLOT9);

			playerData[id][pCash] -= fine;
			FullResetPlayerWeapons(id);
			playerData[id][pJailTime2] = time * 60;
			PutPlayerInCell3(id, cell);
			playerData[id][pJailed] = 2;
			playerData[id][pArrested] += 1;

			TurnOffPhone(id);

			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendClientMessageEx(id, COLOR_LIGHTRED, "[ ! ] จ่ายค่าปรับ $%d", fine, time);
			SendClientMessage(id, COLOR_LIGHTRED, "[ ! ] คำเตือน: คุณอยู่ในคุกดังนั้นโทรศัพท์ของคุณจึงถูกปิดและอย่าลืมเปิดเครื่องเมื่อออกจากคุก");

			SetPVarString(playerid, "ArrestLocation", "ห้องขัง");
			SetLastArrest(playerid, id, time);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 6.0, -840.8911,577.5220,908.7812)) { // SASD
			if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/arrest [ไอดีผู้เล่น/ชื่อบางส่วน] [cell(1-6)] [time(minutes)] [fine]");
			if(id == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]{ddd}", maskid);
				if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถขังตัวเองได้");
			if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			if(cell < 1 || cell > 6) return SendClientMessage(playerid, COLOR_GRAD2, "ห้องขังต้องไม่ต่ำกว่า 1 หรือมากกว่า 6");
			if(fine < 0 || fine > 50000) return SendClientMessage(playerid, COLOR_GRAD2, "ค่าปรับต้องไม่เกิน $50,000 หรือต่ำกว่า $0");
			if(time < 1 || time > 240) return SendClientMessage(playerid, COLOR_GRAD2, "เวลาต้องไม่มากกว่า 240 นาทีหรือต่ำกว่า 1 นาที");
			if(playerData[id][pJailed] == 2 || playerData[id][pPrisonDept] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นได้ถูกจับแล้ว");

		    bf_off(player_bf[id],PLAYER_CUFFED);
		    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		    RemovePlayerAttachedObject(id, FREESLOT9);

			playerData[id][pCash] -= fine;
			FullResetPlayerWeapons(id);
			playerData[id][pJailTime2] = time * 60;
			PutPlayerInCell(id, 4 + cell); // 1-4 LSPD Arrest
			playerData[id][pJailed] = 2;
			playerData[id][pArrested] += 1;

			SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendFactionMessage(FACTION_TYPE_SASD, COLOR_LIGHTRED, "[Jail] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
			SendClientMessageEx(id, COLOR_LIGHTRED, "[ ! ] จ่ายค่าปรับ $%d", fine, time);
			SendClientMessage(id, COLOR_LIGHTRED, "[ ! ] คำเตือน: คุณอยู่ในคุกดังนั้นโทรศัพท์ของคุณจึงถูกปิดและอย่าลืมเปิดเครื่องเมื่อออกจากคุก");

			SetPVarString(playerid, "ArrestLocation", "ห้องขัง");
			SetLastArrest(playerid, id, time);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่หน้าห้องขัง");
	}
	else if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD || GetFactionType(playerid) == FACTION_TYPE_SADOC) {
	
		if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

		if(IsPlayerInRangeOfPoint(playerid, 8.0, 252.5029,78.5315,902.4453)) { // SAFC
			if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/arrest [ไอดีผู้เล่น/ชื่อบางส่วน] [department (1=A,2=B)] [time(minutes)] [fine]");
			if(id == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]{ddd}", maskid);
				if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถขังตัวเองได้");
			if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

			if(cell < 1 || cell > 2) return SendClientMessage(playerid, COLOR_GRAD2, "หมายเลขเรือนจำต้องอยู่ในระหว่าง 1 และ 2 เท่านั้น");
            if(fine < 0 || fine > 100000) return SendClientMessage(playerid, COLOR_GRAD2, "ค่าปรับต้องไม่เกิน $100,000 หรือต่ำกว่า $0");
			if(time < 60 || time > 1200) return SendClientMessage(playerid, COLOR_GRAD2, "เวลาต้องไม่มากกว่า 1200 นาทีหรือต่ำกว่า 60 นาที");

			if(playerData[id][pJailed] == 2 || playerData[id][pPrisonDept] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นได้ถูกจับแล้ว");

		    bf_off(player_bf[id],PLAYER_CUFFED);
		    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		    RemovePlayerAttachedObject(id, FREESLOT9);

            playerData[id][pCash] -= fine;
			FullResetPlayerWeapons(id);
			playerData[id][pPrisonDept] = cell;
			playerData[id][pPrisonCell] = -1;
			playerData[id][pPrisonTime] = time * 60;
			playerData[id][pPrisoned] += 1;

            SendFactionMessage(FACTION_TYPE_SADOC, COLOR_LIGHTRED, "[Prison] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnPlayerName(playerid), ReturnPlayerName(id), time);
			SendClientMessageEx(id, COLOR_LIGHTRED, "[ ! ] จ่ายค่าปรับ $%d", fine, time);
			SendClientMessage(id, COLOR_LIGHTRED, "[ ! ] คำเตือน: คุณอยู่ในคุกดังนั้นโทรศัพท์ของคุณจึงถูกปิดและอย่าลืมเปิดเครื่องเมื่อออกจากคุก");

			AssignToCell(id);
            PutPlayerInCell2(id);
            
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในห้องสอบประวัติ");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	/*else if(IsPlayerInRangeOfPoint(playerid, 6.0, 227.4311,114.2517,999.0156)) { //SASD
		if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/arrest [ไอดีผู้เล่น/ชื่อบางส่วน] [cell(1-8)] [time(minutes)] [fine]");
		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{ddd}", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			}
		}
		if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถขังตัวเองได้");
		if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

		if(cell < 1 || cell > 8) return SendClientMessage(playerid, COLOR_GRAD2, "ห้องขังต้องไม่ต่ำกว่า 1 หรือมากกว่า 8");
		if(fine < 0 || fine > 10000) return SendClientMessage(playerid, COLOR_GRAD2, "ค่าปรับต้องไม่เกิน $10,000 หรือต่ำกว่า $0");
		if(time < 1 || time > 120) return SendClientMessage(playerid, COLOR_GRAD2, "เวลาต้องไม่มากกว่า 120 นาทีหรือต่ำกว่า 1 นาที");
		if(playerData[id][pJailed] == 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นได้ถูกจับแล้ว");

	    bf_off(player_bf[id],PLAYER_CUFFED);
	    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(id, FREESLOT9);

		playerData[id][pCash] -= fine;
		FullResetPlayerWeapons(id);
		playerData[id][pJailTime2] = time * 60;
		PutPlayerInCell2(id, cell);
		playerData[id][pJailed] = 2;
		playerData[id][pArrested] += 1;

		SendFactionMessage(FACTION_TYPE_POLICE, COLOR_LIGHTRED, "[Arrest] %s %s ได้คุมขัง %s เวลา %d นาที", Faction_GetRank(playerid), ReturnRealName(playerid), ReturnRealName(id), time);
		SendClientMessageEx(id, COLOR_LIGHTRED, "คุณถูกคุมขัง %d นาที ค่าปรับ: %d$", time, fine);

		SetPVarString(playerid, "ArrestLocation", "ห้องขัง");
		SetLastArrest(playerid, id, time);
	}*/
	return 1;
}

PutPlayerInCell3(playerid, cell) // Vinewood HQ
{
	switch(cell)
	{
		case 1:
		{
			SetPlayerPos(playerid, 269.0620,1357.9044,10.5859);
			SetPlayerFacingAngle(playerid, 176.0950);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.2233,86.5434,1001.0468, 269.1558, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
		case 2:
		{
			SetPlayerPos(playerid, 264.3847,1357.2083,10.5859);
			SetPlayerFacingAngle(playerid, 175.7816);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.0338,81.7177,1001.0468, 266.9625, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
		case 3:
		{
			SetPlayerPos(playerid, 259.5309,1357.1501,10.5859);
			SetPlayerFacingAngle(playerid, 176.0950);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.5580,77.3653,1001.0468, 269.1559, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
	}
	return 1;
}

PutPlayerInCell(playerid, cell)
{
	switch(cell)
	{
		case 1:
		{
			SetPlayerPos(playerid, 264.2233,86.5434,1001.0468);
			SetPlayerFacingAngle(playerid, 269.1558);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.2233,86.5434,1001.0468, 269.1558, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
		case 2:
		{
			SetPlayerPos(playerid, 264.0338,81.7177,1001.0468);
			SetPlayerFacingAngle(playerid, 266.9625);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.0338,81.7177,1001.0468, 266.9625, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
		case 3:
		{
			SetPlayerPos(playerid, 264.5580,77.3653,1001.0468);
			SetPlayerFacingAngle(playerid, 269.1559);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 264.5580,77.3653,1001.0468, 269.1559, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
		
		/*case 4:
		{
			SetPlayerPos(playerid, 219.5155,110.9922,999.0156);
			SetPlayerFacingAngle(playerid, 358.5468);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] , 227.3882,110.0966,999.0156, 358.5468, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}*/
		

		case 5: // SASD 1
		{
			SetPlayerPos(playerid, -845.3450,577.2313,908.7870);
			SetPlayerFacingAngle(playerid, 275.4512);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, -845.3450,577.2313,908.7870, 275.4512, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}

		case 6: // SASD 2
		{
			SetPlayerPos(playerid, -845.3626,579.5586,908.7870);
			SetPlayerFacingAngle(playerid, 358.5468);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, -845.3626,579.5586,908.7870, 358.5468, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}

		case 7: // SASD 3
		{
			SetPlayerPos(playerid, -844.8145,583.0132,908.7870);
			SetPlayerFacingAngle(playerid, 269.1876);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, -844.8145,583.0132,908.7870, 269.1876, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}

		case 8: // SASD 4
		{
			SetPlayerPos(playerid, -827.7807,566.7573,908.7870);
			SetPlayerFacingAngle(playerid, 20.4659);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, -827.7807,566.7573,908.7870, 20.4659, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}

		case 9: // SASD 5
		{
			SetPlayerPos(playerid, -832.7029,566.0995,908.7870);
			SetPlayerFacingAngle(playerid, 20.6171);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/,-832.7029,566.0995,908.7870, 20.6171, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}

		case 10: // SASD 6
		{
			SetPlayerPos(playerid, -834.9759,566.1000,908.7870);
			SetPlayerFacingAngle(playerid, 20.0215);
			SetSpawnInfo(playerid, 1,  playerData[playerid][pModel] /*model*/, 227.3882,110.0966,999.0156, 20.0215, -1, -1, -1, -1, -1, -1);

		    playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);
		}
	}

	//SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: คุณถูกกำหนดให้อยู่ห้องขังที่ %d ในตอนนี้", cell);
	return 1;
}

PutPlayerInCell2(playerid)
{
	new temp_dept = 200 + playerData[playerid][pPrisonDept];
	if(temp_dept > 202) temp_dept = 203;
	
    SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, temp_dept);
	playerData[playerid][pInterior] = 1;
	playerData[playerid][pLocal] = temp_dept;
	
	switch(playerData[playerid][pPrisonCell])
	{
		case 0:
		{
			SetPlayerPosEx(playerid, 172.0405,-182.3750,342.9205);
			SetPlayerFacingAngle(playerid, 179.1080); // cell 0
		}
		case 1:
		{
			SetPlayerPosEx(playerid, 167.2728,-182.2620,342.9205);
			SetPlayerFacingAngle(playerid, 178.7947); // cell 1
		}
		case 2:
		{
			SetPlayerPosEx(playerid, 162.3414,-181.5575,342.9205);
			SetPlayerFacingAngle(playerid, 178.4814); // cell 2
		}
		case 3:
		{
			SetPlayerPosEx(playerid, 157.4493,-181.8926,342.9205);
			SetPlayerFacingAngle(playerid, 183.8081); // cell 3
		}
		case 4:
		{
			SetPlayerPosEx(playerid, 171.9041,-202.8426,342.9205);
			SetPlayerFacingAngle(playerid, 358.1679); // cell 4
		}
		case 5:
		{
			SetPlayerPosEx(playerid, 167.0782,-202.8398,342.9205);
			SetPlayerFacingAngle(playerid, 4.4346); // cell 5
		}
		case 6:
		{
			SetPlayerPosEx(playerid, 162.6776,-203.4063,342.9205);
			SetPlayerFacingAngle(playerid, 357.2278); // cell 6
		}
		case 7:
		{
			SetPlayerPosEx(playerid, 157.8358,-203.0285,342.9205);
			SetPlayerFacingAngle(playerid, 359.7345); // cell 7
		}
		case 8:
		{
			SetPlayerPosEx(playerid, 171.7192,-183.2266,346.9168);
			SetPlayerFacingAngle(playerid, 181.7829); // cell 8
		}
		case 9:
		{
			SetPlayerPosEx(playerid, 167.0456,-182.9291,346.9168);
			SetPlayerFacingAngle(playerid, 180.8430); // cell 9
		}
		case 10:
		{
			SetPlayerPosEx(playerid, 162.6063,-183.3871,346.9168);
			SetPlayerFacingAngle(playerid, 183.3497); // cell 10
		}
		case 11:
		{
			SetPlayerPosEx(playerid, 157.6876,-182.5762,346.9168);
			SetPlayerFacingAngle(playerid, 180.5297); // cell 11
		}
		case 12:
		{
			SetPlayerPosEx(playerid, 152.9019,-183.1587,346.9168);
			SetPlayerFacingAngle(playerid, 185.2298); // cell 12
		}
		case 13:
		{
			SetPlayerPosEx(playerid, 148.3396,-183.1470,346.9168);
			SetPlayerFacingAngle(playerid, 178.9630); // cell 13
		}
		case 14:
		{
			SetPlayerPosEx(playerid, 171.7394,-202.5728,346.9168);
			SetPlayerFacingAngle(playerid, 4.1211); // cell 14
		}
		case 15:
		{
			SetPlayerPosEx(playerid, 167.1592,-203.0539,346.9168);
			SetPlayerFacingAngle(playerid, 6.0012); // cell 15
		}
		case 16:
		{
			SetPlayerPosEx(playerid, 162.4370,-202.9480,346.9168);
			SetPlayerFacingAngle(playerid, 6.9411); // cell 16
		}
		case 17:
		{
			SetPlayerPosEx(playerid, 157.9923,-203.0210,346.9168);
			SetPlayerFacingAngle(playerid, 0.9878); // cell 17
		}
		case 18:
		{
			SetPlayerPosEx(playerid, 153.0696,-202.5837,346.9168);
			SetPlayerFacingAngle(playerid, 358.7944); // cell 18
		}
		case 19:
		{
			SetPlayerPosEx(playerid, 148.3863,-202.7953,346.9168);
			SetPlayerFacingAngle(playerid, 0.0477); // cell 19
		}
	}
	
	return 1;
}

FullResetPlayerWeapons(playerid) {

	playerData[playerid][pGun1] = 0, playerData[playerid][pAmmo1] = 0;
	playerData[playerid][pGun2] = 0, playerData[playerid][pAmmo2] = 0;
	playerData[playerid][pGun3] = 0, playerData[playerid][pAmmo3] = 0;

	playerData[playerid][pPLicense]=0;
	playerData[playerid][pSLicense]=0;

	ResetWeapons(playerid);
}

CMD:tackle(playerid, params[]) {
	if(GetPVarType(playerid, "TacklingMode")) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"โหมดการเข้าปะทะถูกปิด");
		DeletePVar(playerid, "TacklingMode");
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] "EMBED_WHITE"โหมดการเข้าปะทะถูกเปิด");
		SendClientMessage(playerid, COLOR_LIGHTRED, "หากคุณชกใครสักคน มันจะเป็นการพยายามเข้าปะทะ");
		SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นที่คุณชกจะได้รับข้อความ แสดงให้เห็นการพยายามที่จะเข้าปะทะนี้");
		SendClientMessage(playerid, COLOR_LIGHTRED, "อารมณ์จะถูกส่งไปยังแชทผู้เล่นอื่นเพื่อแจ้งเตือนเกี่ยวกับการพยายาม");
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจะถูกบังคับให้เล่นอนิเมชั่นกระโดดน้ำเพื่อป้องกันการพิมพ์คำสั่งผิดพลาด");
		SendClientMessage(playerid, COLOR_LIGHTRED, "หากผู้เล่นนั้นไม่เล่นบทการเข้าปะทะ รายงานภายในเกมได้เลย");
		SetPVarInt(playerid, "TacklingMode", 1);
	}
	return 1;
}

CMD:tazer(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

	if(TazerActive{playerid})
	{
		TazerActive{playerid} = false;
		RemoveWeapon(playerid, 23);
		if(GetPVarInt(playerid, "WeaponSlot2")) GivePlayerWeaponEx(playerid, 24, GetPVarInt(playerid, "WeaponSlot2"));
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s เก็บปืนไฟฟ้าเทเซอร์ของเขาเข้าไปในซองหนัง", ReturnRealName(playerid));
		DeletePVar(playerid, "WeaponSlot2");
	}
	else
	{
		TazerActive{playerid} = true;
		if(playerData[playerid][pAmmo][2]) {
			SetPVarInt(playerid, "WeaponSlot2", playerData[playerid][pAmmo][2]);
		}
		GivePlayerWeaponEx(playerid, 23, 999999);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s คว้าปืนไฟฟ้าเทเซอร์ออกมาจากซองหนัง", ReturnRealName(playerid));
	}
	return 1;
}

CMD:rubberbullets(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

	if(BeanbagActive{playerid})
	{
		BeanbagActive{playerid} = false;
		SetPlayerArmedWeapon(playerid, 0);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s เก็บเรมิงตันไว้ด้านหลังของเขา", ReturnRealName(playerid));
	}
	else if(GetPlayerWeapon(playerid) == 25)
	{
		BeanbagActive{playerid} = true;
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s คว้าเรมิงตัน 870 พร้อมบรรจุกระสุนยาง", ReturnRealName(playerid));
		SendClientMessage(playerid, COLOR_YELLOW,"SERVER: คุณเปลี่ยนเป็นกระสุนยางแล้ว");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "คุณจำเป็นต้องมี Remington 870 ในมือเพื่อให้ได้ใช้กระสุนยาง");

	return 1;
}

/*CMD:vehiclefine(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	new plate[64],amount;
	if(sscanf(params,"s[64]d",plate, amount)) return SendSyntaxMessage(playerid, "/vehiclefine [Vehicle Plate] [Amount($1,000-$4,000)]");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

	new carid = -1;

	if((carid = FindVehicleByPlate(plate)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบยานพาหนะ");

	if(amount < 1000 || amount > 4000) return SendClientMessage(playerid, COLOR_LIGHTRED, "จำนวนต้องอยู่ในระหว่าง $1,000 ถึง $4,000");

	if(CountVehicleTickets(carid) >= 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะคันนี้มีค่าปรับเต็มจำนวนแล้ว (10)");


	SendClientMessageEx(playerid, COLOR_WHITE, "คุณได้เขียนใบสั่ง %s ให้กับยานพาหนะคันนี้เรียบร้อยแล้ว", FormatNumber(amount));
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s เขียนใบสั่ง %s", ReturnRealName(playerid), FormatNumber(amount));

	PlaceVehicleTicket(carid, amount);
	return 1;
}*/

/*CMD:vehiclefines(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid), string[256];

 	if(playerData[playerid][pPCarkey] != 9999 && CarData[playerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[playerData[playerid][pPCarkey]][carOwner] == playerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i != MAX_CAR_TICKETS; i++)
		{
			if(CarData[playerData[playerid][pPCarkey]][carTicket][i] != 0) format(string, sizeof(string), "%s(ใบสั่ง %d) ราคา: $%d\n", string, i, CarData[playerData[playerid][pPCarkey]][carTicket][i]);
		}

		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Vehicle Tickets", string, "Ok", "Cancel");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะที่ถูกเรียก");

	return 1;
}*/

/*AssignVehicleTickets(vehicleid, tickets[])
{
	new tmp[MAX_CAR_TICKETS][32];
	strexplode(tmp, tickets, "|");
	for(new i = 0; i != MAX_CAR_TICKETS; i ++)
	{
	    CarData[vehicleid][carTicket][i] = strval(tmp[i]);
	}
}

FormatVehicleTickets(vehicleid)
{
	new upstr[256];
	new tmp[64];
	for(new b = 0; b != MAX_CAR_TICKETS; b ++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",CarData[vehicleid][carTicket][b]);
		else
			format(tmp,sizeof(tmp),"|%d",CarData[vehicleid][carTicket][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return upstr;
}*/

CMD:fine(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	new userid,amount,reason[64];
	if(sscanf(params,"uds[64]",userid, amount, reason)) return SendSyntaxMessage(playerid, "/fine [ไอดีผู้เล่น/ชื่อบางส่วน] [จำนวน] [reason]");
	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[64]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	//if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED,"   คุณไม่สามารถเขียนค่าปรับให้ตัวเองได้");
    if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD1,"ค่าปรับต้องมากกว่า 0");
	//if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");
	if(CountTickets(userid) == MAX_PLAYER_TICKETS) return SendClientMessage(playerid, COLOR_LIGHTRED,"ผู้เล่นนี้มีค่าปรับเต็มจำนวนแล้ว (10)");

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s เขียนค่าปรับ %s ให้กับ %s เนื่องจาก '%s'", ReturnRealName(playerid), FormatNumber(amount), ReturnRealName(userid), reason);
    SendClientMessageEx(playerid, COLOR_PURPLE, "[ ! ] คุณถูกปรับโดย %s เนื่องจาก '%s' ดูได้ที่ /fines", ReturnRealName(playerid), reason);

	PlacePlayerFine(userid, playerid, amount, reason);
	return 1;
}

CMD:fines(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) {

		if(!ViewPlayerFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีค่าปรับ!");
	}
	else
	{
		new userid;
		if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/fines [ไอดีผู้เล่น/ชื่อบางส่วน]");

        if(userid == playerid) {
			if(!ViewPlayerFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีค่าปรับ!");
        }
        else {

            if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if(!ViewPlayerFine(playerid, userid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนี้ไม่มีค่าปรับ!");
		}
	}
	return 1;
}

CMD:vehiclefine(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	new plate[64],amount,reason[64];
	if(sscanf(params,"s[64]ds[64]", plate, amount, reason)) return SendSyntaxMessage(playerid, "/vehiclefine [Vehicle Plate] [จำนวน] [reason]");

	new carid = -1;
	if((carid = FindVehicleByPlate(plate)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบป้ายทะเบียนที่ระบุ");
	if(CarData[carid][carOwner] == playerData[playerid][pID]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถเขียนค่าปรับให้ตัวเองได้");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD1,"ค่าปรับต้องมากกว่า 0");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");
	if(CountTicketsByName(CarData[carid][carOwnerName]) == MAX_PLAYER_TICKETS) return SendClientMessage(playerid, COLOR_LIGHTRED,"ผู้เล่นนี้มีค่าปรับเต็มจำนวนแล้ว (10)");

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s ฉีกค่าปรับและวางไว้บนกระจกหน้ารถ %s", ReturnRealName(playerid), g_arrVehicleNames[CarData[carid][carModel] - 400]);

	new other = IsCharacterOnline(CarData[carid][carOwner]);
	if(other != -1) SendClientMessageEx(other, COLOR_PURPLE, "[ ! ] %s ของคุณถูกปรับโดย %s เนื่องจาก '%s' ดูได้ที่ /vehiclefines", g_arrVehicleNames[CarData[carid][carModel] - 400], ReturnRealName(playerid), reason);

	PlaceVehicleFine(carid, playerid, amount, reason);

	return 1;
}

CMD:vehiclefines(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) {

		if(!ViewVehicleFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีค่าปรับ!");
	}
	else
	{
		new userid;
		if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/vehiclefines [ไอดีผู้เล่น/ชื่อบางส่วน]");

        if(userid == playerid) {
			if(!ViewVehicleFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีค่าปรับ!");
        }
        else {

            if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
				}
			}
			if(!ViewVehicleFine(playerid, userid)) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนี้ไม่มีค่าปรับ!");
		}
	}
	return 1;
}

PlacePlayerFine(playerid, copid, price, const reason[]) {

	new query[512], clean_reason[64];
	//new exp = gettime() + 259200;

	mysql_escape_string(reason,clean_reason);

	format(query, sizeof(query), "INSERT INTO `fines` (`cop`, `addressee`, `agency`, `price`, `reason`, `type`) VALUES ('%s', '%s', '%s', '%d', '%s', '%d')", ReturnNameEx(copid), ReturnNameEx(playerid), Faction_GetName(copid), price, clean_reason, 0);
	mysql_query(dbCon, query);

	return 1;
}

PlaceVehicleFine(carid, copid, price, const reason[]) {

	new query[512], clean_reason[64], name[MAX_PLAYER_NAME + 1];
	//new exp = gettime() + 259200;

	mysql_escape_string(reason,clean_reason);

	format(name, MAX_PLAYER_NAME, "%s", CarData[carid][carOwnerName]);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	format(query, sizeof(query), "INSERT INTO `fines` (`cop`, `addressee`, `agency`, `price`, `reason`, `type`) VALUES ('%s', '%s', '%s', '%d', '%s', '%d')", ReturnNameEx(copid), name, Faction_GetName(copid), price, clean_reason, CarData[carid][carSID]);
	mysql_query(dbCon, query);

	return 1;
}

ViewPlayerFine(playerid, targetid) {

	new str[1024];

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 0", ReturnNameEx(targetid));
	mysql_query(dbCon, szQuery);

	if(cache_num_rows()) {

		new
			rows,
			fineid,
			fineprice,
			finereason[64],
			menu[10];

		cache_get_row_count(rows);

		for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_TICKETS)
		{
			cache_get_value_index_int(i, 0, fineid);
			cache_get_value_index_int(i, 5, fineprice);
			cache_get_value_index(i, 6, finereason);

			format(str, sizeof(str), "%s"EMBED_WHITE"Fine #%03d [{7E98B6}$%d"EMBED_WHITE"] เนื่องจาก '%s'\n" ,str, fineid, fineprice, finereason);
			Dialog_Show(playerid,PlayerFines,DIALOG_STYLE_LIST,"Fine List",str,"Details","Close");

			format(menu, 10, "menu%d", i);
			SetPVarInt(playerid, menu, fineid);

			SetPVarInt(playerid, "PlayerFinesID", targetid);
		}
		return 1;
	}
	return 0;
}

ViewVehicleFine(playerid, targetid) {

	new str[1024];

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` != 0", ReturnNameEx(targetid));
	mysql_query(dbCon, szQuery);

	if(cache_num_rows()) {

		new
			rows,
			fineid,
			fineprice,
			finereason[64],
			menu[10];

		cache_get_row_count(rows);

		for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_TICKETS)
		{
			cache_get_value_index_int(i, 0, fineid);
			cache_get_value_index_int(i, 5, fineprice);
			cache_get_value_index(i, 6, finereason);

			format(str, sizeof(str), "%s"EMBED_WHITE"Fine #%03d [{7E98B6}$%d"EMBED_WHITE"] เนื่องจาก '%s'\n" ,str, fineid, fineprice, finereason);
			Dialog_Show(playerid,VehicleFines,DIALOG_STYLE_LIST,"Fine List",str,"Details","Close");

			format(menu, 10, "menu%d", i);
			SetPVarInt(playerid, menu, fineid);

			SetPVarInt(playerid, "PlayerFinesID", targetid);
		}
		return 1;
	}
	return 0;
}

Dialog:VehicleFines(playerid, response, listitem, inputtext[])
{
	if(response) {
	    new menu[10], str[512], targetid = GetPVarInt(playerid, "PlayerFinesID");
	    format(menu, 10, "menu%d", listitem);
	    new rows = GetPVarInt(playerid, menu);

		format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `id` = %d AND `type` != 0", ReturnNameEx(targetid), rows);
		mysql_query(dbCon, szQuery);

		if(cache_num_rows()) {

			new
				fineid,
				fineagency[64],
				fineaddressee[24],
				fineissuer[24],
				fineprice,
				finedate[64],
				finereason[64];

			cache_get_value_index_int(0, 0, fineid);
			cache_get_value_index(0, 1, fineissuer);
			cache_get_value_index(0, 2, fineaddressee);
			cache_get_value_index(0, 3, fineagency);
			cache_get_value_index(0, 4, finedate);
			cache_get_value_index_int(0, 5, fineprice);
			cache_get_value_index(0, 6, finereason);

			if(targetid == playerid) {
			    SetPVarInt(playerid, "PlayerFinesChooseID", fineid);
			    SetPVarInt(playerid, "PlayerFinesPrice", fineprice);
			    format(str, sizeof(str), "หน่วยงาน:\t%s\nผู้รับ:\t\t%s\nผู้ออกบัตร:\t%s\n\nจำนวน:\t\t$%d\nสาเหตุ:\t\t%s\nวันที่:\t\t%s\n\nคุณมีเวลา 72 ชั่วโมงสำหรับการจ่ายค่าปรับ" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Fine Details",str,"Pay","Close");
			}
			else {
				format(str, sizeof(str), "หน่วยงาน:\t%s\nผู้รับ:\t\t%s\nผู้ออกบัตร:\t%s\n\nจำนวน:\t\t$%d\nสาเหตุ:\t\t%s\nวันที่:\t\t%s" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,ShowOnly,DIALOG_STYLE_MSGBOX,"Fine Details",str,"Close","");
			}
			return 1;
		}
	}
	return 1;
}

Dialog:PlayerFines(playerid, response, listitem, inputtext[])
{
	if(response) {
	    new menu[10], str[512], targetid = GetPVarInt(playerid, "PlayerFinesID");
	    format(menu, 10, "menu%d", listitem);
	    new rows = GetPVarInt(playerid, menu);

		format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `id` = %d AND `type` = 0", ReturnNameEx(targetid), rows);
		mysql_query(dbCon, szQuery);

		if(cache_num_rows()) {

			new
				fineid,
				fineagency[64],
				fineaddressee[24],
				fineissuer[24],
				fineprice,
				finedate[64],
				finereason[64];

			cache_get_value_index_int(0, 0, fineid);
			cache_get_value_index(0, 1, fineissuer);
			cache_get_value_index(0, 2, fineaddressee);
			cache_get_value_index(0, 3, fineagency);
			cache_get_value_index(0, 4, finedate);
			cache_get_value_index_int(0, 5, fineprice);
			cache_get_value_index(0, 6, finereason);

			if(targetid == playerid) {
			    SetPVarInt(playerid, "PlayerFinesChooseID", fineid);
			    SetPVarInt(playerid, "PlayerFinesPrice", fineprice);
			    format(str, sizeof(str), "หน่วยงาน:\t%s\nผู้รับ:\t\t%s\nผู้ออกบัตร:\t%s\n\nจำนวน:\t\t$%d\nสาเหตุ:\t\t%s\nวันที่:\t\t%s\n\nคุณมีเวลา 72 ชั่วโมงสำหรับการจ่ายค่าปรับ" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Fine Details",str,"Pay","Close");
			}
			else {
				format(str, sizeof(str), "หน่วยงาน:\t%s\nผู้รับ:\t\t%s\nผู้ออกบัตร:\t%s\n\nจำนวน:\t\t$%d\nสาเหตุ:\t\t%s\nวันที่:\t\t%s" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,ShowOnly,DIALOG_STYLE_MSGBOX,"Fine Details",str,"Close","");
			}
			return 1;
		}
	}
	return 1;
}

Dialog:PayFines(playerid, response, listitem, inputtext[])
{
    if(response) {

		if(playerData[playerid][pLocal] != 102) return SendClientMessage(playerid, COLOR_YELLOW, "คุณไม่ได้อยู่ที่ Los Santos HQ");

        new fineid = GetPVarInt(playerid,"PlayerFinesChooseID");
        new price = GetPVarInt(playerid,"PlayerFinesPrice");

		if(playerData[playerid][pCash] < price) return SendClientMessage(playerid,COLOR_GREY,"คุณไม่มีเงินเพียงพอที่จะจ่ายค่าปรับนี้!");

	    playerData[playerid][pCash]-=price;

	    SendClientMessageEx(playerid, COLOR_PURPLE, "[ ! ] คุณได้จ่ายค่าปรับ #%d ในราคา: $%d", fineid, price);

		format(szQuery, sizeof(szQuery), "DELETE FROM `fines` WHERE `id` = %d", fineid);
	    mysql_query(dbCon, szQuery);
    }
	DeletePVar(playerid, "PlayerFinesChooseID");
	DeletePVar(playerid, "PlayerFinesPrice");

	return 1;
}

CMD:checkplate(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

	new bool:success;

	foreach(new i : sv_playercar)
	{
		if(IsPlayerNearBoot(playerid, CarData[i][carVehicle]))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "* กำลังตรวจสอบ... พบคำตอบแล้ว: %s", CarData[i][carPlate]);
	       	success = true;
			return 1;
		}
		//else return SendClientMessage(playerid, COLOR_GREY,"คุณไม่ได้อยู่ตรงป้ายทะเบียนของยานพาหนะ..");
	}

	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, " ..ไม่มียานพาหนะผู้เล่นรอบ ๆ ตัวคุณ");

	return 1;
}

CMD:fixsiren(playerid, params[])
{
	new vehicle = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");
    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับยานพาหนะ");

	DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
	SendClientMessage(playerid, COLOR_GRAD1, "คุณได้ทำการแก้ไขบัคเกี่ยวกับ Siren ที่ติดมาบนรถคุณแล้ว");
	return 1;
}

CMD:siren(playerid, params[])
{
	new factiontype = GetFactionType(playerid);

	if (factiontype != FACTION_TYPE_POLICE && factiontype != FACTION_TYPE_SASD && factiontype != FACTION_TYPE_MEDIC && factiontype != FACTION_TYPE_GOV) return SendClientMessage(playerid, COLOR_LIGHTRED, "กลุ่มของคุณไม่ได้รับอนุณาตให้ใช้คำสั่งนี้");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับยานพาหนะ");

    new vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle);

	if(factiontype == FACTION_TYPE_POLICE || factiontype == FACTION_TYPE_SASD)
	{
		if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579) return SendClientMessage(playerid, COLOR_GREY, "ไซเรนรองรับเฉพาะยานพาหนะรุ่น Sultan/Bullet/Towtruck/Premier/Huntley");

		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			if(model == 560)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.225000,0.750000,0.449999, 0.000000, 0.000000, 0.000000);
			}
			if(model == 541)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 426)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 525)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
			}
			if(model == 579)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.679999, 0.479999, 0.734999, 0.000000, 0.000000, 0.000000);
			}
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณติดไซเรน");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณถอดไซเรนออก");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
	else if(factiontype == FACTION_TYPE_MEDIC)
	{
		// if(model != 489) return SendClientMessage(playerid, COLOR_GREY, "ไซเรนรองรับเฉพาะยานพาหนะรุ่น Rancher FD");
		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณติดไซเรน");
			CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณถอดไซเรนออก");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
    else if(factiontype == FACTION_TYPE_GOV)
	{
		if(model != 560) return SendClientMessage(playerid, COLOR_GREY, "ไซเรนรองรับเฉพาะยานพาหนะรุ่น  Sultan");
		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณติดไซเรน");
			CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณถอดไซเรนออก");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
	return 1;
}

CMD:siren2(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับยานพาหนะ");

    new vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle);

	if(model != 560 && model != 426) return SendClientMessage(playerid, COLOR_GREY, "ไซเรนรองรับเฉพาะยานพาหนะรุ่น Sultan/Premier");

	new Float:vposX, Float:vposY, Float:vposZ, Float:vposA;
	new engine, lights, alarm, doors, bonnet, boot, objective;

	if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren2]))
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณติดไซเรน");
		if(model == 560)
		{
			CoreVehicles[vehicle][vSiren2] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren2], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
		}
		if(model == 426)
		{
			CoreVehicles[vehicle][vSiren2] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren2], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
		}



		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicle) {

				GetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);
				GetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				GetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);

				new temp_damages[4], Float:temp_vhealth;
				GetVehicleDamageStatus(vehicleVariables[i][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);
				GetVehicleHealth(vehicleVariables[i][vVehicleScriptID], temp_vhealth);
				
                DestroyVehicle(vehicleVariables[i][vVehicleScriptID]);
                vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000, 1);

				LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
				SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);

				SetVehicleHealth(vehicleVariables[i][vVehicleScriptID], temp_vhealth);
				SetVehicleDamageStatus(vehicleVariables[i][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);
				
				
				if(vehicleVariables[i][vVehicleFaction] != -1) {
					//SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[i][vVehicleFaction]][factionName]));
					SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);
				}
				else {
					new plate[8];
					format(plate, 8, "%s", RandomVehiclePlate());
					SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], plate);
				}

				SetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				SetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);
				SetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);

                PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);

				return 1;
			}
		}

		for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == vehicle)
		{

			GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			GetVehiclePos(vehicle, vposX, vposY, vposZ);
			GetVehicleZAngle(vehicle, vposA);


			DestroyVehicle(AdminSpawnedVehicles[i]);
			AdminSpawnedVehicles[i] = CreateVehicle(model, vposX, vposY, vposZ, vposA, -1, -1, -1, 1);
			SetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);

			PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "คุณถอดไซเรนออก");
		DestroyDynamicObject(CoreVehicles[vehicle][vSiren2]);

		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicle) {

                GetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);
				GetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				GetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);

				new temp_damages[4], Float:temp_vhealth;
				GetVehicleDamageStatus(vehicleVariables[i][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);
				GetVehicleHealth(vehicleVariables[i][vVehicleScriptID], temp_vhealth);
			
                DestroyVehicle(vehicleVariables[i][vVehicleScriptID]);
                vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000, 0);

				LinkVehicleToInterior(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleInterior]);
				SetVehicleVirtualWorld(vehicleVariables[i][vVehicleScriptID], vehicleVariables[i][vVehicleWorld]);

				SetVehicleHealth(vehicleVariables[i][vVehicleScriptID], temp_vhealth);
				SetVehicleDamageStatus(vehicleVariables[i][vVehicleScriptID], temp_damages[0], temp_damages[1], temp_damages[2], temp_damages[3]);
				
				if(vehicleVariables[i][vVehicleFaction] != -1) {
					//SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[i][vVehicleFaction]][factionName]));
					SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionPlate]);
				}
				else {
					new plate[8];
					format(plate, 8, "%s", RandomVehiclePlate());
					SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], plate);
				}

				SetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				SetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);
                SetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);

                PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);
				return 1;
			}
		}

		for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == vehicle)
		{
		    GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			GetVehiclePos(vehicle, vposX, vposY, vposZ);
			GetVehicleZAngle(vehicle, vposA);

			DestroyVehicle(AdminSpawnedVehicles[i]);
			AdminSpawnedVehicles[i] = CreateVehicle(model, vposX, vposY, vposZ, vposA, -1, -1, -1, 0);
			SetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);
			PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);
			return 1;
		}
	}
	return 1;
}

CMD:siren3(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องเป็นคนขับยานพาหนะ");

    new veh = GetPlayerVehicleID(playerid), type[8];

	if(sscanf(params, "s[8]", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[Usage]: /siren [ตำแหน่ง]");
		SendClientMessage(playerid, COLOR_WHITE, "ตำแหน่ง: ภายใน | หลังคา | ปิด");
		return 1;
	}

	veh = GetPlayerVehicleID(playerid);
	if(!strcmp(type, "ภายใน"))
	{
		if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "พาหนะคันนี้ติดไซเรนแล้ว");
        Siren[veh] = 1;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh],veh, 0.0, 0.75, 0.275, 0.0, 0.1, 0.0);
        return 1;
	}
	else if(!strcmp(type, "หลังคา"))
	{
	    if(Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "พาหนะคันนี้ติดไซเรนแล้ว");
		Siren[veh] = 2;
        SirenObject[veh] = CreateDynamicObject(18646, 10.0, 10.0, 10.0, 0, 0, 0);
        AttachDynamicObjectToVehicle(SirenObject[veh], veh, -0.43, 0.0, 0.785, 0.0, 0.1, 0.0);
        return 1;
	}
	else if(!strcmp(type, "ปิด"))
	{
	    if(!Siren[veh]) return SendClientMessage(playerid, COLOR_GREY, "พาหนะคันนี้ยังไม่ได้ติดไซเรน");
		Siren[veh] = 0;
		DestroyDynamicObject(SirenObject[veh]);
		return 1;
	}
	return 1;
}

CMD:selectobj(playerid)
{
	SelectObject(playerid);
	return 1;
}

/*forward FadeBlood(objectid, alpha);
public FadeBlood(objectid, alpha)
{
    alpha -= 5;

    if(alpha) {
        SetDynamicObjectMaterial(objectid, 0, -1, "none", "none", 0xFF0000 | (alpha << 24));
        SetTimerEx("FadeBlood", 50, false, "ii", objectid, alpha);
    }
    else {
        DestroyDynamicObject(objectid);
    }
}*/

forward DeleteObject(objectid);
public DeleteObject(objectid) DestroyObject(objectid);


ShowPlayerWeapons(playerid, toplayer)
{
	SendClientMessageEx(toplayer, COLOR_GREEN, "______________%s's Weapon Packages:______________", ReturnRealName(playerid));
	for(new i = 0; i < MAX_PLAYER_WEAPON_PACKAGE; i+=3)
	{
		SendClientMessageEx(toplayer, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", i+1,GetWeaponInfo(playerid, i),i+2,GetWeaponInfo(playerid, i+1),i+3, GetWeaponInfo(playerid, i+2));
	}
}

/*ShowPlayerDrugs(playerid, toplayer)
{
	SendClientMessageEx(toplayer, COLOR_GREEN, "______________%s's Drug Packages:______________", ReturnRealName(playerid));
	for(new i = 0; i < MAX_PLAYER_WEAPON_PACKAGE; i+=5)
	{
	    if(i >= 20) SendClientMessageEx(toplayer, COLOR_GRAD3, "[ 21. %s ][ 22. %s ][ 23. %s ][ 24. %s ]",GetDrugInfo(playerid, 20),GetDrugInfo(playerid, 21), GetDrugInfo(playerid, 22), GetDrugInfo(playerid, 23));
		else SendClientMessageEx(toplayer, COLOR_GRAD3, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i+1,GetDrugInfo(playerid, i),i+2,GetDrugInfo(playerid, i+1),i+3, GetDrugInfo(playerid, i+2),i+4, GetDrugInfo(playerid, i+3),i+5, GetDrugInfo(playerid, i+4));
	}
}*/
/*
// DRUG SYSTEM

forward Drugs_Load(playerid);
public Drugs_Load(playerid)
{
    new
	    rows;

	cache_get_row_count(rows);
	
    for(new slot = 0,j = MAX_DRUGS; slot < j; slot ++)
    {
        P_DRUGS[playerid][slot][drugID] = 0;
        P_DRUGS[playerid][slot][Owner] = 0;
        P_DRUGS[playerid][slot][amount] = 0;
        P_DRUGS[playerid][slot][Quality] = 0;
        P_DRUGS[playerid][slot][EffectTime] = 0;
        P_DRUGS[playerid][slot][Addiction] = 0;
        P_DRUGS[playerid][slot][Type] = 0;
    }
    
	for (new i = 0; i < rows; i ++)
	{
		cache_get_value_name_int(i, "ID", P_DRUGS[playerid][i][drugID]);
		cache_get_value_name_float(i, "Amount", P_DRUGS[playerid][i][amount]);
		cache_get_value_name_float(i, "Quality", P_DRUGS[playerid][i][Quality]);
		cache_get_value_name_int(i, "Owner", P_DRUGS[playerid][i][Owner]);
		cache_get_value_name_int(i, "Type", P_DRUGS[playerid][i][Type]);
		cache_get_value_name_int(i, "EffectTime", P_DRUGS[playerid][i][EffectTime]);
		cache_get_value_name_int(i, "Addiction", P_DRUGS[playerid][i][Addiction]);
		cache_get_value_name(i, "Name", P_DRUGS[playerid][i][Name], 129);
		cache_get_value_name(i, "CAS", P_DRUGS[playerid][i][CAS], 29);
		cache_get_value_name(i, "Creator", P_DRUGS[playerid][i][Creator], 128);
	}
	printf("(SQL) %i drugs loaded for %s.", rows, ReturnPlayerName(playerid));
}

RemoveDrugs(playerid, slot)
{
    P_DRUGS[playerid][slot][drugID] = 0;
    P_DRUGS[playerid][slot][Owner] = 0;
    P_DRUGS[playerid][slot][amount] = 0;
    P_DRUGS[playerid][slot][Quality] = 0;
    P_DRUGS[playerid][slot][EffectTime] = 0;
    P_DRUGS[playerid][slot][Addiction] = 0;
    P_DRUGS[playerid][slot][Type] = 0;
	format(szQuery, sizeof(szQuery), "DELETE FROM `rp_drugs` WHERE `ID` = %i AND `Owner` = %i", P_DRUGS[playerid][slot][drugID], Players[playerid][pID]);
	mysql_tquery(dbCon, szQuery);
}

SaveDrugs(playerid, slot)
{
	static
	    queryString[2048];

	if (P_DRUGS[playerid][slot][amount] <= 0.0) return 0;
    if (P_DRUGS[playerid][slot][Owner] != Players[playerid][pID]) return 0;
    
	format(queryString, sizeof(queryString), "UPDATE rp_drugs SET `ID` = %i, `Amount` = '%.1f', `Quality` = '%.2f', `Owner` = '%d', `EffectTime` = '%d', `Addiction` = '%d', `Type` = '%d', `Name` = '%s', `CAS` = '%s', `Creator` = '%s'",
    P_DRUGS[playerid][slot][drugID],
    P_DRUGS[playerid][slot][amount],
    P_DRUGS[playerid][slot][Quality],
    P_DRUGS[playerid][slot][Owner],
    P_DRUGS[playerid][slot][EffectTime],
    P_DRUGS[playerid][slot][Addiction],
    P_DRUGS[playerid][slot][Type],
    P_DRUGS[playerid][slot][Name],
    P_DRUGS[playerid][slot][CAS],
    P_DRUGS[playerid][slot][Creator]
	);
	return mysql_tquery(dbCon, queryString);
}

GetFreeDrugSlot(playerid)
{
	for(new i = 0; i < MAX_DRUGS; i++)
	{
		if(P_DRUGS[playerid][i][drugID] > 0)
			return i;
	}
	return 0;
}


AddDrugs(playerid, name[], cas[], type, Float:amount, Float: quality, effecttime, addiction)
{
	new queryString[1024];
    for(new i = 0,j = MAX_DRUGS; i < j; i ++)
    {
        if(P_DRUGS[playerid][i][amount] > 0) continue;
        else
        {
        
			format(queryString, sizeof(queryString), "INSERT INTO `playerdrugs`(`Name`, `Owner`, `CAS`, `Type`, `Amount`, `Quality`, `EffectTime`, `Addiction`, `Creator`) VALUES ('%s', %d, '%s', %d, '%.1f', '%.2f', %d, %d, '%s')", name, Players[playerid][pID], cas, type, amount, quality, effecttime, addiction, ReturnPlayerName(playerid));
			mysql_tquery(dbCon, queryString);
			
	        P_DRUGS[playerid][i][drugID] = cache_insert_id(gConnection);
		    format(P_DRUGS[playerid][i][Name], 128, name);
		    P_DRUGS[playerid][i][Owner] = Players[playerid][pID];
		    format(P_DRUGS[playerid][i][CAS], 29, cas);
		    P_DRUGS[playerid][i][Type] = type;
		    P_DRUGS[playerid][i][amount] = amount;
		    P_DRUGS[playerid][i][Quality] = quality;
		    P_DRUGS[playerid][i][EffectTime] = effecttime;
		    P_DRUGS[playerid][i][Addiction] = addiction;
		    format(P_DRUGS[playerid][i][Creator], 128, ReturnPlayerName(playerid));
	        break;
        }
    }
	return 1;
}

FormatDrugs(playerid, slot)
{
	new tag[64];
	if(P_DRUGS[playerid][slot][amount] == 0 && (P_DRUGS[playerid][slot][Owner] = Players[playerid][pID])) tag = "Empty";
	else format(tag, sizeof(tag), "%s(%.1fmg)", P_DRUGS[playerid][slot][Name], P_DRUGS[playerid][slot][amount]);
	return tag;
}

ListDrugs(playerid, toplayer)
{
	SendClientMessageEx(toplayer, 0x33AA33FF, "|______________ %s's drugs ______________|", ReturnRealName(playerid));
	for(new i = 0; i < MAX_DRUGS; i+=5)
	{
		SendClientMessageEx(toplayer, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i, FormatDrugs(playerid, i), i+1, FormatDrugs(playerid, i+1), i+2, FormatDrugs(playerid, i+2), i+3, FormatDrugs(playerid, i+3), i+4, FormatDrugs(playerid, i+4));
	}
}

// Chemical
forward Chemical_Load(playerid);
public Chemical_Load(playerid)
{
    new
	    rows;

	cache_get_row_count(rows);
	
    for(new slot = 0,j = MAX_CHEMICAL; slot < j; slot ++)
    {
        P_CHEMICAL[playerid][slot][insertID] = 0;
        P_CHEMICAL[playerid][slot][amount] = 0;
        P_CHEMICAL[playerid][slot][ChemicalID] = 0;
        P_CHEMICAL[playerid][slot][Owner] = 0;
    }
    
	for (new i = 0; i < rows; i ++)
	{
		cache_get_value_name_int(i, "ID", P_CHEMICAL[playerid][i][insertID]);
		cache_get_value_name_float(i, "Amount", P_CHEMICAL[playerid][i][amount]);
		cache_get_value_name_int(i, "Chemical", P_CHEMICAL[playerid][i][ChemicalID]);
		cache_get_value_name_int(i, "Owner", P_CHEMICAL[playerid][i][Owner]);
	}
	printf("(SQL) %i chemical loaded for %s.", rows, ReturnPlayerName(playerid));
}

RemoveChemical(playerid, slot)
{
    P_CHEMICAL[playerid][slot][insertID] = 0;
    P_CHEMICAL[playerid][slot][amount] = 0;
    P_CHEMICAL[playerid][slot][ChemicalID] = 0;
    P_CHEMICAL[playerid][slot][Owner] = 0;
	format(gExecute, sizeof(gExecute), "DELETE FROM `rp_chemical` WHERE `ID` = %i AND `Owner` = %i", P_CHEMICAL[playerid][slot][insertID], Players[playerid][pID]);
	mysql_tquery(dbCon, gExecute);
}

SaveChemical(playerid, slot)
{
	static
	    queryString[1024];

	if (!P_CHEMICAL[playerid][slot][amount]) return 0;
    if (P_CHEMICAL[playerid][slot][Owner] != Players[playerid][pID]) return 0;
    
	format(queryString, sizeof(queryString), "UPDATE rp_chemical SET `ID` = %i, `Amount` = '%.1f', `ChemicalID` = %d, Owner = '%d'",
    P_CHEMICAL[playerid][slot][insertID],
    P_CHEMICAL[playerid][slot][amount],
    P_CHEMICAL[playerid][slot][ChemicalID],
    P_CHEMICAL[playerid][slot][Owner]
	);
	return mysql_tquery(dbCon, queryString);
}

GetFreeChemicalSlot(playerid)
{
	for(new i = 0; i < MAX_CHEMICAL; i++)
	{
		if(P_CHEMICAL[playerid][i][ChemicalID] > 0)
			return i;
	}
	return 0;
}

AddChemical(playerid, chemical, Float:amount)
{
    for(new i = 0,j = MAX_CHEMICAL; i < j; i ++)
    {
        if(P_CHEMICAL[playerid][i][ChemicalID] > 0) continue;
        else
        {
			format(XLQuery, sizeof(XLQuery), "INSERT INTO `rp_chemical`(`Owner`, `Item`, `Amount`) VALUES (%d, %d, '%.1f')", Players[playerid][pID], chemical, amount);
			mysql_tquery(dbCon, XLQuery);
	        P_CHEMICAL[playerid][i][insertID] = cache_insert_id(gConnection);
	        P_CHEMICAL[playerid][i][ChemicalID] = chemical;
	        P_CHEMICAL[playerid][i][amount] = amount;
            P_CHEMICAL[playerid][i][Owner] = Players[playerid][pID];
	        break;
        }
    }
	return 1;
}

FormatChemical(playerid, slot)
{
	new tag[32];
	if(P_CHEMICAL[playerid][slot][amount] == 0 && (P_CHEMICAL[playerid][slot][Owner] = Players[playerid][pID])) tag = "Empty";
	else format(tag, sizeof(tag), "%s(%.1fg)", P_CHEMICAL[playerid][slot][Name], P_CHEMICAL[playerid][slot][amount]);
	return tag;
}

ListChemical(playerid, extra = INVALID_PLAYER_ID)
{
	SendClientMessageEx(toplayer, 0x33AA33FF, "|______________ %s's chemicals ______________|", ReturnRealName(playerid));
	for(new i = 0; i < MAX_CHEMICAL; i+=5)
	{
		SendClientMessageEx(toplayer, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ][ %d. %s ]", i, FormatChemical(playerid, i), i+1, FormatChemical(playerid, i+1), i+2, FormatChemical(playerid, i+2), i+3, FormatChemical(playerid, i+3), i+4, FormatChemical(playerid, i+4));
	}
}


// DRUG SYSTEM */

ShowVehicleWeapons(playerid, carid)
{
	SendClientMessage(playerid, COLOR_GREEN, "______________Vehicle Weapon Packages:______________");
	/*for(new i = 0; i < MAX_CAR_WEAPON_PACKAGE; i+=3)
	{
	    if(i > 18) SendClientMessageEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ]", 19,GetVehicleInfo(carid, 18),20,GetVehicleInfo(carid, 19));
		else SendClientMessageEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ]", i+1,GetVehicleInfo(carid, i),i+2,GetVehicleInfo(carid, i+1),i+3, GetVehicleInfo(carid, i+2));

	}*/
	SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 1,GetVehicleInfo(carid, 0),2,GetVehicleInfo(carid, 1),3, GetVehicleInfo(carid, 2));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 4,GetVehicleInfo(carid, 3),5,GetVehicleInfo(carid, 4),6, GetVehicleInfo(carid, 5));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 7,GetVehicleInfo(carid, 6),8,GetVehicleInfo(carid, 7),9, GetVehicleInfo(carid, 8));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 10,GetVehicleInfo(carid, 9),11,GetVehicleInfo(carid, 10),12, GetVehicleInfo(carid, 11));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 13,GetVehicleInfo(carid, 12),14,GetVehicleInfo(carid, 13),15, GetVehicleInfo(carid, 14));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 16,GetVehicleInfo(carid, 15),17,GetVehicleInfo(carid, 16),18, GetVehicleInfo(carid, 17));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ]", 19,GetVehicleInfo(carid, 18),20,GetVehicleInfo(carid, 19));
}

GetWeaponInfo(playerid, slot)
{
	new info[64];
	if(playerData[playerid][pPackageWP][slot] == 0) info = "Empty";
	else format(info, sizeof(info), "%s (%d/%d)", GetWeaponPackageName(playerData[playerid][pPackageWP][slot]), playerData[playerid][pPackageAmmo][slot], GetWeaponPackage(g_aWeaponSlots[playerData[playerid][pPackageWP][slot]]));
	return info;
}

/*GetDrugInfo(playerid, slot) {
	new info[64];
	if(playerData[playerid][pDrug][slot] == 0) info = "Empty";
	else format(info, sizeof(info), "%s(%d)", g_arrSDrugNames[playerData[playerid][pDrug][slot]], playerData[playerid][pDrugAmount][slot]);
	return info;
}*/

GetVehicleInfo(carid, slot)
{
	new info[64];
	if(CarData[carid][carPackageWP][slot] == 0) info = "Empty";
	else format(info, sizeof(info), "%s (%d/%d)", GetWeaponPackageName(CarData[carid][carPackageWP][slot]), CarData[carid][carPackageAmmo][slot], GetWeaponPackage(g_aWeaponSlots[CarData[carid][carPackageWP][slot]]));
	return info;
}

GetWeaponPackage(slot) {
    new max_ammo = -1;
	switch(slot) {
	    //case 0,1,10,8: max_ammo = 20;
	    case 4, 5: max_ammo = 1500;
	    case 3,6: max_ammo = 1000;
	    case 2: max_ammo = 5000;
	    default: max_ammo = 20;
	}
	return max_ammo;
}

FormatPlayerWeapons(playerid)
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_PLAYER_WEAPON_PACKAGE; a++)
	{
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",playerData[playerid][pPackageWP][a],playerData[playerid][pPackageAmmo][a]);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",playerData[playerid][pPackageWP][a],playerData[playerid][pPackageAmmo][a]);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignPlayerWeapons(playerid, const str[])
{
	new wtmp[MAX_PLAYER_WEAPON_PACKAGE][64];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_PLAYER_WEAPON_PACKAGE; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		strexplode(wtmp2,wtmp[z],"=");
		playerData[playerid][pPackageWP][z] = strval(wtmp2[0]);
		playerData[playerid][pPackageAmmo][z] = strval(wtmp2[1]);
	}
}

AssignPlayerDrugAddictions(playerid, const str[])
{
	new wtmp[MAX_DRUGS][32];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_DRUGS; ++z)
	{
		playerData[playerid][pDrugAddiction][z] = strval(wtmp[z]);
	}
}


FormatVehicleWeapons(carid)
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_CAR_WEAPON_PACKAGE; a++)
	{
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",CarData[carid][carPackageWP][a],CarData[carid][carPackageAmmo][a]);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",CarData[carid][carPackageWP][a],CarData[carid][carPackageAmmo][a]);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignVehicleWeapons(carid, const str[])
{
	new wtmp[MAX_CAR_WEAPON_PACKAGE][64];

	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPON_PACKAGE; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		strexplode(wtmp2,wtmp[z],"=");
		CarData[carid][carPackageWP][z] = strval(wtmp2[0]);
		CarData[carid][carPackageAmmo][z] = strval(wtmp2[1]);
	}
}

CMD:mypackage(playerid, params[]) {
	new userid;

	if (sscanf(params, "u", userid))
	{
	    ShowPlayerWeapons(playerid, playerid);
	    return 1;
	}

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");


    ShowPlayerWeapons(playerid, userid);

	return 1;
}


alias:putweapon("pw");
CMD:putweapon(playerid, params[]) {

	new slot, vehslot;
	if (sscanf(params, "dd", slot, vehslot))
	    return SendSyntaxMessage(playerid, "/putweapon [ช่อง] [vehicle slot]");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");


	new vehicleid = GetPlayerVehicleID(playerid);

	if(slot <= 0 || slot > MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

	if(vehslot <= 0 || vehslot > MAX_CAR_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

	slot--;
	vehslot--;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
            if(playerData[playerid][pPackageWP][slot] == 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีอาวุธอยู่ในช่องนี้");

            if(CarData[i][carPackageWP][vehslot] != 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธในยานพาหนะนี้ถูกใช้แล้ว");

            CarData[i][carPackageWP][vehslot] = playerData[playerid][pPackageWP][slot];
            CarData[i][carPackageAmmo][vehslot] = playerData[playerid][pPackageAmmo][slot];

		 	playerData[playerid][pPackageWP][slot] = 0;
	    	playerData[playerid][pPackageAmmo][slot] = 0;

            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้เก็บ %s และกระสุน %d นัดไว้ในยานพาหนะ", GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot]);

            Log_Write("logs/package.txt", "[%s] %s: put %s(%d) to car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot], i, CarData[i][carSID]);

            Player_SavePackage(playerid);
            Car_SavePackage(i);

			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	return 1;
}

alias:takeweapon("tw");
CMD:takeweapon(playerid, params[]) {

	new vehslot;
	if (sscanf(params, "d", vehslot))
	    return SendSyntaxMessage(playerid, "/takeweapon [vehicle slot]");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");

	new vehicleid = GetPlayerVehicleID(playerid);

	if(vehslot <= 0 || vehslot >= MAX_CAR_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

    vehslot--;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
            if(CarData[i][carPackageWP][vehslot] == 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบอาวุธในยานพาหนะช่องนี้");

			for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
			{
                if(playerData[playerid][pPackageWP][x] == 0) {

		            playerData[playerid][pPackageWP][x] = CarData[i][carPackageWP][vehslot];
	             	playerData[playerid][pPackageAmmo][x] = CarData[i][carPackageAmmo][vehslot];

	             	CarData[i][carPackageWP][vehslot] = 0;
	             	CarData[i][carPackageAmmo][vehslot] = 0;

		            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้หยิบ %s และกระสุน %d นัดจากยานพาหนะ", GetWeaponPackageName(playerData[playerid][pPackageWP][x]), playerData[playerid][pPackageAmmo][x]);

		            Log_Write("logs/package.txt", "[%s] %s: take %s(%d) from car %d", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(playerData[playerid][pPackageWP][x]), playerData[playerid][pPackageAmmo][x], i);

		            Player_SavePackage(playerid);
		            Car_SavePackage(i);

					return 1;
                }
			}
			SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีช่องว่างเหลืออยู่");
			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	return 1;
}

alias:takeallweapons("taw");
CMD:takeallweapons(playerid, params[]) {

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");

	new vehicleid = GetPlayerVehicleID(playerid);

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			new can_take;

		    for(new vehslot = 0; vehslot != MAX_CAR_WEAPON_PACKAGE; vehslot++) {

				if(CarData[i][carPackageWP][vehslot] != 0) {

					for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
					{
		                if(playerData[playerid][pPackageWP][x] == 0) {

							can_take++;

				            playerData[playerid][pPackageWP][x] = CarData[i][carPackageWP][vehslot];
			             	playerData[playerid][pPackageAmmo][x] = CarData[i][carPackageAmmo][vehslot];

			             	CarData[i][carPackageWP][vehslot] = 0;
			             	CarData[i][carPackageAmmo][vehslot] = 0;

				            Log_Write("logs/package.txt", "[%s] %s: take %s(%d) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(playerData[playerid][pPackageWP][x]), playerData[playerid][pPackageAmmo][x], i, CarData[i][carSID]);

							break;
						}
					}
	            }
            }

            if(can_take) {
           		SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้หยิบอาวุธและกระสุนทั้งหมด %d ชิ้นจากยานพาหนะ", can_take);

	 			Player_SavePackage(playerid);
				Car_SavePackage(i);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีช่องว่างเหลืออยู่หรือไม่พบอาวุธจากยานพาหนะ");

			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	return 1;
}

alias:putallweapons("paw");
CMD:putallweapons(playerid, params[]) {

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ");

	new vehicleid = GetPlayerVehicleID(playerid);

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			new can_take;

		    for(new slot = 0; slot != MAX_PLAYER_WEAPON_PACKAGE; slot++) {

				if(playerData[playerid][pPackageWP][slot] != 0) {

				    for(new vehslot = 0; vehslot != MAX_CAR_WEAPON_PACKAGE; vehslot++) {

                        if(CarData[i][carPackageWP][vehslot] == 0) {

							can_take++;

				            CarData[i][carPackageWP][vehslot] = playerData[playerid][pPackageWP][slot];
				            CarData[i][carPackageAmmo][vehslot] = playerData[playerid][pPackageAmmo][slot];

						 	playerData[playerid][pPackageWP][slot] = 0;
					    	playerData[playerid][pPackageAmmo][slot] = 0;

				            Log_Write("logs/package.txt", "[%s] %s: put %s(%d) to car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot], i, CarData[i][carSID]);
                            break;
						}
					}
				}
			}
			if(can_take) {
			    SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้เก็บอาวุธและกระสุนทั้งหมด %d ชิ้นไว้ในยานพาหนะ", can_take);

	            Player_SavePackage(playerid);
	            Car_SavePackage(i);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"ยานพาหนะไม่มีช่องว่างเหลืออยู่หรือไม่พบอาวุธของคุณ");

			return 1;
		}
	}
    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	return 1;
}

CMD:removeplayerweapon(playerid, params[]) {

    if (playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid, slot;
	if (sscanf(params, "ud", userid, slot))
	    return SendSyntaxMessage(playerid, "/removeplayerweapon [ไอดีผู้เล่น/ชื่อบางส่วน] [ช่อง]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(slot <= 0 || slot >= MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

    slot--;

	for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
	{
		if(playerData[userid][pPackageWP][x] != 0) {

            SendClientMessageEx(playerid, COLOR_YELLOW, "[Package] คุณได้ลบ %s พร้อมกระสุน %d นัดของ %s", GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnRealName(userid));
            SendClientMessageEx(userid, COLOR_YELLOW, "[Package] คุณถูกลบ %s พร้อมกระสุน %d นัดโดย %s", GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnRealName(playerid));

			Log_Write("logs/package.txt", "[%s] %s: remove package %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnPlayerName(userid));

			playerData[userid][pPackageWP][x] = 0;
			playerData[userid][pPackageAmmo][x] = 0;

            Player_SavePackage(userid);
			break;
		}
	}
	return 1;
}

CMD:giveplayerweapon(playerid, params[])
{
	if (playerData[playerid][pAdmin] >= 3) {

		new type[24], ammo, confirm[16], targetid = INVALID_PLAYER_ID;
		if(sscanf(params,"us[24]D(0)S()[16]", targetid, type, ammo, confirm)) {
			SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: "EMBED_WHITE"/giveplayerweapon [ไอดีผู้เล่น/ชื่อบางส่วน] [อาวุธ] [กระสุน]");
			SendClientMessage(playerid, -1, "[ knife: $800; ammo: $800 ] [ katana: $1500; ammo: $1500 ]");
			SendClientMessage(playerid, -1, "[ colt: $12500; ammo: $25 ] [ deagle: $17500; ammo: $38 ] [ s-pistol: $22500; ammo: $25 ] [ shotgun: $17500; ammo: $38 ]");
			SendClientMessage(playerid, -1, "[ tec9: $25000; ammo: $20 ] [ uzi: $27500; ammo: $20 ]  [ mp5: $30000; ammo: $20 ]");
			SendClientMessage(playerid, -1, "[ ak47: $45000; ammo: $43 ] [ m4: $50000; ammo: $46 ] [ armour: $2000; ammo: $2000 ]");
			return 1;
		}
		
		if(!strcmp(type, "colt", true) && ammo > 0)
		{
			new gunid = 22;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "deagle", true) && ammo > 0)
		{
			new gunid = 24;
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "shotgun", true) && ammo > 0)
		{
			new gunid = 25;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "s-pistol", true) && ammo > 0)
		{
			new gunid = 23;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "tec9", true) && ammo > 0)
		{
			new gunid = 32;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "uzi", true) && ammo > 0)
		{
			new gunid = 28;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "mp5", true) && ammo > 0)
		{
			new gunid = 29;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "ak47", true) && ammo > 0)
		{
			new gunid = 30;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "m4", true) && ammo > 0)
		{
			new gunid = 31;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "katana", true))
		{
			new gunid = 8;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "knife", true))
		{
			new gunid = 4;
		
			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else if(!strcmp(type, "armour", true))
		{
			new gunid = 47;
			ammo = 1;

			new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);
		
			if(ammo <= max_ammo) {

				
				new bool:can_take;
				
				for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
				{
					if(playerData[targetid][pPackageWP][x] == 0) {
				
						can_take=true;
				
						playerData[targetid][pPackageWP][x] = gunid;
						playerData[targetid][pPackageAmmo][x] = ammo;
				
						SendClientMessageEx(targetid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัด", GetWeaponPackageName(gunid), ammo);
						Log_Write("logs/package.txt", "[%s] %s: /giveplayerweapon %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(targetid));
				
						Player_SavePackage(targetid);
					
						break;
					}
				}
				if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธ");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "กระสุนต้องไม่ต่ำกว่า 1 หรือมากกว่า %d", max_ammo);
		
			return 1;
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "การใช้: /buyweapon [อาวุธ] [กระสุน]");
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	return 1;
}

CMD:checkplayerweapon(playerid, params[]) {

    if (playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid;
	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/checkplayerweapon [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	ShowPlayerWeapons(userid, playerid);
	return 1;
}

CMD:removecarweapon(playerid, params[]) {

    if (playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new vehslot, vehicleid = -1, id = -1;
	if (sscanf(params, "dd", vehicleid, vehslot))
	    return SendSyntaxMessage(playerid, "/removecarweapon [vehicleid] [vehicle slot]");

	if(vehslot <= 0 || vehslot >= MAX_CAR_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

	vehslot--;

	if((id = Car_GetID(vehicleid)) != -1)
	{
   		if(CarData[id][carPackageWP][vehslot] == 0)
         	return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอาวุธอยู่ในยานพาหนะช่องนี้");

		SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้เก็บ %s และกระสุน %d นัดไว้ในยานพาหนะ", GetWeaponPackageName(CarData[id][carPackageWP][vehslot]), CarData[id][carPackageAmmo][vehslot]);
   		Log_Write("logs/package.txt", "[%s] %s: remove %s(%d) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(CarData[id][carPackageWP][vehslot]), CarData[id][carPackageAmmo][vehslot], id, CarData[id][carSID]);

      	CarData[id][carPackageWP][vehslot] = 0;
       	CarData[id][carPackageAmmo][vehslot] = 0;

  		Car_SavePackage(id);
	}
	return 1;
}

CMD:checkcarweapon(playerid, params[]) {

    if (playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new vehicleid = -1, id = -1;
	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/checkcarweapon [vehicleid]");

	if((id = Car_GetID(vehicleid)) != -1)
	{
		ShowVehicleWeapons(playerid, id);
	}
	return 1;
}

CMD:onduty(playerid, params[]) {

	new lspdsasd, doc, lsfmd, taxi;
	foreach (new i : Player) if (playerData[i][pFaction] != -1) {
		new factiontype = FactionData[playerData[i][pFaction]][factionType];
		
		if(factiontype == FACTION_TYPE_POLICE || factiontype == FACTION_TYPE_SASD)
			lspdsasd++;
		
		if(factiontype == FACTION_TYPE_SADOC)
			doc++;
			
		if(factiontype == FACTION_TYPE_MEDIC)
			lsfmd++;
			
		if(TaxiDuty{playerid})
			taxi++;
	}
	SendClientMessageEx(playerid, -1, "On duty: %d PD/SD, %d DOC, %d LSFD, %d Taxis", lspdsasd, doc, lsfmd, taxi);
	return 1;
}

alias:sellpackage("sp");
CMD:sellpackage(playerid, params[]) {

	new userid, slot;
	if (sscanf(params, "ud", userid, slot))
	    return SendSyntaxMessage(playerid, "/sellpackage [ไอดีผู้เล่น/ชื่อบางส่วน] [ช่อง]");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถขายให้ตัวเองได้!");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(slot <= 0 || slot > MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

    slot--;

	if(playerData[playerid][pPackageWP][slot] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบอาวุธของคุณอยู่ในช่องนี้");

	new bool:can_take;

	for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
	{
		if(playerData[userid][pPackageWP][x] == 0) {

			can_take=true;

			playerData[userid][pPackageWP][x] = playerData[playerid][pPackageWP][slot];
			playerData[userid][pPackageAmmo][x] = playerData[playerid][pPackageAmmo][slot];

			playerData[playerid][pPackageWP][slot] = 0;
			playerData[playerid][pPackageAmmo][slot] = 0;

            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] คุณได้ให้ %s และกระสุน %d นัดกับ %s", GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnRealName(userid));
            SendClientMessageEx(userid, COLOR_GREEN, "[Package] คุณได้รับ %s และกระสุน %d นัดจาก %s", GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnRealName(playerid));

			Log_Write("logs/package.txt", "[%s] %s: sell package %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(playerData[userid][pPackageWP][x]), playerData[userid][pPackageAmmo][x], ReturnPlayerName(userid));

            Player_SavePackage(userid);
            Player_SavePackage(playerid);

			break;
		}
	}
	if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่เหลือช่องว่างสำหรับอาวุธของคุณ");
	return 1;
}

alias:sellweapon("sw");
CMD:sellweapon(playerid, params[]) {

    if(playerData[playerid][pJob] != JOB_WPDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ใช่ Weapon Dealer");

	new userid, slot, emote[64];
	if (sscanf(params, "udS()[64]", userid, slot, emote))
	    return SendSyntaxMessage(playerid, "/sellweapon [ไอดีผู้เล่น/ชื่อบางส่วน] [ช่อง] [อารมณ์]");

	if (IsAtBlackMarket(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ตลาดมืด");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถขายให้ตัวเองได้!");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{dS()[64]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(slot <= 0 || slot >= MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ช่องอาวุธของคุณไม่ถูกต้อง");

    slot--;

	if(playerData[playerid][pPackageWP][slot] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบอาวุธของคุณอยู่ในช่องนี้");

	new gunid = playerData[playerid][pPackageWP][slot];
	new ammo = playerData[playerid][pPackageAmmo][slot];

	if(gunid == 47) {
        SetPlayerArmour(userid, 50);
    }
    else
    {
        GivePlayerValidWeapon(userid, gunid, ammo);
    }

	playerData[playerid][pPackageWP][slot] = 0;
	playerData[playerid][pPackageAmmo][slot] = 0;

    SQL_SaveCharacter(userid);
	Player_SavePackage(playerid);

	SendClientMessageEx(playerid, COLOR_GREEN, "[อาวุธ] คุณได้ให้ %s และกระสุน %d นัดกับ %s", GetWeaponPackageName(gunid), ammo, ReturnRealName(userid));
  	SendClientMessageEx(userid, COLOR_GREEN, "[อาวุธ] คุณได้รับ %s และกระสุน %d นัดจาก %s", GetWeaponPackageName(gunid), ammo, ReturnRealName(playerid));

	if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s ให้ %s กับ %s", ReturnRealName(playerid), GetWeaponPackageName(gunid), ReturnRealName(userid));
	else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s %s %s", ReturnRealName(playerid), emote, ReturnRealName(userid));

	Log_Write("logs/sellweapon.txt", "[%s] %s: sell %s(%d) to %s", ReturnDate(), ReturnPlayerName(playerid), GetWeaponPackageName(gunid), ammo, ReturnPlayerName(userid));

	return 1;
}

Car_SavePackage(carid) {

	new
	    query[256];

	if(carid != -1)
	{
		format(query, sizeof(query), "UPDATE `cars` SET `carPackageWeapons` = '%s' WHERE `carID` = '%d'",
			FormatVehicleWeapons(carid),
			CarData[carid][carSID]
		);

		return mysql_tquery(dbCon, query);
	}
	else {
		return 0;
	}
}

Player_SavePackage(playerid) {
	new
	    query[256];

	format(query, sizeof(query), "UPDATE `characters` SET `PackageWeapons` = '%s' WHERE `ID` = '%d'",
		FormatPlayerWeapons(playerid),
		playerData[playerid][pID]
	);

	return mysql_tquery(dbCon, query);
}

House_SavePackage(houseid) {

	new query[1024];

	format(query, sizeof(query), "UPDATE `houses` SET `weapons` = '%s' WHERE `id` = %d",
		FormatHouseWeapons(houseid),
		HouseInfo[houseid][hID]
	);

	return mysql_tquery(dbCon, query);
}

CMD:revoke(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");

	new userid, type[24];

	if(sscanf(params,"us[24]", userid, type)) return SendSyntaxMessage(playerid, "/revoke [ไอดีผู้เล่น/ชื่อบางส่วน] [ใบขับขี่,ใบอาวุธ,อาวุธ,การบิน,การแพทย์]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถยึดของตัวเองได้");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 4.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(!strcmp(type, "ใบขับขี่", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s ได้เอาใบอนุณาตขับขี่ของ %s ไป", ReturnRealName(playerid), ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_WHITE, "ใบอนุญาตขับขี่ของคุณถูกเพิกถอนโดย %s", ReturnRealName(playerid));
		playerData[userid][pCarLic] = 0;
		return 1;
	}
	else if(!strcmp(type, "ใบอาวุธ", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s ได้เอาใบอนุณาตอาวุธของ %s ไป", ReturnRealName(playerid), ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_WHITE, "ใบอนุญาตอาวุธของคุณถูกเพิกถอนโดย %s", ReturnRealName(playerid));
		playerData[userid][pWepLic] = 0;
		playerData[userid][pCCWLic] = 0;
		return 1;
	}
	else if(!strcmp(type, "อาวุธ", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s ได้เอาอาวุธของ %s ไป", ReturnRealName(playerid), ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_WHITE, "อาวุธของคุณถูกยึดโดย %s", ReturnRealName(playerid));
        FullResetPlayerWeapons(userid);
		return 1;
	}
	else if(!strcmp(type, "การบิน", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s ได้เอาใบอนุญาตการบินของ %s ไป", ReturnRealName(playerid), ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_WHITE, "ใบอนุญาตการบินของคุณถูกเพิกถอนโดย %s", ReturnRealName(playerid));
		playerData[userid][pFlyLic] = 0;
		return 1;
	}
	else if(!strcmp(type, "การแพทย์", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s ได้เอาใบอนุญาตการแพทย์ของ %s ไป", ReturnRealName(playerid), ReturnRealName(userid));
		SendClientMessageEx(userid, COLOR_WHITE, "ใบอนุญาตการแพทย์ของคุณถูกเพิกถอนโดย %s", ReturnRealName(playerid));
		playerData[userid][pMedicLic] = 0;
		return 1;
	}
	else SendSyntaxMessage(playerid, "/revoke [ไอดีผู้เล่น/ชื่อบางส่วน] [carlicense,weplicense,weapons]");

	return 1;
}

CMD:frisk(playerid, params[])
{
/*	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"   คุณยังไม่ได้เริ่มปฏิบัติหน้าที่");
*/
	new userid;

	if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/frisk [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถค้นตัวเองได้");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");


	if (!bf_get(player_bf[userid], FRISKAPPROVE))
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW,"คุณได้ส่งคำขอการค้นตัว %s", ReturnRealName(userid));
	    SendClientMessage(playerid,COLOR_LIGHTRED,"SERVER: ผู้เล่นนี้ต้องอนุมัติการค้นหาของคุณ (/friskapprove)");
	    SendClientMessageEx(userid, COLOR_YELLOW,"%s ต้องการค้นหาคุณ (/friskapprove)", ReturnRealName(playerid));
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________Illegal items___________");
	    SendClientMessageEx(playerid, COLOR_WHITE, "ชื่อ: %s", ReturnRealName(userid));
	    SendClientMessageEx(playerid, COLOR_WHITE, "เงิน: %s", playerData[userid][pCash] > 500 ? ("มีมากกว่า $500") : ("มีต่ำกว่า $500"));

		new Player_Weapons[13], Player_Ammos[13], str_weapons[500];
		for(new i = 1;i <= 12;i++)
		{
			GetPlayerWeaponData(userid,i,Player_Weapons[i],Player_Ammos[i]);

			if(Player_Weapons[i] != 0)
			{
			    if(i == 1) format(str_weapons, 500, "%s%s", str_weapons, ReturnWeaponName(Player_Weapons[i]));
				else format(str_weapons, 500, "%s,%s", str_weapons, ReturnWeaponName(Player_Weapons[i]));
				
				if(playerData[userid][pGun2] == Player_Weapons[i]) {
					if(playerData[userid][pPLicense]) {
						format(str_weapons, 500, "%s(T)", str_weapons);
					}
					else format(str_weapons, 500, "%s(F)", str_weapons);
				}
				else if(playerData[userid][pGun3] == Player_Weapons[i]) {
					if(playerData[userid][pSLicense]) {
						format(str_weapons, 500, "%s(T)", str_weapons);
					}
					else format(str_weapons, 500, "%s(F)", str_weapons);
				}
			}
		}
	 	SendClientMessageEx(playerid, COLOR_WHITE, "อาวุธ: [%s]", strlen(str_weapons) ? str_weapons : "ไม่มี");
		
		new bool:count;
		for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
		{
			if(PlayerDrug[userid][i][drugQTY]>0) {
				count = true;
				break;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "ยาเสพติด: %s", count ? ("มี") : ("ไม่มี"));
		
		
/*
	for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
	{
		if(PlayerDrug[playerid][i][drugQTY]>0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]", 
			i, 
			DrugPackageName[PlayerDrug[playerid][i][drugPackage]], 
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
			PlayerDrug[playerid][i][drugQTY],
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			PlayerDrug[playerid][i][drugStrength]);	
			
			
			count=true;
		}
	}
	if(!count) {
		SendClientMessage(toplayer, -1, "ไม่มียาเสพติดที่จะแสดง");
	}

*/		

        SendClientMessage(playerid, COLOR_LIGHTBLUE, "___________________________________");
		bf_off(player_bf[userid], FRISKAPPROVE);
 		//ShowPlayerWeapons(userid, playerid);
	}
	return 1;
}

CMD:friskapprove(playerid, params[])
{
	new userid;

	if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/friskapprove [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถค้นตัวเองได้");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	//FriskApprove[userid] = 1;

  	bf_on(player_bf[playerid], FRISKAPPROVE);

    SendClientMessageEx(userid,COLOR_LIGHTRED,"SERVER: ผู้เล่น %s ให้สิทธิ์ค้นตัวกับคุณ และใช้ /frisk ได้แล้วในขณะนี้", ReturnRealName(playerid));
    SendClientMessageEx(playerid,COLOR_YELLOW,"คุณอนุญาตให้ %s ค้นตัวคุณ", ReturnRealName(userid));
    return 1;
}


CMD:makemovedoor(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new objectid, modelid, faction, name[64], Float:X, Float:Y, Float:Z;
	if(sscanf(params,"dds[64]",modelid,faction,name)) return SendSyntaxMessage(playerid, "/makemovedoor [modelid] [Faction(/viewfactions)] [Description]");

	GetPlayerPos(playerid, X, Y, Z);

    if((objectid = Iter_Free(sv_movedoors)) != -1) {

		Doors[objectid][doorModel] = modelid;
		Doors[objectid][doorPosX] = X;
		Doors[objectid][doorPosY] = Y;
		Doors[objectid][doorPosZ] = Z;
		Doors[objectid][doorPosRX] = 0.0;
		Doors[objectid][doorPosRY] = 0.0;
		Doors[objectid][doorPosRZ] = 0.0;
		Doors[objectid][doorInterior] = GetPlayerInterior(playerid);
		Doors[objectid][doorFaction] = faction;
		Doors[objectid][doorOpened] = 0;
		Doors[objectid][doorLink] = 0;
		Doors[objectid][doorVirtualWorld] = GetPlayerVirtualWorld(playerid);

		format(Doors[objectid][doorName], 64, "%s", name);
		Doors[objectid][doorObject] = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, Doors[objectid][doorVirtualWorld], Doors[objectid][doorInterior], -1, 200.0);
       // CreateObject(modelid, X, Y, Z, 0.0, 0.0, 0.0);

		AddMoveDoorToFile(objectid, Doors[objectid][doorModel], Doors[objectid][doorFaction], Doors[objectid][doorInterior], Doors[objectid][doorVirtualWorld], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorName]);

		SendClientMessageEx(playerid, COLOR_GREEN, "ประตูเลื่อนใหม่ถูกเพิ่ม [DoorID: %d, ModelID: %d, Description: %s]", objectid, modelid, Doors[objectid][doorName]);

		Iter_Add(sv_movedoors, objectid);
	}
	return 1;
}

CMD:dupmovedoor(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new objectid, doorid, name[64];
	if(sscanf(params,"ds[64]",doorid,name)) return SendSyntaxMessage(playerid, "/dupmovedoor [doorid] [Description]");
	if(!Iter_Contains(sv_movedoors, doorid)) return SendClientMessage(playerid, COLOR_WHITE, "ERROR: ไม่พบประตูเลื่อนที่ระบุ!");

	if((objectid = Iter_Free(sv_movedoors)) != -1) {

		Doors[objectid][doorModel] = Doors[doorid][doorModel];
		Doors[objectid][doorPosX] = Doors[doorid][doorPosX];
		Doors[objectid][doorPosY] = Doors[doorid][doorPosY];
		Doors[objectid][doorPosZ] = Doors[doorid][doorPosZ];
		Doors[objectid][doorPosRX] = Doors[doorid][doorPosRX];
		Doors[objectid][doorPosRY] = Doors[doorid][doorPosRY];
		Doors[objectid][doorPosRZ] = Doors[doorid][doorPosRZ];
		Doors[objectid][doorInterior] = Doors[doorid][doorInterior];
		Doors[objectid][doorFaction] = Doors[doorid][doorFaction];
		Doors[objectid][doorLink] = Doors[doorid][doorLink];
		Doors[objectid][doorOpened] = Doors[doorid][doorOpened];
		Doors[objectid][doorVirtualWorld] = Doors[doorid][doorVirtualWorld];

		format(Doors[objectid][doorName], 64, "%s", name);

		Doors[objectid][doorObject] = CreateDynamicObject(Doors[objectid][doorModel], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorPosRX], Doors[objectid][doorPosRY], Doors[objectid][doorPosRZ], Doors[objectid][doorVirtualWorld], Doors[objectid][doorInterior], -1, 200.0);

		AddMoveDoorToFile(objectid, Doors[objectid][doorModel], Doors[objectid][doorFaction], Doors[objectid][doorInterior], Doors[objectid][doorVirtualWorld], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorName]);

		SendClientMessageEx(playerid, COLOR_GREEN, "ประตูเลื่อนใหม่ถูกก๊อบปี้ [DoorID: %d, ModelID: %d, Description: %s]", objectid, Doors[objectid][doorModel], Doors[objectid][doorName]);

		Iter_Add(sv_movedoors, objectid);
	}
	return 1;
}

CMD:removemovedoor(playerid,params[])
{
	new objectid;

	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"d",objectid)) return SendSyntaxMessage(playerid, "/removemovedoor [doorid]");
	
	if(Iter_Contains(sv_movedoors, objectid))
	{
		format(szQuery, sizeof(szQuery), "DELETE FROM `movedoors` WHERE `id` = %d",Doors[objectid][doorID]);
		mysql_tquery(dbCon, szQuery, "OnMoveDoorRemove", "i", objectid);

	    if(IsValidDynamicObject(Doors[objectid][doorObject]))
			DestroyDynamicObject(Doors[objectid][doorObject]);

		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ทำลายประตูเลื่อนไอดี: %d!",objectid);
		
		Iter_Remove(sv_movedoors, objectid);
	}
	else
	{
		SendClientMessage(playerid, -1,"ERROR: ไม่พบประตูเลื่อนที่ระบุ!");
	}
	return 1;
}

CMD:editmovedoor(playerid,params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new objectid, type, input[64];

	if(sscanf(params,"ddS()[64]",objectid, type, input)) return SendSyntaxMessage(playerid, "/editmovedoor [doorid] [type(1-Object,2-Move,3-OpenSpeed,4-Name,5-Faction,6-Link)]");

	if(!Iter_Contains(sv_movedoors, objectid) && !IsValidDynamicObject(Doors[objectid][doorObject])) return SendClientMessage(playerid, -1,"ERROR: ไม่พบประตูเลื่อนที่ระบุ!");

	if(type == 1)
	{
		if(GetPVarInt(playerid, "EditingMoveDoor") == 1) return SendClientMessage(playerid, COLOR_FADE1, "คุณกำลังแก้ไขอยู่");
		SetPVarInt(playerid, "EditingMoveDoor", 1);
		SetPVarInt(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Doors[objectid][doorObject]);
	}
	else if(type == 2)
	{
		if(GetPVarInt(playerid, "EditingMoveDoorMove") == 1) return SendClientMessage(playerid, COLOR_FADE1, "คุณกำลังแก้ไขอยู่");
		SetPVarInt(playerid, "EditingMoveDoorMove", 1);
		SetPVarInt(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Doors[objectid][doorObject]);
	}
	else if(type == 3)
	{
	    if(strlen(input)) {
		    new Float:speed = floatstr(input);

			Doors[objectid][doorOpenSpeed] = speed;
			format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `openspeed` = %f WHERE `id` = %d", speed, Doors[objectid][doorID]);
			mysql_query(dbCon, szQuery);
	      	SendClientMessageEx(playerid, COLOR_GREEN,"คุณแก้ไขความเร็วของการเปิดเป็น %.2f !", speed);
      	}
      	else SendSyntaxMessage(playerid, "/editmovedoor %d 3 speed", objectid);
	}
	else if(type == 4)
	{
	    if(strlen(input)) {
		    new clean_name[64];
			format(Doors[objectid][doorName], 64, "%s", input);
			mysql_escape_string(input,clean_name);
			format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `name` = '%s' WHERE `id` = %d", clean_name, Doors[objectid][doorID]);
			mysql_query(dbCon, szQuery);
	      	SendClientMessageEx(playerid, COLOR_GREEN,"คุณแก้ไขชื่อประตูเลื่อนเป็น %s !", input);
		}
		else SendSyntaxMessage(playerid, "/editmovedoor %d 4 [name]", objectid);
	}
	else if(type == 5)
	{
	    if(strlen(input)) {
			new faction = strval(input);
			if(faction >= -1 && faction < MAX_FACTIONS) {

				format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `faction` = '%d' WHERE `id` = %d", faction, Doors[objectid][doorID]);
				mysql_query(dbCon, szQuery);

				Doors[objectid][doorFaction] = faction;
				
				if(faction != -1) SendClientMessageEx(playerid, COLOR_GREEN,"คุณแก้ไขให้ประตูเลื่อนใช้ได้เฉพาะ %s !", FactionData[faction][factionName]);
		      	else SendClientMessage(playerid, COLOR_GREEN,"คุณแก้ไขให้ประตูเลื่อนใช้ได้ทุกคน !");
	      	}
		}
		else SendSyntaxMessage(playerid, "/editmovedoor %d 5 [factionid]", objectid);
	}
	else if(type == 6)
	{
	    if(strlen(input)) {
			new linkid = strval(input);
			
			if(!Iter_Contains(sv_movedoors, linkid) && !IsValidDynamicObject(Doors[linkid][doorObject]) && linkid != -1) return SendClientMessage(playerid, -1,"ERROR: ไม่พบประตูเลื่อนที่ระบุ!");
			
			format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `link` = '%d' WHERE `id` = %d", Doors[linkid][doorID], Doors[objectid][doorID]);
			mysql_query(dbCon, szQuery);
	
			Doors[objectid][doorLink] = Doors[linkid][doorID];
			
			if(linkid != -1) SendClientMessageEx(playerid, COLOR_GREEN,"คุณแก้ไขให้ประตูเลื่อนเชื่อมต่อกับประตูเลื่อนไอดี %d !", linkid);
			else SendClientMessage(playerid, COLOR_GREEN,"คุณแก้ไขให้ประตูเลื่อนเลิกเชื่อมต่อกับประตูเลื่อนอื่น !");

		}
		else SendSyntaxMessage(playerid, "/editmovedoor %d 6 [doorid]", objectid);
	}
	return 1;
}

CMD:whatmovedoor(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new
		Float:fDistance = FLOAT_INFINITY,
		i = -1,
		tt[128]
	;

	foreach(new x: sv_movedoors)
	{
		new
        	Float:temp = GetPlayerDistanceFromPoint(playerid, Doors[x][doorPosX], Doors[x][doorPosY], Doors[x][doorPosZ]);

		if (temp < fDistance)
		{
			fDistance = temp;
			i = x;
		}
	}

	if(i != -1 && fDistance < 5) {
		format(tt, sizeof(tt), "คุณยืนอยู่ใกล้ประตูเลื่อน: [Normal ID: %d] [MySQL ID: %d]", i,Doors[i][doorID]);
		SendClientMessage(playerid, -1, tt);
		return 1;
	}
	return 1;
}

CMD:showmovedoors(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new string[512];

	foreach(new i: sv_movedoors)
	{
		format(string, sizeof(string), "%s\n%d)%s" ,string, i, Doors[i][doorName]);
	}
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST,"Admin Move Objects:",string,"O","K");
	return 1;
}

//==============================================

ChargePerson(playerid)
{
	new driver = GetVehicleDriver(gPassengerCar[playerid]);
	if(playerData[playerid][pCash] < TaxiMoney[playerid])
	{
		if(driver != INVALID_PLAYER_ID) {
			SendClientMessageEx(driver, COLOR_WHITE, "%s มีเงินไม่พอจ่ายค่าโดยสาร", ReturnRealName(playerid));
			TaxiMade[driver] -= TaxiMoney[playerid];
		}
		TaxiMoney[playerid] = 0;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TAXI]: คุณจ่ายค่าโดยสารทั้งหมด: $%d", TaxiMoney[playerid]);

		playerData[playerid][pCash]-=TaxiMoney[playerid];

		if(driver != INVALID_PLAYER_ID) {
			playerData[driver][pCash]+=TaxiMoney[playerid];
			TaxiMade[driver] -= TaxiMoney[playerid];
		}

		TaxiMoney[playerid] = 0;
	}
}

CMD:tod(playerid, params[])
{
	new time, msg[128];
	if(playerData[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "d", time)) return SendSyntaxMessage(playerid, "/tod [time] (0-23)");
	SetWorldTime(time);
	format(msg, sizeof(msg), "เวลาถูกเปลี่ยนเป็น %d:00", time);
	SendClientMessageToAll(COLOR_GRAD1, msg);
	return 1;
}

CMD:weather(playerid, params[])
{
	new weather;
	if(playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "d", weather)) return SendSyntaxMessage(playerid, "/weather [weatherid]");
	if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetPlayerWeather(playerid, weather);
	SendClientMessage(playerid, COLOR_GREY, "สภาพอากาศถูกเปลี่ยน!");
	return 1;
}

CMD:weatherall(playerid, params[])
{
	new weather;
	if(playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	if(sscanf(params, "d", weather)) return SendSyntaxMessage(playerid, "/weather [weatherid]");
	if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetWeather(weather);
	SendClientMessage(playerid, COLOR_GREY, "สภาพอากาศถูกเปลี่ยนให้กับทุกคน!");
	return 1;
}

cl_DressHoldWeapon(playerid, weaponid = 0) {

    RemovePlayerClothing(playerid);

	for (new i = 0; i < 13; i ++) {
		if (playerData[playerid][pGuns][i] && playerData[playerid][pGuns][i] != weaponid) {
			new slot = g_aWeaponAttach[playerData[playerid][pGuns][i]];
			if(slot != -1 && PlayerAttachWeapon[playerid][slot][awHide] == 0) {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT0)) SetPlayerAttachedObject(playerid, FREESLOT0, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT1)) SetPlayerAttachedObject(playerid, FREESLOT1, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT2)) SetPlayerAttachedObject(playerid, FREESLOT2, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT3)) SetPlayerAttachedObject(playerid, FREESLOT3, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT4)) SetPlayerAttachedObject(playerid, FREESLOT4, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT5)) SetPlayerAttachedObject(playerid, FREESLOT5, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT6)) SetPlayerAttachedObject(playerid, FREESLOT6, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT7)) SetPlayerAttachedObject(playerid, FREESLOT7, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
       			else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT8)) SetPlayerAttachedObject(playerid, FREESLOT8, GetGunObjectID(playerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
	  		}
		}
	}
	cl_DressPlayer(playerid);
	return 1;
}

CMD:authorizeswat(playerid, params[])
{
	new iPlayerID;

	if (sscanf(params, "u", iPlayerID))
		return SendSyntaxMessage(playerid, "/authorizeswat [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(iPlayerID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าหน้าที่ตำรวจ");

	if (!IsPlayerNearPlayer(playerid, iPlayerID, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if (playerData[playerid][pFactionRank] <= 2)
	{
		if(playerData[iPlayerID][pFaction] == playerData[playerid][pFaction])
		{
			playerData[iPlayerID][pSwat] = 1;
			SendClientMessageEx(iPlayerID, COLOR_LIGHTBLUE, "* %s %s ได้ให้สิทธิ์หน่วย SWAT แก่คุณ", Faction_GetRank(playerid), ReturnRealName(playerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* คุณได้ให้สิทธิ์หน่วย SWAT กับ %s", ReturnRealName(iPlayerID));
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้อยู่แฟคชั่นเดียวกับคุณ");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ผู้นำ");
	return 1;
}

CMD:deauthorizeswat(playerid, params[])
{
	new iPlayerID;
	if (sscanf(params, "u", iPlayerID))
		return SendSyntaxMessage(playerid, "/deauthorizeswat [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(iPlayerID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าหน้าที่ตำรวจ");

	if (!IsPlayerNearPlayer(playerid, iPlayerID, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if (playerData[playerid][pFactionRank] <= 2)
	{
		if(playerData[iPlayerID][pFaction] == playerData[playerid][pFaction])
		{
			playerData[iPlayerID][pSwat] = 0;
			SendClientMessageEx(iPlayerID, COLOR_LIGHTBLUE, "* %s %s ได้ถอดสิทธิ์คุณออกจากหน่วย SWAT", Faction_GetRank(playerid), ReturnRealName(playerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* คุณได้ถอดสิทธิ์หน่วย SWAT ของ %s", ReturnRealName(iPlayerID));
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้อยู่แฟคชั่นเดียวกับคุณ");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่ผู้นำ");
	return 1;
}

CMD:graffiti(playerid, params[])
{
	if(playerData[playerid][pSprayPermission] || GetFactionType(playerid) == FACTION_TYPE_GANG) {
		Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "เลือกภาพกราฟฟิตี\nต้องการข้อความที่กำหนดเองหรือไม่?\nเลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง)", "เลือก", "<< กลับ");
	}
	else {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุณาตให้ใช้ฟังชั่นนี้");
	}
	return 1;
}

Dialog:Graffiti_Menu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
                Dialog_Show(playerid, Graffiti_PickImage, DIALOG_STYLE_LIST, "เลือกภาพกราฟฟิตี:", "Grove St 4 Life\nSeville B.V.V.D Families\nVarrio Los Aztecas\nKilo\nSan Fiero Rifa\nTemple Drive Ballas\nLos Santos Vargos\nFront Yard Balas\nRolling Heights Ballas", "เลือก", "<< กลับ");
			}
			case 1: {
                Dialog_Show(playerid, Graffiti_PickCustomText, DIALOG_STYLE_INPUT, "ต้องการข้อความที่กำหนดเองหรือไม่?:", "{FF8282}ข้อแนะ:"EMBED_WHITE"\n-\tเราใช้เทมเพลต bbcode พิเศษเพื่อจัดรูปแบบข้อความโดยใช้ (c) system ใช้ (n) เพื่อขึ้นบรรทัดใหม่\n\t\t(bl:น้ำเงิน,(w):ขาว,(y):เหลือง,(g):เขียว\n\t\t(b):ดำ, ระวังการใช้สีกับอักษรไทย\n\t\tการใช้: นี่จะเป็น(y)คำ(b)สีเหลืองและส่วนที่เหลือจะเป็นสีดำ\n-\tพยายามอย่าเขียนข้อความยาว ๆ\nสูงสุด 60 ตัวอักษร", "เลือก", "<< กลับ");
			}
			case 2: {
                Dialog_Show(playerid, Graffiti_PickFont, DIALOG_STYLE_LIST, "เลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง):", "Comic Sans\nLevi Brush\nDripping\nDiploma", "เลือก", "<< กลับ");
			}
		}
	}
	return 1;
}

Dialog:Graffiti_PickImage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณเลือกภา"EMBED_WHITE"พ: %s", graffiti_SprayTag[listitem][1]);
		//format(GraffiName[playerid], 60, graffiti_SprayTag[listitem][1]);
		
		strpack(GraffiName[playerid], graffiti_SprayTag[listitem][1], 60 char);

		GraffiModel[playerid] = graffiti_SprayTag[listitem][0];
		sprayammountch[playerid] = 5;

		Dialog_Show(playerid, Graffiti_PickImage, DIALOG_STYLE_LIST, "เลือกภาพกราฟฟิตี:", "Grove St 4 Life\nSeville B.V.V.D Families\nVarrio Los Aztecas\nKilo\nSan Fiero Rifa\nTemple Drive Ballas\nLos Santos Vargos\nFront Yard Balas\nRolling Heights Ballas", "เลือก", "<< กลับ");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "เลือกภาพกราฟฟิตี\nต้องการข้อความที่กำหนดเองหรือไม่?\nเลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง)", "เลือก", "<< กลับ");
	}
	return 1;
}

Dialog:Graffiti_PickCustomText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(strlen(inputtext) <= 60 && strlen(inputtext) > 0) {
		    SendClientMessage(playerid, COLOR_YELLOW, "คุณได้ตั้งค่าข้อความของคุณแล้ว");
		    SendClientMessage(playerid, COLOR_WHITE, inputtext);
		    sprayammountch[playerid] = strlen(inputtext);
		    //format(GraffiName[playerid], 60, inputtext);
		    strpack(GraffiName[playerid], inputtext, 60 char);
		    GraffiModel[playerid] = 19482;
		}
		else {
		    SendClientMessage(playerid, COLOR_YELLOW, "ข้อความต้องไม่มากกว่า 60 ตัวอักษร");
		}
	    Dialog_Show(playerid, Graffiti_PickCustomText, DIALOG_STYLE_INPUT, "ต้องการข้อความที่กำหนดเองหรือไม่?:", "{FF8282}ข้อแนะ:"EMBED_WHITE"\n-\tเราใช้เทมเพลต bbcode พิเศษเพื่อจัดรูปแบบข้อความโดยใช้ (c) system ใช้ (n) เพื่อขึ้นบรรทัดใหม่\n\t\t(bl:น้ำเงิน,(w):ขาว,(y):เหลือง,(g):เขียว\n\t\t(b):ดำ, ระวังการใช้สีกับอักษรไทย\n\t\tการใช้: นี่จะเป็น(y)คำ(b)สีเหลืองและส่วนที่เหลือจะเป็นสีดำ\n-\tพยายามอย่าเขียนข้อความยาว ๆ\nสูงสุด 60 ตัวอักษร", "เลือก", "<< กลับ");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "เลือกภาพกราฟฟิตี\nต้องการข้อความที่กำหนดเองหรือไม่?\nเลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง)", "เลือก", "<< กลับ");
	}
	return 1;
}

Dialog:Graffiti_PickFont(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
                SendClientMessage(playerid, COLOR_YELLOW, "คุณเลือกแบบอัก"EMBED_WHITE"ษร: Comic Sans");
                strpack(GraffiFont[playerid], "Comic Sans MS", 24 char);
			}
			case 1: {
                SendClientMessage(playerid, COLOR_YELLOW, "คุณเลือกแบบอัก"EMBED_WHITE"ษร: Levi Brush");
                strpack(GraffiFont[playerid], "LeviBrush", 24 char);
			}
			case 2: {
				SendClientMessage(playerid, COLOR_YELLOW, "คุณเลือกแบบอัก"EMBED_WHITE"ษร: Dripping");
				strpack(GraffiFont[playerid], "a dripping marker", 24 char);
			}
			case 3: {
				SendClientMessage(playerid, COLOR_YELLOW, "คุณเลือกแบบอัก"EMBED_WHITE"ษร: Diploma");
				strpack(GraffiFont[playerid], "Diploma", 24 char);
			}
		}
		Dialog_Show(playerid, Graffiti_PickFont, DIALOG_STYLE_LIST, "เลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง):", "Comic Sans\nLevi Brush\nDripping\nDiploma", "เลือก", "<< กลับ");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "เลือกภาพกราฟฟิตี\nต้องการข้อความที่กำหนดเองหรือไม่?\nเลือกแบบอักษร (สำหรับข้อความที่กำหนดเอง)", "เลือก", "<< กลับ");
	}
	return 1;
}

/*forward killgr(playerid);
public killgr(playerid)
{
    sprayammount[playerid] = 0;
   	DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
	return 1;
}*/

/*
forward spraying(playerid);
public spraying( playerid ) // This Callback gets called evrysecond
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0,GraffiPos[playerid][0],GraffiPos[playerid][1], GraffiPos[playerid][2]))
    {
		sprayammount[playerid] ++; //Evry second it gets called player gets ONE point

		if( sprayammount[playerid] == sprayammountch[playerid] ) // If player reached his points
		{
			KillTimer( spraytimer[playerid] ); // We kill this timer as player reached his points
	    	creategraff(playerid); // We now call creategraff and the graffiti will be created
	 		return 1;
		}
		new string[64];
		format( string, sizeof(string),"~r~SPRAYING~n~ ~w~&%d]", sprayammountch[playerid]-sprayammount[playerid]); // <----
		GameTextForPlayer( playerid, string, 1000,5 );
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, "] ~r~Sorry, you are too far away\n-2 points deducted ~y~]",5000, 5);
		sprayammount[playerid] -= 2;
		return 1;
	}

}*/

forward replacingGraff(playerid);
public replacingGraff(playerid)
{
	new id = GetPVarInt(playerid, "GraffitiReplace");
    if(IsPlayerInRangeOfPoint(playerid, 3.0,graff_Info[id][Xpos],graff_Info[id][Ypos], graff_Info[id][Zpos]))
    {
		sprayammount[playerid] ++; //Evry second it gets called player gets ONE point

		if( sprayammount[playerid] == sprayammountch[playerid] ) // If player reached his points
		{
			KillTimer(spraytimer[playerid]); // We kill this timer as player reached his points
			spraytimer[playerid]=-1;
	    	replacegraff(playerid); // We now call creategraff and the graffiti will be created
	 		return 1;
		}
		new string[64];
		format( string, sizeof(string),"~r~SPRAYING~n~ ~w~%d]", sprayammountch[playerid]-sprayammount[playerid]); // <----
		GameTextForPlayer( playerid, string, 1000,5 );

		/*if(!spraysound[playerid]) {
  			spraysound[playerid] = Audio_Play(playerid, 2, false, true);
  		}*/
		return 1;
	}
	else
	{
	    /*if(spraysound[playerid]) Audio_Stop(playerid, spraysound[playerid]);
	    spraysound[playerid] = -1;*/

		GameTextForPlayer(playerid, "~r~Spray canceled",5000, 5);
        KillTimer(spraytimer[playerid]);
		spraytimer[playerid]=-1;
		sprayammount[playerid]=0;
		DeletePVar( playerid,"GraffitiReplace");
		DeletePVar( playerid,"GraffitiReplacing");
		return 1;
	}

}
/*
forward creategraff( playerid );
public creategraff( playerid )
{
	for(new id = 0; id != MAX_GRAFFITI; id++)
	{
	    if(!graff_Info[id][graffmodel]) {

		    DestroyDynamicObject( GraffiObj[playerid] ); // Destroying old sprayobject

			GameTextForPlayer( playerid, "~g~SPRAYED",5000,5 ); // SElf explainable?
			DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
			sprayammount[playerid] = 0; // SEtting this var to 0, will explain what it is further down

			new string[20];
			format(string, sizeof(string), "/Graffitis/%d.ini", id);
			dini_Create(string);
			strmid(graff_Info[id][graffname] , GraffiName[playerid], 0, strlen(GraffiName[playerid]), 60);

			graff_Info[id][graffcreator] = ReturnPlayerName(playerid);
			graff_Info[id][graffmodel] = GraffiModel[playerid];
			graff_Info[id][Xpos] = GraffiPos[playerid][0];
			graff_Info[id][Ypos] = GraffiPos[playerid][1];
			graff_Info[id][Zpos] = GraffiPos[playerid][2];
			graff_Info[id][XYpos] = GraffiPos[playerid][3];
			graff_Info[id][YYpos] = GraffiPos[playerid][4];
			graff_Info[id][ZYpos] = GraffiPos[playerid][5];


			if(!strlen(GraffiFont[playerid])) format(graff_Info[id][grafffont], 16, "Diploma");
			else graff_Info[id][grafffont] = GraffiFont[playerid];


			graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos], -1, 0, -1, 200 ); //Creating the object
   			if(graff_Info[id][graffmodel] == 19482) SetDynamicObjectMaterialText( graff_Info[id][graffObject], 0, ReturnGraffitiText(graff_Info[id][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[id][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text

			SaveGraffitis();
			break;
		}
	}
	return 1;
}*/

replacegraff(playerid)
{
	new id = GetPVarInt(playerid, "GraffitiReplace");

	if(GraffiModel[playerid]) {

		new graff_temp[60], font_temp[24];
		
		GameTextForPlayer( playerid, "~g~SPRAYED",5000,5 );
		DeletePVar( playerid,"GraffitiReplace" );
		DeletePVar( playerid,"GraffitiReplacing");
		sprayammount[playerid] = 0;

        strunpack(graff_temp, GraffiName[playerid]);
        strunpack(font_temp, GraffiFont[playerid]);
        if(!strlen(font_temp)) format(font_temp, 24, "Diploma");
        
		format(graff_Info[id][graffcreator], MAX_PLAYER_NAME, ReturnPlayerName(playerid));
		graff_Info[id][graffmodel] = GraffiModel[playerid];

		format(graff_Info[id][graffname], 60, graff_temp);
		format(graff_Info[id][grafffont], 24, font_temp);

		DestroyDynamicObject(graff_Info[id][graffObject]);

		if(graff_Info[id][graffmodel] == 19482) {
		    graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos]  + 180, -1, 0, -1, 200 );
			SetDynamicObjectMaterialText( graff_Info[id][graffObject], 0, ReturnGraffitiText(graff_Info[id][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[id][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 );
		}
		else {
		    graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos], -1, 0, -1, 200 );
		}
		SaveGraffiti(id);
	}

	return 1;
}

LoadGraffitis()
{
	new string[70];
    for(new ID = 0; ID != MAX_GRAFFITI; ID++)
	{
		format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	    if(dini_Exists(string))
		{
		    strmid(graff_Info[ID][graffcreator],dini_Get(string,"graffcreator"),0,MAX_PLAYER_NAME + 1,MAX_PLAYER_NAME + 1);
		    strmid(graff_Info[ID][graffname],dini_Get(string,"graffname"),0,60,60);
		    strmid(graff_Info[ID][grafffont],dini_Get(string,"grafffont"),0,24,24);
		    graff_Info[ID][graffmodel] =  dini_Int(string, "graffmodel");
			graff_Info[ID][Xpos] =  dini_Float(string, "Xpos");
		   	graff_Info[ID][Ypos] =  dini_Float(string, "Ypos");
		    graff_Info[ID][Zpos] =  dini_Float(string, "Zpos");
   			graff_Info[ID][XYpos] =  dini_Float(string, "XYpos");
		   	graff_Info[ID][YYpos] =  dini_Float(string, "YYpos");
		    graff_Info[ID][ZYpos] =  dini_Float(string, "ZYpos");


			if(graff_Info[ID][graffmodel] == 19482) {
				graff_Info[ID][graffObject] = CreateDynamicObject(graff_Info[ID][graffmodel], graff_Info[ID][Xpos],graff_Info[ID][Ypos],graff_Info[ID][Zpos], graff_Info[ID][XYpos], graff_Info[ID][YYpos], graff_Info[ID][ZYpos] + 180, -1, 0, -1, 200 ); //Creating the object
	   			SetDynamicObjectMaterialText( graff_Info[ID][graffObject], 0, ReturnGraffitiText(graff_Info[ID][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[ID][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text
			}
			else {
			    graff_Info[ID][graffObject] = CreateDynamicObject(graff_Info[ID][graffmodel], graff_Info[ID][Xpos],graff_Info[ID][Ypos],graff_Info[ID][Zpos], graff_Info[ID][XYpos], graff_Info[ID][YYpos], graff_Info[ID][ZYpos], -1, 0, -1, 200 );
			}
		}
	}
	return 1;
}
/*
SaveGraffitis()
{
	new string[50];
 	for(new ID = 0; ID != MAX_GRAFFITI; ID++)
	{
	    format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	    if(dini_Exists(string))
	    {
	        dini_Set(string,"graffcreator",graff_Info[ID][graffcreator]);
	        dini_Set(string,"graffname",graff_Info[ID][graffname]);
	        dini_IntSet(string,"graffmodel", graff_Info[ID][graffmodel]);
	        dini_Set(string,"grafffont", graff_Info[ID][grafffont]);
		 	dini_FloatSet(string,"Xpos", graff_Info[ID][Xpos]);
		  	dini_FloatSet(string,"Ypos", graff_Info[ID][Ypos]);
		   	dini_FloatSet(string,"Zpos", graff_Info[ID][Zpos]);
		 	dini_FloatSet(string,"XYpos", graff_Info[ID][XYpos]);
		  	dini_FloatSet(string,"YYpos", graff_Info[ID][YYpos]);
		   	dini_FloatSet(string,"ZYpos", graff_Info[ID][ZYpos]);
	    }
    }
	return 1;
}
*/
SaveGraffiti(ID)
{
    new string[50];
	format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	if(dini_Exists(string))
	{
		dini_Set(string,"graffcreator",graff_Info[ID][graffcreator]);
		dini_Set(string,"graffname",graff_Info[ID][graffname]);
		dini_IntSet(string,"graffmodel", graff_Info[ID][graffmodel]);
		dini_Set(string,"grafffont", graff_Info[ID][grafffont]);
		dini_FloatSet(string,"Xpos", graff_Info[ID][Xpos]);
	  	dini_FloatSet(string,"Ypos", graff_Info[ID][Ypos]);
	   	dini_FloatSet(string,"Zpos", graff_Info[ID][Zpos]);
		dini_FloatSet(string,"XYpos", graff_Info[ID][XYpos]);
		dini_FloatSet(string,"YYpos", graff_Info[ID][YYpos]);
		dini_FloatSet(string,"ZYpos", graff_Info[ID][ZYpos]);
	}
	return 1;
}

ReturnGraffitiText(const grafftext[]) {
	new string[128];

	/*format(string, 128, grafftext);

 	format(string, 128, str_replace("(n)", "\n", string));
 	format(string, 128, str_replace("(r)", "{FF0000}", string));
 	format(string, 128, str_replace("(bl)", "{0000BB}", string));
 	format(string, 128, str_replace("(g)", "{33AA33}", string));
 	format(string, 128, str_replace("(y)", ""EMBED_YELLOW"", string));
 	format(string, 128, str_replace("(w)", ""EMBED_WHITE"", string));
 	format(string, 128, str_replace("(b)", "{000000}", string));*/

	format(string, 128, grafftext);
	strreplace(string, "(n)", "\n");
 	strreplace(string, "(r)", "{FF0000}");
 	strreplace(string, "(bl)", "{0000BB}");
 	strreplace(string, "(g)", "{33AA33}");
 	strreplace(string, "(y)", ""EMBED_YELLOW"");
 	strreplace(string, "(w)", ""EMBED_WHITE"");
 	strreplace(string, "(b)", "{000000}");
	return string;
}


CMD:givespray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SendSyntaxMessage(playerid, "/givespray [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(GetFactionType(playerid) == FACTION_TYPE_GANG)
	{
	    if(GetFactionType(targetid) != FACTION_TYPE_GANG) {
			SendClientMessageEx(playerid, COLOR_YELLOW,"> คุณได้อนุณาตให้ %s ใช้สเปรย์",ReturnRealName(targetid));
			SendClientMessageEx(targetid, COLOR_YELLOW,"> %s ได้อนุณาตให้คุณใช้สเปรย์(/graffiti)",ReturnRealName(playerid));
			playerData[targetid][pSprayPermission] = 1;

			RemoveWeapon(playerid, 41);
			GivePlayerWeaponEx(targetid, 41, 9999);
		}
		else {
			if(playerData[targetid][pFaction] == playerData[playerid][pFaction]) {
				RemoveWeapon(playerid, 41);
				GivePlayerWeaponEx(targetid, 41, 9999);
			}
		}
	}
	else
	{
	   SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในแฟคชั่นที่ผิดกฏหมายเพื่อใช้สิ่งนี้");
	   return 1;
	}
	return 1;
}

CMD:takespray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SendSyntaxMessage(playerid, "/takespray [ไอดีผู้เล่น/ชื่อบางส่วน]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(GetFactionType(playerid) == FACTION_TYPE_GANG)
	{
		if(playerData[targetid][pSprayPermission]) {
		    SendClientMessageEx(playerid, COLOR_YELLOW,"> คุณได้เลิกอนุณาตให้ %s ใช้สเปรย์",ReturnRealName(targetid));
			SendClientMessageEx(targetid, COLOR_YELLOW,"> %s ได้เลิกอนุณาตให้คุณใช้สเปรย์",ReturnRealName(playerid));
			playerData[targetid][pSprayPermission] = 0;
			RemoveWeapon(playerid, 41);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นยังไม่ได้รับอนุณาตให้ใช้สเปรย์");
	}
	else
	{
	   SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในแฟคชั่นที่ผิดกฏหมายเพื่อใช้สิ่งนี้");
	   return 1;
	}
	return 1;
}

GetHouseSID(houseid) {
	foreach(new h : sv_houses) {
		if(HouseInfo[h][hID] == houseid) {
			return h;
		}
	}
	return -1;
}

GetBizSID(bizid) {
	foreach(new b : sv_business) {
		if(BizInfo[b][bID] == bizid) {
			return b;
		}
	}
	return -1;
}

GetHouseItem(houseid, itemid) {
	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z) if(HouseInfo[houseid][hItems][z] == itemid) return 1;
	return 0;
}

GetBusinessItem(bizid, itemid) {
	for(new z = 0; z != MAX_BIZ_ITEMS; ++z) if(BizInfo[bizid][bItems][z] == itemid) return 1;
	return 0;
}

CMD:makeadmin(playerid, params[])
{
	new
		userid,
	    level;

	if (playerData[playerid][pAdmin] < 1338)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/makeadmin [ไอดีผู้เล่น/ชื่อบางส่วน] [level]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (level <= 0) {
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ปลดตำแหน่งผู้ดูแลระบบของ %s", ReturnRealName(userid));
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้ปลดตำแหน่งผู้ดูแลระบบของคุณ", ReturnRealName(playerid));
	}
	else if (level > playerData[userid][pAdmin])
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เลื่อนตำแหน่ง %s ให้อยู่ในระดับที่สูงขึ้น (%d)", ReturnRealName(userid), level);
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้เลื่อนตำแหน่งให้คุณอยู่ในระดับที่สูงขึ้น (%d)", ReturnRealName(playerid), level);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ลดระดับ %s ให้อยู่ในระดับที่ต่ำกว่าปกติ (%d)", ReturnRealName(userid), level);
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้ลดระดับคุณอยู่ในระดับที่ต่ำกว่าปกติ (%d)", ReturnRealName(playerid), level);
	}
	playerData[userid][pAdmin] = level;

	format(szString, sizeof(szString), "ปรับยศผู้ดูแล %s เป็น (%d)", ReturnPlayerName(userid), level);
	SQL_LogAdmin_Action(playerid, "IG", szString);
	return 1;
}

CMD:maketester(playerid, params[])
{
	new
		userid,
	    level;

	if (playerData[playerid][pAdmin] < 1338)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/maketester [ไอดีผู้เล่น/ชื่อบางส่วน] [level]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (level <= 0) {
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ปลดตำแหน่ง Tester ของ %s", ReturnRealName(userid));
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้ปลดตำแหน่ง Tester ของคุณ", ReturnRealName(playerid));
	}
	else if (level > playerData[userid][pAdmin])
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เลื่อนตำแหน่ง Tester ของ %s ให้อยู่ในระดับที่สูงขึ้น (%d)", ReturnRealName(userid), level);
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้เลื่อนตำแหน่ง Tester ให้คุณอยู่ในระดับที่สูงขึ้น (%d)", ReturnRealName(playerid), level);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ลดระดับ Tester ของ %s ให้อยู่ในระดับที่ต่ำกว่าปกติ (%d)", ReturnRealName(userid), level);
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้ลดระดับ Tester ของคุณให้อยู่ในระดับที่ต่ำกว่าปกติ (%d)", ReturnRealName(playerid), level);
	}
	playerData[userid][pTester] = level;

	format(szString, sizeof(szString), "ปรับยศ Tester %s เป็น (%d)", ReturnPlayerName(playerid), level);
	SQL_LogAdmin_Action(playerid, "IG", szString);
	return 1;
}

CMD:carmod(playerid)
{
	new id;
	if ((id = Biz_Nearest(playerid, 5.0)) != -1)
	{
	    if(BizInfo[id][bType] == 5)
	    {
 			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
	        if (IsPlayerInAnyVehicle(playerid)) {
	            new vehicleid = GetPlayerVehicleID(playerid), carid = -1;
				if((carid = Car_GetID(vehicleid)) != -1)
				{
					PutPlayerModingVehicle(playerid, id, carid);
				} else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
			} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่บนยานพาหนะ!");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ร้านแต่งรถ!");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ที่ร้านแต่งรถ!");
	return 1;
}

PutPlayerModingVehicle(playerid, id, carid) // "EMBED_YELLOW"
{
    SendClientMessage(playerid, COLOR_WHITE, "ข้อแนะ: กดปุ่ม "EMBED_YELLOW"Q"EMBED_WHITE" และหรือ "EMBED_YELLOW"E"EMBED_WHITE" เพื่อเปลี่ยนชนิดของส่วนประกอบรถยนต์");
    SendClientMessage(playerid, COLOR_WHITE, "ข้อแนะ: กดปุ่ม "EMBED_YELLOW"LSHIFT"EMBED_WHITE" และหรือ "EMBED_YELLOW"SPACE"EMBED_WHITE" เพื่อเปลี่ยนส่วนประกอบรถยนต์");

    new Float:vX, Float:vY, Float:vZ, model = GetVehicleModel(CarData[carid][carVehicle]);

    SetPlayerVirtualWorld(playerid, playerid+1);
    SetVehicleVirtualWorld(CarData[carid][carVehicle], playerid+1);

    SetEngineStatus(CarData[carid][carVehicle], false);

	VCarModingBiz[playerid] = id;
	VCarModingSetting{playerid} = true;
	VCarModingType[playerid]=0;
	VCarModingCompRow[playerid]=0;

	TogglePlayerControllable(playerid, 0);

	GetVehiclePos(CarData[carid][carVehicle],vX,vY,vZ);

	InterpolateCameraPos(playerid, vX,vY,vZ, 439.729034,-1301.680786,15.053193, 1500, 1);
	InterpolateCameraLookAt(playerid, vX,vY,vZ, 439.3171,-1297.0559,14.8794, 1300, 1);

	SetVehiclePos(CarData[carid][carVehicle], 439.3171,-1297.0559,14.8794);
	SetVehicleZAngle(CarData[carid][carVehicle], 234.4732);

	PutPlayerInVehicle(playerid, CarData[carid][carVehicle], 0);

	VCarModingVehicle[playerid] = carid;

	GetVehicleCompatibleUpgrades(model, VCarModingComponent[playerid], VCarModingComponent_count[playerid]);

	RenderPlayerModingMenu(playerid, VCarModingType[playerid]);
	return 1;
}


RenderPlayerModingMenu(playerid, &mod, bool:buy=false) {

	new string[512], preview[32], nextview[32], VehComponent[128], CarModText[128], max_type = sizeof(CarModingType), compid = 0, comp_slot;

	if(mod >= max_type) mod -= max_type;
	else if(mod < 0) mod += max_type;

	for(new i = 0; i != 14; i++)
	{
		compid = GetVehicleComponentInSlot(CarData[VCarModingVehicle[playerid]][carVehicle], i);
		if (compid != 0)
			RemoveVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], compid);

		switch(CarData[VCarModingVehicle[playerid]][carMods][i])
		{
			case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) {
				RemoveVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], CarData[VCarModingVehicle[playerid]][carMods][i]);
				CarData[VCarModingVehicle[playerid]][carNos] = 0;
			}
		}
		if(IsComponentidCompatible(CarData[VCarModingVehicle[playerid]][carModel], CarData[VCarModingVehicle[playerid]][carMods][i])) AddVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], CarData[VCarModingVehicle[playerid]][carMods][i]);
	}

	if(mod != 14) ChangeVehiclePaintjob(CarData[VCarModingVehicle[playerid]][carVehicle], 3 - CarData[VCarModingVehicle[playerid]][carPaintjob]);

	if(mod > 0) {
        format(preview, 32, "~y~%s ~w~(~<~) ", CarModingType[mod-1][carmodName]);
	}
	if(mod+1 < max_type) {
        format(nextview, 32, " (~>~) ~y~%s", CarModingType[mod+1][carmodName]);
	}

	if(mod == 8 || mod == 14 || mod == 15) {
		switch(mod) {
			case 8: { // XM Radio
				new compprice = 25000;
                VCarModingTypeMax[playerid]=1;

			    format(VehComponent, 128, "~n~~y~price:~w~%s~n~~y~name:~w~XM Radio.", FormatNumber(25000));

				if(CarData[VCarModingVehicle[playerid]][carXM]) {
					format(CarModText, 128, "~n~~r~you already have this.");
				}
				else {
				    //BUY
				    if(buy) {
				        if(playerData[playerid][pCash] < compprice) {
				            format(CarModText, 128, "~n~~r~you can't afford it.");
				        }
				        else {
				   			if(BizInfo[VCarModingBiz[playerid]][bProducts] == 0)
							{
								GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
							}
							else {
					            playerData[playerid][pCash]-=compprice;

					            BizInfo[VCarModingBiz[playerid]][bProducts]--;
								BizInfo[VCarModingBiz[playerid]][bTill] += floatround(compprice * 0.7);
								UpdateBizInfo(VCarModingBiz[playerid]);
								Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy XM Radio biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), compprice, VCarModingBiz[playerid], BizInfo[VCarModingBiz[playerid]][bID]);


					            CarData[VCarModingVehicle[playerid]][carXM]=1;
					            format(CarModText, 128, "~n~~r~you already have this.");
					            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
				            }
				        }
				    }
				}
			}
 			case 14: { // PaintJob

				new compprice=floatround(VehicleData[CarData[VCarModingVehicle[playerid]][carModel] - 400][c_price] / 10) + 350;
                VCarModingTypeMax[playerid]=1;

				if(CarData[VCarModingVehicle[playerid]][carModel] == 562 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 565 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 559 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 561 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 560 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 575 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 534 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 567 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 536 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 535 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 576 ||
				CarData[VCarModingVehicle[playerid]][carModel] == 558)
		        {
                    VCarModingTypeMax[playerid]=4;
		        }

		        new paintjobid=0;

				switch(VCarModingCompRow[playerid]) {
				    case 0: {
				        format(VehComponent, 128, "~n~~y~price:~w~none~n~~y~name:~w~Paintjob none.");
				        paintjobid=0;
				    }
				    case 1: {
				        format(VehComponent, 128, "~n~~y~price:~w~%s~n~~y~name:~w~Paintjob 1.", FormatNumber(compprice));
				        paintjobid=3;
				    }
				    case 2: {
				        format(VehComponent, 128, "~n~~y~price:~w~%s~n~~y~name:~w~Paintjob 2.", FormatNumber(compprice));
				        paintjobid=2;
				    }
				    case 3: {
				        format(VehComponent, 128, "~n~~y~price:~w~%s~n~~y~name:~w~Paintjob 3.", FormatNumber(compprice));
				        paintjobid=1;
				    }
				}
				if(CarData[VCarModingVehicle[playerid]][carPaintjob] == paintjobid && paintjobid != 0) {
            		format(CarModText, 128, "~n~~r~you already have this.");
				}
				else {
					if(buy) {

				   		if(BizInfo[VCarModingBiz[playerid]][bProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						}
						else {
							if(playerData[playerid][pCash] < compprice && paintjobid != 0) {
								format(CarModText, 128, "~n~~r~you can't afford it.");
							}
							else {
							    if(paintjobid != 0) {
									playerData[playerid][pCash]-=compprice;

						            BizInfo[VCarModingBiz[playerid]][bProducts]--;
									BizInfo[VCarModingBiz[playerid]][bTill] += floatround(compprice * 0.7);
									UpdateBizInfo(VCarModingBiz[playerid]);
									Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy Paintjob biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), compprice, VCarModingBiz[playerid], BizInfo[VCarModingBiz[playerid]][bID]);
                                    PlayerPlaySound(playerid, 1134, 0.0, 0.0, 0.0);
									format(CarModText, 128, "~n~~r~you already have this.");
								}
		                        CarData[VCarModingVehicle[playerid]][carPaintjob] = paintjobid;
							}
						}
					}
				}
				ChangeVehiclePaintjob(CarData[VCarModingVehicle[playerid]][carVehicle], 3 - paintjobid);
			}
 			case 15: { // Remove

                new componentID[14];
                new nextitem = VCarModingCompRow[playerid],ComponentName[ZVEH_MAX_COMPONENT_NAME];
                VCarModingTypeMax[playerid]=0;

		       	for(new x = 0; x != 14; x++) {
			    	if(CarData[VCarModingVehicle[playerid]][carMods][x]) {
			    	    componentID[x]=CarData[VCarModingVehicle[playerid]][carMods][x];
			    	    VCarModingTypeMax[playerid]++;
			    	}
				}

				if(!VCarModingTypeMax[playerid]) {
				    format(CarModText, 128, "~n~~y~nothing to remove.");
				}
				else {
					for(new x = 0; x != 14; x++) {
			            if(componentID[x]) {
							if(nextitem) {
								nextitem--;
								continue;
							}
							comp_slot = GetVehicleComponentType(componentID[x]);
							GetVehicleComponentName(componentID[x], ComponentName);
							format(VehComponent, 128, "~n~~y~name:~w~%s (#%d)", ComponentName, componentID[x]);

							if(buy) {
							    if(CarData[VCarModingVehicle[playerid]][carMods][x]) {
								    CarData[VCarModingVehicle[playerid]][carMods][x]=0;
								    RenderPlayerModingMenu(playerid, VCarModingType[playerid]);

								    return 1;
							 	}
							}
							break;
						}
					}
				}
			}
		}
	}
	else {
		new componentID[ZVEH_MAX_COMPONENTS];
		new nextitem = VCarModingCompRow[playerid], ComponentName[ZVEH_MAX_COMPONENT_NAME];
        VCarModingTypeMax[playerid]=0;

		for (new i = 0; i < VCarModingComponent_count[playerid]; i++) {
		    if(IsVehicleUpgradeCompatible(CarData[VCarModingVehicle[playerid]][carModel], VCarModingComponent[playerid][i]) && IsComponentidCompatible(CarData[VCarModingVehicle[playerid]][carModel], VCarModingComponent[playerid][i])) {
			    switch(mod) {
			        case 0: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1000..1003, 1014..1016, 1023, 1049, 1050, 1058, 1060, 1138, 1139, 1146, 1147, 1158, 1162..1164:
							{
								componentID[i]=VCarModingComponent[playerid][i];
								VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 1: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1004, 1005, 1011, 1012:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 2: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1006,1032,1033,1035,1038,1053..1055, 1061,1067,1068,1088,1091,1103,1128,1130,1131:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 3: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1007,1027,1030,1031,1036,1039..1042,1047,1048,1051,1052,1056,1057,1062,1063,1069..1072,1090,1093..1095,1099,1101,1102,1106,1108,1118,1122,1124,1134,1137:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
					case 4: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1013,1024:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
					case 5: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1008,1010:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
					case 6: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1018,1022,1028,1029,1034,1037,1043..1046,1059,1064..1066,1089,1092,1104,1105,1113,1114,1126,1127,1129,1132,1135,1136:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
					}
					case 7: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1025,1073..1085,1096..1098:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 9: {
			            if(VCarModingComponent[playerid][i] == 1087) {
							componentID[i]=VCarModingComponent[playerid][i];
							VCarModingTypeMax[playerid]++;
			            }
			        }
			        case 10: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1117,1152,1153,1155,1157,1160,1165,1166,1169..1175,1179,1181,1182,1185,1188..1191:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 11: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1140,1141,1148..1151,1154,1156,1159,1161,1167,1168,1176..1178,1180,1183,1184,1186,1187,1192,1193:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 12: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1143, 1145:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			        case 13: {
			            switch(VCarModingComponent[playerid][i]) {
			                case 1142, 1144:
							{
							    componentID[i]=VCarModingComponent[playerid][i];
							    VCarModingTypeMax[playerid]++;
							}
			            }
			        }
			    }
		    }
		}
		if(!VCarModingTypeMax[playerid]) {
		 	format(CarModText, 128, "~n~~y~There are no components compatible here.");
		}

        for (new i = 0; i < VCarModingComponent_count[playerid]; i++) {

            if(componentID[i]) {
				if(nextitem) {
					nextitem--;
					continue;
				}

				new compprice = floatround(VehicleData[CarData[VCarModingVehicle[playerid]][carModel] - 400][c_price] / 10);
				for(new x=0;x<sizeof(Component);x++) {
					if(Component[x][compID] == VCarModingComponent[playerid][i]) {
						compprice += Component[x][compPrice];
					}
				}
				GetVehicleComponentName(VCarModingComponent[playerid][i], ComponentName);
				format(VehComponent, 128, "~n~~y~price:~w~%s~n~~y~name:~w~%s (#%d).", FormatNumber(compprice), ComponentName, VCarModingComponent[playerid][i]);


				if(CarData[VCarModingVehicle[playerid]][carMods][GetVehicleComponentType(VCarModingComponent[playerid][i])] == VCarModingComponent[playerid][i] && !IsNosComponent(VCarModingComponent[playerid][i]) || (CarData[VCarModingVehicle[playerid]][carNos] >= 100 && IsNosComponent(VCarModingComponent[playerid][i]))) {
					format(CarModText, 128, "~n~~r~you already have this.");
				}
				else
				{
					if(GetVehicleComponentInSlot(CarData[VCarModingVehicle[playerid]][carVehicle], mod)) {
						format(CarModText, 128, "~n~~y~buying this will replace your current mod for this.");
	           		}

					AddVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], VCarModingComponent[playerid][i]);

					if(buy) {
				   		if(BizInfo[VCarModingBiz[playerid]][bProducts] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						}
						else {
							if (IsNosComponent(VCarModingComponent[playerid][i])) {
								if (VCarModingComponent[playerid][i] == 1008) {
									compprice = 6500;
								}
								else {
									compprice = 5700;
								}
							}
						 	if(playerData[playerid][pCash] < compprice) {
						       	format(CarModText, 128, "~n~~r~you can't afford it.");
						  	}
							else {
								if (IsNosComponent(VCarModingComponent[playerid][i])) {
									if (VCarModingComponent[playerid][i] == 1008) {
										format(CarModText, 128, "~n~~y~half nitro purchased.");
										CarData[VCarModingVehicle[playerid]][carNos] += 50;
										if(CarData[VCarModingVehicle[playerid]][carNos] > 100) CarData[VCarModingVehicle[playerid]][carNos] = 100;
									}
									else {
										format(CarModText, 128, "~n~~y~full nitro purchased.");
										CarData[VCarModingVehicle[playerid]][carNos] += 100;
										if(CarData[VCarModingVehicle[playerid]][carNos] > 100) CarData[VCarModingVehicle[playerid]][carNos] = 100;
									}
								}
								else {
									CarData[VCarModingVehicle[playerid]][carMods][GetVehicleComponentType(VCarModingComponent[playerid][i])]=VCarModingComponent[playerid][i];
									format(CarModText, 128, "~n~~r~you already have this.");
								}

								playerData[playerid][pCash]-=compprice;

					            BizInfo[VCarModingBiz[playerid]][bProducts]--;
								BizInfo[VCarModingBiz[playerid]][bTill] += floatround(compprice * 0.7);
								UpdateBizInfo(VCarModingBiz[playerid]);
								Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s biz %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), compprice, ComponentName, VCarModingBiz[playerid], BizInfo[VCarModingBiz[playerid]][bID]);

						     	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						 	}
						}
					}
				}
				break;
			}
		}

	}

	new Float:vX, Float:vY, Float:vZ;
	GetPlayerPos(playerid,vX,vY,vZ);
	if(comp_slot) SetPlayerCameraPos(playerid, CarModingType[comp_slot][carmodX],CarModingType[comp_slot][carmodY],CarModingType[comp_slot][carmodZ]);
	else SetPlayerCameraPos(playerid, CarModingType[mod][carmodX],CarModingType[mod][carmodY],CarModingType[mod][carmodZ]);
	SetPlayerCameraLookAt(playerid, vX,vY,vZ);

	format(string, 512, "%s~w~%s%s~n~~w~----------------%s%s~n~~w~press (~y~y~w~) to ~y~confirm~w~. press (~y~n~w~) to_~y~exit~w~.", preview, CarModingType[mod][carmodName], nextview, VehComponent, CarModText);
	PlayerTextDrawSetString(playerid, TD_CarModing[playerid], string);
	PlayerTextDrawShow(playerid, TD_CarModing[playerid]);
	return 1;
}

IsNosComponent(comid) {
	return (comid == 1008 || comid == 1010);
}

SetVehicleExitCarModingShop(playerid) {
	new compid;
	for(new i = 0; i != 14; i++)
	{
		compid = GetVehicleComponentInSlot(CarData[VCarModingVehicle[playerid]][carVehicle], i);
		if (compid != 0)
			RemoveVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], compid);

	    if(CarData[VCarModingVehicle[playerid]][carMods][i]) {
		    switch(CarData[VCarModingVehicle[playerid]][carMods][i])
			{
			    case 1008..1010: if(IsPlayerInInvalidNosVehicle(playerid)) RemoveVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], CarData[VCarModingVehicle[playerid]][carMods][i]);
			}
			if(IsComponentidCompatible(CarData[VCarModingVehicle[playerid]][carModel], CarData[VCarModingVehicle[playerid]][carMods][i])) AddVehicleComponent(CarData[VCarModingVehicle[playerid]][carVehicle], CarData[VCarModingVehicle[playerid]][carMods][i]);
		}
	}

	//ChangeVehiclePaintjob(CarData[VCarModingVehicle[playerid]][carVehicle], 3 - CarData[VCarModingVehicle[playerid]][carPaintjob]);

    SetPlayerVirtualWorld(playerid, 0);
    SetVehicleVirtualWorld(CarData[VCarModingVehicle[playerid]][carVehicle], 0);
    TogglePlayerControllable(playerid, 1);
    SetCameraBehindPlayer(playerid);

	new rd = random(sizeof(CarModingShopExit));
	SetVehiclePos(CarData[VCarModingVehicle[playerid]][carVehicle], CarModingShopExit[rd][0],CarModingShopExit[rd][1],CarModingShopExit[rd][2]);
	SetVehicleZAngle(CarData[VCarModingVehicle[playerid]][carVehicle], CarModingShopExit[rd][3]);
    ChangeVehiclePaintjob(CarData[VCarModingVehicle[playerid]][carVehicle], 3 - CarData[VCarModingVehicle[playerid]][carPaintjob]);
	PutPlayerInVehicle(playerid, CarData[VCarModingVehicle[playerid]][carVehicle], 0);
	Car_SaveID(VCarModingVehicle[playerid]);

	VCarModingSetting{playerid} = false;
	VCarModingBiz[playerid]=-1;
	VCarModingType[playerid]=0;
	VCarModingTypeMax[playerid]=0;
	VCarModingCompRow[playerid]=0;
	VCarModingVehicle[playerid]=-1;


	VCarModingComponent[playerid][0]='\0';
	VCarModingComponent_count[playerid]=0;

	PlayerTextDrawHide(playerid, TD_CarModing[playerid]);
	return 1;
}

CMD:casino(playerid, params[])
{
	new option[64], msg[128];
	if(BizEntered[playerid] != -1)
	{
		if(gettime() - JustCasinoed[playerid] < 2) return SendClientMessage(playerid, COLOR_YELLOW3, "กรุณารอ 2 วินาทีในการใช้ /casino");
		if(sscanf(params,"s[64]",option))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "{FF6142}USAGE:"EMBED_WHITE" /casino [item]");
			SendClientMessage(playerid, COLOR_WHITE, "pull");
			return 1;
		}
		if(!strcmp(option, "pull", true))
		{
			if(!IsAtPullMachine(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ใกล้เครื่องดึง");
			if(playerData[playerid][pCash] < 150) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องมีอย่างน้อย $150 เพื่อดึง");
			ApplyAnimationEx(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0);
			JustCasinoed[playerid] = gettime();
			new n1, n2, n3;
			n1 = randomEx(0, 7);
			n2 = randomEx(0, 7);
			n3 = randomEx(0, 7);
			if(n1 == n2 && n2 == n3)
			{
				format(msg, sizeof(msg), "~g~congratulations~n~~y~2000~n~[!] %d %d %d [!]", n1, n2, n3);
				GameTextForPlayer(playerid, msg, 3000, 6);
				playerData[playerid][pCash]+=1850;
				BizInfo[BizEntered[playerid]][bTill] -= 1850;
			}
 			else if(n1 == n2 && n2 == n3 && n1 == 7)
			{
				format(msg, sizeof(msg), "~g~congratulations~n~~y~25000~n~[!!] %d %d %d [!!]~n~~r~jackpot", n1, n2, n3);
				GameTextForPlayer(playerid, msg, 3000, 6);
				playerData[playerid][pCash]+=24850;
				BizInfo[BizEntered[playerid]][bTill] -= 24850;
			}
			else
			{
				format(msg, sizeof(msg), "~r~sorry~n~~w~%d %d %d~n~~r~-150$", n1, n2, n3);
				GameTextForPlayer(playerid, msg, 3000, 6);
				playerData[playerid][pCash]-=150;
				BizInfo[BizEntered[playerid]][bTill] += 150;
			}
			return 1;
		}
	}
	else return SendClientMessage(playerid, COLOR_YELLOW3, "คำสั่งนี้ใช้ได้เฉพาะที่ Casino เท่านั้น");
	return 1;
}

IsPlayerInInvalidNosVehicle(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	#define MAX_INVALID_NOS_VEHICLES 52
	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
 	if(IsPlayerInAnyVehicle(playerid))
  	{
   		for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
     	{
      		if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
       	}
   	}
   	return false;
}

IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}


GetClosestATMID(playerid)
{
	foreach(new i : sv_atms) {
		if(IsPlayerInRangeOfPoint(playerid, 5.0, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ]) && ATMInfo[i][atmAtmOn] == 1)
		{
			return i;
		}
	}
	return -1;
}

forward OnATMRemove(atmid);
public OnATMRemove(atmid)
{
	ATMInfo[atmid][atmPosX] = 0.0000;
	ATMInfo[atmid][atmPosY] = 0.0000;
	ATMInfo[atmid][atmPosZ] = 0.0000;
	ATMInfo[atmid][atmAtmOn] = 0;
	ATMInfo[atmid][atmInterior] = 0;
	return 1;
}

forward ATM_Load();
public ATM_Load()
{
	new
	    rows,
		str[128];

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATMS)
	{
        cache_get_value_index_int(i, 0, ATMInfo[i][atmID]);
        cache_get_value_index_float(i, 1, ATMInfo[i][atmPosX]);
        cache_get_value_index_float(i, 2, ATMInfo[i][atmPosY]);
        cache_get_value_index_float(i, 3, ATMInfo[i][atmPosZ]);
        cache_get_value_index_int(i, 4, ATMInfo[i][atmInterior]);
        cache_get_value_index(i, 5, str);
        
        format(ATMInfo[i][atmInfo], 128, "%s", str);
        ATMInfo[i][atmAtmOn] = 1;
  
		ATMInfo[i][atmPickUp] = CreateDynamicPickup(1274, 1, ATMInfo[i][atmPosX], ATMInfo[i][atmPosY], ATMInfo[i][atmPosZ], -1, -1, -1, 100.0);

		Iter_Add(sv_atms, i);
	}
	printf("Loaded %d dynamic ATM from MySQL.", rows);
    return 1;
}

forward IsAtATM(playerid);
public IsAtATM(playerid)
{
	foreach(new i : sv_atms)
	{
		if(IsPlayerInRangeOfPoint(playerid, 10.0,ATMInfo[i][atmPosX],ATMInfo[i][atmPosY],ATMInfo[i][atmPosZ]))
		{
			return 1;
		}
	}
	return 0;
}

CMD:atm(playerid, params[])
{
    if(!IsAtATM(playerid)) return SendClientMessage(playerid, COLOR_GREEN, "คุณไม่ได้อยู่ที่ตู้ ATM");
 	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่บนพื้น");
    ShowPlayerATM(playerid);
    return 1;
}

CMD:makeatm(playerid, params[])
{
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
	    
	new atmid, atminfo[256], interior, Float:x, Float:y, Float:z;
	if(sscanf(params,"s[128]", atminfo)) return SendSyntaxMessage(playerid, "/makeatm [Info]");

	if((atmid = Iter_Free(sv_atms)) != -1) {
	
		GetPlayerPos(playerid, x, y, z);
		interior = GetPlayerInterior(playerid);
		ATMInfo[atmid][atmPosX] = x;
		ATMInfo[atmid][atmPosY] = y;
		ATMInfo[atmid][atmPosZ] = z;
		ATMInfo[atmid][atmAtmOn] = 1;
		ATMInfo[atmid][atmInterior] = interior;
		format(ATMInfo[atmid][atmInfo], 128, "%s", atminfo);
		//format(atminfo, sizeof(atminfo), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s\n"EMBED_LIGHTBLUE"/atm", atmid, ATMInfo[atmid][atmInfo]);
		//ATMInfo[atmid][atmLabel] = CreateDynamic3DTextLabel(atminfo, -1, x, y, z, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, -1, -1, 100.0);
		ATMInfo[atmid][atmPickUp] = CreateDynamicPickup(1274, 1, x, y, z, 0, -1, -1, 100.0);
		AddATMToFile(atmid, ATMInfo[atmid][atmInfo], interior, x, y, z);

		SendClientMessageEx(playerid, COLOR_GREEN, "ATM ได้ถูกเพิ่ม [ข้อมูล: %s ไอดี: %d]", ATMInfo[atmid][atmInfo], atmid);
		
		Iter_Add(sv_atms, atmid);
	}
	return 1;
}

CMD:removeatm(playerid,params[])
{
	new AtmID;
	
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if((AtmID = GetClosestATMID(playerid)) != -1) {
		//DestroyDynamic3DTextLabel(STREAMER_TAG_3D_TEXT_LABEL:ATMInfo[AtmID][atmLabel]);
		DestroyDynamicPickup(ATMInfo[AtmID][atmPickUp]);
		format(szQuery, sizeof(szQuery), "DELETE FROM `atms` WHERE `id` = %d",ATMInfo[AtmID][atmID]);
		mysql_tquery(dbCon, szQuery, "OnATMRemove", "i", AtmID);
        Iter_Remove(sv_atms, AtmID);
		SendClientMessageEx(playerid, COLOR_YELLOW2, "คุณได้ทำลาย ATM ไอดี: %d!",AtmID);
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR: ไม่พบ ATM รอบ ๆ ตัว !");
	
	return 1;
}

CMD:editatm(playerid, params[])
{
	new info[256], atmid;
	
	if(playerData[playerid][pAdmin] < 1337)
	    return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	if(sscanf(params,"s[128]",info)) return SendSyntaxMessage(playerid, "/editatm [ข้อความ]");
	
	if((atmid = GetClosestATMID(playerid)) != -1) {

		format(szQuery, sizeof(szQuery), "UPDATE `atms` SET `info` = '%s' WHERE `id` = %d", info, ATMInfo[atmid][atmID]);
		mysql_query(dbCon, szQuery);
		
		format(ATMInfo[atmid][atmInfo],128,"%s",info);
		
		/*format(info, sizeof(info), ""EMBED_ORANGE"["EMBED_YELLOW"ATM-%d"EMBED_ORANGE"]\n"EMBED_WHITE"%s.\n"EMBED_LIGHTBLUE"/atm", atmid, ATMInfo[atmid][atmInfo]);

		UpdateDynamic3DTextLabelText(STREAMER_TAG_3D_TEXT_LABEL:ATMInfo[atmid][atmLabel], -1, info);*/
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR: ไม่พบ ATM รอบ ๆ ตัว !");
	return 1;
}

ShowPlayerATM(playerid)
{
	atm_page[playerid]=0;
	strpack(atm_tnumber[playerid], "", 12 char);

	if(!atm_opening{ playerid }) {
	
	    SelectTextDraw(playerid, 0x58ACFAFF);

	    for(new i=0;i!=32;i++) PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][i]);
		atm_opening{ playerid } = true;

		RenderPlayerATM(playerid, atm_page[playerid]);
		
		TogglePlayerControllable(playerid, false);
	}
	else {
	    CancelSelectTextDraw(playerid);
	    
	    for(new i=0;i!=38;i++) PlayerTextDrawHide(playerid, TDEditor_ATM[playerid][i]);
	    atm_opening{ playerid } = false;
	    
	    TogglePlayerControllable(playerid, true);
	    
	    atm_auth{ playerid }= false;
	}
}

RenderPlayerATM(playerid, pageid) {

	if(Dialog_Opened(playerid))
	    Dialog_Close(playerid);

	atm_page[playerid]=pageid;

    for(new i=32;i!=38;i++) PlayerTextDrawHide(playerid, TDEditor_ATM[playerid][i]);

	new str[256];
	
	switch(pageid)
	{
	    case 0: { // Pin Login
	    
	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);

	        if(!strlen(number_temp)) format(str, 256, "~n~~n~~n~PINCODE~n~~r~ENTER YOUR PINCODE");
	        else format(str, 256, "~n~~n~~n~PINCODE~n~%s", number_temp);
	        
	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	    case 1: { // Main Menu
			if(atm_auth{ playerid }) {
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][32]);
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][33]);
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][34]);
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][35]);
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][36]);
	        }
	        else {
		        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], "~n~~n~~n~~r~Invalid Pincode~n~Please try again.");
		        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	        }
	    }
	  	case 2: { // Deposit
	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);

	        if(!strlen(number_temp)) format(str, 256, "Deposit~n~~n~~n~Ammount to deposit~n~0");
	        else format(str, 256, "Deposit~n~~n~~n~Ammount to deposit~n~%s", number_temp);
	        
	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 22: { // Deposit > Enter

	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);
            new cashdeposit = strval(number_temp);

		    if(playerData[playerid][pSavingsCollect]) {
                format(str, 256, "Deposit~n~~n~~n~~r~You currently have a savings action.");
		    }
			else if (cashdeposit > playerData[playerid][pCash] || cashdeposit < 1) {
                format(str, 256, "Deposit~n~~n~~n~~r~You don't have that much.");
		    }
			else if (cashdeposit < 20) {
                format(str, 256, "Deposit~n~~n~~n~~r~Deposit a minimum of $20");
		    }
			else if (cashdeposit > 50000) {
                format(str, 256, "Deposit~n~~n~~n~~r~Deposit a maximum of $50,000");
			}
			else {
				playerData[playerid][pCash] -= cashdeposit;
				new curfunds = playerData[playerid][pAccount];
				playerData[playerid][pAccount]=cashdeposit+playerData[playerid][pAccount];
			    format(str, 256, "Deposit~n~~n~Old Balance~n~~g~%s~n~~n~~l~Deposit~n~~g~%s~n~~n~~l~New Balance~n~~g~%s", FormatNumber(curfunds), FormatNumber(cashdeposit), FormatNumber(playerData[playerid][pAccount]));
			}

	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 3: { // Withdraw
	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);

	        if(!strlen(number_temp)) format(str, 256, "Withdraw~n~~n~~n~Ammount to withdraw~n~0");
	        else format(str, 256, "Deposit~n~~n~~n~Ammount to withdraw~n~%s", number_temp);

	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 33: { // Withdraw > Enter

	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);
            new cashdeposit = strval(number_temp);
        	new tax = floatround(cashdeposit * 0.002, floatround_round);
	 	
		    if(playerData[playerid][pSavingsCollect]) {
                format(str, 256, "Withdraw~n~~n~~n~~r~You currently have a savings action.");
		    }
			else if (cashdeposit+tax > playerData[playerid][pAccount] || cashdeposit < 1) {
                format(str, 256, "Withdraw~n~~n~~n~~r~You don't have that much.");
		    }
			else if (cashdeposit < 20) {
                format(str, 256, "Withdraw~n~~n~~n~~r~Withdraw a minimum of $20");
		    }
			else if (cashdeposit > 50000) {
                format(str, 256, "Withdraw~n~~n~~n~~r~Withdraw a maximum of $50,000");
			}
			else {
			    cashdeposit = cashdeposit - tax;
				playerData[playerid][pCash] += cashdeposit;
				playerData[playerid][pAccount] -= cashdeposit + tax;
			    format(str, 256, "Withdraw~n~~n~You have withdrawn~n~~g~%s~n~~n~~l~Tax~n~~r~-%s~n~~n~~l~Total~n~~g~%s", FormatNumber(cashdeposit + tax), FormatNumber(tax), FormatNumber(playerData[playerid][pAccount]));
			}

	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 4: { // Transfer
	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);

	        if(!strlen(number_temp)) format(str, 256, "Transfer~n~~n~~n~Transfer to~n~~r~Enter Bank Number");
	        else format(str, 256, "Transfer~n~~n~~n~Transfer to~n~%s", number_temp);

	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 44: { // Transfer > Bank Number > ... Amount
	        new number_temp[12];
	        strunpack(number_temp, atm_tnumber[playerid]);

	        if(!strlen(number_temp)) format(str, 256, "Transfer~n~~n~~n~Amount to transfer~n~0");
	        else format(str, 256, "Transfer~n~~n~~n~Amount to transfer~n~%s", number_temp);

	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	  	case 444: { // Transfer > Bank Number > Amount > Enter

			new temp_number[12], string[128], found = INVALID_PLAYER_ID;
			strunpack(temp_number, atm_tnumber[playerid]);
			new cashdeposit = strval(temp_number);
			new banknumber_temp = GetPVarInt(playerid, "BankNumber");

			foreach (new i : Player) {
				if(i != playerid && playerData[i][pBankNumber] == banknumber_temp) {
					found = i;
					break;
				}
			}

			if(found == INVALID_PLAYER_ID) {
			    format(str, 256, "Transfer~n~~n~~n~~r~Bank Number does not exist.");
			}
			else if(playerData[playerid][pAccount] < cashdeposit || cashdeposit < 1) {
			    format(str, 256, "Transfer~n~~n~~n~~r~You don't have that much.");
		    }
			else if (cashdeposit > 100000) {
                format(str, 256, "Transfer~n~~n~~n~~r~Transfer a maximum of $100,000");
			}
			else {
				playerData[playerid][pAccount] -= cashdeposit;
				playerData[found][pAccount] += cashdeposit;

                SendClientMessageEx(found, COLOR_LIGHTBLUE, "คุณได้รับ $%d เข้าธนาคารจากหมายเลขธนาคาร %d", cashdeposit, playerData[playerid][pBankNumber]);
                format(str, 256, "Transfer~n~~n~You have transfer~n~~g~%s~n~~n~~l~To Bank Number~n~~g~%d~n~~n~~l~Total~n~~g~%s", FormatNumber(cashdeposit), banknumber_temp, FormatNumber(playerData[playerid][pAccount]));
				
				Log_Write("logs/pay_log.txt", "[%s] %s (%s) has atm transfer %s to %s (%s).", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pIP], FormatNumber(cashdeposit), ReturnRealName(found), playerData[found][pIP]);

				format(string, sizeof(string), "โอน %d ให้ %s", cashdeposit, ReturnPlayerName(found));
				SQL_LogPay(playerid, "ATM", string);
			}
	        PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	    case 5: { // Savings
	        if(playerData[playerid][pSavingsCollect]) {
				new paycheck = 0, maximum = 20000000;
				new i = playerData[playerid][pSavings], currently;

				while(i < maximum)
				{
					i += floatround((i/100.0)*(0.5), floatround_round);
					paycheck++;

					if(playerData[playerid][pSavingsCollect] > i) currently = 2 + paycheck;
				}
				format(str, 256, "~l~Savings~n~~n~Savings Balance~n~~g~%s~l~~n~~n~Interest (0.50 %)~n~~g~%s~l~~n~~n~Savings Collect~n~~g~%d/%d (%d%%)", FormatNumber(playerData[playerid][pSavingsCollect]), FormatNumber(floatround((playerData[playerid][pSavingsCollect]/float(100))*(0.5), floatround_round)), currently, paycheck, floatround(float(currently) / float(paycheck) * 100));
			}
			else {
				format(str, 256, "~n~~n~~n~~l~Savings~n~~r~You do not have a savings account.");
			}

			PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	    case 6: { // Balance
	        if(playerData[playerid][pSavingsCollect]) {
				format(str, 256, "~l~Balance~n~~n~Current Balance~n~~g~%s~l~~n~~n~Interest (0.50 %)~n~~g~%s~l~~n~~n~Savings Balance~n~~g~%s", FormatNumber(playerData[playerid][pAccount]), FormatNumber(floatround((playerData[playerid][pSavingsCollect]/float(100))*(0.5), floatround_round)), FormatNumber(playerData[playerid][pSavingsCollect]));
			}
			else {
				format(str, 256, "~l~Balance~n~~n~Current Balance~n~~g~%s~l~~n~~n~Interest (0.10 %)~n~~g~%s~l~~n~~n~Savings Balance~n~~g~%s", FormatNumber(playerData[playerid][pAccount]), FormatNumber(floatround((playerData[playerid][pAccount]/float(100))*(0.1), floatround_round)), FormatNumber(playerData[playerid][pSavingsCollect]));
			}

			PlayerTextDrawSetString(playerid, TDEditor_ATM[playerid][37], str);
	        PlayerTextDrawShow(playerid, TDEditor_ATM[playerid][37]);
	    }
	}
}
/*
HasAttachedObject(playerid, objectid)
{
	for(new i = 0; i < MAX_TOY_OBJECT; i++)
	{
		if(ToyData[playerid][i] == objectid)
			return true;
	}
	return false;
}
*/
/*
Dialog:LSFMDClothes(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = -1;
		switch(listitem)
		{
			case 0:
			{
				if((id = AddPlayerToy(playerid,11736,6,0.0,0.0,0.0,0.0,0.0,0.0,1.000000,1.000000,1.000000)) != -1) {
				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 1:
			{
 				if((id = AddPlayerToy(playerid,11738,6,0.0,0.0,0.0,0.0,0.0,0.0,1.000000,1.000000,1.000000)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 2:
			{
 				if((id = AddPlayerToy(playerid,11747,6,0.0,0.0,0.0,0.0,0.0,0.0,1.000000,1.000000,1.000000)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
 			case 3:
			{
 				if((id = AddPlayerToy(playerid,11748,6,0.0,0.0,0.0,0.0,0.0,0.0,1.000000,1.000000,1.000000)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
		}
	}
	return 1;
}*/
/*
Dialog:LSPDClothes(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new id = -1;
		switch(listitem)
		{
			case 0:
			{
				if((id = AddPlayerToy(playerid,19773,8,0.026000,0.007999,0.095999,0.000000,-98.999992,-166.499938,1.000000,1.000000,1.000000)) != -1) {
				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 1:
			{
 				if((id = AddPlayerToy(playerid,18636, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 2:
			{
 				if((id = AddPlayerToy(playerid,19161, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
 			case 3:
			{
 				if((id = AddPlayerToy(playerid,19162, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 4:
			{
 				if((id = AddPlayerToy(playerid,19099, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 5:
			{
 				if((id = AddPlayerToy(playerid,19100, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 6:
			{
 				if((id = AddPlayerToy(playerid,19521, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 7:
			{
 				if((id = AddPlayerToy(playerid,19200, 2, 0.152, 0.0, -0.01, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 8:
			{
 				if((id = AddPlayerToy(playerid,19138, 2, 0.089999,0.039999,-0.003000,12.099998,84.200050,82.700042,1.000000,1.000000,1.000000)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 9:
			{
 				if((id = AddPlayerToy(playerid,18637, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 10:
			{
 				if((id = AddPlayerToy(playerid,18641, 6, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 0.881, 1.0, 0.719999)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
            case 11:
			{
 				if((id = AddPlayerToy(playerid,19904, 1, 0.071998,0.042999,0.000000,0.000000,87.999969,-175.700012,1.0,1.0,1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
            case 12:
			{
 				if((id = AddPlayerToy(playerid,19142, 1, 0.071999, 0.02, 0.0, 0.0, 0.0, 0.0, 1.0,1.0,1.0)) != -1) {
 				    cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 13:
			{
 				if((id = AddPlayerToy(playerid,19141, 2, 0.115000,0.014001,-0.000999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 14: //gasmask01
			{
 				if((id = AddPlayerToy(playerid,19472, 2, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 15: //The vest
			{
 				if((id = AddPlayerToy(playerid,373, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 16: //Police oval badge
			{
 				if((id = AddPlayerToy(playerid,19775, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 17: //PoliceBadge2
			{
 				if((id = AddPlayerToy(playerid,19774, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 18: //PoliceRadio1
			{
 				if((id = AddPlayerToy(playerid,19942, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 19: //Closed handcuffs
			{
 				if((id = AddPlayerToy(playerid,11750, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
			case 20: //Open cuffs 
			{
 				if((id = AddPlayerToy(playerid,11749, 1, 0.0, 0.0, 0.0,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000)) != -1) {
 					cl_selected[playerid] = id;
					EditAttachedObject(playerid, ToyData[playerid][id][cl_slot]);
					bf_on(player_bf[playerid], IS_PLAYER_EDITTOY);
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED,"ไม่เหลือพื้นที่สำหรับ Toy แล้ว");
				}
			}
		}
	}
	return 1;
}

AddPlayerToy(playerid,modelid,boneid,Float:fOffsetX,Float:fOffsetY,Float:fOffsetZ,Float:fRotX,Float:fRotY,Float:fRotZ,Float:fScaleX,Float:fScaleY,Float:fScaleZ)
{
	new bool:success, clothingid;

	for (new id = 0; id != MAX_TOY_OBJECT; id ++)
	{
	    if(ToyData[playerid][id][cl_object] == INVALID_OBJECT_ID)
	    {
			ToyData[playerid][id][cl_object] = modelid;
			ToyData[playerid][id][cl_x] = fOffsetX;
			ToyData[playerid][id][cl_y] = fOffsetY;
			ToyData[playerid][id][cl_z] = fOffsetZ;
			ToyData[playerid][id][cl_rx] = fRotX;
			ToyData[playerid][id][cl_ry] = fRotY;
			ToyData[playerid][id][cl_rz] = fRotZ;
			ToyData[playerid][id][cl_scalex] = fScaleX;
			ToyData[playerid][id][cl_scaley] = fScaleY;
			ToyData[playerid][id][cl_scalez] = fScaleZ;
	    	ToyData[playerid][id][cl_bone] = boneid;
			ToyData[playerid][id][cl_slot] = id;
			ToyData[playerid][id][cl_equip] = 1;
			
			SendClientMessage(playerid, COLOR_WHITE, "ใช"EMBED_YELLOW"้ /clothin"EMBED_WHITE"g เพื่อแก้ไขไอเท็มเครื่องแต่งกายของคุณ");
			SetPlayerAttachedObject(playerid, ToyData[playerid][id][cl_slot], ToyData[playerid][id][cl_object], ToyData[playerid][id][cl_bone], ToyData[playerid][id][cl_x], ToyData[playerid][id][cl_y], ToyData[playerid][id][cl_z], ToyData[playerid][id][cl_rx], ToyData[playerid][id][cl_ry], ToyData[playerid][id][cl_rz], ToyData[playerid][id][cl_scalex], ToyData[playerid][id][cl_scaley], ToyData[playerid][id][cl_scalez]);

			clothingid = id;
	        success = true;
	        break;
	    }
	}
	if(success)
	{
	    return clothingid;
	}
	return -1;
}*/
/*
CMD:toyobject(playerid, params[])
{
	new factionid = GetFactionType(playerid);
    if (factionid != FACTION_TYPE_POLICE && factionid != FACTION_TYPE_MEDIC && factionid != FACTION_TYPE_SASD && factionid != FACTION_TYPE_SADOC) return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจ/แพทย์เท่านั้น");
    if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");

	if (factionid == FACTION_TYPE_POLICE || factionid == FACTION_TYPE_SASD || factionid == FACTION_TYPE_SADOC) {
	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1344.9730,30.8543,1019.1917) && playerData[playerid][pLocal] == 101 || IsPlayerInRangeOfPoint(playerid, 3.0, 1400.1931,-3.2171,1073.8362) && playerData[playerid][pLocal] == 104 || IsPlayerInRangeOfPoint(playerid, 3.0, 1385.8762,-21.8015,1001.1614) && playerData[playerid][pLocal] == 105 || IsPlayerInRangeOfPoint(playerid, 3.0, 254.3041,77.2286,1003.6406) && playerData[playerid][pLocal] == 106) {
            Dialog_Show(playerid, LSPDClothes, DIALOG_STYLE_LIST, "Police equipment", "Gun Holster\nCap 1\nCap 2\nCap 3\nHat 1\nHat 2\nHat 3\nHelmet\nBlack Sunglasses\nShield\nFlashlight\nVest 1\nVest 2\nHelmet (SWAT)\nGas mask\nThe Vest (armour)\nPolice Oval badge\nPolice Badge\nPolice Radio\nClosed handcuffs\nOpen cuffs", "Wear", "Cancel");
		}
	}
	if (factionid == FACTION_TYPE_MEDIC) {
	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 542.2574,218.4133,1019.9844) && playerData[playerid][pLocal] == 103) {
            Dialog_Show(playerid, LSFMDClothes, DIALOG_STYLE_LIST, "Medic equipment", "First aid kit\nMedic Case\nBandage\nA pack of bandages", "Wear", "Cancel");
		}
	}
	return 1;
}
*/

CMD:showbadge(playerid, params[])
{
	new iPlayerID;
	new factionid = GetFactionType(playerid);
	if (factionid != FACTION_TYPE_POLICE && factionid != FACTION_TYPE_MEDIC && factionid != FACTION_TYPE_SASD && factionid != FACTION_TYPE_GOV) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ใช่ส่วนหนึ่งของผู้บังคับใช้กฎหมาย");
	if(!playerData[playerid][pBadgeNumber]) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่มีตราประจำตัว");
	if(sscanf(params, "u", iPlayerID)) return SendSyntaxMessage(playerid, "/showbadge [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(iPlayerID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	ShowBadgeToPlayer(playerid, iPlayerID);
	return 1;
}

CMD:givebadge(playerid, params[])
{
	new faction = GetFactionType(playerid), id, badge;
	if(faction != FACTION_TYPE_POLICE && faction != FACTION_TYPE_MEDIC && faction != FACTION_TYPE_SASD && faction != FACTION_TYPE_GOV) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ใช่ส่วนหนึ่งของผู้บังคับใช้กฎหมาย");
	if(sscanf(params,"ud",id, badge)) return SendSyntaxMessage(playerid, "/givebadge [ไอดีผู้เล่น/ชื่อบางส่วน] [badgenumber]");

	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24](d)", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	if(!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณจำเป็นต้องปฏิบัติหน้าที่! (OnDuty)");
	if(playerData[playerid][pFactionRank] > 2) return SendClientMessage(playerid, COLOR_GRAD1,"คุณไม่ใช่ผู้นำ");

	if(badge > 999999 || badge < 1) return SendClientMessage(playerid, COLOR_YELLOW2, "หมายเลขตราของเขาต้องไม่เกิน 999999 และน้อยกว่า 1");

	SendClientMessageEx(id, COLOR_YELLOW2, "* หมายเลขตราประจำตัวของคุณถูกเปลี่ยนโดย %s หมายเลขตราของคุณคือ: %d", ReturnRealName(playerid), badge);
	SendClientMessageEx(playerid, COLOR_YELLOW2, "คุณได้ตั้งหมายเลขตราประจำตัว %d ให้กับ %s",badge, ReturnRealName(id));
	playerData[id][pBadgeNumber] = badge;
	return 1;
}

ShowBadgeToPlayer(playerid, toplayerid)
{
	if (IsPlayerNearPlayer(toplayerid, playerid, 3.0))
	{
		SendClientMessage(toplayerid, COLOR_LIGHTBLUE, "_______________________");
		SendClientMessage(toplayerid, COLOR_WHITE, Faction_GetName(playerid));
		SendClientMessageEx(toplayerid, COLOR_WHITE, "%s - %s", Faction_GetRank(playerid), ReturnRealName(playerid));
		SendClientMessageEx(toplayerid, COLOR_WHITE, "หมายเลขตรา: %d", playerData[playerid][pBadgeNumber]);
		SendClientMessage(toplayerid, COLOR_LIGHTBLUE, "_______________________");

		if(playerData[playerid][pGender] == 1)
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบตราประจำตัวของเธอขึ้นมาพร้อมแสดงให้กับ %s", ReturnRealName(playerid), ReturnRealName(toplayerid));
		else
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s หยิบตราประจำตัวของเขาขึ้นมาพร้อมแสดงให้กับ %s", ReturnRealName(playerid), ReturnRealName(toplayerid));
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");
	return 1;
}

CMD:blindfold(playerid) {

    if (!bf_get(player_bf[playerid], TOGGLE_BLIND))
	{
		TextDrawShowForPlayer(playerid, TD_BLINDFOLD);
		
        bf_on(player_bf[playerid], TOGGLE_BLIND);
        GameTextForPlayer(playerid, "~g~BLIND ON", 5000, 4);
	}
	else {
	    TextDrawHideForPlayer(playerid, TD_BLINDFOLD);
	    
	    bf_off(player_bf[playerid], TOGGLE_BLIND);
	    GameTextForPlayer(playerid, "~r~BLIND OFF", 5000, 4);
	}
	return 1;
}

CMD:pullincar(playerid, params[])
{
	new
		userid,
		seatname[16],
		vehicleid = Vehicle_Nearest(playerid);

	if (sscanf(params, "us[16]", userid, seatname))
	    return SendSyntaxMessage(playerid, "/pullincar [ไอดีผู้เล่น/ชื่อบางส่วน] [fr (หน้าขวา) / bl (หลังซ้าย) / br (หลังขวา)]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24](d)", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}
	
	if(userid == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถโยนตัวเองได้");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ได้อยู่ใกล้ยานพาหนะใด ๆ");
	    
    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่ได้อยู่ใกล้ผู้เล่นนั้น");

	if(!isDeathmode{userid} && !isInjuredmode{userid}) return SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนั้นไม่ได้บาดเจ็บหรือตาย");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่สามารถดึงตัวผู้เล่นนั้นในยานพาหนะนี้ได้");

	new seatid = -1;
	if(!strcmp(seatname, "หน้าขวา", true) || !strcmp(seatname, "fr", true)) {
	    if ((seatid = GetAvailableSeat(vehicleid, 1)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ที่นั่งนี้ไม่ว่าง");
	}
	else if(!strcmp(seatname, "หลังซ้าย", true) || !strcmp(seatname, "bl", true)) {
	    if ((seatid = GetAvailableSeat(vehicleid, 2)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ที่นั่งนี้ไม่ว่าง");
	}
	else if(!strcmp(seatname, "หลังขวา", true) || !strcmp(seatname, "br", true)) {
	    if ((seatid = GetAvailableSeat(vehicleid, 3)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ที่นั่งนี้ไม่ว่าง");
	}
	else {
		return SendSyntaxMessage(playerid, "/pullincar [ไอดีผู้เล่น/ชื่อบางส่วน] [fr (หน้าขวา) / bl (หลังซ้าย) / br (หลังขวา)]");
	}

	PutPlayerInVehicle(userid, vehicleid, seatid);
	return 1;
}

CMD:eject(playerid, params[]) {
	new
		targetID;

	if(sscanf(params, "u", targetID))
		return SendSyntaxMessage(playerid, "/eject [ไอดีผู้เล่น/ชื่อบางส่วน]");

	if(targetID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24](d)", maskid);
		if((targetID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(targetID == playerid) return SendClientMessage(playerid, COLOR_GRAD2, "คุณไม่สามารถไล่ตัวเองได้");
	    
	if(GetPlayerState(playerid) == 2) {
		if(GetPlayerVehicleID(playerid) == GetPlayerVehicleID(targetID)) {

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ได้ผลัก %s ออกจากพาหนะ", ReturnRealName(playerid), ReturnRealName(targetID));
			RemovePlayerFromVehicle(targetID);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ผู้เล่นนี้ไม่ได้อยู่ภายในพาหนะ");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องอยู่ในสถานะผู้ขับรถ");
	
	return 1;
}



forward Entrance_Load();
public Entrance_Load()
{
    new
	    rows, i;

    cache_get_row_count(rows);

	for (; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
		cache_get_value_name_int(i, "eID", EntranceData[i][eID]);
		cache_get_value_name_int(i, "ePickupid", EntranceData[i][ePickupid]);
		cache_get_value_name_int(i, "ePickuptype", EntranceData[i][ePickuptype]);
		cache_get_value_name_int(i, "eType", EntranceData[i][eType]);

		cache_get_value_name_float(i, "ePosEnX", EntranceData[i][ePosEnX]);
		cache_get_value_name_float(i, "ePosEnY", EntranceData[i][ePosEnY]);
		cache_get_value_name_float(i, "ePosEnZ", EntranceData[i][ePosEnZ]);
		cache_get_value_name_float(i, "ePosEnA", EntranceData[i][ePosEnA]);
        cache_get_value_name_int(i, "eEnInt", EntranceData[i][eEnInt]);
        cache_get_value_name_int(i, "eEnWorld", EntranceData[i][eEnWorld]);
        cache_get_value_name_int(i, "eEnHouse", EntranceData[i][eEnHouse]);
        cache_get_value_name_int(i, "eEnBiz", EntranceData[i][eEnBiz]);
        cache_get_value_name_int(i, "eEnLocal", EntranceData[i][eEnLocal]);
        cache_get_value_name_int(i, "eEnTime", EntranceData[i][eEnTime]);

		cache_get_value_name_float(i, "ePosExX", EntranceData[i][ePosExX]);
		cache_get_value_name_float(i, "ePosExY", EntranceData[i][ePosExY]);
		cache_get_value_name_float(i, "ePosExZ", EntranceData[i][ePosExZ]);
		cache_get_value_name_float(i, "ePosExA", EntranceData[i][ePosExA]);
        cache_get_value_name_int(i, "eExInt", EntranceData[i][eExInt]);
        cache_get_value_name_int(i, "eExWorld", EntranceData[i][eExWorld]);
        cache_get_value_name_int(i, "eExHouse", EntranceData[i][eExHouse]);
        cache_get_value_name_int(i, "eExBiz", EntranceData[i][eExBiz]);
        cache_get_value_name_int(i, "eExLocal", EntranceData[i][eExLocal]);
        cache_get_value_name_int(i, "eExTime", EntranceData[i][eExTime]);

        Iter_Add(sv_entrance, i);
        
	    Entrance_Refresh(i);
	}
	printf("Loaded %d dynamic entrance from MySQL.", i);
	return 1;
}

Entrance_Refresh(entranceid)
{
    if(Iter_Contains(sv_entrance, entranceid))
	{
		if (IsValidDynamicPickup(EntranceData[entranceid][ePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][ePickup]);

		if (EntranceData[entranceid][ePickupid] != 0) {

			EntranceData[entranceid][ePickup] = CreateDynamicPickup(EntranceData[entranceid][ePickupid], EntranceData[entranceid][ePickuptype] ? 23 : EntranceData[entranceid][ePickuptype], EntranceData[entranceid][ePosEnX], EntranceData[entranceid][ePosEnY], EntranceData[entranceid][ePosEnZ] + 0.7, EntranceData[entranceid][eEnWorld], EntranceData[entranceid][eEnInt]);
		}
	}
	return 1;
}

forward Garage_Load();
public Garage_Load()
{
    new
	    rows, i, msg[28];

    cache_get_row_count(rows);

	for (; i < rows; i ++) if (i < MAX_GARAGE)
	{
		cache_get_value_name_int(i, "gID", GarageData[i][gID]);
		cache_get_value_name_int(i, "gPickupid", GarageData[i][gPickupid]);
		cache_get_value_name_int(i, "gPickuptype", GarageData[i][gPickuptype]);
		cache_get_value_name_int(i, "gType", GarageData[i][gType]);

		cache_get_value_name_float(i, "gPosEnX", GarageData[i][gPosEnX]);
		cache_get_value_name_float(i, "gPosEnY", GarageData[i][gPosEnY]);
		cache_get_value_name_float(i, "gPosEnZ", GarageData[i][gPosEnZ]);
		cache_get_value_name_float(i, "gPosEnA", GarageData[i][gPosEnA]);
        cache_get_value_name_int(i, "gEnInt", GarageData[i][gEnInt]);
        cache_get_value_name_int(i, "gEnWorld", GarageData[i][gEnWorld]);
        cache_get_value_name_int(i, "gEnHouse", GarageData[i][gEnHouse]);
        cache_get_value_name_int(i, "gEnBiz", GarageData[i][gEnBiz]);
        cache_get_value_name_int(i, "gEnLocal", GarageData[i][gEnLocal]);
        cache_get_value_name_int(i, "gEnTime", GarageData[i][gEnTime]);

		cache_get_value_name_float(i, "gPosExX", GarageData[i][gPosExX]);
		cache_get_value_name_float(i, "gPosExY", GarageData[i][gPosExY]);
		cache_get_value_name_float(i, "gPosExZ", GarageData[i][gPosExZ]);
		cache_get_value_name_float(i, "gPosExA", GarageData[i][gPosExA]);
        cache_get_value_name_int(i, "gExInt", GarageData[i][gExInt]);
        cache_get_value_name_int(i, "gExWorld", GarageData[i][gExWorld]);
        cache_get_value_name_int(i, "gExHouse", GarageData[i][gExHouse]);
        cache_get_value_name_int(i, "gExBiz", GarageData[i][gExBiz]);
        cache_get_value_name_int(i, "gExLocal", GarageData[i][gExLocal]);
        cache_get_value_name_int(i, "gExTime", GarageData[i][gExTime]);

		cache_get_value_name(i, "garage_player1", msg);
		strpack(GarageData[i][PlayerOwner], msg, MAX_PLAYER_NAME char);

		cache_get_value_name_int(i, "gLocked", GarageData[i][gLocked]);

        Iter_Add(sv_garage, i);
	    Garage_Refresh(i);
	}
	printf("Loaded %d dynamic garage from MySQL.", i);
	return 1;
}

Garage_Refresh(garageid)
{
    if(Iter_Contains(sv_garage, garageid))
	{
		if (IsValidDynamicPickup(GarageData[garageid][gPickup]))
		    DestroyDynamicPickup(GarageData[garageid][gPickup]);

		if (GarageData[garageid][gPickupid] != 0) {

			GarageData[garageid][gPickup] = CreateDynamicPickup(GarageData[garageid][gPickupid], GarageData[garageid][gPickuptype] ? 23 : GarageData[garageid][gPickuptype], GarageData[garageid][gPosEnX], GarageData[garageid][gPosEnY], GarageData[garageid][gPosEnZ] + 0.7, GarageData[garageid][gEnWorld], GarageData[garageid][gEnInt]);
		}
	}
	return 1;
}

CMD:impound(playerid, params[])
{

	if (GetFactionType(playerid) != FACTION_TYPE_POLICE && GetFactionType(playerid) != FACTION_TYPE_SASD)
		return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");

	if (!playerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ On-Duty");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้เป็นคนขับยานพาหนะ");

	new
		vehicleid = GetPlayerVehicleID(playerid), trailerid = GetVehicleTrailer(vehicleid), carid, query[128];
    
    if(!IsTrailerAttachedToVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้ลากยานพาหนะใด ๆ");
    
	if((carid = Car_GetID(trailerid)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	if(!IsPlayerInDynamicArea(playerid, ImpoundLotArea)) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้อยู่ในพื้นที่สำหรับยึดยานพาหนะ");

	format(query, sizeof(query), "SELECT carImpoundX, carImpoundY, carImpoundZ FROM `cars`");
	mysql_query(dbCon, query);

	new
		Float:vehDistance[4],
		bool:checked = false
	;

	new rows;
	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++)
	{
		cache_get_value_index_float(i, 0,	vehDistance[0]);
		cache_get_value_index_float(i, 1,	vehDistance[1]);
		cache_get_value_index_float(i, 2,	vehDistance[2]);

		if (IsPlayerInRangeOfPoint(playerid, 4.5, vehDistance[0], vehDistance[1], vehDistance[2])) {
			checked = true;
			break;
		}
	}

	if(!checked) {
	
	    DetachTrailerFromVehicle(vehicleid);
		GetVehiclePos(trailerid, vehDistance[0], vehDistance[1], vehDistance[2]);
		GetVehicleZAngle(trailerid, vehDistance[3]);

		CarData[carid][carImpoundPos][0]=vehDistance[0];
		CarData[carid][carImpoundPos][1]=vehDistance[1];
		CarData[carid][carImpoundPos][2]=vehDistance[2];
		CarData[carid][carImpoundPos][3]=vehDistance[3];
		
		SaveVehicleDamage(trailerid);

		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* คุณยึดยานพาหนะคันนี้สำเร็จ");

		CarData[carid][carImpound] = 1;
		
		Car_SaveID(carid);
		
		SetEngineStatus(trailerid, false);
		
		foreach(new i : Player) if(playerData[i][pPCarkey] != 9999) {
		    if(playerData[i][pPCarkey] == carid) SendClientMessageEx(i, COLOR_DARKGREEN, "ยานพาหนะ %s ของคุณถูกยึดโดย %s", g_arrVehicleNames[CarData[carid][carModel] - 400], ReturnRealName(playerid));
		}
		
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "พื้นที่ตรงนี้ถูกใช้งานแล้ว");

	return 1;
}

CMD:unimpound(playerid, params[])
{
	if(playerData[playerid][pPCarkey] == 9999)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มียานพาหนะที่ถูกเรียกในปัจจุบัน");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องไม่อยู่ที่นั่งผู้โดยสาร");

	new vehicleid = GetPlayerVehicleID(playerid),carid=-1;

	if((carid = Car_GetID(vehicleid)) != -1) {
	
        if(playerData[playerid][pPCarkey] != carid) return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ใช่เจ้าของยานพาหนะคันนี้");

		if(!CarData[carid][carImpound])
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ยานพาหนะของคุณไม่ได้ถูกยึด");

		if(1500 > playerData[playerid][pCash])
			return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอจ่ายสำหรับค่าปรับ $1,500");

		CarData[carid][carImpound] = 0;
		playerData[playerid][pCash] -= 1500;

		SendClientMessageEx(playerid, COLOR_DARKGREEN, "[SERVER]: คุณได้ปล่อย %s ให้ออกจากการถูกยึด", g_arrVehicleNames[CarData[carid][carModel] - 400]);
		Car_SaveID(carid);
	}
	return 1;
}
/*
CMD:test1(playerid, params[]) {

	new rows;
    mysql_query(dbCon, "SELECT `playerHouseKey`, `ID` FROM `characters` WHERE `playerHouseKey` != -1");
    cache_get_row_count(rows);
	for(new i=0;i!=rows;i++)
	{
	    new owning_id = -1, pID;
	    cache_get_value_name_int(i, "playerHouseKey", owning_id);
	    cache_get_value_name_int(i, "ID", targetid);
	    
	    if(owning_id != -1) {
	        format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `SQLHouseKey` = %d WHERE `ID` = %d", HouseInfo[owning_id][hID], targetid);
	        mysql_tquery(dbCon, szQuery);
	    }
	}
	return 1;
}*/

/*CMD:test2(playerid, params[]) {
    new rows;
    mysql_query(dbCon, "SELECT `subid`, `id` FROM `houses` WHERE `subid` != -1");
    cache_get_row_count(rows);
	for(new i=0;i!=rows;i++)
	{
	    new owning_id = -1, pID;
	    cache_get_value_name_int(i, "subid", owning_id);
	    cache_get_value_name_int(i, "id", targetid);
	    if(owning_id != -1) {
	        format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `SQLsubid` = %d WHERE `id` = %d", HouseInfo[owning_id][hID], targetid);
	        mysql_tquery(dbCon, szQuery);
	    }
	}
	return 1;
}*/

ExistWeaponSlot(playerid, weaponid) {
	if(IsMelee(weaponid) && IsMeleeSlotTaken(playerid)) return playerData[playerid][pGun1];
	else if(IsPrimary(weaponid) && IsPrimarySlotTaken(playerid)) return playerData[playerid][pGun2];
	else if(IsSecondary(weaponid) && IsSecondarySlotTaken(playerid)) return playerData[playerid][pGun3];
	return 0;
}

DRUG_PACKAGE_OBJECT(); public DRUG_PACKAGE_OBJECT()
{
	new rows;
	cache_get_row_count(rows);

    if(!rows)return 1;

	for(new i; i < rows; i++)
	{
		new objectid, data[e_objectDrug];
		
		cache_get_value_name_int(i, "drugSID", data[drugSID]);
		cache_get_value_name_int(i, "drugOwner", data[drugOwner]);
		cache_get_value_name_int(i, "drugObj", data[drugObj]);
		cache_get_value_name_float(i, "drugObjectX", data[drugObjectX]);
		cache_get_value_name_float(i, "drugObjectY", data[drugObjectY]);
		cache_get_value_name_float(i, "drugObjectZ", data[drugObjectZ]);
		cache_get_value_name_float(i, "drugObjectRX", data[drugObjectRX]);
		cache_get_value_name_float(i, "drugObjectRY", data[drugObjectRY]);
		cache_get_value_name_float(i, "drugObjectRZ", data[drugObjectRZ]);
		cache_get_value_name_int(i, "drugObjectWorld", data[drugObjectWorld]);
		cache_get_value_name_int(i, "drugObjectInt", data[drugObjectInt]);
		
		objectid = CreateDynamicObject(DrugObject[data[drugObj]][DRUGOBJECT_MODEL], data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugObjectWorld], data[drugObjectInt], -1, 200.0);
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		
		format(szQuery, sizeof(szQuery), "SELECT * FROM `drugs_object` WHERE `objectID` = '%d'", data[drugSID]);
		mysql_tquery(dbCon, szQuery, "DRUG_LOAD_OBJECT", "ii", objectid, data[drugSID]);
	}

	return 1;
}

DRUG_LOAD_OBJECT(objectid, objectsid); public DRUG_LOAD_OBJECT(objectid, objectsid)
{
	new rows;
	cache_get_row_count(rows);

    if(!rows) {
		DrugObject_Delete(objectid, objectsid);	
		return 1;
	}
	
	for(new i; i < rows; i++)
	{
		new itemslot = GetFreeItemDrugSlot();
		if(itemslot != -1) {
		
			cache_get_value_name_int(i, "drugID", ItemDrug[itemslot][drugID]);
			cache_get_value_name_int(i, "drugType", ItemDrug[itemslot][drugType]);
			cache_get_value_name_float(i, "drugQTY", ItemDrug[itemslot][drugQTY]);
			cache_get_value_name_int(i, "drugStrength", ItemDrug[itemslot][drugStrength]);
			cache_get_value_name_int(i, "drugPackage", ItemDrug[itemslot][drugPackage]);
			ItemDrug[itemslot][drugFore] = objectsid;
		}
	}
	return 1;
}


LoadCCTVs(); public LoadCCTVs()
{
	new rows;
	cache_get_row_count(rows);

    if(!rows)return 1;

	for(new i; i < rows; i++)
	{
	    CCTVInfo[i][cctvExists] = 1;
		
		cache_get_value_name_int(i, "id", CCTVInfo[i][cctvID]);
		
		cache_get_value_name(i, "name", CCTVInfo[i][cctvName], 50);
		
		cache_get_value_name_float(i, "x", CCTVInfo[i][cctvX]);
		cache_get_value_name_float(i, "y", CCTVInfo[i][cctvY]);
		cache_get_value_name_float(i, "z", CCTVInfo[i][cctvZ]);
		cache_get_value_name_float(i, "r_x", CCTVInfo[i][cctvRotX]);
		cache_get_value_name_float(i, "r_y", CCTVInfo[i][cctvRotY]);
		cache_get_value_name_float(i, "r_z", CCTVInfo[i][cctvRotZ]);
		cache_get_value_name_float(i, "l_x", CCTVInfo[i][cctvLookX]);
		cache_get_value_name_float(i, "l_y", CCTVInfo[i][cctvLookY]);
		cache_get_value_name_float(i, "l_z", CCTVInfo[i][cctvLookZ]);		
		cache_get_value_name_int(i, "world", CCTVInfo[i][cctvWorld]);
		cache_get_value_name_int(i, "interior", CCTVInfo[i][cctvInterior]);
		cache_get_value_name_int(i, "faction", CCTVInfo[i][cctvFaction]);


		CCTVInfo[i][cctvObject] = CreateDynamicObject(1886, CCTVInfo[i][cctvX], CCTVInfo[i][cctvY], CCTVInfo[i][cctvZ], CCTVInfo[i][cctvRotX], CCTVInfo[i][cctvRotY], CCTVInfo[i][cctvRotZ], CCTVInfo[i][cctvWorld], CCTVInfo[i][cctvInterior]);

		Iter_Add(CCTVs, i);
	}

	return 1;
}

SaveCCTV(id)
{
	new query[512];

	format(query, sizeof query, "UPDATE cctvs SET name = '%s', faction = '%d', x = '%f', y = '%f', z = '%f', r_x = '%f', r_y = '%f', r_z = '%f', l_x = '%f', l_y = '%f', l_z = '%f', world = '%d', interior = '%d' WHERE id = '%d'",
	CCTVInfo[id][cctvName],
	CCTVInfo[id][cctvFaction],
	CCTVInfo[id][cctvX],
	CCTVInfo[id][cctvY],
	CCTVInfo[id][cctvZ],
	CCTVInfo[id][cctvRotX],
	CCTVInfo[id][cctvRotY],
	CCTVInfo[id][cctvRotZ],
	CCTVInfo[id][cctvLookX],
	CCTVInfo[id][cctvLookY],
	CCTVInfo[id][cctvLookZ],
	CCTVInfo[id][cctvWorld],
	CCTVInfo[id][cctvInterior],
	CCTVInfo[id][cctvID]);

	mysql_tquery(dbCon, query);
	//printf(query);
	return 1;
}

Dialog:DialogShowCCTV(playerid, response, listitem, inputtext[])
{
	if(!response) return 0;

	return CCTV_View(playerid, listitem);
}

CMD:cctv(playerid, params[])
{
	if (GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {
		if(!isnull(params) && !strcmp(params, "off", true))
		{
			if(!playerData[playerid][pInCCTV])return
				SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ใช้งาน CCTV");

			return CCTV_ExitView(playerid);
		}

		return CCTV_ShowOptions(playerid);
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "   สำหรับเจ้าหน้าที่เท่านั้น!");
}

CMD:cctvoff(playerid, params[])
{
	if(!playerData[playerid][pInCCTV])return
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ใช้งาน CCTV");
	
	return CCTV_ExitView(playerid);
}

CMD:tvedit(playerid, params[])
{
	if(GetPVarInt(playerid, "EditingCCTVs"))return
 		SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถใช้คำสั่งนี้ได้ในขณะแก้ไขวัตถุ");

	new id, option[20], amount, name[50];

	if(sscanf(params, "ds[20]D(-1)S()[50]", id, option, amount, name))return
	    SendClientMessage(playerid, COLOR_GREY, "/tvedit <id> <position - faction(ยังไม่เปิดใช้) - name - lookat>");

	if(id < 0 || id > MAX_CCTVS || !CCTVInfo[id][cctvExists])return
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ไอดี CCTV ไม่ถูกต้อง");

	if(!strcmp(option, "position", true))
	{
	    SetPVarInt(playerid, "EditingCCTVs", 1);
		SetPVarInt(playerid, "CCTVsEditing", id);
	    EditDynamicObject(playerid, CCTVInfo[id][cctvObject]);
	}
	else if(!strcmp(option, "faction", true))
	{
 		if(amount < -1)
            SendClientMessage(playerid, COLOR_GREY, "/tvedit <id> <faction> <id>");

		if(amount >= MAX_FACTIONS || !FactionData[amount][factionExists])return
			SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่พบ Faction นี้");

		CCTVInfo[id][cctvFaction] = amount;
		SaveCCTV(id);
	}
	else if(!strcmp(option, "name", true))
	{
	    if(!strlen(name) || strlen(name) > 32)return
	        SendClientMessage(playerid, COLOR_GREY, "/tvedit <id> <name> <-1> <Text>");

		format(CCTVInfo[id][cctvName], 50, name);
		SaveCCTV(id);
	}
	/*else if(!strcmp(option, "lock", true))
	{
		if(!playerData[playerid][pInCCTV])return
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณยังไม่ได้ใช้งาน CCTV");

		if(CCTVInfo[id][cctvLookX] != 0.0 && CCTVInfo[id][cctvLookY] != 0.0) {
			CCTVInfo[id][cctvLookX] = 0.0;
			CCTVInfo[id][cctvLookY] = 0.0;
			CCTVInfo[id][cctvLookZ] = 0.0;
			
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้ปลดล็อค CCTV");
		}
		else {
			GetPlayerCameraFrontVector(playerid, CCTVInfo[id][cctvLookX], CCTVInfo[id][cctvLookY], CCTVInfo[id][cctvLookZ]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "คุณได้ล็อค CCTV");
		}
		SaveCCTV(id);
		CCTV_ExitView(playerid);
	}*/
	else if(!strcmp(option, "lookat", true))
	{
		GetPlayerPos(playerid, CCTVInfo[id][cctvLookX], CCTVInfo[id][cctvLookY], CCTVInfo[id][cctvLookZ]);
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณปรับให้กล้อง CCTV หันมาตำแหน่งของคุณ");
		SaveCCTV(id);
	}
	else return
	    SendClientMessage(playerid, COLOR_GREY, "/tvedit <id> <position - faction(ยังไม่เปิดใช้) - name - lookat>");

	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ได้แก้ไข CCTV ID %d", ReturnPlayerName(playerid), id);
	return 1;
}
CMD:tvdelete(playerid, params[])
{
	if(GetPVarInt(playerid, "EditingCCTVs"))return
 		SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถใช้คำสั่งนี้ได้ในขณะแก้ไขวัตถุ");

	new id;

	if(sscanf(params, "d", id))return
	    SendClientMessage(playerid, COLOR_GREY, "/tvdelete <id>");

	if(id < 0 || id > MAX_CCTVS || !CCTVInfo[id][cctvExists])return
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ไอดี CCTV ไม่ถูกต้อง");

	new query[128];

	format(query, sizeof(query), "DELETE FROM cctvs WHERE id = '%d'", CCTVInfo[id][cctvID]);
	mysql_tquery(dbCon, query);

	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s ได้ลบ CCTV ID %d", ReturnPlayerName(playerid), id);

	DestroyDynamicObject(CCTVInfo[id][cctvObject]);

	CCTVInfo[id][cctvX] = 0.0;
	CCTVInfo[id][cctvY] = 0.0;
	CCTVInfo[id][cctvZ] = 0.0;
	CCTVInfo[id][cctvRotX] = 0.0;
	CCTVInfo[id][cctvRotY] = 0.0;
	CCTVInfo[id][cctvRotZ] = 0.0;
	CCTVInfo[id][cctvLookX] = 0.0;
	CCTVInfo[id][cctvLookY] = 0.0;
	CCTVInfo[id][cctvLookZ] = 0.0;
	CCTVInfo[id][cctvWorld] = 0;
	CCTVInfo[id][cctvInterior] = 0;
	CCTVInfo[id][cctvFaction] = -1;

	CCTVInfo[id][cctvExists] = 0;

	Iter_Remove(CCTVs, id);

	format(szString, sizeof(szString), "CCTV ID %d", id);
	SQL_LogAdmin_Action(playerid, "/tvdelete", szString);
	return 1;
}
CMD:tvcreate(playerid, params[])
{
	if(GetPVarInt(playerid, "EditingCCTVs"))return
 		SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่สามารถใช้คำสั่งนี้ได้ในขณะแก้ไขวัตถุ");

	new name[50];

	if(Iter_Count(CCTVs) >= MAX_CCTVS)return
		SendClientMessage(playerid, COLOR_LIGHTRED, "ถึงขีดจำกัดของ CCTV แล้ว");

	if(sscanf(params, "s[50]", name))return
		SendClientMessage(playerid, COLOR_GREY, "/tvcreate <name>");

	new id = Iter_Free(CCTVs);

	GetPlayerPos(playerid, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ]);
	CCTVInfo[id][cctvRotX] = 0.0;
	CCTVInfo[id][cctvRotY] = 0.0;
	CCTVInfo[id][cctvRotZ] = 0.0;
	CCTVInfo[id][cctvLookX] = 0.0;
	CCTVInfo[id][cctvLookY] = 0.0;
	CCTVInfo[id][cctvLookZ] = 0.0;
	CCTVInfo[id][cctvFaction] = -1;
	CCTVInfo[id][cctvWorld] = GetPlayerVirtualWorld(playerid);
	CCTVInfo[id][cctvInterior] = GetPlayerInterior(playerid);
	format(CCTVInfo[id][cctvName], 50, name);

	CCTVInfo[id][cctvObject] = CreateDynamicObject(1886, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ], CCTVInfo[id][cctvRotX], CCTVInfo[id][cctvRotY], CCTVInfo[id][cctvRotZ], CCTVInfo[id][cctvWorld], CCTVInfo[id][cctvInterior]);
	SetPVarInt(playerid, "AddingCCTVs", 1);
	SetPVarInt(playerid, "CCTVsEditing", id);
	EditDynamicObject(playerid, CCTVInfo[id][cctvObject]);

	Iter_Add(CCTVs, id);

	return 1;
}
CMD:gototv(playerid, params[])
{
	new id;

	if(sscanf(params, "d", id))return
	    SendClientMessage(playerid, COLOR_GREY, "/gototv <id>");

	if(id < 0 || id > MAX_CCTVS || !CCTVInfo[id][cctvExists])return
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ไอดี CCTV ไม่ถูกต้อง");

	SetPlayerPos(playerid, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ]);
	SetPlayerVirtualWorld(playerid, CCTVInfo[id][cctvWorld]);
	SetPlayerInterior(playerid, CCTVInfo[id][cctvInterior]);

	return 1;
}

//CCTVs System

CCTV_ShowOptions(playerid)
{
	new string[2048];
	new count;

	foreach(new i : CCTVs)
	{
		//if(playerData[playerid][pFaction] != CCTVInfo[i][cctvFaction])continue;
		format(string, sizeof(string), "%s%s\n", string, CCTVInfo[i][cctvName]);
		//playerData[playerid][pListsID][count] = i;
		count++;
	}

	if(!count)return
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "ยังไม่มี CCTV ถูกจัดตั้ง");

	return Dialog_Show(playerid, DialogShowCCTV, DIALOG_STYLE_LIST, "SA Police CCTV-System", string, "View", "Quit");
}

CCTV_View(playerid, id)
{
	if(playerData[playerid][pInCCTV] == 0) {
		GetPlayerHealth(playerid, playerData[playerid][pHealth]);
		playerData[playerid][pInterior] = GetPlayerInterior(playerid);
		playerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		
		GetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, playerData[playerid][pPos][3]);

		if(IsPlayerInAnyVehicle(playerid))
		{
			SetPVarInt(playerid, "OldVehicleID", GetPlayerVehicleID(playerid));
			SetPVarInt(playerid, "OldVehicleSeat", GetPlayerVehicleSeat(playerid));
			RemovePlayerFromVehicle(playerid);
		}
		//TogglePlayerSpectating(playerid, true);
	}
	SetPlayerVirtualWorld(playerid, CCTVInfo[id][cctvWorld]);
	SetPlayerInterior(playerid, CCTVInfo[id][cctvInterior]);
	SetPlayerPos(playerid, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ]-20.0);

	TogglePlayerControllable(playerid, false);
	SetPlayerCameraPos(playerid, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ] + 0.2);
	SetPlayerCameraLookAt(playerid, CCTVInfo[id][cctvLookX], CCTVInfo[id][cctvLookY], CCTVInfo[id][cctvLookZ]);
	playerData[playerid][pInCCTV] = 1;
	/*if(CCTVInfo[id][cctvLookX] != 0.0 && CCTVInfo[id][cctvLookY] != 0.0) {
		TogglePlayerControllable(playerid, false);
		SetPlayerCameraPos(playerid, CCTVInfo[id][cctvX], CCTVInfo[id][cctvY], CCTVInfo[id][cctvZ] + 0.2);
		SetPlayerCameraLookAt(playerid, CCTVInfo[id][cctvLookX], CCTVInfo[id][cctvLookY], CCTVInfo[id][cctvLookZ]);
		playerData[playerid][pInCCTV] = 1;
	}
	else {
		TogglePlayerSpectating(playerid, true);
		AttachCameraToDynamicObject(playerid, CCTVInfo[id][cctvObject]);
		playerData[playerid][pInCCTV] = 2;
	}*/
	return 1;
}

CCTV_ExitView(playerid)
{
	if(playerData[playerid][pInCCTV])
	{
		/*if(playerData[playerid][pInCCTV] == 1) {
			TogglePlayerControllable(playerid, true);
		}
		else if(playerData[playerid][pInCCTV] == 2) {
			TogglePlayerSpectating(playerid, false);
		}*/
		
		TogglePlayerControllable(playerid, true);
		
		SetPlayerPos(playerid, playerData[playerid][pPos][0], playerData[playerid][pPos][1], playerData[playerid][pPos][2]);
		SetPlayerInterior(playerid, playerData[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, playerData[playerid][pWorld]);

		ResetPlayerWeapons(playerid);
		for (new i = 0; i < 13; i ++) GivePlayerWeapon(playerid, playerData[playerid][pGuns][i], playerData[playerid][pAmmo][i]);

		if(playerData[playerid][pHealth]) SetPlayerHealthEx(playerid, playerData[playerid][pHealth]);
		//SetPlayerArmour(playerid, playerData[playerid][pArmour]);
		
		new 
			temp_oldveh = GetPVarInt(playerid, "OldVehicleID"), 
			temp_oldseat = GetPVarInt(playerid, "OldVehicleSeat")
		;

		DeletePVar(playerid, "OldVehicleID");
		DeletePVar(playerid, "OldVehicleSeat");

		if(temp_oldveh)
			PutPlayerInVehicle(playerid, temp_oldveh, temp_oldseat);

		playerData[playerid][pInCCTV] = 0;
		
		SetCameraBehindPlayer(playerid);	
	}
	return 1;
}

// New POker 2

Dialog:DialogPSetupGame(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_LeaveTable(playerid);

	switch(listitem)
	{
		case 0: Poker_ShowMenu(playerid, OPTION_BUY_IN_MAX);
		case 1: Poker_ShowMenu(playerid, OPTION_BUY_IN_MIN);
		case 2: Poker_ShowMenu(playerid, OPTION_BLINDS);
		case 3: Poker_ShowMenu(playerid, OPTION_PLAYERS_LIMIT);
		case 4: Poker_ShowMenu(playerid, OPTION_SET_KEY);
		case 5: Poker_ShowMenu(playerid, OPTION_ROUND_DELAY);
		case 6: Poker_ShowMenu(playerid, OPTION_SEAT_PRICE);
		case 7: Poker_ShowMenu(playerid, OPTION_BUY_IN);
	}

	return 1;
}

Dialog:DialogPBuyInMax(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
			
	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 1 || strval(inputtext) > 20000000) return 
		Poker_ShowMenu(playerid, OPTION_BUY_IN_MAX);

	if(strval(inputtext) <= PokerTable[tableid][co_table_buy_in_min]) return
		Poker_ShowMenu(playerid, OPTION_BUY_IN_MAX);

	PokerTable[tableid][co_table_buy_in_max] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPSeatPrice(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 0 || strval(inputtext) > 200) return
		Poker_ShowMenu(playerid, OPTION_SEAT_PRICE);

	PokerTable[tableid][co_table_seat_price] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPBuyInMin(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
			
	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 1 || strval(inputtext) > 10000) return 
		Poker_ShowMenu(playerid, OPTION_BUY_IN_MIN);

	if(strval(inputtext) >= PokerTable[tableid][co_table_buy_in_max]) return
		Poker_ShowMenu(playerid, OPTION_BUY_IN_MIN);

	PokerTable[tableid][co_table_buy_in_min] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPBlinds(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
			
	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 1 || strval(inputtext) > 10000) return 
		Poker_ShowMenu(playerid, OPTION_BLINDS);

	PokerTable[tableid][co_table_blind] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPPlayersLimit(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
			
	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 2 || strval(inputtext) > 6) return 
		Poker_ShowMenu(playerid, OPTION_PLAYERS_LIMIT);

	PokerTable[tableid][co_table_guests_limit] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPKey(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	new tableid = playerData[playerid][pTableID]-1;

	strmid(PokerTable[tableid][co_table_key], inputtext, 0, strlen(inputtext), 32);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPDelay(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
			
	new tableid = playerData[playerid][pTableID]-1;

	if(strval(inputtext) < 15 || strval(inputtext) > 120) return 
		Poker_ShowMenu(playerid, OPTION_ROUND_DELAY);

	PokerTable[tableid][co_table_setdelay] = strval(inputtext);
	

	Poker_ShowMenu(playerid, OPTION_SETUP_GAME);

	return 1;
}

Dialog:DialogPBuyIn(playerid, response, listitem, inputtext[])
{
	if(!response)return
		Poker_LeaveTable(playerid);

	new tableid = playerData[playerid][pTableID]-1;
	new amount = strval(inputtext);

	if(amount < PokerTable[tableid][co_table_buy_in_min] || amount > PokerTable[tableid][co_table_buy_in_max] || amount > playerData[playerid][pCash])return
		Poker_ShowMenu(playerid, OPTION_BUY_IN);

	PokerTable[tableid][co_table_active_guests]++;

	playerData[playerid][pChips] += amount;

	playerData[playerid][pCash] -= amount;
	//AC_GivePlayerMoney(playerid, -amount, "/poker chips");

	if(PokerTable[tableid][co_table_active] == 3 && PokerTable[tableid][co_table_round] == 0 && PokerTable[tableid][co_table_delay] >= 6) playerData[playerid][pPokerStatus] = 1;
	if(PokerTable[tableid][co_table_active] < 3) playerData[playerid][pPokerStatus] = 1;
	
	if(PokerTable[tableid][co_table_active] == 1)
	{
		PokerTable[tableid][co_table_active] = 2;
		if(PokerTable[tableid][co_table_pulse_timer] != -1) {
			KillTimer(PokerTable[tableid][co_table_pulse_timer]);
			PokerTable[tableid][co_table_pulse_timer]=-1;
		}
		PokerTable[tableid][co_table_pulse_timer] = SetTimerEx("Poker_Timer", 1000, 1, "d", tableid);
	}

	SelectTextDraw(playerid, COLOR_YELLOW);

	return 1;
}

Dialog:DialogPCall(playerid, response, listitem, inputtext[])
{
	playerData[playerid][pActionChoice] = 0;

	if(!response)return 0;

	new tableid = playerData[playerid][pTableID]-1;

	new actualBet = PokerTable[tableid][co_table_active_bet] - playerData[playerid][pCurrentBet];

	if(actualBet > playerData[playerid][pChips]) 
	{
		PokerTable[tableid][co_table_pot] += playerData[playerid][pChips];
		playerData[playerid][pChips] = 0;
		playerData[playerid][pCurrentBet] = PokerTable[tableid][co_table_active_bet];
	} 
	else 
	{
		PokerTable[tableid][co_table_pot] += actualBet;
		playerData[playerid][pChips] -= actualBet;
		playerData[playerid][pCurrentBet] = PokerTable[tableid][co_table_active_bet];
	}

	format(playerData[playerid][pPokerStatusString], 16, "Call");

	
	Poker_RotateGuests(tableid);

	ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);

	return 1;
}

Dialog:DialogPRaise(playerid, response, listitem, inputtext[])
{
	playerData[playerid][pActionChoice] = 0;

	if(!response)return 0;

	new tableid = playerData[playerid][pTableID]-1;
	new actualRaise = strval(inputtext) - playerData[playerid][pCurrentBet];

	if(strval(inputtext) >= PokerTable[tableid][co_table_active_bet] + PokerTable[tableid][co_table_blind] / 2 && strval(inputtext) <= playerData[playerid][pCurrentBet] + playerData[playerid][pChips])
	{
		PokerTable[tableid][co_table_pot] += actualRaise;
		PokerTable[tableid][co_table_active_bet] = strval(inputtext);

		playerData[playerid][pChips] -= actualRaise;
		playerData[playerid][pCurrentBet] = PokerTable[tableid][co_table_active_bet];
		format(playerData[playerid][pPokerStatusString], 16, "Raise");

		PokerTable[tableid][co_table_rot] = 0;

		
		Poker_RotateGuests(tableid);

		ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
	} 
	else Poker_ShowMenu(playerid, OPTION_RAISE);

	return 1;
}

Dialog:DialogPEnter(playerid, response, listitem, inputtext[])
{
	if(!response)return
		playerData[playerid][pTableID] = 0;

	new tableid = playerData[playerid][pTableID]-1;
	
	if(isnull(inputtext) || strcmp(PokerTable[tableid][co_table_key], inputtext, false) > 0)return
	    Dialog_Show(playerid, DialogPEnter, DIALOG_STYLE_PASSWORD, "Poker - Enter", "รหัสผ่านไม่ถูกต้อง\n\nป้อนรหัสผ่านเพื่อเข้าสู่เกมโป๊กเกอร์:", "Enter", "Cancel");
	    
	Poker_JoinTable(playerid, tableid);

	return 1;
}


Poker_WinnerHand(const cards[5], const hands[2], &p_value, &p_kicker)
{
	new best_value;
	new best_kicker;

	new value;
	new kicker;

	for(new i; i < 21; i++)
	{
		switch(i)
		{
			case 0: Poker_AnalyzeHand(cards[0], cards[1], cards[2], cards[3], cards[4], value, kicker);
			case 1: Poker_AnalyzeHand(cards[0], cards[1], cards[2], hands[0], hands[1], value, kicker);
			case 2: Poker_AnalyzeHand(cards[0], cards[1], cards[3], hands[0], hands[1], value, kicker);
			case 3: Poker_AnalyzeHand(cards[0], cards[1], cards[4], hands[0], hands[1], value, kicker);
			case 4: Poker_AnalyzeHand(cards[0], cards[2], cards[3], hands[0], hands[1], value, kicker);
			case 5: Poker_AnalyzeHand(cards[0], cards[2], cards[4], hands[0], hands[1], value, kicker);
			case 6: Poker_AnalyzeHand(cards[0], cards[3], cards[4], hands[0], hands[1], value, kicker);
			case 7: Poker_AnalyzeHand(cards[1], cards[2], cards[3], hands[0], hands[1], value, kicker);
			case 8: Poker_AnalyzeHand(cards[1], cards[2], cards[4], hands[0], hands[1], value, kicker);
			case 9: Poker_AnalyzeHand(cards[1], cards[3], cards[4], hands[0], hands[1], value, kicker);
			case 10: Poker_AnalyzeHand(cards[2], cards[3], cards[4], hands[0], hands[1], value, kicker);
			case 11: Poker_AnalyzeHand(cards[0], cards[1], cards[2], cards[3], hands[0], value, kicker);
			case 12: Poker_AnalyzeHand(cards[0], cards[1], cards[2], cards[4], hands[0], value, kicker);
			case 13: Poker_AnalyzeHand(cards[0], cards[1], cards[3], cards[4], hands[0], value, kicker);
			case 14: Poker_AnalyzeHand(cards[0], cards[2], cards[3], cards[4], hands[0], value, kicker);
			case 15: Poker_AnalyzeHand(cards[1], cards[2], cards[3], cards[4], hands[0], value, kicker);
			case 16: Poker_AnalyzeHand(cards[0], cards[1], cards[2], cards[3], hands[1], value, kicker);
			case 17: Poker_AnalyzeHand(cards[0], cards[1], cards[2], cards[4], hands[1], value, kicker);
			case 18: Poker_AnalyzeHand(cards[0], cards[1], cards[3], cards[4], hands[1], value, kicker);
			case 19: Poker_AnalyzeHand(cards[0], cards[2], cards[3], cards[4], hands[1], value, kicker);
			case 20: Poker_AnalyzeHand(cards[1], cards[2], cards[3], cards[4], hands[1], value, kicker);
		}

        if(value > best_value)
        {
			best_value = value;
			best_kicker = kicker;
        }
        else if(value == best_value && kicker > best_kicker) best_kicker = kicker;
	}

	p_value = best_value;
	p_kicker = best_kicker; return 1;
}

Poker_AnalyzeHand(card_1, card_2, card_3, card_4, card_5, &value, &kicker)
{
    new card[5];
	new card_suit[5];
	new card_value[5];

	card[0] = card_1;
	card[1] = card_2;
	card[2] = card_3;
	card[3] = card_4;
	card[4] = card_5;

	for(new i; i < 5; i++)
	{
	    new tmp_card = card[i];
	    
		card_suit[i] = PokerCards[tmp_card][cardChar];
		card_value[i] = PokerCards[tmp_card][cardValue];
	}

	ArraySort(card_value, 5);

	if(card_value[0] == card_value[1] - 1 && card_value[1] == card_value[2] - 1 && card_value[2] == card_value[3] - 1 && card_value[3] == card_value[4] - 1 &&
	card_suit[0] == card_suit[1] && card_suit[1] == card_suit[2] && card_suit[2] == card_suit[3] && card_suit[3] == card_suit[4])
	{
		value = (card_value[4] == Ace) ? RoyalFlush : StraightFlush;
		kicker = (card_value[4] == Ace) ? Ace : card_value[4];
	}
	else if(card_value[0] == Two && card_value[1] == Three && card_value[2] == Four && card_value[3] == Five && card_value[4] == Ace &&
	card_suit[0] == card_suit[1] && card_suit[1] == card_suit[2] && card_suit[2] == card_suit[3] && card_suit[3] == card_suit[4])
	{
		value = StraightFlush;
		kicker = Five;
	}
	else if(card_value[0] == card_value[1] && card_value[1] == card_value[2] && card_value[2] == card_value[3])
	{
		value = Poker;
		kicker = card_value[0] * 20 + card_value[4];
	}
	else if(card_value[1] == card_value[2] && card_value[2] == card_value[3] && card_value[3] == card_value[4])
	{
		value = Poker;
		kicker = card_value[1] * 20 + card_value[0];
	}
	else if(card_value[0] == card_value[1] && card_value[2] == card_value[3] && card_value[3] == card_value[4])
	{
		value = FullHouse;
		kicker = card_value[0] + card_value[2] * 20;
	}
	else if(card_value[0] == card_value[1] && card_value[1] == card_value[2] && card_value[3] == card_value[4])
	{
		value = FullHouse;
		kicker = card_value[0] * 20 + card_value[3];
	}
	else if(card_suit[0] == card_suit[1] && card_suit[1] == card_suit[2] && card_suit[2] == card_suit[3] && card_suit[3] == card_suit[4])
	{
		value = Flush;
		kicker = card_value[4] * 160000 + card_value[3] * 8000 + card_value[2] * 400 + card_value[1] * 20 + card_value[0];
	}
	else if(card_value[0] == card_value[1] - 1 && card_value[1] == card_value[2] - 1 && card_value[2] == card_value[3] - 1 && card_value[3] == card_value[4] - 1)
	{
		value = Straight;
		kicker = card_value[4];
	}
	else if(card_value[0] == Two && card_value[1] == Three && card_value[2] == Four && card_value[3] == Five && card_value[4] == Ace)
	{
		value = Straight;
	    kicker = Five;
	}
	else if(card_value[0] == card_value[1] && card_value[1] == card_value[2])
	{
		value = ThreeOfKind;
		kicker = card_value[0] * 400 + card_value[3] + card_value[4] * 20;
	}
	else if(card_value[1] == card_value[2] && card_value[2] == card_value[3])
	{
		value = ThreeOfKind;
		kicker = card_value[1] * 400 + card_value[0] + card_value[4] * 20;
	}
	else if(card_value[2] == card_value[3] && card_value[3] == card_value[4])
	{
		value = ThreeOfKind;
		kicker = card_value[1] * 400 + card_value[0] + card_value[1] * 20;
	}
	else if(card_value[0] == card_value[1] && card_value[2] == card_value[3])
	{
		value = TwoPairs;
		kicker = card_value[0] * 20 + card_value[2] * 400 + card_value[4];
	}
	else if(card_value[0] == card_value[1] && card_value[3] == card_value[4])
	{
		value = TwoPairs;
		kicker = card_value[0] * 20 + card_value[3] * 400 + card_value[2];
	}
	else if(card_value[1] == card_value[2] && card_value[3] == card_value[4])
	{
		value = TwoPairs;
		kicker = card_value[1] * 20 + card_value[3] * 400 + card_value[0];
	}
	else if(card_value[0] == card_value[1])
	{
		value = Pair;
		kicker = card_value[0] * 8000 + card_value[2] + card_value[3] * 20 + card_value[4] * 400;
	}
	else if(card_value[1] == card_value[2])
	{
		value = Pair;
		kicker = card_value[1] * 8000 + card_value[0] + card_value[3] * 20 + card_value[4] * 400;
	}
	else if(card_value[2] == card_value[3])
	{
		value = Pair;
		kicker = card_value[2] * 8000 + card_value[0] + card_value[1] * 20 + card_value[4] * 400;
	}
	else if(card_value[3] == card_value[4])
	{
		value = Pair;
		kicker = card_value[3] * 8000 + card_value[0] + card_value[1] * 20 + card_value[2] * 400;
	}
	else
	{
		value = HighCard;
		kicker = card_value[4] * 160000 + card_value[3] * 8000 + card_value[2] * 400 + card_value[1] * 20 + card_value[0];
	}

	return 1;
}

forward Poker_Timer(tableid); 
public Poker_Timer(tableid)
{
	if(!PokerTable[tableid][co_table_active]) {
		KillTimer(PokerTable[tableid][co_table_pulse_timer]);
		PokerTable[tableid][co_table_pulse_timer]=-1;
		return 1;
	}
	if(PokerTable[tableid][co_table_guests] <= 0)return Reset_ResetTable(tableid);

	if(PokerTable[tableid][co_table_guests] <= 0)return Reset_ResetTable(tableid);

	for(new i = 0; i < 6; i++)  if(PokerTable[tableid][co_table_slots][i] != -1)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];
		new idleRandom = random(100);

		SetPlayerArmedWeapon(playerid, 0);

		if(idleRandom >= 90) 
		{
			SetPlayerPosObjectOffset(PokerTable[tableid][co_table_objectid], playerid, PokerTableMiscObjOffsets[i][0], PokerTableMiscObjOffsets[i][1], PokerTableMiscObjOffsets[i][2]);
			SetPlayerFacingAngle(playerid, PokerTableMiscObjOffsets[i][5] + 90.0);
			SetPlayerInterior(playerid, PokerTable[tableid][co_table_int]);
			SetPlayerVirtualWorld(playerid, PokerTable[tableid][co_table_vw]);

			if(playerData[playerid][pActiveHand])  ApplyAnimation(playerid, "CASINO", "cards_loop", 4.1, 0, 1, 1, 1, 1, 1);
		}
		else continue;
	}

	if(PokerTable[tableid][co_table_active_guests] >= 2 && PokerTable[tableid][co_table_active] == 2)  for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(playerid != -1 && playerData[playerid][pChips]) 
		{
			PokerTable[tableid][co_table_active] = 3;
			PokerTable[tableid][co_table_delay] = PokerTable[tableid][co_table_setdelay]; break;
		}
		else continue;
	}

	

	if(PokerTable[tableid][co_table_guests] < 2) if(PokerTable[tableid][co_table_active] == 3 || PokerTable[tableid][co_table_active] == 4)  for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(playerid != -1 && playerData[playerid][pChips]) 
		{
			playerData[playerid][pChips] += PokerTable[tableid][co_table_pot];

			Poker_LeaveTable(playerid);
		}
		else continue;
	}

	if(PokerTable[tableid][co_table_active] == 4)
	{
		if(PokerTable[tableid][co_table_delay] == 20)  for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
		{
			PlayerPlaySound(PokerTable[tableid][co_table_slots][i], 5826, 0.0, 0.0, 0.0);
			Poker_ShowOptions(PokerTable[tableid][co_table_slots][i], 0);
		}

		if(PokerTable[tableid][co_table_delay] > 0)
		{
			PokerTable[tableid][co_table_delay]--;

			if(PokerTable[tableid][co_table_delay] <= 5 && PokerTable[tableid][co_table_delay] > 0) for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1) PlayerPlaySound(PokerTable[tableid][co_table_slots][i], 1139, 0.0, 0.0, 0.0);
			if(PokerTable[tableid][co_table_delay] == 0) return Poker_ResetTableRound(tableid);
		}

		if(PokerTable[tableid][co_table_delay] == 19)
		{
			new cards[5];
			new hands[2];

			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];

				if(playerData[playerid][pActiveHand]) 
				{
					for(new c; c < 5; c++) 
						cards[c] = PokerTable[tableid][co_table_cards][c];

					hands[0] = playerData[playerid][pFirstCard];
					hands[1] = playerData[playerid][pSecondCard];

					Poker_WinnerHand(cards, hands, playerData[playerid][pTableResult][0], playerData[playerid][pTableResult][1]);
				}
				else continue;
			}

			new best_value;
			new best_kicker;

			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];

				if(!playerData[playerid][pActiveHand])continue;

				if(playerData[playerid][pTableResult][0] > best_value)
    			{
    			    best_value = playerData[playerid][pTableResult][0];
    			    best_kicker = playerData[playerid][pTableResult][1];
				}
				else if(playerData[playerid][pTableResult][0] == best_value && playerData[playerid][pTableResult][1] > best_kicker) best_kicker = playerData[playerid][pTableResult][1];
			}

			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
			    new playerid = PokerTable[tableid][co_table_slots][i];
			    
				if(playerData[playerid][pTableResult][0] == best_value && playerData[playerid][pTableResult][1] == best_kicker) PokerTable[tableid][co_table_winners]++;
			}

			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];

				if(playerData[playerid][pTableResult][0] == best_value && playerData[playerid][pTableResult][1] == best_kicker)
				{
					switch(best_value)
					{
						case HighCard: format(playerData[playerid][pPokerResultString], 32, "High card");
						case Pair: format(playerData[playerid][pPokerResultString], 32, "Pair");
						case TwoPairs: format(playerData[playerid][pPokerResultString], 32, "Two Pairs");
						case ThreeOfKind: format(playerData[playerid][pPokerResultString], 32, "Three of a Kind");
						case Straight: format(playerData[playerid][pPokerResultString], 32, "Straight");
						case Flush: format(playerData[playerid][pPokerResultString], 32, "Flush");
						case FullHouse: format(playerData[playerid][pPokerResultString], 32, "Full House");
						case Poker: format(playerData[playerid][pPokerResultString], 32, "Poker");
						case StraightFlush: format(playerData[playerid][pPokerResultString], 32, "Four of a kind");
						case RoyalFlush: format(playerData[playerid][pPokerResultString], 32, "Straight Flush");
					}
					
					new splitPot = PokerTable[tableid][co_table_pot] / PokerTable[tableid][co_table_winners];

					if(PokerTable[tableid][co_table_winners] < 2)
					{
						splitPot = PokerTable[tableid][co_table_pot];
						PokerTable[tableid][co_table_winner_id] = playerid;
						PlayerPlaySound(playerid, 5847, 0.0, 0.0, 0.0);
					}
					else PlayerPlaySound(playerid, 5821, 0.0, 0.0, 0.0);

					playerData[playerid][pTableWinner] = 1;
					playerData[playerid][pChips] += splitPot;
				} 
				else PlayerPlaySound(playerid, 31202, 0.0, 0.0, 0.0);
			}
			else continue;
		}

		
	}

	if(PokerTable[tableid][co_table_active] == 3)
	{
		if(PokerTable[tableid][co_table_active_hands] == 1 && PokerTable[tableid][co_table_round] == 1)
		{
			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];
						
				if(playerData[playerid][pActiveHand]) 
					playerData[playerid][pPokerHide] = 1;
			}

			PokerTable[tableid][co_table_stage] = 0;
			PokerTable[tableid][co_table_active] = 4;
			PokerTable[tableid][co_table_delay] = 20 + 1;
		}

		if(PokerTable[tableid][co_table_delay] > 0)
		{
			PokerTable[tableid][co_table_delay]--;

			if(PokerTable[tableid][co_table_delay] <= 5 && PokerTable[tableid][co_table_delay] > 0) for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1) PlayerPlaySound(PokerTable[tableid][co_table_slots][i], 1139, 0.0, 0.0, 0.0);
		}

		if(PokerTable[tableid][co_table_round] == 0 && PokerTable[tableid][co_table_delay] == 5)
		{
			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];
				playerData[playerid][pPokerStatus] = 1;					
			}

			
			Poker_AssignBlinds(tableid);
		}

		if(PokerTable[tableid][co_table_round] == 0 && PokerTable[tableid][co_table_delay] == 0)
		{
			PokerTable[tableid][co_table_round] = 1;

			for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
			{
				new playerid = PokerTable[tableid][co_table_slots][i];
				playerData[playerid][pPokerStatusString] = '\0';
			}

			
			Poker_ShuffleDeck(tableid);
			Poker_RotateGuests(tableid);
		}

		for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
		{
			new playerid = PokerTable[tableid][co_table_slots][i];
		
			if(playerData[playerid][pActiveGuest]) 
			{
				playerData[playerid][pPokerTime]--;

				if(playerData[playerid][pPokerTime])continue;
				
				if(playerData[playerid][pActionChoice]) 
				{
					playerData[playerid][pActionChoice] = 0;
					Dialog_Close(playerid);
				}

				
				Poker_Fold(playerid);
				Poker_RotateGuests(tableid);
			}
			else continue;
		}

		
	}

	for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];
		new tmpString[128];
		new tmp_value[6] = {0, 5, 10, 15, 20, 25};

		if(playerid != -1) 
		{
			new name[MAX_PLAYER_NAME];
			strmid(name, ReturnRealName(playerid), 0, MAX_PLAYER_NAME);

			for(new td = 0; td < 6; td++) 
			{
				new targetid = PokerTable[tableid][co_table_slots][td];
				if(targetid != -1) {
					new temp_str[128];
					format(temp_str, sizeof(temp_str), "~h~~y~%s:~g~ %s", name, playerData[playerid][pTableDealer] ? ("Dealer") : playerData[playerid][pPokerStatus] ? ("Playing") : ("Waiting"));
					PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 0], temp_str);
				}
			}

			if(playerData[playerid][pChips] > 0) format(tmpString, sizeof(tmpString), "~h~~y~Chips: ~g~$%d", playerData[playerid][pChips]);
			if(playerData[playerid][pChips] < 0) format(tmpString, sizeof(tmpString), "~h~~y~Chips: ~r~$%d", playerData[playerid][pChips]);
			
			for(new td = 0; td < 6; td++) 
			{
				new targetid = PokerTable[tableid][co_table_slots][td];
				if(targetid != -1) PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 1], tmpString);
			}

			for(new td = 0; td < 6; td++) if(PokerTable[tableid][co_table_slots][td] != -1)
			{
				new targetid = PokerTable[tableid][co_table_slots][td];

				if(playerData[playerid][pActiveHand]) 
				{
					if(playerid != targetid) 
					{
						if(PokerTable[tableid][co_table_active] == 4 && PokerTable[tableid][co_table_delay] <= 19 && playerData[playerid][pPokerHide] != 1)
						{
							strmid(tmpString, PokerCards[playerData[playerid][pFirstCard] + 0][cardName], 0, 32);
							PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 2], tmpString);

							strmid(tmpString, PokerCards[playerData[playerid][pSecondCard] + 0][cardName], 0, 32);
							PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 3], tmpString);
						}
						else 
						{
							PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 2], "LD_CARD:cdback");
							PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 3], "LD_CARD:cdback");
						}

						continue;
					} 
					
					strmid(tmpString, PokerCards[playerData[playerid][pFirstCard] + 0][cardName], 0, 32);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][tmp_value[i] + 2], tmpString);

					strmid(tmpString, PokerCards[playerData[playerid][pSecondCard] + 0][cardName], 0, 32);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][tmp_value[i] + 3], tmpString);
				} 
				else 
				{
					PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 2], " ");
					PlayerTextDrawSetString(targetid, PlayerPokerUI[targetid][tmp_value[i] + 3], " ");
				}

				continue;
			}

			if(PokerTable[tableid][co_table_active] < 3)  format(tmpString, sizeof(tmpString), " ");
			else if(playerData[playerid][pActiveGuest] && PokerTable[tableid][co_table_active] == 3) format(tmpString, sizeof(tmpString), "0:%d", playerData[playerid][pPokerTime]);
			else 
			{
				if(PokerTable[tableid][co_table_active] == 3 && PokerTable[tableid][co_table_delay] > 5)  playerData[playerid][pPokerStatusString] = '\0';
				if(PokerTable[tableid][co_table_active] == 4 && PokerTable[tableid][co_table_delay] == 19)
				{
					if(PokerTable[tableid][co_table_winners] == 1)
					{
						if(playerData[playerid][pTableWinner])
						{
							format(tmpString, sizeof(tmpString), "+ $%d", PokerTable[tableid][co_table_pot]);
							format(playerData[playerid][pPokerStatusString], 32, tmpString); 
						} 
						else format(tmpString, sizeof(tmpString), "- $%d", playerData[playerid][pCurrentBet]);
					} 
					else 
					{
						if(PokerTable[tableid][co_table_winners] > 1)
						{
							new splitPot = PokerTable[tableid][co_table_pot] / PokerTable[tableid][co_table_winners];
							format(tmpString, sizeof(tmpString), "+ $%d", splitPot);
							format(playerData[playerid][pPokerStatusString], 32, tmpString);
						} 
						else format(tmpString, sizeof(tmpString), "- $%d", playerData[playerid][pCurrentBet]);
					}

					format(playerData[playerid][pPokerStatusString], 32, tmpString);	
				}

				if(PokerTable[tableid][co_table_active] == 4 && PokerTable[tableid][co_table_delay] == 19)
				{
					if(playerData[playerid][pTableWinner] && playerData[playerid][pActiveHand] && playerData[playerid][pPokerHide] != 1)
						format(playerData[playerid][pPokerStatusString], 32, playerData[playerid][pPokerResultString]);
				}

				if(PokerTable[tableid][co_table_active] == 4 && PokerTable[tableid][co_table_delay] == 10)
				{
					if(PokerTable[tableid][co_table_winners] == 1)
					{
						if(playerData[playerid][pTableWinner])
						{
							format(tmpString, sizeof(tmpString), "+ $%d", PokerTable[tableid][co_table_pot]);
							format(playerData[playerid][pPokerStatusString], 32, tmpString);
						} 
						else  format(tmpString, sizeof(tmpString), "- $%d", playerData[playerid][pCurrentBet]);
					} 
					else 
					{
						if(playerData[playerid][pTableWinner])
						{
							new splitPot = PokerTable[tableid][co_table_pot]/PokerTable[tableid][co_table_winners];
							format(tmpString, sizeof(tmpString), "+ $%d", splitPot);
							format(playerData[playerid][pPokerStatusString], 32, tmpString);
						} 
						else  format(tmpString, sizeof(tmpString), "- $%d", playerData[playerid][pCurrentBet]);
					}

					format(playerData[playerid][pPokerStatusString], 32, tmpString);
				}

				format(tmpString, 32, playerData[playerid][pPokerStatusString]);
			}

			for(new td = 0; td < 6; td++) 
			{
				new targetid = PokerTable[tableid][co_table_slots][td];
				if(targetid != -1) PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 4], tmpString);
			}

			if(PokerTable[tableid][co_table_active] == 3)
			{
				format(tmpString, sizeof(tmpString), "Pot: ~g~$%d", PokerTable[tableid][co_table_pot]);
				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], tmpString);
			} 
			else if(PokerTable[tableid][co_table_active] == 4 && PokerTable[tableid][co_table_delay] < 19)
			{
				if(PokerTable[tableid][co_table_winner_id] != -1)
					format(tmpString, sizeof(tmpString), "~y~%s ~w~he/she won ~g~$%d", ReturnRealName(PokerTable[tableid][co_table_winner_id]), PokerTable[tableid][co_table_pot]);
				 
				else if(PokerTable[tableid][co_table_winners] > 1)
				{
					new splitPot = PokerTable[tableid][co_table_pot]/PokerTable[tableid][co_table_winners];
					format(tmpString, sizeof(tmpString), "~y~%d ~w~players have won ~g~$%d", PokerTable[tableid][co_table_winners], splitPot);
				}

				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], tmpString);
			} 
			else PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][37], "Texas Holdem Poker");

			if(PokerTable[tableid][co_table_delay] > 0 && PokerTable[tableid][co_table_active] == 3)
			{
				format(tmpString, sizeof(tmpString), "The hand starts in ~r~%d~w~...", PokerTable[tableid][co_table_delay]);
				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
			} 
			else if(PokerTable[tableid][co_table_active] == 2)
			{
				format(tmpString, sizeof(tmpString), "Waiting for other players...", PokerTable[tableid][co_table_pot]);
				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
			} 
			else if(PokerTable[tableid][co_table_active] == 3)
			{
				format(tmpString, sizeof(tmpString), "Bet: ~g~$%d", PokerTable[tableid][co_table_active_bet]);
				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
			} 
			else if(PokerTable[tableid][co_table_active] == 4)
			{
				format(tmpString, sizeof(tmpString), "The hand ends in ~r~%d~w~...", PokerTable[tableid][co_table_delay]);
				PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], tmpString);
			}
			else PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][46], "Texas Holdem Poker");

			switch(PokerTable[tableid][co_table_stage])
			{
				case 0:
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 1: 
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], PokerCards[PokerTable[tableid][co_table_cards][0] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], PokerCards[PokerTable[tableid][co_table_cards][1] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], PokerCards[PokerTable[tableid][co_table_cards][2] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], "LD_CARD:cdback");
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 2:
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], PokerCards[PokerTable[tableid][co_table_cards][0] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], PokerCards[PokerTable[tableid][co_table_cards][1] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], PokerCards[PokerTable[tableid][co_table_cards][2] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], PokerCards[PokerTable[tableid][co_table_cards][3] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], "LD_CARD:cdback");
				}
				case 3, 4:
				{
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][31], PokerCards[PokerTable[tableid][co_table_cards][0] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][32], PokerCards[PokerTable[tableid][co_table_cards][1] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][33], PokerCards[PokerTable[tableid][co_table_cards][2] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][34], PokerCards[PokerTable[tableid][co_table_cards][3] + 0][cardName]);
					PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][35], PokerCards[PokerTable[tableid][co_table_cards][4] + 0][cardName]);
				}
				default: continue;
			}
			
			
		}

		else for(new td = 0; td < 6; td++) if(PokerTable[tableid][co_table_slots][td] != -1)
		{
			new targetid = PokerTable[tableid][co_table_slots][td];

			PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 0], " ");
			PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 1], " ");
			PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 2], " ");
			PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 3], " ");
			PlayerTextDrawSetString(targetid, PlayerPokerUI[playerid][tmp_value[i] + 4], " ");
		}
		continue;
	}

	return 1;
}

Poker_AssignBlinds(tableid)
{
	if(PokerTable[tableid][co_table_pos] >= PokerTable[tableid][co_table_guests]) PokerTable[tableid][co_table_pos] = 0;

	new playerid;
	new tmpPos = PokerTable[tableid][co_table_pos];

	PokerTable[tableid][co_table_pos]++;
	

	if(PokerTable[tableid][co_table_active_guests] > 2)
	{
		playerid = Poker_FindGuestsOrder(tableid, tmpPos);

		if(playerid != -1)
		{
			playerData[playerid][pTableDealer] = 1;
			format(playerData[playerid][pPokerStatusString], 32, "Dealer");
		} 
		else return Poker_AssignBlinds(tableid);

		tmpPos++;
	}

	if(PokerTable[tableid][co_table_active_guests] > 1)
	{
		//Small Blind

		if(tmpPos >= PokerTable[tableid][co_table_guests]) tmpPos = 0;

		playerid = Poker_FindGuestsOrder(tableid, tmpPos);

		if(playerid != -1) 
		{
			format(playerData[playerid][pPokerStatusString], 32, "~r~SB -$%d", PokerTable[tableid][co_table_blind] / 2);

			PokerTable[tableid][co_table_pot] += (PokerTable[tableid][co_table_blind] / 2 > playerData[playerid][pChips]) ? playerData[playerid][pChips] : PokerTable[tableid][co_table_blind] / 2;
			playerData[playerid][pChips] = (PokerTable[tableid][co_table_blind] / 2 > playerData[playerid][pChips]) ? 0 : playerData[playerid][pChips] - (PokerTable[tableid][co_table_blind] / 2);

			playerData[playerid][pCurrentBet] = PokerTable[tableid][co_table_blind] / 2;
			PokerTable[tableid][co_table_active_bet] = PokerTable[tableid][co_table_blind] / 2;

						
		}
		else return Poker_AssignBlinds(tableid);

		//Big Blind

		tmpPos++; if(tmpPos >= PokerTable[tableid][co_table_guests]) tmpPos = 0;

		playerid = Poker_FindGuestsOrder(tableid, tmpPos);

		if(playerid != -1) 
		{
			format(playerData[playerid][pPokerStatusString], 32, "~r~BB -$%d", PokerTable[tableid][co_table_blind]);

			PokerTable[tableid][co_table_pot] += (playerData[playerid][pChips] < PokerTable[tableid][co_table_blind]) ? playerData[playerid][pChips] : PokerTable[tableid][co_table_blind];
			playerData[playerid][pChips] = (playerData[playerid][pChips] < PokerTable[tableid][co_table_blind]) ? 0 : playerData[playerid][pChips]  - PokerTable[tableid][co_table_blind];

			playerData[playerid][pCurrentBet] = PokerTable[tableid][co_table_blind];
			PokerTable[tableid][co_table_active_bet] = PokerTable[tableid][co_table_blind];

						
		}
		else return Poker_AssignBlinds(tableid);
	}

	return 1;
}

Poker_ShuffleDeck(tableid)
{
 	for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1) PlayerPlaySound(PokerTable[tableid][co_table_slots][i], 5600, 0.0, 0.0, 0.0);
	for(new i = 0; i < 52; i++) PokerTable[tableid][co_table_deck][i] = i;

	new rand;
	new tmp;
	new i;

	for(i = 52; i > 1; i--)
	{
		rand = random(52) % i;
		tmp = PokerTable[tableid][co_table_deck][rand];
		PokerTable[tableid][co_table_deck][rand] = PokerTable[tableid][co_table_deck][i - 1];
		PokerTable[tableid][co_table_deck][i - 1] = tmp;
	}

	Poker_DealHands(tableid); return 1;
}

Poker_DealHands(tableid)
{
	new tmp = 0;

	for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(playerData[playerid][pPokerStatus] && playerData[playerid][pChips] > 0)
		{
			playerData[playerid][pFirstCard] = PokerTable[tableid][co_table_deck][tmp];
			playerData[playerid][pSecondCard] = PokerTable[tableid][co_table_deck][tmp + 1];

			playerData[playerid][pActiveHand] = 1;

			PokerTable[tableid][co_table_active_hands]++;

			PlayerPlaySound(playerid, 5602, 0.0, 0.0, 0.0);
			ApplyAnimation(playerid, "CASINO", "cards_in", 4.1, 0, 1, 1, 1, 1, 1);

			tmp += 2;
		}
		else continue;
	}

	for(new i = 0; i < 5; i++)
	{
		PokerTable[tableid][co_table_cards][i] = PokerTable[tableid][co_table_deck][tmp];
		tmp++;
	}

	return 1;
}

Poker_FindGuestsOrder(tableid, index)
{
	new tmpIndex;

	for(new i = 0; i < 6; i++) 
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(playerid != -1 && tmpIndex == index) if(playerData[playerid][pPokerStatus] == 1)return playerid;

		tmpIndex++;
	}

	return -1;
}

Poker_RotateGuests(tableid)
{
	new next_active_id = -1;
	new last_ap_id = -1;
	new last_ap_slot = -1;

	if(PokerTable[tableid][co_table_active_guest] != -1)
	{
		last_ap_id = PokerTable[tableid][co_table_active_guest];

		for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] == last_ap_id) last_ap_slot = i;

		playerData[last_ap_id][pActiveGuest] = 0;
		playerData[last_ap_id][pPokerTime] = 0;

		Poker_ShowOptions(last_ap_id, 0);
	}

	if(PokerTable[tableid][co_table_rot] == 0 && last_ap_id == -1 && last_ap_slot == -1) for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(!playerData[playerid][pTableDealer])continue;
		
		next_active_id = playerid;
		PokerTable[tableid][co_table_active_guest] = playerid;
		PokerTable[tableid][co_table_active_guest_slot] = i;
		PokerTable[tableid][co_table_rot]++;
		PokerTable[tableid][co_table_slots_rot] = i;
	}
	else if(PokerTable[tableid][co_table_rot] >= 6)
	{
		PokerTable[tableid][co_table_rot] = 0;
		PokerTable[tableid][co_table_stage]++;

		if(PokerTable[tableid][co_table_stage] > 3)
		{
			PokerTable[tableid][co_table_active] = 4;
			PokerTable[tableid][co_table_delay] = 20 + 1;

			return 1;
		}

		PokerTable[tableid][co_table_slots_rot]++;
		PokerTable[tableid][co_table_rot]++;
		if(PokerTable[tableid][co_table_slots_rot] >= 6)  PokerTable[tableid][co_table_slots_rot] -= 6;

		

		new playerid = Poker_FindGuestsOrder(tableid, PokerTable[tableid][co_table_slots_rot]);

		if(playerid != -1) 
		{
			next_active_id = playerid;
			PokerTable[tableid][co_table_active_guest] = playerid;
			PokerTable[tableid][co_table_active_guest_slot] = PokerTable[tableid][co_table_slots_rot];
			
		} 
		else Poker_RotateGuests(tableid);
	}
	else
	{
		PokerTable[tableid][co_table_slots_rot]++;
		PokerTable[tableid][co_table_rot]++;
		if(PokerTable[tableid][co_table_slots_rot] >= 6) PokerTable[tableid][co_table_slots_rot] -= 6;

		

		new playerid = Poker_FindGuestsOrder(tableid, PokerTable[tableid][co_table_slots_rot]);

		if(playerid != -1) 
		{
			next_active_id = playerid;
			PokerTable[tableid][co_table_active_guest] = playerid;
			PokerTable[tableid][co_table_active_guest_slot] = PokerTable[tableid][co_table_slots_rot];
			
		} 
		else Poker_RotateGuests(tableid);
	}

	if(next_active_id != -1 && playerData[next_active_id][pActiveHand]) 
	{
		new currentBet = playerData[next_active_id][pCurrentBet];
		new activeBet = PokerTable[tableid][co_table_active_bet];
		
		PlayerPlaySound(next_active_id, 5809, 0.0, 0.0, 0.0);

		if(playerData[next_active_id][pChips] < 1) Poker_ShowOptions(next_active_id, 3);
		else if(currentBet >= activeBet) Poker_ShowOptions(next_active_id, 1);
		else if(currentBet < activeBet) Poker_ShowOptions(next_active_id, 2);
		else Poker_ShowOptions(next_active_id, 0);

		playerData[next_active_id][pPokerTime] = 60 + 1;
		playerData[next_active_id][pActiveGuest] = 1;
	}

	return 1;
}

Poker_ShowMenu(playerid, option)
{
	new tableid = playerData[playerid][pTableID]-1;
		
	switch(option)
	{
		case OPTION_CALL:
		{
		    playerData[playerid][pActionChoice] = 1;
		    
			if(playerData[playerid][pChips] <= 0)
			{
				PlayerPlaySound(playerid, 5823, 0.0, 0.0, 0.0);
				return SendClientMessageEx(playerid, COLOR_LIGHTRED, "DEALER: คุณมีชิปไม่พอ");
			}

			new actualBet = PokerTable[tableid][co_table_active_bet] - playerData[playerid][pCurrentBet];

			if(actualBet > playerData[playerid][pChips])return
				Dialog_Show(playerid, DialogPCall, DIALOG_STYLE_MSGBOX, "Texas Holdem Poker - (Call)", "คุณแน่ใจหรือที่จะสู้ $%d และนั้นมันเป็นการเทหน้าตัก ?", "All-In", "Back", actualBet);

			Dialog_Show(playerid, DialogPCall, DIALOG_STYLE_MSGBOX, "Texas Holdem Poker - (Call)", "คุณแน่ใจหรือที่จะสู้ $%d?", "Call", "Back", actualBet);
		}
		case OPTION_RAISE:
		{
			playerData[playerid][pActionChoice] = 1;

			if(playerData[playerid][pCurrentBet] + playerData[playerid][pChips] > PokerTable[tableid][co_table_active_bet] + PokerTable[tableid][co_table_blind] / 2)return
				Dialog_Show(playerid, DialogPRaise, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Raise)", "ใส่จำนวนที่ต้องการเกทับ ($%d ถึง $%d):", "Raise", "Back", PokerTable[tableid][co_table_active_bet] + PokerTable[tableid][co_table_blind] / 2, playerData[playerid][pCurrentBet] + playerData[playerid][pChips]);

			else if(playerData[playerid][pCurrentBet] + playerData[playerid][pChips] == PokerTable[tableid][co_table_active_bet] + PokerTable[tableid][co_table_blind] / 2)return
				Dialog_Show(playerid, DialogPRaise, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Raise)", "ใส่จำนวนที่ต้องการเกทับ (เทหน้าตัก):", "All-In", "Back");

			SendClientMessageEx(playerid, COLOR_LIGHTRED, "DEALER: คุณมีชิปไม่พอ");
			PlayerPlaySound(playerid, 5823, 0.0, 0.0, 0.0);
		}
		case OPTION_BUY_IN: Dialog_Show(playerid, DialogPBuyIn, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (BuyIn)", "ใส่จำนวนชิปที่ต้องการซื้อเพื่อเข้าเล่นโต๊ะนี้:\n\nเงินที่มีอยู่: $%d\nจำนวนชิปในปัจจุบัน: $%d\nจำกัดชิปตั้งแต่ $%d ถึง $%d", "Buy In", "Exit", playerData[playerid][pCash], playerData[playerid][pChips], PokerTable[tableid][co_table_buy_in_min], PokerTable[tableid][co_table_buy_in_max]);
		case OPTION_SETUP_GAME:
		{
			Dialog_Show(playerid, DialogPSetupGame, DIALOG_STYLE_LIST, "Texas Holdem Poker - (Setup Poker Room)", "Buy-In Max\t($%d)\nBuy-In Min\t($%d)\nBlind\t\t($%d / $%d)\nLimit\t\t(%d)\nPassword\t(%s)\nRound Delay\t(%d)\nSeat Price\t($%d)\n{FF6347}>> Start the game", "Choose", "Exit",
			PokerTable[tableid][co_table_buy_in_max],
			PokerTable[tableid][co_table_buy_in_min],
			PokerTable[tableid][co_table_blind],
			PokerTable[tableid][co_table_blind] / 2,
			PokerTable[tableid][co_table_guests_limit],
			PokerTable[tableid][co_table_key],
			PokerTable[tableid][co_table_setdelay],
			PokerTable[tableid][co_table_seat_price]);
		}
		case OPTION_BUY_IN_MAX: Dialog_Show(playerid, DialogPBuyInMax, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Buy-In Max)", "กรอกจำนวนชิปขั้นสูงสุด:", "Edit", "Back");
		case OPTION_BUY_IN_MIN: Dialog_Show(playerid, DialogPBuyInMin, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Buy-In Min)", "กรอกจำนวนชิปขั้นต่ำ:", "Edit", "Back");
		case OPTION_BLINDS: Dialog_Show(playerid, DialogPBlinds, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Blinds)", "Enter the Blinds:\n\nNote: Small blind จะถูกคำนวนอัตโนมัติ (Big Blind / 2)", "Edit", "Back");
		case OPTION_PLAYERS_LIMIT: Dialog_Show(playerid, DialogPPlayersLimit, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Limit)", "กรอกการจำกัดผู้เล่น (2 - 6):", "Edit", "Back");
		case OPTION_SET_KEY: Dialog_Show(playerid, DialogPKey, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Password)", "กรอกรหัสผ่าน:\n\nNote: ปล่อยว่างไว้หากต้องการให้เป็นโต๊ะสาธารณะ", "Edit", "Back");
		case OPTION_ROUND_DELAY: Dialog_Show(playerid, DialogPDelay, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Round Delay)", "กรอกดีเลย์ของรอบ (15 - 120 วินาที):", "Edit", "Back");
		case OPTION_SEAT_PRICE: Dialog_Show(playerid, DialogPSeatPrice, DIALOG_STYLE_INPUT, "Texas Holdem Poker - (Seat Price)", "กรอกค่าเข้าเล่นโป๊กเกอร์ ($0 - $200):", "Edit", "Back");
	}
	
	return 1;
}

Poker_Call(playerid)return Poker_ShowMenu(playerid, OPTION_CALL);

Poker_Raise(playerid)return Poker_ShowMenu(playerid, OPTION_RAISE);

Poker_Check(playerid)
{
	if(playerData[playerid][pActiveHand])
		format(playerData[playerid][pPokerStatusString], 16, "Check");

	return ApplyAnimation(playerid, "CASINO", "cards_raise", 4.1, 0, 1, 1, 1, 1, 1);
}

Poker_Fold(playerid)
{
	if(playerData[playerid][pActiveHand] < 1) return 1;

	playerData[playerid][pFirstCard] = playerData[playerid][pSecondCard] = playerData[playerid][pActiveHand] = playerData[playerid][pPokerStatus] = 0;

	new tableid = playerData[playerid][pTableID]-1;

	PokerTable[tableid][co_table_active_hands]--;

	format(playerData[playerid][pPokerStatusString], 16, "Fold");

	for(new i = 0; i < 6; i++) if(PokerTable[tableid][co_table_slots][i] != -1) PlayerPlaySound(PokerTable[tableid][co_table_slots][i], 5602, 0.0, 0.0, 0.0);

	ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);

	return 1;
}

Poker_InitTable(objectid)
{
	new data[furnitureE];
	
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	
	for(new tableid=0;tableid!=MAX_POKERTABLES;tableid++) {
	
		if(PokerTable[tableid][co_table_placed]==0) {
			
			Reset_ResetTable(tableid);
			
			PokerTable[tableid][co_table_objectid] = objectid;
			
			PokerTable[tableid][co_table_x] = data[fPosX];
			PokerTable[tableid][co_table_y] = data[fPosY];
			PokerTable[tableid][co_table_z] = data[fPosZ];
			
			PokerTable[tableid][co_table_rx] = data[fPosRX];
			PokerTable[tableid][co_table_ry] = data[fPosRY];
			PokerTable[tableid][co_table_rz] = data[fPosRZ];
	

			PokerTable[tableid][co_table_vw] = data[fVirtualWorld];
			PokerTable[tableid][co_table_int] = data[fInterior];
			
			PokerTable[tableid][co_table_placed] = 1;
			
			PokerTable[tableid][co_table_pulse_timer]=-1;
			break;
		}
    }
	return 1;
}

Poker_DestroyTable(objectid)
{
	for(new tableid=0;tableid!=MAX_POKERTABLES;tableid++) {
	
		if(PokerTable[tableid][co_table_placed]==1 && PokerTable[tableid][co_table_objectid] == objectid) {
			Reset_ResetTable(tableid);
			PokerTable[tableid][co_table_placed]=0;
			PokerTable[tableid][co_table_objectid] = INVALID_OBJECT_ID;
			break;
		}
    }
	return 1;
}

Reset_ResetTable(tableid)
{
	for(new s = 0; s < 6; s++)
		PokerTable[tableid][co_table_slots][s] = -1;

	PokerTable[tableid][co_table_key] = EOS;
	PokerTable[tableid][co_table_active] = 0;
	PokerTable[tableid][co_table_guests_limit] = 6;
	PokerTable[tableid][co_table_buy_in_max] = 1000;
	PokerTable[tableid][co_table_buy_in_min] = 500;
	PokerTable[tableid][co_table_seat_price] = 100;
	PokerTable[tableid][co_table_blind] = 100;
	PokerTable[tableid][co_table_pos] = 0;
	PokerTable[tableid][co_table_round] = 0;
	PokerTable[tableid][co_table_stage] = 0;
	PokerTable[tableid][co_table_active_bet] = 0;
	PokerTable[tableid][co_table_delay] = 0;
	PokerTable[tableid][co_table_pot] = 0;
	PokerTable[tableid][co_table_setdelay] = 15;
	PokerTable[tableid][co_table_rot] = 0;
	PokerTable[tableid][co_table_slots_rot] = 0;
	PokerTable[tableid][co_table_winner_id] = -1;
	PokerTable[tableid][co_table_winners] = 0;
	PokerTable[tableid][co_table_guests] = 0;
	PokerTable[tableid][co_table_active_guests] = 0;
	KillTimer(PokerTable[tableid][co_table_pulse_timer]);
	PokerTable[tableid][co_table_pulse_timer]=-1;

	return 1;
}

Poker_ResetTableRound(tableid)
{
	PokerTable[tableid][co_table_round] = 0;
	PokerTable[tableid][co_table_stage] = 0;
	PokerTable[tableid][co_table_active_bet] = 0;
	PokerTable[tableid][co_table_active] = 2;
	PokerTable[tableid][co_table_delay] = PokerTable[tableid][co_table_setdelay];
	PokerTable[tableid][co_table_pot] = 0;
	PokerTable[tableid][co_table_rot] = 0;
	PokerTable[tableid][co_table_slots_rot] = 0;
	PokerTable[tableid][co_table_winner_id] = -1;
	PokerTable[tableid][co_table_winners] = 0;
	PokerTable[tableid][co_table_active_hands] = 0;

	for(new i = 0; i < 6; i++)
	{
		new playerid = PokerTable[tableid][co_table_slots][i];

		if(playerid != -1)
		{
			playerData[playerid][pTableWinner] = 0;
			playerData[playerid][pTableDealer] = 0;
			playerData[playerid][pFirstCard] = 0;
			playerData[playerid][pSecondCard] = 0;
			playerData[playerid][pActiveGuest] = 0;
			playerData[playerid][pPokerTime] = 0;
			playerData[playerid][pActiveHand] = 0;
			playerData[playerid][pCurrentBet] = 0;
			playerData[playerid][pPokerResultString] = '\0';
			playerData[playerid][pPokerHide] = 0;

			ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);
		}
		else continue;
	}

	return 1;
}

Poker_CreateTD(playerid)
{
    PlayerPokerUI[playerid][0] = CreatePlayerTextDraw(playerid, 390.000000, 250.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][0], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][0], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][0], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][0], 0);

	PlayerPokerUI[playerid][1] = CreatePlayerTextDraw(playerid, 390.000000, 260.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][1], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][1], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][1], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][1], 0);

	PlayerPokerUI[playerid][2] = CreatePlayerTextDraw(playerid, 369.000000, 273.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][2], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][2], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][2], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][2], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][2], 20.000000, 33.000000);

	PlayerPokerUI[playerid][3] = CreatePlayerTextDraw(playerid, 392.000000, 273.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][3], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][3], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][3], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][3], 20.000000, 33.000000);

	PlayerPokerUI[playerid][4] = CreatePlayerTextDraw(playerid, 391.000000, 305.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][4], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][4], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][4], 0);

	PlayerPokerUI[playerid][5] = CreatePlayerTextDraw(playerid, 250.000000, 250.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][5], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][5], 0.159999, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][5], 0);

	PlayerPokerUI[playerid][6] = CreatePlayerTextDraw(playerid, 250.000000, 260.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][6], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][6], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][6], 0.159999, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][6], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][6], 0);

	PlayerPokerUI[playerid][7] = CreatePlayerTextDraw(playerid, 229.000000, 273.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][7], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][7], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][7], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][7], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][7], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][7], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][7], 20.000000, 33.000000);

	PlayerPokerUI[playerid][8] = CreatePlayerTextDraw(playerid, 252.000000, 273.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][8], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][8], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][8], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][8], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][8], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][8], 20.000000, 33.000000);

	PlayerPokerUI[playerid][9] = CreatePlayerTextDraw(playerid, 250.000000, 305.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][9], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][9], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][9], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][9], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][9], 0);

	PlayerPokerUI[playerid][10] = CreatePlayerTextDraw(playerid, 199.000000, 190.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][10], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][10], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][10], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][10], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][10], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][10], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][10], 0);

	PlayerPokerUI[playerid][11] = CreatePlayerTextDraw(playerid, 199.000000, 199.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][11], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][11], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][11], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][11], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][11], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][11], 0);

	PlayerPokerUI[playerid][12] = CreatePlayerTextDraw(playerid, 179.000000, 212.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][12], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][12], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][12], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][12], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][12], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][12], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][12], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][12], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][12], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][12], 20.000000, 33.000000);

	PlayerPokerUI[playerid][13] = CreatePlayerTextDraw(playerid, 202.000000, 212.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][13], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][13], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][13], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][13], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][13], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][13], 20.000000, 33.000000);

	PlayerPokerUI[playerid][14] = CreatePlayerTextDraw(playerid, 199.000000, 245.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][14], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][14], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][14], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][14], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][14], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][14], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][14], 0);

	PlayerPokerUI[playerid][15] = CreatePlayerTextDraw(playerid, 250.000000, 130.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][15], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][15], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][15], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][15], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][15], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][15], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][15], 0);

	PlayerPokerUI[playerid][16] = CreatePlayerTextDraw(playerid, 250.000000, 140.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][16], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][16], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][16], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][16], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][16], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][16], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][16], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][16], 0);

	PlayerPokerUI[playerid][17] = CreatePlayerTextDraw(playerid, 229.000000, 152.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][17], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][17], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][17], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][17], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][17], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][17], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][17], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][17], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][17], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][17], 20.000000, 33.000000);

	PlayerPokerUI[playerid][18] = CreatePlayerTextDraw(playerid, 252.000000, 152.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][18], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][18], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][18], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][18], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][18], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][18], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][18], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][18], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][18], 20.000000, 33.000000);

	PlayerPokerUI[playerid][19] = CreatePlayerTextDraw(playerid, 250.000000, 190.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][19], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][19], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][19], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][19], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][19], 0);

	PlayerPokerUI[playerid][20] = CreatePlayerTextDraw(playerid, 390.000000, 130.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][20], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][20], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][20], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][20], 0.159997, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][20], 0);

	PlayerPokerUI[playerid][21] = CreatePlayerTextDraw(playerid, 390.000000, 140.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][21], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][21], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][21], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][21], 0.159997, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][21], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][21], 0);

	PlayerPokerUI[playerid][22] = CreatePlayerTextDraw(playerid, 369.000000, 152.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][22], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][22], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][22], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][22], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][22], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][22], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][22], 20.000000, 33.000000);

	PlayerPokerUI[playerid][23] = CreatePlayerTextDraw(playerid, 392.000000, 152.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][23], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][23], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][23], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][23], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][23], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][23], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][23], 20.000000, 33.000000);

	PlayerPokerUI[playerid][24] = CreatePlayerTextDraw(playerid, 391.000000, 190.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][24], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][24], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][24], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][24], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][24], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][24], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][24], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][24], 0);

	PlayerPokerUI[playerid][25] = CreatePlayerTextDraw(playerid, 443.000000, 190.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][25], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][25], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][25], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][25], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][25], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][25], 0);

	PlayerPokerUI[playerid][26] = CreatePlayerTextDraw(playerid, 443.000000, 199.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][26], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][26], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][26], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][26], 0.159998, 1.200001);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][26], 16711935);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][26], 0);

	PlayerPokerUI[playerid][27] = CreatePlayerTextDraw(playerid, 422.000000, 212.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][27], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][27], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][27], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][27], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][27], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][27], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][27], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][27], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][27], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][27], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][27], 20.000000, 33.000000);

	PlayerPokerUI[playerid][28] = CreatePlayerTextDraw(playerid, 445.000000, 212.000000, " ");
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][28], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][28], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][28], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][28], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][28], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][28], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][28], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][28], 20.000000, 33.000000);

	PlayerPokerUI[playerid][29] = CreatePlayerTextDraw(playerid, 443.000000, 245.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][29], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][29], 100);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][29], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][29], 0.180000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][29], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][29], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][29], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][29], 0);

	PlayerPokerUI[playerid][31] = CreatePlayerTextDraw(playerid, 266.000000, 198.000000, "LD_CARD:cdback");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][31], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][31], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][31], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][31], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][31], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][31], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][31], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][31], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][31], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][31], 20.000000, 33.000000);

	PlayerPokerUI[playerid][32] = CreatePlayerTextDraw(playerid, 288.000000, 198.000000, "LD_CARD:cdback");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][32], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][32], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][32], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][32], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][32], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][32], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][32], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][32], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][32], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][32], 20.000000, 33.000000);

	PlayerPokerUI[playerid][33] = CreatePlayerTextDraw(playerid, 310.000000, 198.000000, "LD_CARD:cdback");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][33], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][33], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][33], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][33], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][33], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][33], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][33], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][33], 20.000000, 33.000000);

	PlayerPokerUI[playerid][34] = CreatePlayerTextDraw(playerid, 332.000000, 198.000000, "LD_CARD:cdback");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][34], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][34], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][34], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][34], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][34], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][34], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][34], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][34], 20.000000, 33.000000);

	PlayerPokerUI[playerid][35] = CreatePlayerTextDraw(playerid, 354.000000, 198.000000, "LD_CARD:cdback");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][35], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][35], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][35], 4);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][35], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][35], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][35], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][35], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][35], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][35], 255);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][35], 20.000000, 33.000000);

	PlayerPokerUI[playerid][37] = CreatePlayerTextDraw(playerid, 318.000000, 180.000000, "Texas Holdem Poker");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][37], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][37], -1);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][37], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][37], 0.199999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][37], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][37], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][37], 0);

	PlayerPokerUI[playerid][38] = CreatePlayerTextDraw(playerid, 321.000000, 253.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][38], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][38], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][38], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][38], 0.189999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][38], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][38], 1);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][38], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][38], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][38], 45);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][38], 10.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][38], 1);

	PlayerPokerUI[playerid][39] = CreatePlayerTextDraw(playerid, 321.000000, 270.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][39], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][39], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][39], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][39], 0.189999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][39], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][39], 1);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][39], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][39], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][39], 45);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][39], 10.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][39], 1);

	PlayerPokerUI[playerid][40] = CreatePlayerTextDraw(playerid, 321.000000, 286.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][40], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][40], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][40], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][40], 0.189999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][40], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][40], 1);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][40], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][40], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][40], 45);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][40], 10.000000, 26.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][40], 1);

	PlayerPokerUI[playerid][41] = CreatePlayerTextDraw(playerid, 318.000000, 148.000000, "Leave");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][41], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][41], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][41], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][41], 0.189999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][41], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][41], 1);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][41], 1);
	PlayerTextDrawUseBox(playerid, PlayerPokerUI[playerid][41], 1);
	PlayerTextDrawBoxColor(playerid, PlayerPokerUI[playerid][41], 45);
	PlayerTextDrawTextSize(playerid, PlayerPokerUI[playerid][41], 10.000000, 36.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerPokerUI[playerid][41], 1);

	PlayerPokerUI[playerid][42] = CreatePlayerTextDraw(playerid, 590.000000, 400.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][42], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][42], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][42], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][42], 0.500000, 2.000000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][42], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][42], 1);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][42], 1);

	PlayerPokerUI[playerid][43] = CreatePlayerTextDraw(playerid, 589.000000, 396.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][43], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][43], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][43], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][43], 0.180000, 0.800000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][43], 200);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][43], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][43], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][43], 0);

	PlayerPokerUI[playerid][44] = CreatePlayerTextDraw(playerid, 588.000000, 437.000000, " ");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][44], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][44], 255);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][44], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][44], 0.180000, 0.800000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][44], 200);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][44], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][44], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][44], 0);

	PlayerPokerUI[playerid][46] = CreatePlayerTextDraw(playerid, 318.000000, 235.000000, "Waiting for other players...");
	PlayerTextDrawAlignment(playerid, PlayerPokerUI[playerid][46], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerPokerUI[playerid][46], -1);
	PlayerTextDrawFont(playerid, PlayerPokerUI[playerid][46], 2);
	PlayerTextDrawLetterSize(playerid, PlayerPokerUI[playerid][46], 0.199999, 1.200000);
	PlayerTextDrawColor(playerid, PlayerPokerUI[playerid][46], -1);
	PlayerTextDrawSetOutline(playerid, PlayerPokerUI[playerid][46], 0);
	PlayerTextDrawSetProportional(playerid, PlayerPokerUI[playerid][46], 1);
	PlayerTextDrawSetShadow(playerid, PlayerPokerUI[playerid][46], 0); return 1;
}

Poker_DestroyTD(playerid)
{
	for(new i = 0; i < MAX_PLAYER_POKER_UI; i++) if(i != 30 && i != 36 && i != 45)
		PlayerTextDrawDestroy(playerid, PlayerPokerUI[playerid][i]);
	
	return 1;
}

Poker_ShowTD(playerid)
{
	for(new i = 0; i < MAX_PLAYER_POKER_UI; i++) if(i != 30 && i != 36 && i != 45)
		PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][i]);
	
	return 1;
}

Poker_ShowOptions(playerid, option)
{
	switch(option)
	{
		case 0:
		{
			playerData[playerid][pActionOptions] = 0;
			PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][38]);
			PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][39]);
			PlayerTextDrawHide(playerid, PlayerPokerUI[playerid][40]);
		}
		case 1: 
		{
			playerData[playerid][pActionOptions] = 1;
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "RAISE");
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "CHECK");
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][40], "FOLD");

			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][40]);
		}
		case 2: 
		{
			playerData[playerid][pActionOptions] = 2;
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "CALL");
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "RAISE");
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][40], "FOLD");

			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][40]);
		}
		case 3: 
		{
			playerData[playerid][pActionOptions] = 3;

			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][38], "CHECK");
			PlayerTextDrawSetString(playerid, PlayerPokerUI[playerid][39], "FOLD");

			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][38]);
			PlayerTextDrawShow(playerid, PlayerPokerUI[playerid][39]);
		}
		default: return 1;
	}
	
	return 1;
}

Poker_JoinTable(playerid, tableid)
{
    new buildingid = BizEntered[playerid];
    
	if(PokerTable[tableid][co_table_guests] >= PokerTable[tableid][co_table_guests_limit])return
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "มู้เล่นโป๊กเกอร์เต็มจำนวนจำกัดแล้ว");

	if(PokerTable[tableid][co_table_active] == 1) return
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "มีใครบางคนกำลังตั้งค่าโต๊ะนี้ โปรดลองใหม่ภายหลัง");

	if(playerData[playerid][pCash] < PokerTable[tableid][co_table_seat_price])return
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "คุณมีเงินไม่พอที่จะร่วมเล่นในโต๊ะนี้ ($%d)", PokerTable[tableid][co_table_seat_price]);

	for(new s; s < 6; s++)  if(PokerTable[tableid][co_table_slots][s] == -1)
	{
		//AC_GivePlayerMoney(playerid, -PokerTable[tableid][co_table_seat_price], "/poker entra");
		playerData[playerid][pCash] -= PokerTable[tableid][co_table_seat_price];

	    Poker_CreateTD(playerid);
		Poker_ShowTD(playerid);
		Poker_ShowOptions(playerid, 0);

		playerData[playerid][pTableID] = tableid+1;
		playerData[playerid][pTableSlot] = s;

		PokerTable[tableid][co_table_guests]++;
		PokerTable[tableid][co_table_slots][s] = playerid;

		if(PokerTable[tableid][co_table_guests] == 1)
		{
			PokerTable[tableid][co_table_active] = 1;

			Poker_ShowMenu(playerid, OPTION_SETUP_GAME);
		}
		else Poker_ShowMenu(playerid, OPTION_BUY_IN);

		CameraRadiusSetPos(playerid, PokerTable[tableid][co_table_x], PokerTable[tableid][co_table_y], PokerTable[tableid][co_table_z], 90.0, 4.7, 0.1);
		GetPlayerPos(playerid, playerData[playerid][pTableX], playerData[playerid][pTableY], playerData[playerid][pTableZ]);
        SetPlayerInterior(playerid, PokerTable[tableid][co_table_int]);
		SetPlayerVirtualWorld(playerid, PokerTable[tableid][co_table_vw]);

		ApplyAnimation(playerid, "CASINO", "cards_out", 4.1, 0, 1, 1, 1, 1, 1);
		TogglePlayerControllable(playerid, 0);
		SetPlayerPosObjectOffset(PokerTable[tableid][co_table_objectid], playerid, PokerTableMiscObjOffsets[s][0], PokerTableMiscObjOffsets[s][1], PokerTableMiscObjOffsets[s][2]);
		SetPlayerFacingAngle(playerid, PokerTableMiscObjOffsets[s][5] + 90.0);

		if(buildingid != -1) BizInfo[buildingid][bTill] += PokerTable[tableid][co_table_seat_price]; break;
	}

	return 1;
}

Poker_LeaveTable(playerid)
{
	if(!playerData[playerid][pTableID])return 1;
	
	new tableid = playerData[playerid][pTableID]-1;

	PlayerPlaySound(playerid, 5852, 0.0, 0.0, 0.0);
	//AC_GivePlayerMoney(playerid, playerData[playerid][pChips], "/poker esci");
	playerData[playerid][pCash] += playerData[playerid][pChips];

	PokerTable[tableid][co_table_guests]--;
	if(playerData[playerid][pPokerStatus]) PokerTable[tableid][co_table_active_guests]--;

	new pk_slot = playerData[playerid][pTableSlot]; PokerTable[tableid][co_table_slots][pk_slot] = -1;

	if(!PokerTable[tableid][co_table_round] && PokerTable[tableid][co_table_delay] < 5)
		Poker_ResetTableRound(tableid);

	SetPlayerInterior(playerid, PokerTable[tableid][co_table_int]);
	SetPlayerVirtualWorld(playerid, PokerTable[tableid][co_table_vw]);
	SetPlayerPos(playerid, playerData[playerid][pTableX], playerData[playerid][pTableY], playerData[playerid][pTableZ]+0.1);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	Dialog_Close(playerid);

	if(playerData[playerid][pActiveHand])
		PokerTable[tableid][co_table_active_hands]--;

	if(playerData[playerid][pActiveGuest])
		Poker_RotateGuests(tableid);

	playerData[playerid][pTableID] = 0;
	playerData[playerid][pTableSlot] = 0;
	playerData[playerid][pTableWinner] = 0;
	playerData[playerid][pCurrentBet] = 0;
	playerData[playerid][pChips] = 0;
	playerData[playerid][pTableX] = 0;
	playerData[playerid][pTableY] = 0;
	playerData[playerid][pTableZ] = 0;
	playerData[playerid][pPokerStatus] = 0;
	playerData[playerid][pTableDealer] = 0;
	playerData[playerid][pFirstCard] = 0;
	playerData[playerid][pSecondCard] = 0;
	playerData[playerid][pActiveGuest] = 0;
	playerData[playerid][pActiveHand] = 0;
	playerData[playerid][pPokerHide] = 0;

	Poker_DestroyTD(playerid);
	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	ClearAnimations(playerid);
	CancelSelectTextDraw(playerid);

	if(!PokerTable[tableid][co_table_guests])
		Reset_ResetTable(tableid);

	return 1;
}

ArraySort(array[], size)
{
    new i, j, app;
        
    for(i = 1; i < size; i++)
    {
        app = array[i];

        for(j = i - 1; (j >= 0) && (array[j] > app); j--)
        {
            array[j + 1 ] = array[j];
       }
        
        array[j + 1] = app;
   }

    return 1;
}

SetPlayerPosObjectOffset(objectid, playerid, Float:offset_x, Float:offset_y, Float:offset_z)
{
	new Float:object_px,
        Float:object_py,
        Float:object_pz,
        Float:object_rx,
        Float:object_ry,
        Float:object_rz;

    GetDynamicObjectPos(objectid, object_px, object_py, object_pz);
    GetDynamicObjectRot(objectid, object_rx, object_ry, object_rz);

    new Float:cos_x = floatcos(object_rx, degrees),
        Float:cos_y = floatcos(object_ry, degrees),
        Float:cos_z = floatcos(object_rz, degrees),
        Float:sin_x = floatsin(object_rx, degrees),
        Float:sin_y = floatsin(object_ry, degrees),
        Float:sin_z = floatsin(object_rz, degrees);

	new Float:x, Float:y, Float:z;
	
    x = object_px + offset_x * cos_y * cos_z - offset_x * sin_x * sin_y * sin_z - offset_y * cos_x * sin_z + offset_z * sin_y * cos_z + offset_z * sin_x * cos_y * sin_z;
    y = object_py + offset_x * cos_y * sin_z + offset_x * sin_x * sin_y * cos_z + offset_y * cos_x * cos_z + offset_z * sin_y * sin_z - offset_z * sin_x * cos_y * cos_z;
    z = object_pz - offset_x * cos_x * sin_y + offset_y * sin_x + offset_z * cos_x * cos_y;

	SetPlayerPos(playerid, x, y, z); return 1;
}

CameraRadiusSetPos(playerid, Float:x, Float:y, Float:z, Float:degree = 0.0, Float:height = 3.0, Float:radius = 8.0)
{
	new Float:deltaToX = x + radius * floatsin(-degree, degrees);
	new Float:deltaToY = y + radius * floatcos(-degree, degrees);
	new Float:deltaToZ = z + height;

	SetPlayerCameraPos(playerid, deltaToX, deltaToY, deltaToZ);
	SetPlayerCameraLookAt(playerid, x, y, z); return 1;
}

GetPokerTableID(objectid) {
	for(new tableid=0;tableid!=MAX_POKERTABLES;tableid++) {
		if(PokerTable[tableid][co_table_objectid] == objectid) {
			return tableid;
		}
	}
	return -1;
}


CMD:jointable(playerid, params[])
{
	if(playerData[playerid][pPlayingHours] < 5) {
		SendClientMessageEx(playerid, COLOR_GREY, "คุณจำเป็นต้องมีเลเวลตั้งแต่ 5 ขึ้นไปเพื่อเข้าร่วมเล่นโต๊ะโป๊กเกอร์");
		return 1;
	}
	
	if(playerData[playerid][pTableID])return
		SendClientMessage(playerid, COLOR_LIGHTRED, "คุณกำลังเล่นอยู่ที่โต๊ะโป๊กเกอร์! คุณจำเป็นต้อง /leavetable ก่อนที่จะเข้าร่วมโต๊ะอื่น!");
	
	new houseid = -1, data[furnitureE];
	
	if((houseid = BizEntered[playerid]) != -1) {

		for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
			if(!IsValidDynamicObject(x)) continue;
			if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, x, E_STREAMER_MODEL_ID) == POKER_OBJECT) {
				Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
				if(data[fType] == TYPE_BUSINESS && data[fHouseID] == houseid  && IsPlayerInRangeOfPoint(playerid, 10.0, data[fPosX], data[fPosY], data[fPosZ])) {
					new tableid = GetPokerTableID(x);
					if(tableid != -1) {
						if(PokerTable[tableid][co_table_key][0] != EOS)
						{
							playerData[playerid][pTableID] = tableid + 1;
							Dialog_Show(playerid, DialogPEnter, DIALOG_STYLE_PASSWORD, "Texas Holdem Poker - (Enter)", "ป้อนรหัสผ่านเพื่อเข้าสู่เกมโป๊กเกอร์:", "Enter", "Cancel");
						}
						else Poker_JoinTable(playerid, tableid);
					}
				}
			}
		}
	}
	return 1;
}

CMD:leavetable(playerid, params[])
{
	if(playerData[playerid][pTableID]) {
		Poker_LeaveTable(playerid);
	}
	return 1;
}

CMD:mydrugs(playerid, params[]) {
	new userid;

	if (sscanf(params, "u", userid))
	{
	    ShowPlayerDrugs(playerid, playerid);
	    return 1;
	}

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE"  ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");


    ShowPlayerDrugs(playerid, userid);

	return 1;
}

CMD:givedrug(playerid, params[]) {

	new userid, slot;
	if (sscanf(params, "ud", userid, slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /givedrug [playerid / PoN] [package_id]");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" คุณไม่สามารถให้ตัวเองได้!");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERROR:"EMBED_WHITE" ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERROR:"EMBED_WHITE" ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");

	new bool:can_take;

	for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
	{
		if(PlayerDrug[userid][x][drugQTY]==0) {

			can_take=true;

			PlayerDrug[userid][x][drugID] = PlayerDrug[playerid][slot][drugID]; // MYSQL NUMBER
			PlayerDrug[userid][x][drugType] = PlayerDrug[playerid][slot][drugType];
			PlayerDrug[userid][x][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
			PlayerDrug[userid][x][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
			PlayerDrug[userid][x][drugPackage] = PlayerDrug[playerid][slot][drugPackage];

			PlayerDrug[playerid][slot][drugQTY]=0;

            SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ให้ %s (%s) กับ %s", 
			DrugPackageName[PlayerDrug[userid][x][drugPackage]], 
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME],
			ReturnRealName(userid));
			
            SendClientMessageEx(userid, COLOR_YELLOW, "%s ได้ให้ %s (%s) กับคุณ", 
			ReturnRealName(playerid), 
			DrugPackageName[PlayerDrug[userid][x][drugPackage]], 
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME]
			);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s ได้ให้บางสิ่งบางอย่างกับ %s", ReturnRealName(playerid), ReturnRealName(userid));

			Log_Write("logs/drugs.txt", "[%s] %s: give %s %s (%.f) to %s", 
			ReturnDate(),
			ReturnPlayerName(playerid), 
			DrugPackageName[PlayerDrug[userid][x][drugPackage]], 
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME],
			PlayerDrug[userid][x][drugQTY], 
			ReturnPlayerName(userid));

			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `charID`='%d' WHERE `drugID` = '%d'", playerData[userid][pID], PlayerDrug[userid][x][drugID]);
			mysql_tquery(dbCon, szQuery);	
            /*Player_SavePackage(userid);
            Player_SavePackage(playerid);*/

			break;
		}
	}
	if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ผู้เล่นนั้นไม่มีช่องว่างสำหรับแพ็กเกจนี้");
	return 1;
}

CMD:dropdrug(playerid, params[])
{
	new slot, Float:amount;

	if (sscanf(params, "df", slot, amount))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /dropdrug [package_id] [จำนวน]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
	
	amount = ConvertFloatToOneDP(amount);

	if(amount > 0 && amount <= PlayerDrug[playerid][slot][drugQTY]) {
	
		PlayerDrug[playerid][slot][drugQTY] -= amount;	
		PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);
		
		if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
			PlayerDrug[playerid][slot][drugQTY] = 0;
			
			format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		else {
			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		
		format(szString, sizeof(szString), "* %s ได้ทิ้ง %s (%s)", ReturnRealName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);
		SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);

		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ทิ้ง %s จำนวน %.1f", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);
			
		Log_Write("logs/drugs.txt", "[%s] %s: drop %s %s (%f)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);

	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนไม่ถูกต้อง");
	}
	return 1;
}

alias:placedrug("pd");
CMD:placedrug(playerid, params[]) {

	new slot, i;
	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /placedrug [package_id]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");
	
	if(PlayerDrug[playerid][slot][drugQTY] == 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
			
	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID) {
			new itemslot = GetFreeItemDrugSlot();
		
			if(itemslot != -1) {
			
				if(!DrugObject_StockDrug(i, PlayerDrug[playerid][slot][drugType])) {
					new Float:grams_size = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE]) ? PlayerDrug[playerid][slot][drugQTY] / 2.285714 : PlayerDrug[playerid][slot][drugQTY];

					new data[e_objectDrug];
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
					
					if(float(DrugObject[data[drugObj]][DRUGOBJECT_SIZE]) >= grams_size + DrugObject_Size(i)) {
		
						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_object` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`objectID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], data[drugSID]);
						mysql_tquery(dbCon, szQuery, "OnDrugPlaceItem", "iiiiii", playerid, slot, itemslot, i, data[drugObj], data[drugSID]);
						
						return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ออบเจ็คนี้ไม่มีที่ว่างสำหรับแพ็กเกจนี้");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่อนุณาติให้ทำการ แพ็กเกจ");
				return 1;
			}
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ถึงขีดจำกัดในการสร้างแพ็กเกจของเซิร์ฟเวอร์แล้วโปรดลองใหม่อีกครั้งภายหลัง");
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1) 
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					
					for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
						if(VehicleDrug[i][x][drugQTY] == 0) {
						
							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[i][carSID]);
							mysql_tquery(dbCon, szQuery, "OnDrugPlaceCar", "dddd", playerid, slot, x, i);
							
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ยานพาหนะคันนี้ไม่มีที่ว่างสำหรับแพ็กเกจนี้");
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะ");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	else 
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

		if(PlayerDrug[playerid][slot][drugQTY] == 0)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
		
		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
						if(VehicleDrug[carid][x][drugQTY] == 0) {
						
							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[carid][carSID]);
							mysql_tquery(dbCon, szQuery, "OnDrugPlaceCar", "dddd", playerid, slot, x, carid);
							
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ยานพาหนะคันนี้ไม่มีที่ว่างสำหรับแพ็กเกจนี้");
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
	}
	return 1;
}

alias:placealldrugs("pad");
CMD:placealldrugs(playerid, params[]) {
	new i;
	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != -1) {
		
			new can_take, data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			for(new slot = 0; slot != MAX_PLAYER_DRUG_PACKAGE; slot++) {
			
				if(PlayerDrug[playerid][slot][drugQTY] > 0) {

					new itemslot = GetFreeItemDrugSlot();
					new Float:grams_size = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE]) ? PlayerDrug[playerid][slot][drugQTY] / 2.285714 : PlayerDrug[playerid][slot][drugQTY];
					
					if(itemslot != -1 && !DrugObject_StockDrug(i, PlayerDrug[playerid][slot][drugType]) && float(DrugObject[data[drugObj]][DRUGOBJECT_SIZE]) >= grams_size + DrugObject_Size(i)) {

						can_take++;

						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_object` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`objectID`) VALUES('%d','%f','%d','%d','%d')", ItemDrug[itemslot][drugType], ItemDrug[itemslot][drugQTY], ItemDrug[itemslot][drugStrength], ItemDrug[itemslot][drugPackage], data[drugSID]);
						mysql_tquery(dbCon, szQuery, "OnDrugPlaceAllItem", "iiiii", playerid, slot, itemslot, i, data[drugSID]);
						
						ItemDrug[itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
						ItemDrug[itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
						ItemDrug[itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
						ItemDrug[itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
						ItemDrug[itemslot][drugFore] = data[drugSID];
						
						PlayerDrug[playerid][slot][drugQTY] = 0;
					}
				}
			}
			if(can_take) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เก็บแพ็กเกจทั้งหมด %d ชิ้นไว้ใน %s", can_take, DrugObject[data[drugObj]][DRUGOBJECT_NAME]);
			
				/*Player_SavePackage(playerid);
				Car_SavePackage(i);*/
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจที่สามารถเก็บได้/ไม่พบแพ็กเกจอยู่ในตัวของคุณ");
			
			return 1;
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1) 
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					
					new can_take;

					for(new slot = 0; slot != MAX_PLAYER_DRUG_PACKAGE; slot++) {

						if(PlayerDrug[playerid][slot][drugQTY] > 0) {

							for(new x = 0; x != MAX_VEHICLE_DRUG_PACKAGE; x++) {

								if(VehicleDrug[i][x][drugQTY] == 0) {

									can_take++;

									format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[i][carSID]);
									mysql_tquery(dbCon, szQuery, "OnDrugPlaceAllCar", "dddd", playerid, slot, x, i);
									
									VehicleDrug[i][x][drugType] = PlayerDrug[playerid][slot][drugType];
									VehicleDrug[i][x][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
									VehicleDrug[i][x][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
									VehicleDrug[i][x][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
									VehicleDrug[i][x][drugFore] = CarData[i][carSID];
									
									PlayerDrug[playerid][slot][drugQTY] = 0;
									break;
								}
							}
						}
					}
					if(can_take) {
						SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เก็บแพ็กเกจทั้งหมด %d ชิ้นไว้ในยานพาหนะ", can_take);

						/*Player_SavePackage(playerid);
						Car_SavePackage(i);*/
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" ยานพาหนะคันนี้ไม่มีที่ว่างเหลือ/ไม่พบแพ็กเกจอยู่ในตัวของคุณ");

					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะ");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	else 
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {	
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					new can_take;

					for(new slot = 0; slot != MAX_PLAYER_DRUG_PACKAGE; slot++) {

						if(PlayerDrug[playerid][slot][drugQTY] > 0) {

							for(new x = 0; x != MAX_VEHICLE_DRUG_PACKAGE; x++) {

								if(VehicleDrug[carid][x][drugQTY] == 0) {

									can_take++;

									format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[carid][carSID]);
									mysql_tquery(dbCon, szQuery, "OnDrugPlaceAllCar", "dddd", playerid, slot, x, carid);
									
									VehicleDrug[carid][x][drugType] = PlayerDrug[playerid][slot][drugType];
									VehicleDrug[carid][x][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
									VehicleDrug[carid][x][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
									VehicleDrug[carid][x][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
									VehicleDrug[carid][x][drugFore] = CarData[carid][carSID];
									
									PlayerDrug[playerid][slot][drugQTY] = 0;
									break;
								}
							}
						}
					}
					if(can_take) {
						SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เก็บแพ็กเกจทั้งหมด %d ชิ้นไว้ในยานพาหนะ", can_take);
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" ยานพาหนะคันนี้ไม่มีที่ว่างเหลือ/ไม่พบแพ็กเกจอยู่ในตัวของคุณ");

					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	}
	return 1;
}

alias:takedrug("td");
CMD:takedrug(playerid, params[]) {
	
	new slot, i;
	
	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /takedrug [ช่อง]");

	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != -1) {
		
			if(slot < 0 || slot >= 10)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ช่องแพ็กเกจไม่ถูกต้อง");
	
			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
					
			for(new drug = 0; drug != MAX_ITEM_DRUG; drug++) if(ItemDrug[drug][drugFore] == data[drugSID])
			{
				if(slot) {
					slot--;
					continue;
				}
				
				if(ItemDrug[drug][drugQTY] == 0)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
	
				for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
				{
					if(PlayerDrug[playerid][x][drugQTY] == 0) {

						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", ItemDrug[drug][drugType], ItemDrug[drug][drugQTY], ItemDrug[drug][drugStrength], ItemDrug[drug][drugPackage], playerData[playerid][pID]);
						mysql_tquery(dbCon, szQuery, "OnDrugTakeItem", "iiiiii", playerid, x, i, data[drugObj], data[drugSID], drug);

						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
				return 1;	
			}
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" ช่องแพ็กเกจไม่ถูกต้อง");
			return 1;
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1) 
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					
					if(slot < 0 || slot >= MAX_VEHICLE_DRUG_PACKAGE)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ช่องแพ็กเกจไม่ถูกต้อง");

					if(VehicleDrug[i][slot][drugQTY] == 0)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");

					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[i][slot][drugType], VehicleDrug[i][slot][drugQTY], VehicleDrug[i][slot][drugStrength], VehicleDrug[i][slot][drugPackage], playerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTakeCar", "dddd", playerid, x, slot, i);
							
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะ");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	else 
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(slot < 0 || slot >= MAX_VEHICLE_DRUG_PACKAGE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ช่องแพ็กเกจไม่ถูกต้อง");

		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {	
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					if(VehicleDrug[carid][slot][drugQTY] == 0)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");

					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[carid][slot][drugType], VehicleDrug[carid][slot][drugQTY], VehicleDrug[carid][slot][drugStrength], VehicleDrug[carid][slot][drugPackage], playerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTakeCar", "dddd", playerid, x, slot, carid);
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	}
	return 1;
}

alias:takealldrugs("tad");
CMD:takealldrugs(playerid, params[]) {
	new i;
	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID) {
			
			new can_take, data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
			
			for(new drug = 0; drug != MAX_ITEM_DRUG; drug++) if(ItemDrug[drug][drugFore] == data[drugSID])
			{
				if(ItemDrug[drug][drugQTY] > 0) {
					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {
							can_take++;

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", ItemDrug[drug][drugType], ItemDrug[drug][drugQTY], ItemDrug[drug][drugStrength], ItemDrug[drug][drugPackage], playerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTakeAllItem", "iiiii", playerid, x, i, data[drugSID], drug);
							
							PlayerDrug[playerid][x][drugType] = ItemDrug[drug][drugType];
							PlayerDrug[playerid][x][drugQTY] = ItemDrug[drug][drugQTY];
							PlayerDrug[playerid][x][drugStrength] = ItemDrug[drug][drugStrength];
							PlayerDrug[playerid][x][drugPackage] = ItemDrug[drug][drugPackage];
							
							ItemDrug[drug][drugQTY] = 0;
							break;
						}
					}
				}
			}
			if(DrugObject_IsEmpty(i)) {
				DrugObject_Delete(i, data[drugSID]);
			}
			if(can_take) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้หยิบแพ็กเกจทั้งหมด %d ชิ้นจาก %s", can_take, DrugObject[data[drugObj]][DRUGOBJECT_NAME]);
			
				/*Player_SavePackage(playerid);
				Car_SavePackage(i);*/
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีช่องว่างเหลืออยู่หรือไม่พบอาวุธจากยานพาหนะ");
			return 1;	
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1) 
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					new can_take;

					for(new slot = 0; slot != MAX_VEHICLE_DRUG_PACKAGE; slot++) {

						if(VehicleDrug[i][slot][drugQTY] > 0) {

							for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
							{
								if(PlayerDrug[playerid][x][drugQTY] == 0) {

									can_take++;

									format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[i][slot][drugType], VehicleDrug[i][slot][drugQTY], VehicleDrug[i][slot][drugStrength], VehicleDrug[i][slot][drugPackage], playerData[playerid][pID]);
									mysql_tquery(dbCon, szQuery, "OnDrugTakeAllCar", "dddd", playerid, x, slot, i);
									
									PlayerDrug[playerid][x][drugType] = VehicleDrug[i][slot][drugType];
									PlayerDrug[playerid][x][drugQTY] = VehicleDrug[i][slot][drugQTY];
									PlayerDrug[playerid][x][drugStrength] = VehicleDrug[i][slot][drugStrength];
									PlayerDrug[playerid][x][drugPackage] = VehicleDrug[i][slot][drugPackage];

									VehicleDrug[i][slot][drugQTY] = 0;
									
									break;
								}
							}
						}
					}

					if(can_take) {
						SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้หยิบแพ็กเกจทั้งหมด %d ชิ้นจากยานพาหนะ", can_take);

						/*Player_SavePackage(playerid);
						Car_SavePackage(i);*/
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีช่องว่างเหลืออยู่หรือไม่พบอาวุธจากยานพาหนะ");

					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะ");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	else 
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {	
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					new can_take;

					for(new slot = 0; slot != MAX_VEHICLE_DRUG_PACKAGE; slot++) {

						if(VehicleDrug[carid][slot][drugQTY] > 0) {

							for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
							{
								if(PlayerDrug[playerid][x][drugQTY] == 0) {

									can_take++;
							
									format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[carid][slot][drugType], VehicleDrug[carid][slot][drugQTY], VehicleDrug[carid][slot][drugStrength], VehicleDrug[carid][slot][drugPackage], playerData[playerid][pID]);
									mysql_tquery(dbCon, szQuery, "OnDrugTakeAllCar", "dddd", playerid, x, slot, carid);
									
									PlayerDrug[playerid][x][drugType] = VehicleDrug[carid][slot][drugType];
									PlayerDrug[playerid][x][drugQTY] = VehicleDrug[carid][slot][drugQTY];
									PlayerDrug[playerid][x][drugStrength] = VehicleDrug[carid][slot][drugStrength];
									PlayerDrug[playerid][x][drugPackage] = VehicleDrug[carid][slot][drugPackage];

									VehicleDrug[carid][slot][drugQTY] = 0;
									break;
								}
							}
						}
					}

					if(can_take) {
						SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้หยิบแพ็กเกจทั้งหมด %d ชิ้นจากยานพาหนะ", can_take);

					}
					else SendClientMessage(playerid, COLOR_LIGHTRED,"คุณไม่มีช่องว่างเหลืออยู่หรือไม่พบอาวุธจากยานพาหนะ");

					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");

	}
	return 1;
}

CMD:transferdrug(playerid, params[]) {
	new slot;
	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /transferdrug [package_id]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");
	
	if(PlayerDrug[playerid][slot][drugQTY] == 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
			
	SetPVarInt(playerid, "TransferDrug", slot);
	Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ย้ายไปยังแพ็กเกจใหม่\nย้ายไปยังแพ็กเกจที่มีอยู่", "Next", "Exit");
	
	return 1;
}

CMD:usedrug(playerid, params[]) {
	new slot, Float:amount;

	if (sscanf(params, "df", slot, amount))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /usedrug [package_id] [จำนวน]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
	
	if(amount <= PlayerDrug[playerid][slot][drugQTY]) {

		if(amount >= 0.1 && amount <= 0.4) {
			
			amount = ConvertFloatToOneDP(amount);

			PlayerDrug[playerid][slot][drugQTY] -= amount;
			PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);
			
			if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
				PlayerDrug[playerid][slot][drugQTY] = 0;
				
				format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
				mysql_tquery(dbCon, szQuery);
			}
			else {
				format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
				mysql_tquery(dbCon, szQuery);
			}

			format(szString, sizeof(szString), "* %s ได้ใช้ %s", ReturnRealName(playerid), DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);
			SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
			
			UseDrug(playerid, PlayerDrug[playerid][slot][drugType], amount + 0.6, PlayerDrug[playerid][slot][drugStrength]);

			SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ใช้ %s จำนวน %.1f", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);
				
			Log_Write("logs/drugs.txt", "[%s] %s: use %s (%.1f)", ReturnDate(), ReturnPlayerName(playerid), DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนที่ใช้ต้องไม่ต่ำกว่า 0.1 หรือมากกว่า 0.4");
		}
		
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนไม่ถูกต้อง");
	}
	return 1;
}

Dialog:TransferDrugMenu(playerid, response, listitem, inputtext[])
{
	if(response) {
		
		if(listitem==0) {
			new str[800];
			SetPVarInt(playerid, "TransferDrugMenu", 1);
			
			format(str, sizeof(str), "#\tStorage Name\n");
			for(new i=0;i!=MAX_DRUG_TYPE;i++) {
				format(str, sizeof(str), "%s%d\t%s (ความจุ: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
			}
			Dialog_Show(playerid, TransferDrugNewPackage, DIALOG_STYLE_TABLIST_HEADERS, "Transfer Drug", str, "Select", "Back");
		}
		else {
			new str[1024];
			new slot = GetPVarInt(playerid, "TransferDrug");
			new bool:count;
			SetPVarInt(playerid, "TransferDrugMenu", 2);
			
			for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
			{
				if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {
					
					format(str, sizeof(str), "%s%s %s (ความจุ: %.1f%s / %d.0%s) (Strength: %d)\n", 
					str, 
					DrugPackageName[PlayerDrug[playerid][i][drugPackage]], 
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
					PlayerDrug[playerid][i][drugQTY],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					PlayerDrug[playerid][i][drugStrength]);
					count = true;
				}
			}
			if(count) Dialog_Show(playerid, TransferDrugExistPackage, DIALOG_STYLE_LIST, "Transfer Drug", str, "Select", "Back");
			else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Transfer Drug", "ไม่พบแพ็กเกจที่สามารถย้ายได้", "O", "K");
		}
	}
	else {
		DeletePVar(playerid, "TransferDrug");
	}
	return 1;
}

Dialog:TransferDrugExistPackage(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[256], slot = GetPVarInt(playerid, "TransferDrug");
		SetPVarInt(playerid, "TransferPackage", listitem);
		format(str, sizeof(str), "%s ของคุณปัจจุบันมี %s อยู่ %.1f%s\n\nคุณต้องการย้ายไปเท่าไร?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
		Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Select", "Back");	
	}
	else {
		Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ย้ายไปยังแพ็กเกจใหม่\nย้ายไปยังแพ็กเกจที่มีอยู่", "Next", "Exit");
	}
	return 1;
}

Dialog:TransferDrugNewPackage(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[256], slot = GetPVarInt(playerid, "TransferDrug");
		SetPVarInt(playerid, "TransferPackage", listitem);
		format(str, sizeof(str), "%s ของคุณปัจจุบันมี %s อยู่ %.1f%s\n\nคุณต้องการย้ายไปเท่าไร?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
		Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Select", "Back");	
	}
	else {
		Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ย้ายไปยังแพ็กเกจใหม่\nย้ายไปยังแพ็กเกจที่มีอยู่", "Next", "Exit");
	}
	return 1;
}

Dialog:TransferDrugAmount(playerid, response, listitem, inputtext[])
{
	new transfertype = GetPVarInt(playerid, "TransferDrugMenu");
	
	if(response) {
	
		new packageid = GetPVarInt(playerid, "TransferPackage");
		new Float:transfer_amount = ConvertFloatToOneDP(floatstr(inputtext)), str[256];
		new slot = GetPVarInt(playerid, "TransferDrug"), Float:grams;

		if(transfertype == 1) {
			if(PlayerDrug[playerid][slot][drugQTY] > 0 && transfer_amount <= PlayerDrug[playerid][slot][drugQTY] && transfer_amount >= 0.1) {
			
				grams = DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount;

				if(DrugPackageSize[packageid] >= grams) {
				
					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], transfer_amount, PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], playerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTransferNew", "ddddf", playerid, slot, packageid, x, transfer_amount);
									
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" แพ็กเกจนี้มีพื้นที่ไม่เพียงพอสำหรับยาของคุณ");
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้/จำนวนที่ต้องการย้ายไม่ถูกต้อง");
		
			format(str, sizeof(str), "%s ของคุณปัจจุบันมี %s อยู่ %.1f%s\n\nคุณต้องการย้ายไปเท่าไร?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Select", "Back");
		}
		else {
			//printf("%f %f", PlayerDrug[playerid][slot][drugQTY], transfer_amount);
			if(PlayerDrug[playerid][slot][drugQTY] >= 0.1 && transfer_amount <= PlayerDrug[playerid][slot][drugQTY] && transfer_amount >= 0.1) {
			
				for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
				{
					if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {
						if(packageid) {
							packageid--;
							continue;
						}
						if(PlayerDrug[playerid][i][drugQTY]) {
						
							grams = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount) + (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? PlayerDrug[playerid][i][drugQTY] / 2.285714 : PlayerDrug[playerid][i][drugQTY]);
				
							if(floatround(ConvertFloatToOneDP(grams)) <= floatround(DrugPackageSize[PlayerDrug[playerid][i][drugPackage]])) {
								
								PlayerDrug[playerid][slot][drugQTY] -= transfer_amount;
								PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);
								
								if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
									PlayerDrug[playerid][slot][drugQTY] = 0;
									
									format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
									mysql_tquery(dbCon, szQuery);
								}
								else {
									format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
									mysql_tquery(dbCon, szQuery);
								}
								
								PlayerDrug[playerid][i][drugQTY] += transfer_amount;
								PlayerDrug[playerid][i][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][i][drugQTY]);
								
								Log_Write("logs/drugs.txt", "[%s] %s: transfer %s %s (%f) add to %s", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][i][drugPackage]]);
								SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ย้าย %s จำนวน %.1fg ใส่ไว้ในแพ็กเกจ %s", DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][i][drugPackage]]);

								format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][i][drugQTY], PlayerDrug[playerid][i][drugID]);
								mysql_tquery(dbCon, szQuery);
								
								return 1;
							}
							else {
								SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" แพ็กเกจนี้มีพื้นที่ไม่เพียงพอสำหรับยาของคุณ");
							}
						}
						else {
							SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
						}
						break;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้/จำนวนที่ต้องการย้ายไม่ถูกต้อง");
		
			format(str, sizeof(str), "%s ของคุณปัจจุบันมี %s อยู่ %.1f%s\n\nคุณต้องการย้ายไปเท่าไร?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Select", "Back");
		}
	}
	else {
		if(transfertype == 1) {
			new str[800];
			format(str, sizeof(str), "#\tStorage Name\n");
			for(new i=0;i!=MAX_DRUG_TYPE;i++) {
				format(str, sizeof(str), "%s%d\t%s (ความจุ: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
			}
			Dialog_Show(playerid, TransferDrugNewPackage, DIALOG_STYLE_TABLIST_HEADERS, "Transfer Drug", str, "Select", "Back");
		}
		else {
			new str[1024];
			new slot = GetPVarInt(playerid, "TransferDrug");
			SetPVarInt(playerid, "TransferDrugMenu", 2);
			
			for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
			{
				if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {
					
					format(str, sizeof(str), "%s%s %s (ความจุ: %.1f%s / %d.0%s) (Strength: %d)\n", 
					str, 
					DrugPackageName[PlayerDrug[playerid][i][drugPackage]], 
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
					PlayerDrug[playerid][i][drugQTY],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					PlayerDrug[playerid][i][drugStrength]);
				}
			}
			Dialog_Show(playerid, TransferDrugExistPackage, DIALOG_STYLE_LIST, "Transfer Drug", str, "Select", "Back");
		}
	}
	return 1;
}

CMD:checkdrugs(playerid, params[]) {

	new i;
	if(!IsPlayerInAnyVehicle(playerid)) {

		if(( i = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID) {
			ShowObjectDrugs(i, playerid);
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1) 
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					ShowVehicleDrugs(i, playerid);
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: ขออภัย คุณจำเป็นต้องอยู่ตรงจุดสำหรับจัดเก็บของยานพาหนะหรือในบ้าน");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
			}
		}
	}
	else 
	{
		if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {
			ShowVehicleDrugs(i, playerid);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: คำสั่งนี้สามารถใช้ได้เฉพาะยานพาหนะส่วนตัว แต่คุณอยู่ในยานพาหนะสาธารณะ (Static)");
		}
	}
	return 1;
}

CMD:buildpackage(playerid, params[]) {

	new slot, objectid;
	if (sscanf(params, "dd", slot, objectid)) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE:"EMBED_WHITE" /buildpackage [player_package_id] [object]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "OBJECTS: 0 - Cluckin' Bell Burger Box 1 - Burgershot Cup 2 - Cok O Pops 3 - Shoe Box 4 - Milk Carton 5 - Wrapped Package 6 - Pizza Box");
		SendClientMessage(playerid, COLOR_LIGHTRED, "7 - Cardboard Box 8 - Cigarette Pack");
		return 1;
	}


	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");

	if(objectid < 0 || objectid >= sizeof(DrugObject)) {
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" หมายเลขออบเจ็คไม่ถูกต้อง (0-%d)", sizeof(DrugObject) - 1);
	}

	new Float:grams_size = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE]) ? PlayerDrug[playerid][slot][drugQTY] / 2.285714 : PlayerDrug[playerid][slot][drugQTY];

	if(float(DrugObject[objectid][DRUGOBJECT_SIZE]) >= grams_size) {
		if(DrugObject_Count(playerData[playerid][pID]) < 2) {
			new itemslot = -1;
			if((itemslot = GetFreeItemDrugSlot()) != -1) {
				
				format(szQuery, sizeof(szQuery), "INSERT INTO `drug_package` (`drugObj`,`drugOwner`) VALUES('%d','%d')", objectid, playerData[playerid][pID]);
				new Cache: add = mysql_query(dbCon, szQuery), data[e_objectDrug], drugobjectid;
	
				data[drugSID]=cache_insert_id();
				data[drugOwner]=playerData[playerid][pID];
				
				GetPlayerPos(playerid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);
				GetXYInFrontOfPlayer(playerid, data[drugObjectX], data[drugObjectY], 1.5);
		
				data[drugObj] = objectid;
				data[drugObjectRX] = 0.0;
				data[drugObjectRY] = 0.0;
				data[drugObjectRZ] = 0.0;
				data[drugObjectWorld] = GetPlayerVirtualWorld(playerid);
				data[drugObjectInt] = GetPlayerInterior(playerid);
				cache_delete(add);
				
				drugobjectid = CreateDynamicObject(DrugObject[objectid][DRUGOBJECT_MODEL], data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugObjectWorld], data[drugObjectInt], -1, 200.0);
				
				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, drugobjectid, E_STREAMER_EXTRA_ID, data);

				format(XLQuery, sizeof(XLQuery), "UPDATE `drug_package` SET `drugObjectX`='%f',`drugObjectY`='%f',`drugObjectZ`='%f',`drugObjectRX`='0.0',`drugObjectRY`='0.0',`drugObjectRZ`='0.0',`drugObjectWorld`='%d',`drugObjectInt`='%d' WHERE `drugSID` = '%d'", 
				data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectWorld], data[drugObjectInt], data[drugSID]);
				mysql_tquery(dbCon, XLQuery);

				format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_object` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`objectID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], data[drugSID]);
				mysql_tquery(dbCon, szQuery, "OnDrugPackageItem", "ddddd", playerid, slot, objectid, itemslot, data[drugSID]);	
				
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ถึงขีดจำกัดในการสร้างแพ็กเกจของเซิร์ฟเวอร์แล้วโปรดลองใหม่อีกครั้งภายหลัง");
			}
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" คุณไม่สามารถวางแพ็กเกจในพื้นที่นี้ได้มากกว่านี้แล้ว");
		}
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ขนาดแพ็กเกจมีพื้นที่ไม่เพียงพอ");
	}
	
	return 1;
}

CMD:adjustpackage(playerid, params[]) {
	new objectid = INVALID_OBJECT_ID;
	if((objectid = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID)
	{
		SetPVarInt(playerid, "EditingDrugPackage", 1);

		EditDynamicObject(playerid, objectid);
		
		SendClientMessage(playerid, COLOR_LIGHTRED, "WARNING: การวางแพ็กเกจยาเสพติดใด ๆ ก็ตามหากใช้ไปในทางที่ผิดจะส่งผลให้ถูกแบนออกจากเซิร์ฟเวอร์");
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ไม่มีอะไรอยู่ที่นั้น..");
	}
	return 1;
}

GetFreeItemDrugSlot()
{
	for(new i = 0; i != MAX_ITEM_DRUG; i++)
	{
		if(ItemDrug[i][drugQTY] == 0)
			return i;
	}
	return -1;
}

DrugObject_Nearest(playerid, Float:radius = 2.5)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = INVALID_OBJECT_ID
	;

	new data[e_objectDrug];
	for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
		if(!IsValidDynamicObject(x)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
		if(data[drugSID]) {
			new
				Float:temp = GetPlayerDistanceFromPoint(playerid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);
		
			if (temp < fDistance && temp <= radius)
			{
				fDistance = temp;
				iIndex = x;
			}
		}
	}
		
	return iIndex;
}

ShowVehicleDrugs(carid, toplayer)
{
	new bool:count=false;
	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s's Drugs:", g_arrVehicleNames[CarData[carid][carModel] - 400]);
	for(new i = 0; i != MAX_VEHICLE_DRUG_PACKAGE; i++)
	{
		if(VehicleDrug[carid][i][drugQTY]>0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]", 
			i, 
			DrugPackageName[VehicleDrug[carid][i][drugPackage]], 
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_NAME],
			VehicleDrug[carid][i][drugQTY],
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[VehicleDrug[carid][i][drugPackage]] * 2.285714 : DrugPackageSize[VehicleDrug[carid][i][drugPackage]]),
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			VehicleDrug[carid][i][drugStrength]);	
			
			count=true;
		}
	}
	if(!count) {
		SendClientMessage(toplayer, -1, "ไม่มียาเสพติดที่จะแสดง");
	}
}

ShowPlayerDrugs(playerid, toplayer)
{
	new bool:count=false;
	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s's Drugs:", ReturnRealName(playerid));
	for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
	{
		if(PlayerDrug[playerid][i][drugQTY]>0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]", 
			i, 
			DrugPackageName[PlayerDrug[playerid][i][drugPackage]], 
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
			PlayerDrug[playerid][i][drugQTY],
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			PlayerDrug[playerid][i][drugStrength]);	
			
			
			count=true;
		}
	}
	if(!count) {
		SendClientMessage(toplayer, -1, "ไม่มียาเสพติดที่จะแสดง");
	}
}

ShowObjectDrugs(objectid, toplayer)
{
	new count=0, data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
					
	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s ( %.1fg / %.1fg ):", DrugObject[data[drugObj]][DRUGOBJECT_NAME], DrugObject_Size(objectid), float(DrugObject[data[drugObj]][DRUGOBJECT_SIZE]));
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID])
	{
		if(ItemDrug[i][drugQTY] > 0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]", 
			count, 
			DrugPackageName[ItemDrug[i][drugPackage]], 
			DrugData[ItemDrug[i][drugType]][DRUGDATA_NAME],
			ItemDrug[i][drugQTY],
			DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[ItemDrug[i][drugPackage]] * 2.285714 : DrugPackageSize[ItemDrug[i][drugPackage]]),
			DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			ItemDrug[i][drugStrength]);	
			
			count++;
		}
	}
	if(count==0) {
		SendClientMessage(toplayer, -1, "ไม่มียาเสพติดที่จะแสดง");
	}
}

CMD:removedrug(playerid, params[]) {

    if (playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new userid, slot, Float:amount;
	if (sscanf(params, "ud", userid, slot))
	    return SendSyntaxMessage(playerid, "/removedrug [ไอดีผู้เล่น/ชื่อบางส่วน] [ช่อง]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
		}
	}

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไอดีแพ็กเกจไม่ถูกต้อง");

	if(PlayerDrug[userid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" ไม่พบแพ็กเกจอยู่ในช่องนี้");
	
	if(amount <= PlayerDrug[userid][slot][drugQTY]) {
	
		amount = ConvertFloatToOneDP(amount);
		
		PlayerDrug[userid][slot][drugQTY] -= amount;
		PlayerDrug[userid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[userid][slot][drugQTY]);
		
		if(PlayerDrug[userid][slot][drugQTY]<0.1) {
			PlayerDrug[userid][slot][drugQTY] = 0;
			
			format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[userid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		else {
			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[userid][slot][drugQTY], PlayerDrug[userid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ยึด %s จำนวน %.1f ของ %s", DrugData[PlayerDrug[userid][slot][drugType]][DRUGDATA_NAME], amount, ReturnPlayerName(userid));
			
		Log_Write("logs/drugs.txt", "[%s] %s: remove %s (%.1f) %s", ReturnDate(), ReturnPlayerName(playerid), DrugData[PlayerDrug[userid][slot][drugType]][DRUGDATA_NAME], amount, ReturnPlayerName(userid));
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนไม่ถูกต้อง");
	}
	return 1;
}

CMD:spawndrug(playerid) {

	if(playerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");

	new str[1024];
	format(str, sizeof(str), "#\tDrug Name\n");
	for(new i=0;i!=sizeof(DrugData);i++) {
		format(str, sizeof(str), "%s%d\t%s\n", str, i, DrugData[i][DRUGDATA_NAME]);
	}
	Dialog_Show(playerid, AdminDrugCreate_Type, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Select", "Back");
	return 1;
}

Dialog:AdminDrugCreate_Type(playerid, response, listitem, inputtext[]) {
	if(response) {	
		new str[800];
		SetPVarInt(playerid, "AdminDrugCreate_drugid", listitem);
		
		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (ความจุ: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Select", "Back");
	}
	return 1;
}

Dialog:AdminDrugCreate_Package(playerid, response, listitem, inputtext[]) {
	if(response) {	
		new str[512];
		
		new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
		SetPVarInt(playerid, "AdminDrugCreate_package", listitem);
		
		format(str, sizeof(str), "ยาเสพติด: %s\nแพ็กเกจที่เลือก %s (ความจุ: %d.0%s)\n\nกรอกจำนวนความแข็งแรง (0-100):", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[listitem], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[listitem] * 2.285714 : DrugPackageSize[listitem]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"));
		Dialog_Show(playerid, AdminDrugCreate_Strength, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Select", "Back");	
	}
	else {
		PC_EmulateCommand(playerid, "/spawndrug");
	}
	return 1;
}

Dialog:AdminDrugCreate_Strength(playerid, response, listitem, inputtext[]) {
	new str[800];
	if(response) {	
	
		new strength = strval(inputtext);
		if(strength >= 0 || strength <= 100) {
			new packageid = GetPVarInt(playerid, "AdminDrugCreate_package");
			new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
			SetPVarInt(playerid, "AdminDrugCreate_strength", strength);
		
			format(str, sizeof(str), "ยาเสพติด: %s\nแพ็กเกจที่เลือก %s (ความจุ: %d.0%s)\nความแข็งแรง: %d\n\nกรอกจำนวนยาเสพติดที่ต้องการ:", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[packageid], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[packageid] * 2.285714 : DrugPackageSize[packageid]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"), strength);
			Dialog_Show(playerid, AdminDrugCreate_Amount, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Done", "Back");
		}
		else {
			new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
			SetPVarInt(playerid, "AdminDrugCreate_package", listitem);
			
			format(str, sizeof(str), "ยาเสพติด: %s\nแพ็กเกจที่เลือก %s (ความจุ: %d.0%s)\n\nกรอกจำนวนความแข็งแรง (0-100):", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[listitem], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[listitem] * 2.285714 : DrugPackageSize[listitem]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, AdminDrugCreate_Strength, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Select", "Back");	
		}
	}
	else {
		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (ความจุ: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Select", "Back");
	}
	return 1;
}

Dialog:AdminDrugCreate_Amount(playerid, response, listitem, inputtext[]) {
	if(response) {	
	

		new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
		new packageid = GetPVarInt(playerid, "AdminDrugCreate_package");
		new strength = GetPVarInt(playerid, "AdminDrugCreate_strength");
		new Float:transfer_amount = ConvertFloatToOneDP(floatstr(inputtext)), str[512];

		if(transfer_amount > 0) {
		
			new grams = floatround(DrugData[drugid][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount);

			if(floatround(DrugPackageSize[packageid]) >= grams) {
			
				for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
				{
					if(PlayerDrug[playerid][x][drugQTY] == 0) {
					
						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", drugid, transfer_amount, strength, packageid, playerData[playerid][pID]);
						mysql_tquery(dbCon, szQuery, "OnDrugAdminCreate", "dddfdd", playerid, x, drugid, transfer_amount, strength, packageid);	
		
						/*Log_Write("logs/drugs.txt", "[%s] %s: create %s %s (%f)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[packageid], DrugData[drugid][DRUGDATA_NAME], transfer_amount);
		
						PlayerDrug[playerid][x][drugID] = 1; // MYSQL NUMBER
						PlayerDrug[playerid][x][drugType] = drugid;
						PlayerDrug[playerid][x][drugQTY] = transfer_amount;
						PlayerDrug[playerid][x][drugStrength] = strength;
						PlayerDrug[playerid][x][drugPackage] = packageid;
				
						SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้สร้าง %s จำนวน %.1fg ใส่ไว้ในแพ็กเกจ %s", DrugData[PlayerDrug[playerid][x][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][x][drugPackage]]);
						*/
						DeletePVar(playerid, "AdminDrugCreate_drugid");
						DeletePVar(playerid, "AdminDrugCreate_package");
						DeletePVar(playerid, "AdminDrugCreate_strength");
						
						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนไม่ถูกต้อง");
			}
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERROR:"EMBED_WHITE" จำนวนไม่ถูกต้อง");
		
		format(str, sizeof(str), "ยาเสพติด: %s\nแพ็กเกจที่เลือก %s (ความจุ: %d.0%s)\nความแข็งแรง: %d\n\nกรอกจำนวนที่ต้องการ:", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[packageid], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[packageid] * 2.285714 : DrugPackageSize[packageid]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"), strength);
		Dialog_Show(playerid, AdminDrugCreate_Amount, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Select", "Back");	
	}
	else {
		new str[800];
		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (ความจุ: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Select", "Back");
	}
	return 1;
}

forward OnDrugAdminCreate(playerid, slot, drugid, Float:transfer_amount, strength, packageid);
public OnDrugAdminCreate(playerid, slot, drugid, Float:transfer_amount, strength, packageid)
{
	if(PlayerDrug[playerid][slot][drugQTY] == 0) {
		PlayerDrug[playerid][slot][drugID] = cache_insert_id(); // MYSQL NUMBER
		PlayerDrug[playerid][slot][drugType] = drugid;
		PlayerDrug[playerid][slot][drugQTY] = transfer_amount;
		PlayerDrug[playerid][slot][drugStrength] = strength;
		PlayerDrug[playerid][slot][drugPackage] = packageid;
		
		SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้สร้าง %s จำนวน %.1fg ใส่ไว้ในแพ็กเกจ %s", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][slot][drugPackage]]);
		
		Log_Write("logs/drugs.txt", "[%s] %s: admin create %s %s (%f)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY]);	
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERROR:"EMBED_WHITE" คุณไม่เหลือช่องว่างสำหรับแพ็กเกจนี้");
	}
}


forward UseDrug(playerid, drugid, Float:level, strength);
public UseDrug(playerid, drugid, Float:level, strength) {

	/*
	pDrugAddiction[MAX_DRUGS],
	pDrugAddict,
	pDrugAddictStrength,
	*/
	static const DrugsAddict[MAX_DRUGS][5] =
	{
		/*
			0 - เสพติดครั้งแรก
			1 - หากติดอยู่แล้ว
			2 - สุ่มเมื่อติดอยู่แล้ว
			3 - ติดยาชนิดอื่นอยู่แล้ว
			4 - ถ้าติดยาตัวอื่นอยู่ก็จะเพิ่ม
		*/
		{3, 3, 6, 2, 15}, //Cocaine
		{0, 0, 0, 0, 0}, //Cannabis
		{3, 3, 6, 2, 15}, //Xanax
		{3, 3, 6, 2, 15}, //MDMA
		{3, 3, 6, 2, 15}, //Heroin
		{3, 3, 6, 2, 15}, //Ketamine
		{3, 3, 6, 2, 15}, //Fentanyl
		{3, 3, 6, 2, 15}, //Methamphetamine
		{3, 3, 3, 1, 7}, //Steroids
		{3, 3, 6, 2, 15} //Oxycodone
	};
	
	static const Float:DrugsHealth[MAX_DRUGS][4] =
	{
		/*
			0 - เลือดจะเพิ่มครั้งละ
			1 - โบนัสเพิ่มสูงสุด
			2 - จำนวนวินาที
			3 - เพิ่มความหิว
		*/
		{7.0, 70.0, 10.0, 10.0}, //Cocaine
		{3.0, 45.0, 15.0, 9.0}, //Cannabis
		{4.0, 40.0, 15.0, 10.0}, //Xanax
		{5.0, 35.0, 12.0, 10.0}, //MDMA
		{5.0, 65.0, 12.0, 10.0}, //Heroin
		{6.0, 60.0, 10.0, 10.0}, //Ketamine
		{6.0, 60.0, 10.0, 10.0}, //Fentanyl
		{10.0, 50.0, 13.0, 7.0}, //Methamphetamine
		{10.0, 50.0, 20.0, 10.0}, //Steroids
		{5.0, 50.0, 20.0, 10.0} //Oxycodone
	};
	
	if(playerData[playerid][pDrugAddiction][drugid] == 0) {
		playerData[playerid][pDrugAddiction][drugid] = DrugsAddict[drugid][0];
	}
	else {

		if(DrugsAddict[drugid][1] > 0)
			playerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][1] + (random(DrugsAddict[drugid][2]) + 1);
		
		if(DrugAddiction_OtherDrug(playerid, drugid)) {
			if(DrugsAddict[drugid][3] > 0)
				playerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][3];
		}
		if(playerData[playerid][pDrugAddict] && playerData[playerid][pDrugAddict] != drugid + 1) {
			
			if(DrugsAddict[drugid][4] > 0) {
				playerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][4];
				
				if(strength >= playerData[playerid][pDrugAddictStrength] && playerData[playerid][pDrugAddiction][drugid] > DrugsAddict[drugid][4]) {
					playerData[playerid][pDrugAddict] = drugid + 1;
					playerData[playerid][pDrugAddictStrength] = strength;
				}
			}
		}
		
		if(playerData[playerid][pDrugAddict] && playerData[playerid][pDrugAddict] == drugid + 1)
			SufferDrugs{playerid}=true;
	}
	
	if(playerData[playerid][pDrugAddiction][drugid] > 100) {
		playerData[playerid][pDrugAddiction][drugid] = 100;
	}
	
	// ความหิว
	if(DrugsHealth[drugid][3]) {
		if(playerData[playerid][pSHealth] / DrugsHealth[drugid][3] > 0) {
			playerData[playerid][pHunger] += playerData[playerid][pSHealth] / DrugsHealth[drugid][3];
		}
	}
	
	//เลือดเพิ่ม
	if(playerData[playerid][pDrugAddiction][drugid] < 70) {
		if(EffectDrugs_Timer[playerid] != Timer:0) {
			stop EffectDrugs_Timer[playerid];
			EffectDrugs_Timer[playerid] = Timer:0;
		}
		EffectDrugs[playerid]=DrugsHealth[drugid][1];
		EffectDrugAmount[playerid] = floatround(DrugsHealth[drugid][2]);
		EffectDrugs_Timer[playerid] = repeat drugEffects(playerid, DrugsHealth[drugid][0] * level);

		GameTextForPlayer(playerid, "~r~Max Health Increase", 5000, 4);
		//SetPlayerMaxHealth(playerid, 200.0);
	}
	return 1;
}

DrugAddiction_OtherDrug(playerid, drugid) {
	for(new i=0;i!=MAX_DRUGS;i++) {
		if(playerData[playerid][pDrugAddiction][i] != drugid) {
			return true;
		}
	}
	return false;
}

timer drugEffects[1000](playerid, Float:amount)
{
	if(isDeathmode{playerid} || isInjuredmode{playerid} || EffectDrugAmount[playerid] <= 0) {
		stop EffectDrugs_Timer[playerid];
		EffectDrugs_Timer[playerid]=Timer:0;
		return true;
	}

	if(playerData[playerid][pHealth] > 200) SetPlayerHealthEx(playerid, 200.0); 
	else 
	{
		SetPlayerHealthEx(playerid,(playerData[playerid][pHealth] + amount));
		EffectDrugs[playerid] -= amount;
		if(EffectDrugs[playerid] <= 0.0) {
			EffectDrugs[playerid] = 0.0;
			stop EffectDrugs_Timer[playerid];
			EffectDrugs_Timer[playerid]=Timer:0;
		}
	}
	EffectDrugAmount[playerid]--;
	return true; 
}

/*
timer drugEffects[1000](playerid, Float:amount)
{
	if(playerData[playerid][pHealth] >= 200) {
		EffectDrugs[playerid]=0.0;
		if(timerexist_Drugs{playerid}) {
			stop TimerDrugs[playerid];
			timerexist_Drugs{playerid}=false;
		}
		return 0;
	}
	
	if(EffectDrugs[playerid] > amount) {
		if(timerexist_Drugs{playerid}) {
			stop TimerDrugs[playerid];
			timerexist_Drugs{playerid}=false;
		}
		return 0;
	}

	if(playerData[playerid][pHealth] + amount <= 200)
	{
		SetPlayerHealthEx(playerid,(playerData[playerid][pHealth] + amount));
	}
	else SetPlayerHealthEx(playerid, 200);
	
	return 1;
}*/

forward OnDrugPackageItem(playerid, slot, objectid, itemslot, objectslot);
public OnDrugPackageItem(playerid, slot, objectid, itemslot, objectslot)
{
	ItemDrug[itemslot][drugID] = cache_insert_id(); 
	ItemDrug[itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	ItemDrug[itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	ItemDrug[itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	ItemDrug[itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	ItemDrug[itemslot][drugFore] = objectslot;
	
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" คุณได้ใส่ %s ไว้ใน %s", DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugObject[objectid][DRUGOBJECT_NAME]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "ข้อแนะ:"EMBED_WHITE" ใช้ /adjustpackage เพื่อปรับตำแหน่งแพ็กเกจใหม่");

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery, "OnDrugPackageCharBuild", "ddd", playerid, slot, objectid);	
	
	return 1;
}

forward OnDrugPackageCharBuild(playerid, slot, objectid);
public OnDrugPackageCharBuild(playerid, slot, objectid)
{
	Log_Write("logs/drugs.txt", "[%s] %s: build and place %s %s (%f) to %s", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugObject[objectid][DRUGOBJECT_NAME]);
	PlayerDrug[playerid][slot][drugQTY] = 0;
}

forward OnDrugPlaceItem(playerid, slot, itemslot, objectid, dObj, dSid);
public OnDrugPlaceItem(playerid, slot, itemslot, objectid, dObj, dSid)
{	
	ItemDrug[itemslot][drugID] = cache_insert_id(); 
	ItemDrug[itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	ItemDrug[itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	ItemDrug[itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	ItemDrug[itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	ItemDrug[itemslot][drugFore] = dSid;
	
	PlayerDrug[playerid][slot][drugQTY] = 0;
	
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" คุณได้ใส่ %s ไว้ใน %s", DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugObject[dObj][DRUGOBJECT_NAME]);
	
	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to object %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugData[ItemDrug[itemslot][drugType]][DRUGDATA_NAME], ItemDrug[itemslot][drugQTY], objectid, dSid);			

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceAllItem(playerid, slot, itemslot, objectid, dSid);
public OnDrugPlaceAllItem(playerid, slot, itemslot, objectid, dSid)
{
	ItemDrug[itemslot][drugID] = cache_insert_id(); 

	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to object %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugData[ItemDrug[itemslot][drugType]][DRUGDATA_NAME], ItemDrug[itemslot][drugQTY], objectid, dSid);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceCar(playerid, slot, itemslot, carid);
public OnDrugPlaceCar(playerid, slot, itemslot, carid)
{
	VehicleDrug[carid][itemslot][drugID] = cache_insert_id(); 
	VehicleDrug[carid][itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	VehicleDrug[carid][itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	VehicleDrug[carid][itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	VehicleDrug[carid][itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	VehicleDrug[carid][itemslot][drugFore] = CarData[carid][carSID];
	
	PlayerDrug[playerid][slot][drugQTY] = 0;
	
	SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้เก็บ %s (%s) ไว้ในยานพาหนะ", DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME]);
	
	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME], VehicleDrug[carid][itemslot][drugQTY], carid, CarData[carid][carSID]);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceAllCar(playerid, slot, itemslot, carid);
public OnDrugPlaceAllCar(playerid, slot, itemslot, carid)
{
	VehicleDrug[carid][itemslot][drugID] = cache_insert_id(); 
	
	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME], VehicleDrug[carid][itemslot][drugQTY], carid, CarData[carid][carSID]);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTakeItem(playerid, slot, objectid, dObject, dSid, drug);
public OnDrugTakeItem(playerid, slot, objectid, dObject, dSid, drug)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();
	PlayerDrug[playerid][slot][drugType] = ItemDrug[drug][drugType];
	PlayerDrug[playerid][slot][drugQTY] = ItemDrug[drug][drugQTY];
	PlayerDrug[playerid][slot][drugStrength] = ItemDrug[drug][drugStrength];
	PlayerDrug[playerid][slot][drugPackage] = ItemDrug[drug][drugPackage];
	
	ItemDrug[drug][drugQTY] = 0;
	
	SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้หยิบ %s (%s) จาก %s", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], DrugObject[dObject][DRUGOBJECT_NAME]);
	
	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from object %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], objectid, dSid);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_object` WHERE `drugID` = '%d'", ItemDrug[drug][drugID]);
	mysql_tquery(dbCon, szQuery);
	
	if(DrugObject_IsEmpty(objectid)) {
		DrugObject_Delete(objectid, dSid);
	}
}

forward OnDrugTakeAllItem(playerid, slot, objectid, dSid, drug);
public OnDrugTakeAllItem(playerid, slot, objectid, dSid, drug)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from object %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], objectid, dSid);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_object` WHERE `drugID` = '%d'", ItemDrug[drug][drugID]);
	mysql_tquery(dbCon, szQuery);
	
}

forward OnDrugTakeCar(playerid, slot, itemslot, carid);
public OnDrugTakeCar(playerid, slot, itemslot, carid)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();
	
	PlayerDrug[playerid][slot][drugType] = VehicleDrug[carid][itemslot][drugType];
	PlayerDrug[playerid][slot][drugQTY] = VehicleDrug[carid][itemslot][drugQTY];
	PlayerDrug[playerid][slot][drugStrength] = VehicleDrug[carid][itemslot][drugStrength];
	PlayerDrug[playerid][slot][drugPackage] = VehicleDrug[carid][itemslot][drugPackage];
	
	VehicleDrug[carid][itemslot][drugQTY] = 0;
	
	SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้หยิบ %s (%s) จากยานพาหนะ", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);
	
	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], carid, CarData[carid][carSID]);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_car` WHERE `drugID` = '%d'", VehicleDrug[carid][itemslot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTakeAllCar(playerid, slot, itemslot, carid);
public OnDrugTakeAllCar(playerid, slot, itemslot, carid)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from car %d (SID:%d)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], carid, CarData[carid][carSID]);
	
	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_car` WHERE `drugID` = '%d'", VehicleDrug[carid][itemslot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTransferNew(playerid, slot, packageid, toslot, Float:transfer_amount);
public OnDrugTransferNew(playerid, slot, packageid, toslot, Float:transfer_amount)
{
	Log_Write("logs/drugs.txt", "[%s] %s: transfer %s (%s:%f) to %s", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[packageid]);
	
	PlayerDrug[playerid][toslot][drugID] = cache_insert_id();
	PlayerDrug[playerid][toslot][drugType] = PlayerDrug[playerid][slot][drugType];
	PlayerDrug[playerid][toslot][drugQTY] = transfer_amount;
	PlayerDrug[playerid][toslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	PlayerDrug[playerid][toslot][drugPackage] = packageid;
	
	PlayerDrug[playerid][slot][drugQTY] -= transfer_amount;
	PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);
	
	if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
		PlayerDrug[playerid][slot][drugQTY] = 0;
		
		format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
		mysql_tquery(dbCon, szQuery);
	}
	else {
		format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
		mysql_tquery(dbCon, szQuery);
	}
	
	SendClientMessageEx(playerid, COLOR_YELLOW, "คุณได้ย้าย %s จำนวน %.1fg ใส่ไว้ในแพ็กเกจ %s", DrugData[PlayerDrug[playerid][toslot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][toslot][drugPackage]]);
	
}

CMD:charity(playerid, params[]) {
	new string[128], moneys;
	
	if(sscanf(params,"d",moneys)) return SendSyntaxMessage(playerid, "/charity [จำนวน]");
	
	if(moneys < 0) return SendClientMessage(playerid, COLOR_GRAD1, "   จำนวนเงินไม่ถูกต้อง");
	if(playerData[playerid][pCash] < moneys) return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีเงินไม่มากขนาดนั้น");

	playerData[playerid][pCash] -= moneys;
	
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_GRAD1, "ขอบคุณ %s สำหรับการบริจาคเงิน %d", ReturnRealName(playerid), moneys);
	//PayLog(string);
	
	Log_Write("logs/charity_log.txt", "[%s] %s (%s) has donation of %s", ReturnDate(), ReturnRealName(playerid), playerData[playerid][pIP], FormatNumber(moneys));

	SendAdminAlert(COLOR_YELLOW, "Adm: %s ได้บริจาคเงิน %s ให้กับเซิร์ฟเวอร์", ReturnPlayerName(playerid), FormatNumber(moneys));
	
	format(string, sizeof(string), "บริจาค %d ให้เซิร์ฟเวอร์", moneys, ReturnPlayerName(playerid));
	SQL_LogPay(playerid, "/charity", string);
	return 1;
}
/*
CMD:spike_add(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD)
	{
		if (!strlen(params[0]))
		{
			return SendClientMessage(playerid, 0xC0C0C0FF, "การใช้: /spike_add <modelid> [0 = SHORT, 1 = LONG]");
		}
	    new
			model,
			index,
			Float:px,
			Float:py,
			Float:pz,
			Float:pa;
		model = strval(params);
		GetPlayerPos(playerid, px, py, pz);
		if (!IsPlayerInAnyVehicle(playerid))
		{
			GetPlayerFacingAngle(playerid, pa);
		}
		else
		{
			GetVehicleZAngle(GetPlayerVehicleID(playerid), pa);
		}
		#if defined _inc_mapandreas
		
		MapAndreas_FindZ_For2DCoord(px, py, pz);

		#endif
		
		//printf("Z %f", pz);

//MapAndreas_FindZ_For2DCoord(px, py, pz); 
		
		model != 0 && (model = SPIKE_STRIP_LONG) || (model = SPIKE_STRIP_SHORT);
		if ((index = SpikeStrip_Create(model, px, py, pz-1, pa)) != INVALID_OBJECT_ID)
		{
			new
				str[32];
			format(str, 32, "Spike Strip ไอดี %d ถูกสร้าง", index);
			SendClientMessage(playerid, 0xC0C0C0FF, str);
		}
		else
		{
			SendClientMessage(playerid, 0xC0C0C0FF, "ERROR: Spike strip ไม่สามารถสร้างได้");
		}
		return 1;
	}
	return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
}

CMD:spike_del(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD)
	{
		if (!strlen(params[0]))
		{
			return SendClientMessage(playerid, 0xC0C0C0FF, "การใช้: /spike_del <spikeid>");
		}
	    new
			index;
		index = strval(params);
		if (SpikeStrip_IsValid(index))
		{
			new
				str[32];
			format(str, 32, "Spike Strip ไอดี %d ถูกลบ", index);
			SendClientMessage(playerid, 0xC0C0C0FF, str);

			SpikeStrip_Delete(index);
		}
		else
		{
			SendClientMessage(playerid, 0xC0C0C0FF, "ERROR: ไอดี spike strip ไม่ถูกต้อง");
		}
		return 1;
	}
	return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
}

CMD:spike_ghost(playerid, params[])
{
	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD)
	{
		new
			player,
			status;
		if(sscanf(params, "ui", player, status))
		{
			return SendClientMessage(playerid, 0xC0C0C0FF, "การใช้: /spike_ghost <playerid> <ghost>");
		}
		if (player != INVALID_PLAYER_ID)
		{
			new
				str[64];
			format(str, 64, "ผู้เล่นไอดี %d ถูกเซต ghost mode เป็น %d", player, !!status);
			SendClientMessage(playerid, 0xC0C0C0FF, str);

			SpikeStrip_SetGhost(player, !!status);
		}
		return 1;
	}
	return SendClientMessage(playerid, COLOR_LIGHTRED,"สำหรับเจ้าหน้าที่ตำรวจเท่านั้น");
}*/

CMD:spike_add(playerid, params[]) { // Same method as old VX script, though recoded.
	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {
		if(GetPlayerState(playerid) == 1) {

			if(!isnull(params)) {
	
				new type = strval(params);
				
				new
					x = -1,
					string[80];

				if((x = Iter_Free(sv_spikes)) != -1) {
					spikeVariables[x][sType] = type;
					
					GetPlayerPos(playerid, spikeVariables[x][sPos][0], spikeVariables[x][sPos][1], spikeVariables[x][sPos][2]);
					GetPlayerFacingAngle(playerid, spikeVariables[x][sPos][3]);

					spikeVariables[x][sObjID] = CreateDynamicObject((type) ? 2892 : 2899, spikeVariables[x][sPos][0], spikeVariables[x][sPos][1], spikeVariables[x][sPos][2] - 0.8, 0.0, 0.0, spikeVariables[x][sPos][3], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 200.0);
					GetPlayerName(playerid, spikeVariables[x][sDeployer], MAX_PLAYER_NAME);

					format(string, sizeof(string),"คุณได้สร้างแถบเข็มไอดี (ID %d)", x);
					SendClientMessage(playerid, COLOR_WHITE, string);
					
					Iter_Add(sv_spikes, x);
				}
				else {
					format(string, sizeof(string), "แถบเข็มเต็มแล้ว (เต็ม %d) กรุณาลบมันก่อนที่จะสร้างอันใหม่", MAX_SPIKES);
					SendClientMessage(playerid, COLOR_GREY, string);
				}
			}
			else SendSyntaxMessage(playerid, "/spike_add <modelid> [0 = SHORT, 1 = LONG]");
			
			
		}
		else SendClientMessage(playerid, COLOR_GREY, "คุณสามารถสร้างแถบเข็มได้บนถนนเท่านั้น");
	}
	return 1;
}

CMD:spike_del(playerid, params[]) {
	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {

		new
			targetID,
			string[75];

		if(!isnull(params)) {

			targetID = strval(params);

			if(Iter_Contains(sv_spikes, targetID)) {	
				if(spikeVariables[targetID][sPos][0] != 0 && spikeVariables[targetID][sPos][1] != 0 && spikeVariables[targetID][sPos][2] != 0) {

					if(IsValidDynamicObject(spikeVariables[targetID][sObjID])) DestroyDynamicObject(spikeVariables[targetID][sObjID]);

					for(new i; i < 4; i++) spikeVariables[targetID][sPos][i] = 0;

					spikeVariables[targetID][sObjID] = INVALID_OBJECT_ID;
					format(spikeVariables[targetID][sDeployer], MAX_PLAYER_NAME, "(null)");

					format(string, sizeof(string), "คุณทำลายแถบเข็มไอดีที่ %d", targetID);
					SendClientMessage(playerid, COLOR_WHITE, string);
					
					Iter_Remove(sv_spikes, targetID);
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "เลขแถบเข็มผิดพลาด");
		}
		else SendSyntaxMessage(playerid, "/spike_del [ID]");
	}
	return 1;
}

CMD:spikes(playerid, params[]) {

	if(GetFactionType(playerid) == FACTION_TYPE_POLICE || GetFactionType(playerid) == FACTION_TYPE_SASD) {

		new
			dString[128],
			sZone[MAX_ZONE_NAME],
			x,
			y;

		SendClientMessage(playerid, COLOR_GREEN, "---------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, COLOR_WHITE, "รายชื่อแถบเข็ม:");
		foreach(new i : sv_spikes) {
			//Get2DPosZone(spikeVariables[i][sPos][0], spikeVariables[i][sPos][1], sZone, MAX_ZONE_NAME); // Edited a_zones function (GET INCLUDE FROM SVN!!1)
			GetPlayer3DZone(playerid, sZone, sizeof(sZone));
			y++;
			if(x == 0) format(dString, sizeof(dString), "ID %d (%s, สร้างโดย %s)", i, sZone, spikeVariables[i][sDeployer]);
			else format(dString, sizeof(dString), "%s | ID %d (%s, สร้างโดย %s)", dString, i, sZone, spikeVariables[i][sDeployer]);
			x++;
	
			if(x == 2) {
				SendClientMessage(playerid, COLOR_WHITE, dString);
				x = 0;
			}
		}
		if(x == 1) SendClientMessage(playerid, COLOR_WHITE, dString);
		if(y == 0) SendClientMessage(playerid, COLOR_WHITE, "ไม่มีแถบเข็มจึงไม่สามารถทำลายได้");
		SendClientMessage(playerid, COLOR_GREEN, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}


CMD:clearpdata(playerid) {

	if (playerData[playerid][pAdmin] < 1339)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
		
		
	new query[1024];
	format(query,sizeof(query),"SELECT * FROM `characters` WHERE (%d - `LastLogin` >= 5184000) OR (`Level` = 1 AND `Created` = 1)", gettime());
	mysql_query(dbCon, query);
	
	printf(query);
	
	new rows;

	cache_get_row_count(rows);
	
	if(rows != 0)
	{
		for(new i = 0; i < rows; i++) {
			new charid;
			cache_get_value_name_int(i, "ID", charid);
			printf("Found characterid %d", charid);
			
			format(query, sizeof(query), "DELETE FROM `advertisement` WHERE `charid` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `cars` WHERE `carOwner` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `clothing` WHERE `owner` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `criminalrecords` WHERE `userid` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `drugs_char` WHERE `charID` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `logs_chat` WHERE `admin` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `logs_cheat` WHERE `admin` = '%d'", charid);
			mysql_tquery(dbCon, query);
			
			format(query, sizeof(query), "DELETE FROM `logs_pay` WHERE `admin` = '%d'", charid);
			mysql_tquery(dbCon, query);

			format(query, sizeof(query), "DELETE FROM `ucp_donator_items` WHERE `Chars` = '%d'", charid);
			mysql_tquery(dbCon, query);			
			
			format(query, sizeof(query), "DELETE FROM `phone_sms` WHERE `PhoneOwner` = '%d' OR `PhoneReceive` = '%d'", charid, charid);
			mysql_tquery(dbCon, query);
			
			
			format(query, sizeof(query), "DELETE FROM `phone_contacts` WHERE `contactAdded` = '%d' OR `contactAddee` = '%d'", charid, charid);
			mysql_tquery(dbCon, query);
		}
	}
	printf("Result: %d", rows);
	return 1;
}
/*
CMD:clearpdatac(playerid) {

	if (playerData[playerid][pAdmin] < 1339)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่ได้รับอนุญาตให้ใช้คำสั่งนี้");
		
		
	new query[1024];
	format(query,sizeof(query),"SELECT * FROM `characters` WHERE (%d - `LastLogin` >= 5184000) OR (`Level` = 1 AND `Created` = 1)", gettime());
	mysql_query(dbCon, query);
	
	printf(query);
	
	new rows;

	cache_get_row_count(rows);
	
	if(rows != 0)
	{
		for(new i = 0; i < rows; i++) {
			new charid;
			cache_get_value_name_int(i, "ID", charid);
			printf("Found characterid %d", charid);
			
			format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", charid);
			mysql_tquery(dbCon, query);
		}
	}
	printf("Result: %d", rows);
	return 1;
}*/

AssignToCell(playerid) {

	if(IsValidDynamic3DTextLabel(playerData[playerid][pPrisonNumber]))
		DestroyDynamic3DTextLabel(playerData[playerid][pPrisonNumber]);

	if(playerData[playerid][pPrisonCell] == -1) {

		new rd = random(20);
		new dt = (playerData[playerid][pPrisonDept] > 2) ? 3 : playerData[playerid][pPrisonDept] - 1;
		new fos = 0;
        if(PrisonDepartment[dt][pPrisoner][rd] == INVALID_PLAYER_ID) {
            PrisonDepartment[dt][pPrisoner][rd] = playerid;
            playerData[playerid][pPrisonCell] = rd;
            fos = 0;
        }
        else if(PrisonDepartment[dt][pPrisoner2][rd] == INVALID_PLAYER_ID) {
            PrisonDepartment[dt][pPrisoner2][rd] = playerid;
            playerData[playerid][pPrisonCell] = rd;
            fos = 1;
        }
        else {
		    printf("%s(%d) Reloop AssignToCell", ReturnPlayerName(playerid), playerid);
			AssignToCell(playerid);
			return 1;
		}
		
		new prisonname_str[64];

		switch(playerData[playerid][pPrisonDept]) {
		    case 1: {
         		format(prisonname_str, 64, "A%d%02d", fos == 1 ? 2 : 1, playerData[playerid][pPrisonCell]);
			} //A
		    case 2: {
	            format(prisonname_str, 64, "B%d%02d", fos == 1 ? 2 : 1, playerData[playerid][pPrisonCell]);
			}  //B
		    default: {
	            format(prisonname_str, 64, "C%d%02d", fos == 1 ? 2 : 1, playerData[playerid][pPrisonCell]);
			}  //C

		}
		playerData[playerid][pPrisonNumber] = CreateDynamic3DTextLabel(prisonname_str, fos == 1 ? 0x0000BBFF : 0x9ACD32FF, 0, 0, 0.4, 10, playerid, INVALID_VEHICLE_ID, 1);
		SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: คุณถูกกำหนดให้อยู่ห้องขัง %s ในขณะนี้ การกำหนดห้องขังจะเกิดขึ้นเมื่อเชื่อมต่อกับเซิร์ฟเวอร์", prisonname_str);
	}
	return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(!bf_get(player_bf[playerid], IS_PLAYER_SPAWNED))
		return 1;

	new h = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID);
	if(0 <= h < MAX_HOUSES) { // A bounds check
		if(Iter_Contains(sv_houses, h) && (areaid == HouseInfo[h][hAreaID][0] ||  areaid == HouseInfo[h][hAreaID][1])) {
					
			if(areaid == HouseInfo[h][hAreaID][0]) {

				new welcomeMSG[128];
				if(HouseInfo[h][hSubid] != -1) {
					if(HouseInfo[h][hOwned] == 1) format(welcomeMSG, sizeof welcomeMSG, "คุณอยู่ที่หน้าประตูห้องของ %s", HouseInfo[h][hOwner]);
					else format(welcomeMSG, sizeof welcomeMSG, "คุณอยู่ที่หน้าประตูห้อง %s", HouseInfo[h][hAddress]);
				}
				else {
					format(welcomeMSG, sizeof welcomeMSG, "%s", GetHouseAddress(h));
				}

				//SetPlayerCheckpoint(playerid, HouseInfo[h][hEntranceX], HouseInfo[h][hEntranceY], HouseInfo[h][hEntranceZ], 3.0);
			
				if(HouseInfo[h][hOwned] == 1 && !strcmp(HouseInfo[h][hOwner], ReturnPlayerName(playerid), true))
				{
					//SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับเข้าสู่%sของคุณ", HouseInfo[h][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"));
					SendClientMessage(playerid, COLOR_GREEN, welcomeMSG);
					SendClientMessage(playerid, COLOR_WHITE, "คำสั่งที่มี: /enter, /ds(hout), ddo, /knock, /myhouse");
				}
				else if(HouseInfo[h][hOwned] == 1)
				{
					if(HouseInfo[h][hRentable] == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "ค่าเช่าบ้านหลังนี้คือ:");
						SendClientMessageEx(playerid, COLOR_WHITE, "$%d", HouseInfo[h][hRentprice]);
						SendClientMessage(playerid, COLOR_WHITE, "ต้องการเช่าที่นี่ไหม /rentroom");
						//SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับสู่%sของ %s", HouseInfo[h][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[h][hOwner]);
						SendClientMessage(playerid, COLOR_GREEN, welcomeMSG);
						SendClientMessage(playerid, COLOR_WHITE, "คำสั่งที่มี: /enter, /ds(hout), ddo, /knock");
					}
					else
					{
						//SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับสู่%sของ %s", HouseInfo[h][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[h][hOwner]);
						SendClientMessage(playerid, COLOR_GREEN, welcomeMSG);
						SendClientMessage(playerid, COLOR_WHITE, "คำสั่งที่มี: /enter, /ds(hout), ddo, /knock");
					}
				}
				if(HouseInfo[h][hOwned] == 0)
				{
					//SendClientMessageEx(playerid, COLOR_GREEN, "ยินดีต้อนรับเข้าสู่%s %s", HouseInfo[h][hType] ? ("อพาร์ทเม้นท์คอมเพล็กซ์") : ("ระเบียงบ้าน"), HouseInfo[h][hAddress]);
					SendClientMessage(playerid, COLOR_GREEN, welcomeMSG);
					SendClientMessageEx(playerid, COLOR_GREEN, "ราคาบ้านหลังนี้คือ: $%d",HouseInfo[h][hPrice]);
					SendClientMessage(playerid, COLOR_WHITE, "คำสั่ง: /buyhouse");
				}
			}
			nearHouse_var[playerid] = h;
		}
	}

	if(0 <= h < MAX_BIZ) {
		if(Iter_Contains(sv_business, h) && (areaid == BizInfo[h][bAreaID][0] ||  areaid == BizInfo[h][bAreaID][1])) {
			nearBiz_var[playerid] = h;
		}
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) {
	new h = Streamer_GetIntData(STREAMER_TYPE_AREA, areaid, E_STREAMER_EXTRA_ID);
	if(0 <= h < MAX_HOUSES) {
		if(Iter_Contains(sv_houses, h) && (areaid == HouseInfo[h][hAreaID][0] ||  areaid == HouseInfo[h][hAreaID][1])) {
	        //DisablePlayerCheckpoint(playerid);
	        nearHouse_var[playerid] = -1;
		}
	}
	
	if(0 <= h < MAX_BIZ) {
		if(Iter_Contains(sv_business, h) && (areaid == BizInfo[h][bAreaID][0] ||  areaid == BizInfo[h][bAreaID][1])) {
			nearBiz_var[playerid] = -1;
		}
	}
	return 1;
}

GetRepairPrice(vehicleid)
{
	new	panels,
		doors,
		lights,
		tires;
		
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
// Vehicle perhiferals
	new front_left_panel 	= 	0xf & panels;
	new front_right_panel 	= 	( ( 0xf << 4 ) & panels ) >> 4;
	new rear_left_panel 	= 	( ( 0xf << 8 ) & panels ) >> 8;
	new rear_right_panel 	= 	( ( 0xf << 12 ) & panels ) >> 12;
	
	new wind_shield			= 	( ( 0xf << 16 ) & panels ) >> 16;
	
	new front_bumper 		= 	( ( 0xf << 20 ) & panels ) >> 20;
	new rear_bumper 		= 	( ( 0xf << 24 ) & panels ) >> 24;
	new hood 				= 	0xf & doors;	
	new trunk				= 	( ( 0xf << 8 ) & doors ) >> 8;
// Vehicle seats
	new front_left_seat 	= 	( ( 0xf << 16 ) & doors ) >> 16;
	new front_right_seat 	= 	( ( 0xf << 24 ) & doors ) >> 24;
	new rear_left_seat 		= 	( ( 0xf << 32 ) & doors ) >> 32;
	new rear_right_seat 	= 	( ( 0xf << 40 ) & doors ) >> 40;
// Tires
	new tire_front_left = 1 & tires;
	new tire_front_right = ( ( 1 << 1 ) & tires ) >> 1;
	new tire_rear_left = ( ( 1 << 2 ) & tires ) >> 2;
	new tire_rear_right = ( ( 1 << 3 ) & tires ) >> 3;
// Comparing the information together
	new panel_add = floatround( ( 	front_left_panel +
									front_right_panel +
									rear_left_panel +
									rear_right_panel +
									wind_shield +
									front_bumper +
									rear_bumper ) / 0.21 );
						
	new door_add = floatround( ( 	hood +
									trunk +
									front_left_seat +
									front_right_seat +
									rear_left_seat +
									rear_right_seat ) / 0.24 );
	
	new tire_add = floatround( ( 	tire_front_left +
									tire_front_right +
									tire_rear_left +
									tire_rear_right ) / 0.04 );
	
	new pprice = 1 * panel_add;
	new dprice = 1 * door_add;
	new tprice = 2 * tire_add;
	return tprice + dprice + pprice;
}

forward CheckMultiAccount(playerid);
public CheckMultiAccount(playerid) { 

    new
	    rows;

	cache_get_row_count(rows);

	if(rows) {
		new str[256], C_Name[MAX_PLAYER_NAME];

		for( new id = 0; id < rows; id++)
		{
			cache_get_value_name(id, "Character", C_Name, MAX_PLAYER_NAME);
			strcat(str, sprintf("%s ", C_Name));
		}

		if(strlen(str) > 80)
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s ไอพีตรงกับบัญชีตัวละครชื่อ %.80s ...", ReturnPlayerName(playerid), str);
			SendAdminAlert(COLOR_YELLOW, "... %s", str[80]);
		}
		else {
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s ไอพีตรงกับบัญชีตัวละครชื่อ %s", ReturnPlayerName(playerid), str);
		}
	}
	return 1;
}

UpdateAdminSpectate(playerid) {
	if(!bf_get(player_bf[playerid], TOGGLE_SPECDATA) && playerData[playerid][pAdmin] >= 1 && playerData[playerid][pSpectating] != INVALID_PLAYER_ID) {
		new string[725];
		new adminspec[130];
		new targetid = playerData[playerid][pSpectating];
		foreach(new i : Player) {
			if(playerid != i && playerData[i][pSpectating] == targetid) {
				format(adminspec, sizeof(adminspec), "- %s~n~%s", ReturnRealName(i), adminspec);
			}
		}
			
		new spec_char[34];
		format(spec_char, sizeof(spec_char), "#%03d %s %s", targetid, ReturnPlayerName(targetid), bf_get(player_bf[targetid], IS_MASKED) ? (ReturnPlayerName(targetid)) : (""));
		
		format(string, sizeof(string), "SPECTATOR(S):~y~~n~%s~n~~w~SPECTATING: ~r~%s~n~~b~Username: ~g~%s", adminspec, spec_char, playerData[targetid][pUsername]);
	
		new Player_Weapons[13], Player_Ammos[13], str_weapons[500];
		for(new i = 1;i <= 12;i++)
		{
			GetPlayerWeaponData(targetid,i,Player_Weapons[i],Player_Ammos[i]);

			if(Player_Weapons[i] != 0)
			{
			    if(i == 1) format(str_weapons, 500, "%s(%d)", ReturnWeaponName(Player_Weapons[i]), Player_Ammos[i]);
				else format(str_weapons, 500, "%s, %s(%d)", str_weapons, ReturnWeaponName(Player_Weapons[i]), Player_Ammos[i]);
				
				if(playerData[targetid][pGun2] == Player_Weapons[i]) {
					if(playerData[targetid][pPLicense]) {
						format(str_weapons, 500, "%sL", str_weapons);
					}
				}
				else if(playerData[targetid][pGun3] == Player_Weapons[i]) {
					if(playerData[targetid][pSLicense]) {
						format(str_weapons, 500, "%sL", str_weapons);
					}
				}
			}
		}
		if(strlen(str_weapons)) {
			format(string, sizeof(string), "%s~n~~g~Weapon(s): ~g~%s", string, str_weapons);
		}
		if(!usingAdminSpectate{playerid}) {
			AdminSpectate[playerid] = CreatePlayerTextDraw(playerid, 31.600004, 160.782608, string);
			PlayerTextDrawLetterSize(playerid, AdminSpectate[playerid], 0.229999, 1.420799);
			PlayerTextDrawTextSize(playerid, AdminSpectate[playerid], 203.999893, 22.897781);
			PlayerTextDrawAlignment(playerid, AdminSpectate[playerid], 1);
			PlayerTextDrawColor(playerid, AdminSpectate[playerid], -1);
			PlayerTextDrawSetShadow(playerid, AdminSpectate[playerid], 1);
			PlayerTextDrawSetOutline(playerid, AdminSpectate[playerid], 0);
			PlayerTextDrawBackgroundColor(playerid, AdminSpectate[playerid], 51);
			PlayerTextDrawFont(playerid, AdminSpectate[playerid], 1);
			PlayerTextDrawSetProportional(playerid, AdminSpectate[playerid], 1);
			usingAdminSpectate{playerid}=true;
		}
		else {
			PlayerTextDrawSetString(playerid, AdminSpectate[playerid], string);
		}
		PlayerTextDrawShow(playerid, AdminSpectate[playerid]);
	}
	else {
		usingAdminSpectate{playerid}=false;
		PlayerTextDrawDestroy(playerid, AdminSpectate[playerid]);
	}
}

forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
    new panels, doors, lights, tires;
    GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

    new states[ 3 ] = 
    {
        2, 4, 5
    };
    
    new idx = random( 3 );

    idx = ( ( states[ idx ] == CoreVehicles[ vehicleid ][ vELMFlash ] ) ? ( idx == 2 ? 0 : ( idx + 1 ) ) : idx );

    UpdateVehicleDamageStatus( vehicleid, panels, doors, states[ idx ], tires );
    CoreVehicles[ vehicleid ][ vELMFlash ] = states[ idx ];
    return 1;
}
/*
new _HUDtimer[ MAX_PLAYERS ] = {-1, ... };

stock HidePlayerHUD( playerid )
{
     return (_HUDtimer[ playerid ] = SetTimerEx("RepeatLevel", 1000, 1, "d", playerid ) );
}

forward public RepeatLevel( playerid );
public RepeatLevel( playerid )
{
   return (SetPlayerDrunkLevel( playerid, 2001 ) ) ;
}

stock ShowPlayerHUD( playerid ) { 
 
    if( _HUDtimer[ playerid ] != -1 ) KillTimer( _HUDtimer[ playerid ] ) ;
}

CMD:hidehud(playerid) {
	HidePlayerHUD( playerid );
	return 1;
}

CMD:showhud(playerid) {
	ShowPlayerHUD( playerid );
	return 1;
}*/

static Float:AngleBetweenPoints(Float:x1, Float:y1, Float:x2, Float:y2)
{
	return -(90.0 - atan2(y1 - y2, x1 - x2));
}

static IsPlayerBehindPlayer(playerid, targetid, Float:diff = 90.0)
{
	new Float:x1, Float:y1, Float:z1;
	new Float:x2, Float:y2, Float:z2;
	new Float:ang, Float:angdiff;

	GetPlayerPos(playerid, x1, y1, z1);
	GetPlayerPos(targetid, x2, y2, z2);
	GetPlayerFacingAngle(targetid, ang);

	angdiff = AngleBetweenPoints(x1, y1, x2, y2);

	if (angdiff < 0.0) angdiff += 360.0;
	if (angdiff > 360.0) angdiff -= 360.0;

	ang = ang - angdiff;

	if (ang > 180.0) ang -= 360.0;
	if (ang < -180.0) ang += 360.0;

	return floatabs(ang) > diff;
}

static MakePlayerFacePlayer(playerid, targetid, opposite = false)
{
	new Float:x1, Float:y1, Float:z1;
	new Float:x2, Float:y2, Float:z2;

	GetPlayerPos(playerid, x1, y1, z1);
	GetPlayerPos(targetid, x2, y2, z2);
	new Float:angle = AngleBetweenPoints(x2, y2, x1, y1);

	if (opposite) {
		angle += 180.0;
		if (angle > 360.0) angle -= 360.0;
	}

	if (angle < 0.0) angle += 360.0;
	if (angle > 360.0) angle -= 360.0;

	SetPlayerFacingAngle(playerid, angle);
}

stock IsBulletWeapon(weaponid)
{
	return (WEAPON_COLT45 <= weaponid <= WEAPON_SNIPER) || weaponid == WEAPON_MINIGUN;
}

stock IsMeleeWeapon(weaponid)
{
	return (WEAPON_UNARMED <= weaponid <= WEAPON_KATANA) || (WEAPON_DILDO <= weaponid <= WEAPON_CANE) || weaponid == WEAPON_PISTOLWHIP;
}


GetClosestTrolley(playerid)
{
	new
		Float:fDistance = FLOAT_INFINITY,
		x = -1,
		Float:ox,
		Float:oy,
		Float:oz
	;
		
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i != j; ++i)
	{
		if(!IsValidDynamicObject(i)) continue;
		
		if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID) == STREAMER_OBJECT_TROLLEY && (Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_MODEL_ID) == TROLLEY_OBJECT || Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_MODEL_ID) == TROLLEY_OBJECT_2)) {
			
			GetDynamicObjectPos(i,ox,oy,oz);

			new
				Float:temp = GetPlayerDistanceFromPoint(playerid, ox,oy,oz);
		
			if (temp < fDistance)
			{
				fDistance = temp;
				x = i;
			}
		}
	}
	
	if(x != -1 && fDistance < 3.0) {
		return x;
	}
	return -1;
}

GetClosestLadders(playerid)
{
	new
		Float:fDistance = FLOAT_INFINITY,
		x = -1,
		Float:ox,
		Float:oy,
		Float:oz
	;
		
	for(new i = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i != j; ++i)
	{
		if(!IsValidDynamicObject(i)) continue;
		
		if(Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID) == STREAMER_OBJECT_LADDERS && (Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_MODEL_ID) == LADDERS_OBJECT || Streamer_GetIntData(STREAMER_TYPE_OBJECT, i, E_STREAMER_MODEL_ID) == LADDERS_OBJECT_2)) {
			
			GetDynamicObjectPos(i,ox,oy,oz);

			new
				Float:temp = GetPlayerDistanceFromPoint(playerid, ox,oy,oz);
		
			if (temp < fDistance)
			{
				fDistance = temp;
				x = i;
			}
		}
	}
	
	if(x != -1 && fDistance < 3.0) {
		return x;
	}
	return -1;
}

IsEnglishAndNumber(const nickname[])
{
    new Regex:r = Regex_New("[a-zA-Z0-9 _]+");

    new check = Regex_Check(nickname, r);

    Regex_Delete(r);

    return check;
}

IsNumber(const string[])
{
    new Regex:r = Regex_New("[0-9]+");

    new check = Regex_Check(string, r);

    Regex_Delete(r);

    return check;
}

IsIPAddress(const ip_address[]) {
    new Regex:r = Regex_New(".*\\d{1,3}\\.+\\d{1,3}\\.+\\d{1,3}\\.+\\d{1,3}.*");

    new check = Regex_Check(ip_address, r);

    Regex_Delete(r);

    return check;
}

SetPlayerFacePlayer(playerid, giveplayerid) {
    new
        Float: pX,
        Float: pY,
        Float: pZ,
        Float: gX,
        Float: gY,
        Float: gZ
    ;
    if(GetPlayerPos(playerid, pX, pY, pZ) && GetPlayerPos(giveplayerid, gX, gY, gZ)) {
        SetPlayerFacingAngle(playerid, (pX = -atan2((gX - pX), (gY - pY))));
        return SetPlayerFacingAngle(giveplayerid, (pX + 180.0));
    }
    return false;
}

IsInLowRider(playerid) {
	new pveh = GetPlayerVehicleID(playerid);
	switch(GetVehicleModel(pveh)) {
		case 536, 575, 567: return 1;
	}
	return 0;
}

GetHouseAddress(houseid, full=true) {
	new addr[128];
	if(full) {
		new areacode=999, zoneName[MAX_ZONE_NAME], cityName[28];
		GetAreaCodeZone(HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], zoneName, MAX_ZONE_NAME, areacode);
		Get2DPosCity(HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], cityName, 28);
		format(addr, sizeof addr, "%d %s, %s, %s %d, San Andreas", HouseInfo[houseid][hID], HouseInfo[houseid][hAddress], zoneName, cityName, areacode);
	}
	else {
		format(addr, sizeof addr, "%d %s", HouseInfo[houseid][hID], HouseInfo[houseid][hAddress]);
	}
	return addr;
}

Store:Store_Shop(playerid, response, itemid, modelid, price, amount, itemname[]) 
{ 
    if(!response) 
        return true; 

	new
	    bizid = -1;

    if ((bizid = BizEntered[playerid]) != -1)
    {
		if (BizInfo[bizid][bType] == 3)
		{
			new listitem = itemid-1;

			if (playerData[playerid][pCash] < price)
				return GameTextForPlayer(playerid, "~r~You can't afford", 5000, 1);

            if(BizInfo[bizid][bProducts]-amount < 0)
				return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);

            if(price < 0)
				return GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);


			switch (listitem)
		    {
		        case 0: // Gas Can
		        {
					playerData[playerid][pGasCan]+=3;
					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อถังน้ำมัน 3 แกลลอน");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /gascan เพื่อเติมน้ำมัน");
				}
			    case 1: // Boombox
		        {
					playerData[playerid][pBoombox]=1;
					SendClientMessage(playerid, COLOR_GREEN, "Available boombox commands:");
					SendClientMessage(playerid, COLOR_WHITE, " /boombox [place/take/grant/adjust], setstation");

				}
			    case 2: // Baseball Bat
		        {
					GivePlayerValidWeapon(playerid, 5, 1);
				}
			    case 3: // Flowers
		        {
					GivePlayerValidWeapon(playerid, 14, 1);
				}
			    case 4: // Cane
		        {
					GivePlayerValidWeapon(playerid, 15, 1);
				}
			    case 5: // Camera
		        {
					GivePlayerValidWeapon(playerid, 43, 500);
				}
			    case 6: // OOC Mask
		        {
					playerData[playerid][pOOCMask]=1;
					SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อ OOC Mask");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /mask");
				}
			    case 7: // Drink
		        {
					playerData[playerid][pDrink]+=amount;
				    SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อเครื่องดื่ม");
				    SendClientMessage(playerid, COLOR_WHITE, "ใช้ /bdrink");
				}
			    case 8: // Cigarettes
		        {
					playerData[playerid][pCigarettes] += amount * 17;
				    SendClientMessage(playerid, COLOR_GRAD4, "คุณได้ซื้อบุหรี่ 1 ซอง");
				    SendClientMessage(playerid, COLOR_WHITE, "ใช้ /cigarettes use เพื่อสูบบุหรี่ !");
				}
		        case 9: // Radio 2
		        {
					playerData[playerid][pRadio] = 3;
					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Standard");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			    case 10: // Radio 5
		        {
					playerData[playerid][pRadio] = 5;
					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Standard");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			    case 11: // Radio 8
		        {
					playerData[playerid][pRadio] = 8;
					SendClientMessage(playerid, COLOR_GREEN, "คุณได้ซื้อวิทยุรุ่น Super");
					SendClientMessage(playerid, COLOR_WHITE, "ใช้ /radiohelp เพื่อดูคำสั่งเพิ่มเติม");
				}
			}
			BizInfo[bizid][bProducts]-=amount;
			playerData[playerid][pCash]-=price;
			BizInfo[BizEntered[playerid]][bTill] += floatround(price*0.7);
			UpdateBizInfo(bizid);

			new buy_str[64];
			format(buy_str, sizeof(buy_str), "~r~-$%d", price);
			GameTextForPlayer(playerid, buy_str, 5000, 1);

			Log_Write("logs/biz.txt", "[%s] %s: payed $%d to buy %s %d (SID:%d)", ReturnDate(), ReturnRealName(playerid), price, itemname, BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

		}
	}
    return true; 
} 

CMD:gmx(playerid, params[])
{
	if (playerData[playerid][pAdmin] < 1339)
		return 0;

	new time;

	if (sscanf(params, "d", time)) {
        SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /gmx [วินาที]");
        SendClientMessage(playerid, COLOR_GRAD1, "คำแนะนำ: ยกเลิกได้โดยใช้ 0 หรือใช้ตัวเลขอื่นเพื่อเลื่อนเวลา");
        return 1;
    }

    if (time == 0) {
        if(!g_ServerRestart) return SendClientMessage(playerid, COLOR_LIGHTRED, "เซิร์ฟเวอร์ยังไม่ได้เริ่มนับเวลาถอยหลัง");
	    TextDrawHideForAll(g_ServerRestartCount);
	    g_ServerRestart = false;
	    //g_RestartTime = 0;
		// Log(system_log, INFO, "Server cancel restart.");
	    return SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER:"EMBED_WHITE" %s ได้ยกเลิกการรีสตาร์ทเซิร์ฟเวอร์", ReturnPlayerName(playerid));
	}
    else if (time < 3 || time > 600) return SendClientMessage(playerid, COLOR_LIGHTRED, "วินาทีที่ระบุไม่ควรต่ำกว่า 3 หรือมากกว่า 600");

    TextDrawShowForAll(g_ServerRestartCount);
    
	// Log(system_log, INFO, "The %s %d sec.", g_ServerRestart ? ("server restart change time to"):("server will restart in"), time);
    SendClientMessageToAllEx(COLOR_LIGHTRED, "SERVER:"EMBED_WHITE" %s %sในอีก %d วินาที", ReturnPlayerName(playerid), g_ServerRestart ? ("ได้เลื่อนเวลารีสตาร์ทเซิร์ฟเวอร์เป็นเวลา"):("ได้เริ่มรีสตาร์ทเซิฟเวอร์"), time);

	g_ServerRestart = true;
	//g_RestartTime = time;
	return 1;
}

/*task RestartCheck[1000]()
{
	if (g_ServerRestart)
	{	
		if(g_RestartTime) {
			new string[32];
			format(string, 32, "~r~Server Restart:~w~ %02d:%02d", g_RestartTime / 60, g_RestartTime % 60);
			TextDrawSetString(g_ServerRestartCount, string);
			TextDrawShowForAll(g_ServerRestartCount);
			g_RestartTime--;
		}
		else {
			if(g_RestartTime == 0) {
				foreach (new i : Player) {
					SQL_SaveCharacter(i);
					if(!isnull(playerData[i][pUsername])) {
						SetPlayerName(i, playerData[i][pUsername]);
					}
				}
			}
			SendRconCommand("gmx");

            SendClientMessageToAll(COLOR_LIGHTBLUE, "-------------------------------------------------------------------------------------------------------------------------");
            SendClientMessageToAll(COLOR_YELLOW, " >  เซิร์ฟเวอร์กำลังรีสตาร์ท โปรดรอสักครู่...");
            SendClientMessageToAll(COLOR_LIGHTBLUE, "-------------------------------------------------------------------------------------------------------------------------");
		}
	}
	return 1;
}*/

stock GetRealTime(&hours, &minutes, &seconds, timezone_offset = 0) {
    gettime(hours, minutes, seconds);
    hours += timezone_offset;
    hours = hours < 0 ? (hours + 24) : hours;
    hours = hours > 23 ? (hours - 24) : hours;
}

GetClotingItemName(modelid) {
	new clotingName[32];
	for(new i=0;i!=sizeof(cl_SportsData);++i) if(cl_SportsData[i][e_model] == modelid) {
		format(clotingName, 32, cl_SportsData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_HardwareData);++i) if(cl_HardwareData[i][e_model] == modelid) {
		format(clotingName, 32, cl_HardwareData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_DsShopData);++i) if(cl_DsShopData[i][e_model] == modelid) {
		format(clotingName, 32, cl_DsShopData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_ZipData);++i) if(cl_ZipData[i][e_model] == modelid) {
		format(clotingName, 32, cl_ZipData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_MusicalData);++i) if(cl_MusicalData[i][e_model] == modelid) {
		format(clotingName, 32, cl_MusicalData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_PoliceData);++i) if(cl_PoliceData[i][e_model] == modelid) {
		format(clotingName, 32, cl_PoliceData[i][e_name]);
		return clotingName;
	}
	for(new i=0;i!=sizeof(cl_MedicData);++i) if(cl_MedicData[i][e_model] == modelid) {
		format(clotingName, 32, cl_MedicData[i][e_name]);
		return clotingName;
	}
	format(clotingName, 32, "Unknown");
	return clotingName;
}

forward OnDuty(playerid, response);
public OnDuty(playerid, response)
{
	if(response)
	{
		ResetWeapons(playerid);
     	GivePlayerWeaponEx(playerid, 41, 5000);
     	GivePlayerWeaponEx(playerid, 3, 1);
     	GivePlayerWeaponEx(playerid, 24, 150);

	 	playerData[playerid][pOnDuty] = true;
	 	SetPlayerArmour(playerid, 100.0);
	 	SetPlayerHealthEx(playerid, 100.0);
	 	SetFactionColor(playerid);
	 	if(playerData[playerid][pChar] > 0)
	 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s หยิบตราและอาวุธจากล็อกเกอร์ของเขา", ReturnRealName(playerid));
		SendFactionMessage(FACTION_TYPE_POLICE, COLOR_RADIO, "** HQ: %s %s ได้เริ่มปฏิบัติหน้าที่ในขณะนี้ภายใต้ %s! **", Faction_GetRank(playerid), ReturnRealName(playerid), playerData[playerid][pDutyUnitName]);
	}
	else {
		playerData[playerid][pOnDuty] = false;
	}
	return 1;
}

stock ConfirmDialog(playerid, const caption[], const info[], const callback[], {Float,_}:...)
{
	new n = numargs(), // number of arguments, static + optional
		szParamHash[256];	// variable where the passed arguments will be stored
	for(new arg = 4; arg < n; arg++){	// loop all additional arguments
		format(szParamHash, sizeof(szParamHash), "%s%d|", szParamHash, getarg(arg)); // store them in szParamHash
	}
	SetPVarInt(playerid, "confDialogArgs", n -4);			// store the amount of additional arguments
	SetPVarString(playerid, "confDialCallback", callback);	// store the callback that needs to be called after response
	SetPVarString(playerid, "confDialog_arg", szParamHash);	// store the additional arguments
	
	Dialog_Show(playerid, CONFIRM_SYS, DIALOG_STYLE_MSGBOX, caption, info, "ใช่", "ไม่"); // display the dialog message itself
	
	return;
} // Credits to Mmartin (SA-MP forums)

stock ConfirmDialog_Response(playerid, response)
{
	new szCallback[33],		// variable to fetch our callback to
		szParamHash[64], 	// variable to check raw compressed argument string
		n,					// variable to fetch the amount of additional arguments
		szForm[12];			// variable to generate the CallLocalFunction() "format" argument
		
	n = GetPVarInt(playerid, "confDialogArgs");	// Fetch the amount of additional arguments
	GetPVarString(playerid, "confDialCallback", szCallback, sizeof(szCallback));	// fetch the callback
	GetPVarString(playerid, "confDialog_arg", szParamHash, sizeof(szParamHash));	// fetch the raw compressed additional arguments
	
	new hashDecoded[12];	// variable to store extracted additional arguments from the ConfirmDialog() generated string
	
	sscanf(szParamHash, "p<|>A<d>(0)[12]", hashDecoded);	// extraction of the additional arguments
	
	new args, 	// amount of cells passed to CallLocalFunction
		addr, 	// pointer address variable for later use
		i;		// i
		
	format(szForm, sizeof(szForm), "dd");	// static parameters for the callback, "playerid" and "response"
	
	#emit ADDR.pri hashDecoded	// get pointer address of the extracted additional arguments
	#emit STOR.S.pri addr		// store the pointer address in variable 'addr'
	if(n){	// if there's any additional arguments
		for(i = addr + ((n-1) * 4); i >= addr; i-=4){ // loops all additional arguments by their addresses
			format(szForm, sizeof(szForm), "%sd", szForm); // adds an aditional specifier to the "format" parameter of CallLocalFunction
			#emit load.s.pri i	// load the argument at the current address
			#emit push.pri		// push it to the CallLocalFunction argument list
			args+=4;			// increase used cell number by 4
		}
	}
	
	
	args+=16;	// preserve 4 more arguments for CallLocalFunction (16 cause 4 args by 4 cells (4*4))
	
	#emit ADDR.pri response				// fetch "response" pointer address to the primary buffer
	#emit push.pri						// push it to the argument list
	
	#emit ADDR.pri playerid				// fetch "playerid" pointer address to the primary buffer
	#emit push.pri						// push it to the argument list
	
	#emit push.adr szForm				// push the szForm ("format") to the argument list by its referenced address
	#emit push.adr szCallback			// push the szCallback (custom callback) to the argument list by its referenced address
	#emit push.s args					// push the amount of arguments
	#emit sysreq.c CallLocalFunction	// call the function
	
	// Clear used data
	#emit LCTRL 4
	#emit LOAD.S.ALT args
	#emit ADD.C 4
	#emit ADD
	#emit SCTRL 4
	
	// Clear used PVars
	DeletePVar(playerid, "confDialCallback");
	DeletePVar(playerid, "confDialog_arg");
	DeletePVar(playerid, "confDialogArgs");
	
	return;
} // Credits to Mmartin (SA-MP forums)

Dialog:CONFIRM_SYS(playerid, response, listitem, inputtext[]) {
	ConfirmDialog_Response(playerid, response);
	return 1;
}

//#include "includes/system/realtime.pwn"
#include "includes/system/furniture.pwn"
#include "includes/system/maskname.pwn"
//#include "includes/system/hud.pwn"
#include "includes/system/SAMaps.pwn"
#include "includes/system/StreetSign.pwn"
#include "includes/system/vehicleattached.pwn"
#include "includes/system/bar.pwn"
#include "includes/system/mdc_ui.pwn"

/*
CMD:charselect(playerid, params[]) {

	new id, str[24], charid=-1;
	if(sscanf(params,"u",id)) {
		SendClientMessage(playerid, COLOR_GRAD1, "การใช้: /charselect [ลำดับตัวละคร]");

		for (new i; i != MAX_CHARSELECT; i++)
		{
			format(str, sizeof(str), "characterID%d", i);
			charid = GetPVarInt(playerid, str);

			if(charid!=-1) {
				SendClientMessageEx(playerid, COLOR_GRAD1, "ไอดี: %d", i + 1);
			}
		}
	}

	format(str, sizeof(str), "characterID%d", id - 1);
	charid = GetPVarInt(playerid, str);	

	if(charid!=-1) {
		new query[128];
		format(query, sizeof(query), "SELECT `Activated`,`LastLogin`,`Secret`,`LastIP`,`Character` FROM `characters` WHERE `ID` = %d", charid);
		mysql_tquery(dbCon, query, "checkCharacter", "dd", playerid, charid);

		TextDrawHideForPlayer(playerid, LSRP_LOGO);
		CancelSelectTextDraw(playerid);

		for (new x; x < charselectPlayerTextDrawCount[playerid]; x++)
		{
			PlayerTextDrawDestroy(playerid, charselectPlayerTextDraw[playerid][x]);
			format(str, sizeof(str), "characterID%d", x);
			DeletePVar(playerid, str);
		}
		charselectPlayerTextDrawCount[playerid]=0;
	}
	return 1;
}



public TSC_OnChannelCreated(channelid)
{
	new channel_name[32];
    TSC_GetChannelName(channelid, channel_name);
	printf("Channel(%d) %s was created", channelid, channel_name);
    return 1;
}

public TSC_OnClientConnect(clientid, nickname[])
{
    new client_ip[22];

	new bool:client_found;
    TSC_GetClientIpAddress(clientid, client_ip, sizeof client_ip);

    foreach(new i : Player)
    {
		if (isequal(ReturnIP(i), client_ip, true)) {

            TSClientID[i] = clientid;
			client_found = true;
			TSC_AddClientToServerGroup(clientid, 1);
			SendClientMessage(i, COLOR_YELLOW, "คุณได้เชื่อมต่อกับ Teamspeak 3 เรียบร้อยแล้ว");
			break;
        }
    }

    if(!client_found)
		TSC_PokeClient(clientid, "เราไม่พบคุณในเกม เชื่อมต่อกับเซิร์ฟเวอร์และเชื่อมต่อกับ TS อีกครั้ง");

    return 1;
}

CMD:channel(playerid, params[])
{
    if(isnull(params))
        return SendSyntaxMessage(playerid, "/channel (หมายเลขห้อง[1-5])");

    if(strcmp(params, "on", true) && !Voip[playerid])
        return SendClientMessage(playerid, -1, "คุณยังไม่ได้เปิดใช้แท็ก VOIP (แนะนำ: /channel on)");

    if(!strcmp(params, "on", true))
    {
        if(TSClientID[playerid] == -1)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "เราไม่พบคุณใน Teamspeak, เชื่อมต่อใหม่อีกครั้ง");
    
        Attach3DTextLabelToPlayer(voiplabel[playerid], playerid, 0.0, 0.0, 0.275);

        SendClientMessage(playerid, 0xE91616FF, "คุณได้เปิดใช้ VoiP, และคุณไม่สามารถปิดมันได้");

        Voip[playerid] = true;
    }
    else if(!strcmp(params, "lobby", true))
    {
        Update3DTextLabelText(voiplabel[playerid], 0xE91616FF, "ห้อง: Lobby");
		SetPlayerChatBubble(playerid, sprintf("%s สลับช่องสนทนา IC ไปยัง Lobby", ReturnRealName(playerid)), 0xE91616FF, 30.0, 6000);
        TSC_MoveClient(TSClientID[playerid], 13);
    }
    else
    {
        if(!IsNumeric(params))
            return SendClientMessage(playerid, -1, "[Error]: พารามิเตอร์ไม่ถูกต้อง");

        new channel_id;
        channel_id = strval(params);

        switch(channel_id)
        {
    		case 1: TSC_MoveClient(TSClientID[playerid], 18);
    		case 2: TSC_MoveClient(TSClientID[playerid], 19);
    		case 3: TSC_MoveClient(TSClientID[playerid], 20);
    		case 4: TSC_MoveClient(TSClientID[playerid], 21);
    		case 5: TSC_MoveClient(TSClientID[playerid], 22);
    		default: return SendClientMessage(playerid, -1, "[Error]: พารามิเตอร์ไม่ถูกต้อง");
        }
		new string[128];
        format(string, sizeof string, "ห้อง: %i", channel_id);
        Update3DTextLabelText(voiplabel[playerid], 0xE91616FF, string);
		SetPlayerChatBubble(playerid, sprintf("%s สลับช่องสนทนา IC ไปยัง %i", ReturnRealName(playerid), channel_id), 0xE91616FF, 30.0, 6000);
    }
    return 1;
}

public TSC_OnClientMoved(clientid, to_channelid, invokerid) {
	printf("%d %d %d", clientid, to_channelid, invokerid);
	return 1;
}*/

/*forward SpeedoVehicle();
public SpeedoVehicle()
{
	foreach (new i : Player)
	{
		new string[96],
			vehicleid;
		
		if (IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
		{
			if (HUDtoggle[i] == 1)
			{
				PlayerTextDrawShow(i, SpeedoText[i]);
			}

			else if (HUDtoggle[i] == 0)
			{
				PlayerTextDrawHide(i, SpeedoText[i]);
			}

			vehicleid = GetPlayerVehicleID(i);

			new
				Float:fSpeed,
				Float:speed_x,
				Float:speed_y,
				Float:speed_z,
				Float:final_speed;
				//model = GetVehicleModel(vehicleid);

			GetVehicleVelocity(vehicleid,speed_x,speed_y,speed_z);
			final_speed = floatsqroot(((speed_x*speed_x)+(speed_y*speed_y))+(speed_z*speed_z))*99.4166672; // 250.666667 = kmph  // 199,4166672 = mph
			fSpeed = floatround(final_speed,floatround_round);
			player_vehicle_speed[i] = fSpeed;

			format(string, sizeof(string), "~b~mi/h: ~g~%.0f~n~~b~Fuel: ~g~100~n~_~n~_", fSpeed);
		}
		format(string, sizeof(string), "%s~b~Radio info~n~ chan: ~g~%d~n~ ~b~slot: ~g~%d", string, playerData[i][pRChannel], playerData[i][pRSlot]);
		PlayerTextDrawSetString(i, SpeedoText[i], string);
	}
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}*/

/*forward CheckPlayerIdle();
public CheckPlayerIdle()
{
	foreach (new i : Player)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(i, x, y, z);

		if (SQL_IsLogged(i))
		{
			if (x == IdleInfo[i][iX] && y == IdleInfo[i][iY] && z == IdleInfo[i][iZ])
			{
				IdleInfo[i][aAmount]++;

				if (IdleInfo[i][aAmount] >= 1200) // player has been AFk for 15 seconds or more
				{
					//SendClientMessage(i, COLOR_YELLOW, "คุณ AFK มากกว่า 10 วิทำให้ถูกเชิญออกจากเซิร์ฟ");
					Kick(i);

					IdleInfo[i][iX] = x;
					IdleInfo[i][iY] = y;
					IdleInfo[i][iZ] = z;
					IdleInfo[i][aAmount] = 0;
				}
			}
			else
			{
				IdleInfo[i][iX] = x;
				IdleInfo[i][iY] = y;
				IdleInfo[i][iZ] = z;
				IdleInfo[i][aAmount] = 0;
			}
		}
	}
	return 1;
}

forward CheckPlayerAFK();
public CheckPlayerAFK()
{
	foreach (new i : Player)
	{
		if (SQL_IsLogged(i))
		{
			if(IsAFK{i}) 
			{
				if(AFKCount[i] >= 1200) // 1200 Seconds
				{
					Kick(i);
					//count++;
				}
			}
		}
	}
	return 1;
}*/

CMD:setattach(playerid, params[])
{
	new slot, bone;
	if(sscanf(params, "dd", slot, bone))
		SendClientMessage(playerid, COLOR_GREY, "/setattach [objectid] [bone]");


    SetPlayerAttachedObject(playerid, 4, slot, bone);
  	return 1;
}

CMD:editattach(playerid, params[])
{
	new slot;
	if(sscanf(params, "d", slot))
		SendClientMessage(playerid, COLOR_GREY, "/editattach [slot]");


	SetPVarInt(playerid, "AttachEdit", 1);
  	EditAttachedObject(playerid, slot);

  	return 1;
}

// Cigarettes System

stock CompareStrings(const string[], const string2[])
{
	if(!strcmp(string, string2, true))
		return true;
	else
		return false;
}

CMD:cigarettes(playerid, params[])
{
	new option[11],
	 	secoption;

	if(sscanf(params, "s[11]D(-1)", option, secoption)) 
	{
		SendClientMessageEx(playerid,  -1, "{7e98b6}[!] {a9c4e4}คุณมีบุหรี่จำนวน %d มวน", playerData[playerid][pCigarettes]);
		SendClientMessage(playerid, -1, "{7e98b6}[!] การใช้งาน : {a9c4e4}/cigarettes use, give, drop & /passjoint");
		return 1;
	}

	if(CompareStrings(option, "use"))
	{
		if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "คุณต้องอยู่บนพื้น");

		if(playerData[playerid][pCigarettes]) {
			if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) {

				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s สูบบุหรี่", ReturnRealName(playerid));
				SendClientMessage(playerid, -1, "{7e98b6}[!] {a9c4e4}กด ENTER เพื่อหยุดการสูบบุหรี่");
				playerData[playerid][pCigarettes]--;

			} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีบุหรี่");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีบุหรี่");

		return 1;
	}

	else if(CompareStrings(option, "give"))
    {
		new userid, amount;

        if(sscanf(params, "{s[7]}ud", userid, amount)) 
			return SendClientMessage(playerid, -1, "{7e98b6}[!] การใช้งาน : {a9c4e4}/cigarettes give [ไอดีผู้เล่น/ชื่อบางส่วน] [จำนวน]");

		if (userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{dS()[128]}", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นตัดการเชื่อมต่อ");
			}
		}

		if (amount < 1)
			return SendClientMessage(playerid, COLOR_GRAD1, "	คุณต้องระบุจำนวนมากกว่า 1");

		if (playerData[playerid][pCigarettes] < amount)
			return SendClientMessage(playerid, COLOR_GRAD1, "   คุณมีบุหรี่ไม่เพียงพอ");

		if (!IsPlayerNearPlayer(playerid, userid, 5.0))
			return SendClientMessage(playerid, COLOR_GRAD1, "   ผู้เล่นนั้นไม่ได้อยู่ใกล้คุณ");

		if (userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "   คุณไม่สามารถให้บุหรี่กับตัวเองได้");

		playerData[playerid][pCigarettes] -= amount;
		playerData[userid][pCigarettes] += amount;	

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s ให้บุหรี่กับ %s", ReturnRealName(playerid), ReturnRealName(userid));
		
		SendClientMessageEx(playerid, -1, "{7e98b6}[!] {a9c4e4}คุณให้บุหรี่กับ %s จำนวน {7e98b6}%d {a9c4e4}มวน", ReturnRealName(userid), amount);
		SendClientMessageEx(userid, -1, "{7e98b6}[!] {a9c4e4}คุณได้รับบุหรี่จาก %s จำนวน {7e98b6}%d {a9c4e4}มวน", ReturnRealName(playerid), amount);
		return 1;
	}

	else if(CompareStrings(option, "drop"))
	{
		new slot;

		if (sscanf(params, "{s[7]}d", slot)) 
			return SendClientMessage(playerid, -1, "{7e98b6}[!] การใช้งาน : {a9c4e4}/cigarettes drop [จำนวน]");
		
		if (playerData[playerid][pCigarettes] < slot)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณไม่มีบุหรี่เพียงพอ");

		if (slot < 1)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "คุณต้องระบุจำนวนมากกว่า 1");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s ทิ้งบุหรี่ลงที่พื้น", ReturnRealName(playerid));

		SendClientMessageEx(playerid, -1, "{7e98b6}[!] {a9c4e4}คุณได้ทิ้งบุหรี่จำนวน %d มวน", slot);
		SendClientMessage(playerid, -1, "{7e98b6}[!] Hint: {a9c4e4}คุณสามารถซื้อบุหรี่เพิ่มได้จาก 24/7 หากคุณต้องการ");

		playerData[playerid][pCigarettes] -= slot;
		return 1;
	}

	return 1;
}

Dialog:ChangeSkin(playerid, response, listitem, inputtext[])
{
	if(response) 
	{
		new skinid = strval(inputtext);

	    if (isnull(inputtext))
			return 0;

		if (skinid <= 0 || skinid > 29072)
			return 0;

		SetPlayerSkin(playerid, skinid);
		SendClientMessageEx(playerid, COLOR_YELLOW2, "คุณได้ทำการเปลี่ยนสกินของตัวละครคุณเป็น %d", skinid);
		SQL_SaveCharacter(playerid);
	}
	return 1;
}

CMD:changeskin(playerid, params[])
{
	Dialog_Show(playerid, ChangeSkin, DIALOG_STYLE_INPUT, "ระบบเปลี่ยนสกินส่วนตัว (ชั่วคราว)", "ปัจจุบันตัวละครนี้ใช้สกิน : %d\n\nระบุสกินที่คุณต้องการที่นี่ :", "ตกลง", "ยกเลิก", GetPlayerSkin(playerid));
	return 1;
}